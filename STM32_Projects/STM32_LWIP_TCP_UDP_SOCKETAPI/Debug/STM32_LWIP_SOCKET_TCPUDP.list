
STM32_LWIP_SOCKET_TCPUDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d34  08015bb4  08015bb4  00025bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080198e8  080198e8  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  080198e8  080198e8  000298e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080198f0  080198f0  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080198f0  080198f0  000298f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080198f4  080198f4  000298f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080198f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e464  200001ec  08019ae4  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e650  08019ae4  0003e650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00041175  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007555  00000000  00000000  00071391  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002058  00000000  00000000  000788e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f78  00000000  00000000  0007a940  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000325d5  00000000  00000000  0007c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a19d  00000000  00000000  000aee8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed971  00000000  00000000  000d902a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c699b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ab4  00000000  00000000  001c6a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015b9c 	.word	0x08015b9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08015b9c 	.word	0x08015b9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000208 	.word	0x20000208
 80005b0:	2000025c 	.word	0x2000025c

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b5b0      	push	{r4, r5, r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 fad9 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f81b 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f883 	bl	80006cc <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 1024);
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <main+0x3c>)
 80005c8:	1d3c      	adds	r4, r7, #4
 80005ca:	461d      	mov	r5, r3
 80005cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fbba 	bl	8003d56 <osThreadCreate>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <main+0x40>)
 80005e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f003 fb9e 	bl	8003d28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x38>
 80005ee:	bf00      	nop
 80005f0:	08015bc0 	.word	0x08015bc0
 80005f4:	20004390 	.word	0x20004390

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f014 fb92 	bl	8014d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066c:	23a8      	movs	r3, #168	; 0xa8
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fefd 	bl	800247c <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 f8d8 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000698:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2105      	movs	r1, #5
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 f956 	bl	800295c <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b6:	f000 f8c1 	bl	800083c <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_GPIO_Init+0x84>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <MX_GPIO_Init+0x84>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_GPIO_Init+0x84>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_GPIO_Init+0x84>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <MX_GPIO_Init+0x84>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_GPIO_Init+0x84>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_GPIO_Init+0x84>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <MX_GPIO_Init+0x84>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <MX_GPIO_Init+0x84>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_GPIO_Init+0x84>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <MX_GPIO_Init+0x84>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_GPIO_Init+0x84>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <tcp_client_task>:
    }

}

void tcp_client_task()
{
 8000754:	b5b0      	push	{r4, r5, r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
	char payload[] = "Message from STM32\r\n";
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <tcp_client_task+0xa4>)
 800075c:	f107 0414 	add.w	r4, r7, #20
 8000760:	461d      	mov	r5, r3
 8000762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000766:	e895 0003 	ldmia.w	r5, {r0, r1}
 800076a:	6020      	str	r0, [r4, #0]
 800076c:	3404      	adds	r4, #4
 800076e:	7021      	strb	r1, [r4, #0]

    while (1) {

        struct sockaddr_in dest_addr;
        dest_addr.sin_addr.s_addr = inet_addr("192.168.0.100");
 8000770:	4822      	ldr	r0, [pc, #136]	; (80007fc <tcp_client_task+0xa8>)
 8000772:	f013 f84c 	bl	801380e <ipaddr_addr>
 8000776:	4603      	mov	r3, r0
 8000778:	60bb      	str	r3, [r7, #8]
        dest_addr.sin_family = AF_INET;
 800077a:	2302      	movs	r3, #2
 800077c:	717b      	strb	r3, [r7, #5]
        dest_addr.sin_port = htons(5000);
 800077e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000782:	f008 ff11 	bl	80095a8 <lwip_htons>
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]

        int sock =  socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
 800078a:	2200      	movs	r2, #0
 800078c:	2101      	movs	r1, #1
 800078e:	2002      	movs	r0, #2
 8000790:	f008 fb7a 	bl	8008e88 <lwip_socket>
 8000794:	6378      	str	r0, [r7, #52]	; 0x34
        if (sock < 0) {
 8000796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000798:	2b00      	cmp	r3, #0
 800079a:	db28      	blt.n	80007ee <tcp_client_task+0x9a>

            break;
        }


        int err = connect(sock, (struct sockaddr *)&dest_addr, sizeof(struct sockaddr_in));
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	2210      	movs	r2, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007a4:	f008 f9e0 	bl	8008b68 <lwip_connect>
 80007a8:	6338      	str	r0, [r7, #48]	; 0x30
        if (err != 0) {
 80007aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d004      	beq.n	80007ba <tcp_client_task+0x66>
        	osDelay(1000);
 80007b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b4:	f003 fb1b 	bl	8003dee <osDelay>
 80007b8:	e7da      	b.n	8000770 <tcp_client_task+0x1c>
            continue;
        }

        while (1) {
            int err = send(sock, payload, strlen(payload), 0);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fd06 	bl	80001d0 <strlen>
 80007c4:	4602      	mov	r2, r0
 80007c6:	f107 0114 	add.w	r1, r7, #20
 80007ca:	2300      	movs	r3, #0
 80007cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007ce:	f008 fa4b 	bl	8008c68 <lwip_send>
 80007d2:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err < 0) {
 80007d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	db04      	blt.n	80007e4 <tcp_client_task+0x90>

                break;
            }

            osDelay(1000);
 80007da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007de:	f003 fb06 	bl	8003dee <osDelay>
        while (1) {
 80007e2:	e7ea      	b.n	80007ba <tcp_client_task+0x66>
                break;
 80007e4:	bf00      	nop
        }

        close(sock);
 80007e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007e8:	f008 f968 	bl	8008abc <lwip_close>
    while (1) {
 80007ec:	e7c0      	b.n	8000770 <tcp_client_task+0x1c>
    }

}
 80007ee:	bf00      	nop
 80007f0:	3738      	adds	r7, #56	; 0x38
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bdb0      	pop	{r4, r5, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	08015bec 	.word	0x08015bec
 80007fc:	08015bdc 	.word	0x08015bdc

08000800 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000808:	f002 fcf6 	bl	80031f8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcp_client_task();
 800080c:	f7ff ffa2 	bl	8000754 <tcp_client_task>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f003 faec 	bl	8003dee <osDelay>
 8000816:	e7fb      	b.n	8000810 <StartDefaultTask+0x10>

08000818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082a:	f000 f9c3 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010000 	.word	0x40010000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000842:	e7fe      	b.n	8000842 <Error_Handler+0x6>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <HAL_MspInit+0x54>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x54>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <HAL_MspInit+0x54>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_MspInit+0x54>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	f06f 0001 	mvn.w	r0, #1
 800088a:	f000 fa8d 	bl	8000da8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	2019      	movs	r0, #25
 80008b2:	f000 fa79 	bl	8000da8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008b6:	2019      	movs	r0, #25
 80008b8:	f000 fa92 	bl	8000de0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <HAL_InitTick+0xa4>)
 80008c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c4:	4a1e      	ldr	r2, [pc, #120]	; (8000940 <HAL_InitTick+0xa4>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6453      	str	r3, [r2, #68]	; 0x44
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <HAL_InitTick+0xa4>)
 80008ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008d8:	f107 0210 	add.w	r2, r7, #16
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4611      	mov	r1, r2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fa18 	bl	8002d18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80008e8:	f002 fa02 	bl	8002cf0 <HAL_RCC_GetPCLK2Freq>
 80008ec:	4603      	mov	r3, r0
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <HAL_InitTick+0xa8>)
 80008f6:	fba2 2303 	umull	r2, r3, r2, r3
 80008fa:	0c9b      	lsrs	r3, r3, #18
 80008fc:	3b01      	subs	r3, #1
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_InitTick+0xac>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <HAL_InitTick+0xb0>)
 8000904:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_InitTick+0xac>)
 8000908:	f240 32e7 	movw	r2, #999	; 0x3e7
 800090c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_InitTick+0xac>)
 8000910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000912:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_InitTick+0xac>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_InitTick+0xac>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <HAL_InitTick+0xac>)
 8000922:	f002 fa2b 	bl	8002d7c <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d104      	bne.n	8000936 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <HAL_InitTick+0xac>)
 800092e:	f002 fa5a 	bl	8002de6 <HAL_TIM_Base_Start_IT>
 8000932:	4603      	mov	r3, r0
 8000934:	e000      	b.n	8000938 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3730      	adds	r7, #48	; 0x30
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	431bde83 	.word	0x431bde83
 8000948:	20004394 	.word	0x20004394
 800094c:	40010000 	.word	0x40010000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000980:	4802      	ldr	r0, [pc, #8]	; (800098c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000982:	f002 fa54 	bl	8002e2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20004394 	.word	0x20004394

08000990 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <ETH_IRQHandler+0x10>)
 8000996:	f000 fe17 	bl	80015c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20005cfc 	.word	0x20005cfc

080009a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	e00a      	b.n	80009cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009b6:	f3af 8000 	nop.w
 80009ba:	4601      	mov	r1, r0
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	b2ca      	uxtb	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf0      	blt.n	80009b6 <_read+0x12>
	}

return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	60f8      	str	r0, [r7, #12]
 80009e6:	60b9      	str	r1, [r7, #8]
 80009e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e009      	b.n	8000a04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf1      	blt.n	80009f0 <_write+0x12>
	}
	return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_close>:

int _close(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3e:	605a      	str	r2, [r3, #4]
	return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <_isatty>:

int _isatty(int file)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
	return 1;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <_sbrk+0x5c>)
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <_sbrk+0x60>)
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <_sbrk+0x64>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <_sbrk+0x64>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <_sbrk+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d205      	bcs.n	8000abc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <_sbrk+0x6c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <_sbrk+0x64>)
 8000acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	20020000 	.word	0x20020000
 8000ae0:	00000400 	.word	0x00000400
 8000ae4:	2000045c 	.word	0x2000045c
 8000ae8:	2000e650 	.word	0x2000e650
 8000aec:	2000e648 	.word	0x2000e648

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <SystemInit+0x28>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <SystemInit+0x28>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SystemInit+0x28>)
 8000b06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b22:	e003      	b.n	8000b2c <LoopCopyDataInit>

08000b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b2a:	3104      	adds	r1, #4

08000b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b2c:	480b      	ldr	r0, [pc, #44]	; (8000b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b34:	d3f6      	bcc.n	8000b24 <CopyDataInit>
  ldr  r2, =_sbss
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b38:	e002      	b.n	8000b40 <LoopFillZerobss>

08000b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b3c:	f842 3b04 	str.w	r3, [r2], #4

08000b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b44:	d3f9      	bcc.n	8000b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b46:	f7ff ffd3 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f014 f893 	bl	8014c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fd31 	bl	80005b4 <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b58:	080198f8 	.word	0x080198f8
  ldr  r0, =_sdata
 8000b5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b60:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000b64:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000b68:	2000e650 	.word	0x2000e650

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f8fa 	bl	8000d92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fe7c 	bl	800089c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe4e 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_IncTick+0x24>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	200043d4 	.word	0x200043d4

08000bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return uwTick;
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <HAL_GetTick+0x14>)
 8000be2:	681b      	ldr	r3, [r3, #0]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	200043d4 	.word	0x200043d4

08000bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bfc:	f7ff ffee 	bl	8000bdc <HAL_GetTick>
 8000c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c0c:	d005      	beq.n	8000c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_Delay+0x40>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	461a      	mov	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	4413      	add	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c1a:	bf00      	nop
 8000c1c:	f7ff ffde 	bl	8000bdc <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d8f7      	bhi.n	8000c1c <HAL_Delay+0x28>
  {
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000008 	.word	0x20000008

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ff4c 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dba:	f7ff ff61 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000dbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	68b9      	ldr	r1, [r7, #8]
 8000dc4:	6978      	ldr	r0, [r7, #20]
 8000dc6:	f7ff ffb1 	bl	8000d2c <NVIC_EncodePriority>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff80 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff54 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000e0c:	4baa      	ldr	r3, [pc, #680]	; (80010b8 <HAL_ETH_Init+0x2bc>)
 8000e0e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e185      	b.n	800112e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d106      	bne.n	8000e3c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f002 fb3c 	bl	80034b4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	4b9e      	ldr	r3, [pc, #632]	; (80010bc <HAL_ETH_Init+0x2c0>)
 8000e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e44:	4a9d      	ldr	r2, [pc, #628]	; (80010bc <HAL_ETH_Init+0x2c0>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4c:	4b9b      	ldr	r3, [pc, #620]	; (80010bc <HAL_ETH_Init+0x2c0>)
 8000e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000e58:	4b99      	ldr	r3, [pc, #612]	; (80010c0 <HAL_ETH_Init+0x2c4>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	4a98      	ldr	r2, [pc, #608]	; (80010c0 <HAL_ETH_Init+0x2c4>)
 8000e5e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e62:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000e64:	4b96      	ldr	r3, [pc, #600]	; (80010c0 <HAL_ETH_Init+0x2c4>)
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4994      	ldr	r1, [pc, #592]	; (80010c0 <HAL_ETH_Init+0x2c4>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0201 	orr.w	r2, r2, #1
 8000e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e88:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000e8a:	f7ff fea7 	bl	8000bdc <HAL_GetTick>
 8000e8e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e90:	e011      	b.n	8000eb6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000e92:	f7ff fea3 	bl	8000bdc <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ea0:	d909      	bls.n	8000eb6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e13b      	b.n	800112e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e4      	bne.n	8000e92 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f023 031c 	bic.w	r3, r3, #28
 8000ed6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000ed8:	f001 fefe 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8000edc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4a78      	ldr	r2, [pc, #480]	; (80010c4 <HAL_ETH_Init+0x2c8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d908      	bls.n	8000ef8 <HAL_ETH_Init+0xfc>
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	4a77      	ldr	r2, [pc, #476]	; (80010c8 <HAL_ETH_Init+0x2cc>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d804      	bhi.n	8000ef8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	f043 0308 	orr.w	r3, r3, #8
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	e027      	b.n	8000f48 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	4a73      	ldr	r2, [pc, #460]	; (80010c8 <HAL_ETH_Init+0x2cc>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d908      	bls.n	8000f12 <HAL_ETH_Init+0x116>
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	4a72      	ldr	r2, [pc, #456]	; (80010cc <HAL_ETH_Init+0x2d0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d804      	bhi.n	8000f12 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f043 030c 	orr.w	r3, r3, #12
 8000f0e:	61fb      	str	r3, [r7, #28]
 8000f10:	e01a      	b.n	8000f48 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	4a6d      	ldr	r2, [pc, #436]	; (80010cc <HAL_ETH_Init+0x2d0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d903      	bls.n	8000f22 <HAL_ETH_Init+0x126>
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	4a6c      	ldr	r2, [pc, #432]	; (80010d0 <HAL_ETH_Init+0x2d4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d911      	bls.n	8000f46 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4a6a      	ldr	r2, [pc, #424]	; (80010d0 <HAL_ETH_Init+0x2d4>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d908      	bls.n	8000f3c <HAL_ETH_Init+0x140>
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4a69      	ldr	r2, [pc, #420]	; (80010d4 <HAL_ETH_Init+0x2d8>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d804      	bhi.n	8000f3c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	e005      	b.n	8000f48 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	e000      	b.n	8000f48 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000f46:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f54:	2100      	movs	r1, #0
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fc19 	bl	800178e <HAL_ETH_WritePHYRegister>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d00b      	beq.n	8000f7a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000f66:	6939      	ldr	r1, [r7, #16]
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 fdcf 	bl	8001b0c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2201      	movs	r2, #1
 8000f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e0d9      	b.n	800112e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000f7a:	20ff      	movs	r0, #255	; 0xff
 8000f7c:	f7ff fe3a 	bl	8000bf4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80a7 	beq.w	80010d8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f8a:	f7ff fe27 	bl	8000bdc <HAL_GetTick>
 8000f8e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	461a      	mov	r2, r3
 8000f96:	2101      	movs	r1, #1
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fb90 	bl	80016be <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000f9e:	f7ff fe1d 	bl	8000bdc <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d90f      	bls.n	8000fd0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000fb4:	6939      	ldr	r1, [r7, #16]
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 fda8 	bl	8001b0c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e0ae      	b.n	800112e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0da      	beq.n	8000f90 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000fda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fde:	2100      	movs	r1, #0
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 fbd4 	bl	800178e <HAL_ETH_WritePHYRegister>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00b      	beq.n	8001004 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ff0:	6939      	ldr	r1, [r7, #16]
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fd8a 	bl	8001b0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001000:	2301      	movs	r3, #1
 8001002:	e094      	b.n	800112e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001004:	f7ff fdea 	bl	8000bdc <HAL_GetTick>
 8001008:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	461a      	mov	r2, r3
 8001010:	2101      	movs	r1, #1
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fb53 	bl	80016be <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001018:	f7ff fde0 	bl	8000bdc <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f241 3288 	movw	r2, #5000	; 0x1388
 8001026:	4293      	cmp	r3, r2
 8001028:	d90f      	bls.n	800104a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800102e:	6939      	ldr	r1, [r7, #16]
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 fd6b 	bl	8001b0c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e071      	b.n	800112e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f003 0320 	and.w	r3, r3, #32
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0da      	beq.n	800100a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	461a      	mov	r2, r3
 800105a:	211f      	movs	r1, #31
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 fb2e 	bl	80016be <HAL_ETH_ReadPHYRegister>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00b      	beq.n	8001080 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800106c:	6939      	ldr	r1, [r7, #16]
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 fd4c 	bl	8001b0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800107c:	2301      	movs	r3, #1
 800107e:	e056      	b.n	800112e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	e002      	b.n	800109a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	e037      	b.n	800111c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	e032      	b.n	800111c <HAL_ETH_Init+0x320>
 80010b6:	bf00      	nop
 80010b8:	03938700 	.word	0x03938700
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40013800 	.word	0x40013800
 80010c4:	01312cff 	.word	0x01312cff
 80010c8:	02160ebf 	.word	0x02160ebf
 80010cc:	039386ff 	.word	0x039386ff
 80010d0:	05f5e0ff 	.word	0x05f5e0ff
 80010d4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	085b      	lsrs	r3, r3, #1
 80010e6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	461a      	mov	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 fb4c 	bl	800178e <HAL_ETH_WritePHYRegister>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00b      	beq.n	8001114 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001100:	6939      	ldr	r1, [r7, #16]
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fd02 	bl	8001b0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e00c      	b.n	800112e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001114:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001118:	f7ff fd6c 	bl	8000bf4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800111c:	6939      	ldr	r1, [r7, #16]
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 fcf4 	bl	8001b0c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop

08001138 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <HAL_ETH_DMATxDescListInit+0x20>
 8001154:	2302      	movs	r3, #2
 8001156:	e052      	b.n	80011fe <HAL_ETH_DMATxDescListInit+0xc6>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2201      	movs	r2, #1
 800115c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2202      	movs	r2, #2
 8001164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e030      	b.n	80011d6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	015b      	lsls	r3, r3, #5
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	4413      	add	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001184:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	461a      	mov	r2, r3
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d208      	bcs.n	80011ca <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	015b      	lsls	r3, r3, #5
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	4413      	add	r3, r2
 80011c2:	461a      	mov	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	e002      	b.n	80011d0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3ca      	bcc.n	8001174 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e8:	3310      	adds	r3, #16
 80011ea:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800120a:	b480      	push	{r7}
 800120c:	b087      	sub	sp, #28
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HAL_ETH_DMARxDescListInit+0x20>
 8001226:	2302      	movs	r3, #2
 8001228:	e056      	b.n	80012d8 <HAL_ETH_DMARxDescListInit+0xce>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2202      	movs	r2, #2
 8001236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	e034      	b.n	80012b0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	015b      	lsls	r3, r3, #5
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	4413      	add	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001256:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800125e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001266:	fb02 f303 	mul.w	r3, r2, r3
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	461a      	mov	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d105      	bne.n	8001288 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3b01      	subs	r3, #1
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	429a      	cmp	r2, r3
 8001290:	d208      	bcs.n	80012a4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	015b      	lsls	r3, r3, #5
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	4413      	add	r3, r2
 800129c:	461a      	mov	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	e002      	b.n	80012aa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d3c6      	bcc.n	8001246 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c2:	330c      	adds	r3, #12
 80012c4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2201      	movs	r2, #1
 80012ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001300:	2b01      	cmp	r3, #1
 8001302:	d101      	bne.n	8001308 <HAL_ETH_TransmitFrame+0x24>
 8001304:	2302      	movs	r3, #2
 8001306:	e0cd      	b.n	80014a4 <HAL_ETH_TransmitFrame+0x1c0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800132e:	2301      	movs	r3, #1
 8001330:	e0b8      	b.n	80014a4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	da09      	bge.n	8001350 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2212      	movs	r2, #18
 8001340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e0a9      	b.n	80014a4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001356:	4293      	cmp	r3, r2
 8001358:	d915      	bls.n	8001386 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4a54      	ldr	r2, [pc, #336]	; (80014b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800135e:	fba2 2303 	umull	r2, r3, r2, r3
 8001362:	0a9b      	lsrs	r3, r3, #10
 8001364:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4b51      	ldr	r3, [pc, #324]	; (80014b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800136a:	fba3 1302 	umull	r1, r3, r3, r2
 800136e:	0a9b      	lsrs	r3, r3, #10
 8001370:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001374:	fb01 f303 	mul.w	r3, r1, r3
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	3301      	adds	r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	e001      	b.n	800138a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001386:	2301      	movs	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d11c      	bne.n	80013ca <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800139e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013aa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013ba:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	461a      	mov	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80013c8:	e04b      	b.n	8001462 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	e044      	b.n	800145a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013de:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d107      	bne.n	80013f6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013f4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013fe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3b01      	subs	r3, #1
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	429a      	cmp	r2, r3
 8001408:	d116      	bne.n	8001438 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001418:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <HAL_ETH_TransmitFrame+0x1d0>)
 800141e:	fb02 f203 	mul.w	r2, r2, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800142a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001436:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001446:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	461a      	mov	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	3301      	adds	r3, #1
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	429a      	cmp	r2, r3
 8001460:	d3b6      	bcc.n	80013d0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146a:	3314      	adds	r3, #20
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00d      	beq.n	8001492 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147e:	3314      	adds	r3, #20
 8001480:	2204      	movs	r2, #4
 8001482:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148c:	3304      	adds	r3, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	ac02b00b 	.word	0xac02b00b
 80014b4:	fffffa0c 	.word	0xfffffa0c

080014b8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e074      	b.n	80015bc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2202      	movs	r2, #2
 80014de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80014e2:	e05a      	b.n	800159a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f8:	d10d      	bne.n	8001516 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	461a      	mov	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
 8001514:	e041      	b.n	800159a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10b      	bne.n	800153c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	461a      	mov	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
 800153a:	e02e      	b.n	800159a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	2b01      	cmp	r3, #1
 8001554:	d103      	bne.n	800155e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	0c1b      	lsrs	r3, r3, #16
 8001566:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800156a:	1f1a      	subs	r2, r3, #4
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	461a      	mov	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e010      	b.n	80015bc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db02      	blt.n	80015aa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d99c      	bls.n	80014e4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	3314      	adds	r3, #20
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e0:	2b40      	cmp	r3, #64	; 0x40
 80015e2:	d112      	bne.n	800160a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f002 f813 	bl	8003610 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f2:	3314      	adds	r3, #20
 80015f4:	2240      	movs	r2, #64	; 0x40
 80015f6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001608:	e01b      	b.n	8001642 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001612:	3314      	adds	r3, #20
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d111      	bne.n	8001642 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f839 	bl	8001696 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162c:	3314      	adds	r3, #20
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164a:	3314      	adds	r3, #20
 800164c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001650:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165a:	3314      	adds	r3, #20
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001666:	d112      	bne.n	800168e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f81e 	bl	80016aa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	3314      	adds	r3, #20
 8001678:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800167c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	460b      	mov	r3, r1
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b82      	cmp	r3, #130	; 0x82
 80016de:	d101      	bne.n	80016e4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
 80016e2:	e050      	b.n	8001786 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2282      	movs	r2, #130	; 0x82
 80016e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f003 031c 	and.w	r3, r3, #28
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8a1b      	ldrh	r3, [r3, #16]
 8001700:	02db      	lsls	r3, r3, #11
 8001702:	b29b      	uxth	r3, r3
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	4313      	orrs	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800170a:	897b      	ldrh	r3, [r7, #10]
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f023 0302 	bic.w	r3, r3, #2
 800171e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001730:	f7ff fa54 	bl	8000bdc <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001736:	e015      	b.n	8001764 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001738:	f7ff fa50 	bl	8000bdc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001746:	d309      	bcc.n	800175c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e014      	b.n	8001786 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1e4      	bne.n	8001738 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	b29b      	uxth	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	460b      	mov	r3, r1
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b42      	cmp	r3, #66	; 0x42
 80017ae:	d101      	bne.n	80017b4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
 80017b2:	e04e      	b.n	8001852 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2242      	movs	r2, #66	; 0x42
 80017b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 031c 	and.w	r3, r3, #28
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8a1b      	ldrh	r3, [r3, #16]
 80017d0:	02db      	lsls	r3, r3, #11
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	019b      	lsls	r3, r3, #6
 80017de:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800180a:	f7ff f9e7 	bl	8000bdc <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001810:	e015      	b.n	800183e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001812:	f7ff f9e3 	bl	8000bdc <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d309      	bcc.n	8001836 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e00d      	b.n	8001852 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e4      	bne.n	8001812 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_ETH_Start+0x16>
 800186c:	2302      	movs	r3, #2
 800186e:	e01f      	b.n	80018b0 <HAL_ETH_Start+0x56>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f000 fb45 	bl	8001f10 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 fb7c 	bl	8001f84 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 fc13 	bl	80020b8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 fbb0 	bl	8001ff8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fbdd 	bl	8002058 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_ETH_Stop+0x16>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e01f      	b.n	800190e <HAL_ETH_Stop+0x56>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2202      	movs	r2, #2
 80018da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fba2 	bl	8002028 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fbcf 	bl	8002088 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 fb67 	bl	8001fbe <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fbe1 	bl	80020b8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 fb27 	bl	8001f4a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_ETH_ConfigMAC+0x1c>
 8001930:	2302      	movs	r3, #2
 8001932:	e0e4      	b.n	8001afe <HAL_ETH_ConfigMAC+0x1e6>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2202      	movs	r2, #2
 8001940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80b1 	beq.w	8001aae <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <HAL_ETH_ConfigMAC+0x1f0>)
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001964:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800196a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001970:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001976:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800197c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001982:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001988:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800198e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001994:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800199a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80019a0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80019a6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019be:	2001      	movs	r0, #1
 80019c0:	f7ff f918 	bl	8000bf4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019d4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80019da:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80019e0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80019e6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80019ec:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80019f2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80019fe:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001a00:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a0a:	2001      	movs	r0, #1
 8001a0c:	f7ff f8f2 	bl	8000bf4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a20:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a2a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001a48:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001a4e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001a54:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001a5a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001a60:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff f8bb 	bl	8000bf4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7ff f8a8 	bl	8000bf4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	61da      	str	r2, [r3, #28]
 8001aac:	e01e      	b.n	8001aec <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001abc:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff f888 	bl	8000bf4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	ff20810f 	.word	0xff20810f

08001b0c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0b0      	sub	sp, #192	; 0xc0
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b28:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b30:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b56:	663b      	str	r3, [r7, #96]	; 0x60
 8001b58:	e001      	b.n	8001b5e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b62:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b78:	2340      	movs	r3, #64	; 0x40
 8001b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001be4:	4bac      	ldr	r3, [pc, #688]	; (8001e98 <ETH_MACDMAConfig+0x38c>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001bf0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001bf4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001bf8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001bfe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001c02:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001c04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001c06:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001c0c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001c10:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001c14:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001c18:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001c1c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001c20:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001c22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c34:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7fe ffd7 	bl	8000bf4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c4e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c50:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c54:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c58:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001c5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c5e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001c64:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c6a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c70:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c74:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c7c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c7e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f7fe ffb2 	bl	8000bf4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c98:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ca2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001cac:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cbc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cca:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ccc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cd0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001cd6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001cdc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ce2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ce4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ce8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001cea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cfc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7fe ff73 	bl	8000bf4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d16:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d18:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001d1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7fe ff5e 	bl	8000bf4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d40:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d4a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001d50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d54:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d66:	2304      	movs	r3, #4
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d96:	3318      	adds	r3, #24
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001d9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da2:	4b3e      	ldr	r3, [pc, #248]	; (8001e9c <ETH_MACDMAConfig+0x390>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001daa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001dac:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dae:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001db0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001db2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001db4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001db6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001db8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001dba:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001dbc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001dbe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001dc2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001dc6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001dca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001dcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dde:	3318      	adds	r3, #24
 8001de0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001de4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	3318      	adds	r3, #24
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7fe fefc 	bl	8000bf4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e04:	3318      	adds	r3, #24
 8001e06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e0a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e10:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001e14:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e18:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001e1c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e20:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001e22:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001e26:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e34:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7fe fed5 	bl	8000bf4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e56:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10f      	bne.n	8001e80 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e68:	331c      	adds	r3, #28
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7c:	331c      	adds	r3, #28
 8001e7e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	461a      	mov	r2, r3
 8001e86:	2100      	movs	r1, #0
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f809 	bl	8001ea0 <ETH_MACAddressConfig>
}
 8001e8e:	bf00      	nop
 8001e90:	37c0      	adds	r7, #192	; 0xc0
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	ff20810f 	.word	0xff20810f
 8001e9c:	f8de3f23 	.word	0xf8de3f23

08001ea0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3305      	adds	r3, #5
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	3204      	adds	r2, #4
 8001eb8:	7812      	ldrb	r2, [r2, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <ETH_MACAddressConfig+0x68>)
 8001ec2:	4413      	add	r3, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3303      	adds	r3, #3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	061a      	lsls	r2, r3, #24
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <ETH_MACAddressConfig+0x6c>)
 8001ef2:	4413      	add	r3, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	6013      	str	r3, [r2, #0]
}
 8001efa:	bf00      	nop
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40028040 	.word	0x40028040
 8001f0c:	40028044 	.word	0x40028044

08001f10 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0208 	orr.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f000 f8e9 	bl	800210c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0208 	bic.w	r2, r2, #8
 8001f64:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f000 f8cc 	bl	800210c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 0204 	orr.w	r2, r2, #4
 8001f9e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f000 f8af 	bl	800210c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	601a      	str	r2, [r3, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0204 	bic.w	r2, r2, #4
 8001fd8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f000 f892 	bl	800210c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	601a      	str	r2, [r3, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	3318      	adds	r3, #24
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002018:	3318      	adds	r3, #24
 800201a:	601a      	str	r2, [r3, #0]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002038:	3318      	adds	r3, #24
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002048:	3318      	adds	r3, #24
 800204a:	601a      	str	r2, [r3, #0]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002068:	3318      	adds	r3, #24
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0202 	orr.w	r2, r2, #2
 8002074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002078:	3318      	adds	r3, #24
 800207a:	601a      	str	r2, [r3, #0]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002098:	3318      	adds	r3, #24
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0202 	bic.w	r2, r2, #2
 80020a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a8:	3318      	adds	r3, #24
 80020aa:	601a      	str	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020cc:	3318      	adds	r3, #24
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020dc:	3318      	adds	r3, #24
 80020de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e8:	3318      	adds	r3, #24
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f000 f80c 	bl	800210c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fe:	3318      	adds	r3, #24
 8002100:	601a      	str	r2, [r3, #0]
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <ETH_Delay+0x34>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <ETH_Delay+0x38>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	0a5b      	lsrs	r3, r3, #9
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002128:	bf00      	nop
  } 
  while (Delay --);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	60fa      	str	r2, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <ETH_Delay+0x1c>
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20000000 	.word	0x20000000
 8002144:	10624dd3 	.word	0x10624dd3

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e16b      	b.n	800243c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 815a 	bne.w	8002436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d00b      	beq.n	80021a2 <HAL_GPIO_Init+0x5a>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d007      	beq.n	80021a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002196:	2b11      	cmp	r3, #17
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d130      	bne.n	8002204 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d8:	2201      	movs	r2, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 0201 	and.w	r2, r3, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0xfc>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b12      	cmp	r3, #18
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80b4 	beq.w	8002436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b5f      	ldr	r3, [pc, #380]	; (8002450 <HAL_GPIO_Init+0x308>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a5e      	ldr	r2, [pc, #376]	; (8002450 <HAL_GPIO_Init+0x308>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b5c      	ldr	r3, [pc, #368]	; (8002450 <HAL_GPIO_Init+0x308>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ea:	4a5a      	ldr	r2, [pc, #360]	; (8002454 <HAL_GPIO_Init+0x30c>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a51      	ldr	r2, [pc, #324]	; (8002458 <HAL_GPIO_Init+0x310>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02b      	beq.n	800236e <HAL_GPIO_Init+0x226>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a50      	ldr	r2, [pc, #320]	; (800245c <HAL_GPIO_Init+0x314>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x222>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4f      	ldr	r2, [pc, #316]	; (8002460 <HAL_GPIO_Init+0x318>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x21e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4e      	ldr	r2, [pc, #312]	; (8002464 <HAL_GPIO_Init+0x31c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x21a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4d      	ldr	r2, [pc, #308]	; (8002468 <HAL_GPIO_Init+0x320>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x216>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4c      	ldr	r2, [pc, #304]	; (800246c <HAL_GPIO_Init+0x324>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x212>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4b      	ldr	r2, [pc, #300]	; (8002470 <HAL_GPIO_Init+0x328>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x20e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_GPIO_Init+0x32c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x20a>
 800234e:	2307      	movs	r3, #7
 8002350:	e00e      	b.n	8002370 <HAL_GPIO_Init+0x228>
 8002352:	2308      	movs	r3, #8
 8002354:	e00c      	b.n	8002370 <HAL_GPIO_Init+0x228>
 8002356:	2306      	movs	r3, #6
 8002358:	e00a      	b.n	8002370 <HAL_GPIO_Init+0x228>
 800235a:	2305      	movs	r3, #5
 800235c:	e008      	b.n	8002370 <HAL_GPIO_Init+0x228>
 800235e:	2304      	movs	r3, #4
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x228>
 8002362:	2303      	movs	r3, #3
 8002364:	e004      	b.n	8002370 <HAL_GPIO_Init+0x228>
 8002366:	2302      	movs	r3, #2
 8002368:	e002      	b.n	8002370 <HAL_GPIO_Init+0x228>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x228>
 800236e:	2300      	movs	r3, #0
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f002 0203 	and.w	r2, r2, #3
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	4093      	lsls	r3, r2
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002380:	4934      	ldr	r1, [pc, #208]	; (8002454 <HAL_GPIO_Init+0x30c>)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238e:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_GPIO_Init+0x330>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b2:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_GPIO_Init+0x330>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023b8:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HAL_GPIO_Init+0x330>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023dc:	4a26      	ldr	r2, [pc, #152]	; (8002478 <HAL_GPIO_Init+0x330>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e2:	4b25      	ldr	r3, [pc, #148]	; (8002478 <HAL_GPIO_Init+0x330>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_GPIO_Init+0x330>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <HAL_GPIO_Init+0x330>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002430:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_GPIO_Init+0x330>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	f67f ae90 	bls.w	8002164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002444:	bf00      	nop
 8002446:	3724      	adds	r7, #36	; 0x24
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40023800 	.word	0x40023800
 8002454:	40013800 	.word	0x40013800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40021000 	.word	0x40021000
 800246c:	40021400 	.word	0x40021400
 8002470:	40021800 	.word	0x40021800
 8002474:	40021c00 	.word	0x40021c00
 8002478:	40013c00 	.word	0x40013c00

0800247c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e25b      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d075      	beq.n	8002586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249a:	4ba3      	ldr	r3, [pc, #652]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d00c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a6:	4ba0      	ldr	r3, [pc, #640]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d112      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b2:	4b9d      	ldr	r3, [pc, #628]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024be:	d10b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4b99      	ldr	r3, [pc, #612]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d05b      	beq.n	8002584 <HAL_RCC_OscConfig+0x108>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d157      	bne.n	8002584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e236      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x74>
 80024e2:	4b91      	ldr	r3, [pc, #580]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a90      	ldr	r2, [pc, #576]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e01d      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a8a      	ldr	r2, [pc, #552]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a87      	ldr	r2, [pc, #540]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 8002514:	4b84      	ldr	r3, [pc, #528]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a83      	ldr	r2, [pc, #524]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b81      	ldr	r3, [pc, #516]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a80      	ldr	r2, [pc, #512]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7fe fb52 	bl	8000bdc <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fb4e 	bl	8000bdc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e1fb      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0xc0>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7fe fb3e 	bl	8000bdc <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fb3a 	bl	8000bdc <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e1e7      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0xe8>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d063      	beq.n	800265a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002592:	4b65      	ldr	r3, [pc, #404]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259e:	4b62      	ldr	r3, [pc, #392]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d11c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025aa:	4b5f      	ldr	r3, [pc, #380]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d116      	bne.n	80025e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	4b5c      	ldr	r3, [pc, #368]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_RCC_OscConfig+0x152>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d001      	beq.n	80025ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e1bb      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b56      	ldr	r3, [pc, #344]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4952      	ldr	r1, [pc, #328]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	e03a      	b.n	800265a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d020      	beq.n	800262e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ec:	4b4f      	ldr	r3, [pc, #316]	; (800272c <HAL_RCC_OscConfig+0x2b0>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe faf3 	bl	8000bdc <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe faef 	bl	8000bdc <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e19c      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002618:	4b43      	ldr	r3, [pc, #268]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4940      	ldr	r1, [pc, #256]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]
 800262c:	e015      	b.n	800265a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <HAL_RCC_OscConfig+0x2b0>)
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fad2 	bl	8000bdc <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263c:	f7fe face 	bl	8000bdc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e17b      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d030      	beq.n	80026c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_RCC_OscConfig+0x2b4>)
 8002670:	2201      	movs	r2, #1
 8002672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fe fab2 	bl	8000bdc <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267c:	f7fe faae 	bl	8000bdc <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e15b      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f0      	beq.n	800267c <HAL_RCC_OscConfig+0x200>
 800269a:	e015      	b.n	80026c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_OscConfig+0x2b4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a2:	f7fe fa9b 	bl	8000bdc <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026aa:	f7fe fa97 	bl	8000bdc <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e144      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a0 	beq.w	8002816 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10f      	bne.n	8002706 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002702:	2301      	movs	r3, #1
 8002704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <HAL_RCC_OscConfig+0x2b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270e:	2b00      	cmp	r3, #0
 8002710:	d121      	bne.n	8002756 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <HAL_RCC_OscConfig+0x2b8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_RCC_OscConfig+0x2b8>)
 8002718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800271c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800271e:	f7fe fa5d 	bl	8000bdc <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	e011      	b.n	800274a <HAL_RCC_OscConfig+0x2ce>
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	42470000 	.word	0x42470000
 8002730:	42470e80 	.word	0x42470e80
 8002734:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002738:	f7fe fa50 	bl	8000bdc <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0fd      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274a:	4b81      	ldr	r3, [pc, #516]	; (8002950 <HAL_RCC_OscConfig+0x4d4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d106      	bne.n	800276c <HAL_RCC_OscConfig+0x2f0>
 800275e:	4b7d      	ldr	r3, [pc, #500]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a7c      	ldr	r2, [pc, #496]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	e01c      	b.n	80027a6 <HAL_RCC_OscConfig+0x32a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b05      	cmp	r3, #5
 8002772:	d10c      	bne.n	800278e <HAL_RCC_OscConfig+0x312>
 8002774:	4b77      	ldr	r3, [pc, #476]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a76      	ldr	r2, [pc, #472]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 800277a:	f043 0304 	orr.w	r3, r3, #4
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
 8002780:	4b74      	ldr	r3, [pc, #464]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a73      	ldr	r2, [pc, #460]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	e00b      	b.n	80027a6 <HAL_RCC_OscConfig+0x32a>
 800278e:	4b71      	ldr	r3, [pc, #452]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a70      	ldr	r2, [pc, #448]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	4b6e      	ldr	r3, [pc, #440]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a6d      	ldr	r2, [pc, #436]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 80027a0:	f023 0304 	bic.w	r3, r3, #4
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d015      	beq.n	80027da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7fe fa15 	bl	8000bdc <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b6:	f7fe fa11 	bl	8000bdc <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0bc      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	4b61      	ldr	r3, [pc, #388]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ee      	beq.n	80027b6 <HAL_RCC_OscConfig+0x33a>
 80027d8:	e014      	b.n	8002804 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027da:	f7fe f9ff 	bl	8000bdc <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe f9fb 	bl	8000bdc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0a6      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f8:	4b56      	ldr	r3, [pc, #344]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1ee      	bne.n	80027e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4b52      	ldr	r3, [pc, #328]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a51      	ldr	r2, [pc, #324]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8092 	beq.w	8002944 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002820:	4b4c      	ldr	r3, [pc, #304]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b08      	cmp	r3, #8
 800282a:	d05c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d141      	bne.n	80028b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002834:	4b48      	ldr	r3, [pc, #288]	; (8002958 <HAL_RCC_OscConfig+0x4dc>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283a:	f7fe f9cf 	bl	8000bdc <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002842:	f7fe f9cb 	bl	8000bdc <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e078      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002854:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	3b01      	subs	r3, #1
 800287a:	041b      	lsls	r3, r3, #16
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	061b      	lsls	r3, r3, #24
 8002884:	4933      	ldr	r1, [pc, #204]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288a:	4b33      	ldr	r3, [pc, #204]	; (8002958 <HAL_RCC_OscConfig+0x4dc>)
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe f9a4 	bl	8000bdc <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe f9a0 	bl	8000bdc <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e04d      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b2a      	ldr	r3, [pc, #168]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x41c>
 80028b6:	e045      	b.n	8002944 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_RCC_OscConfig+0x4dc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe f98d 	bl	8000bdc <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe f989 	bl	8000bdc <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e036      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d8:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x44a>
 80028e4:	e02e      	b.n	8002944 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e029      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028f2:	4b18      	ldr	r3, [pc, #96]	; (8002954 <HAL_RCC_OscConfig+0x4d8>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	429a      	cmp	r2, r3
 8002904:	d11c      	bne.n	8002940 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d115      	bne.n	8002940 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800291a:	4013      	ands	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002920:	4293      	cmp	r3, r2
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d106      	bne.n	8002940 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40007000 	.word	0x40007000
 8002954:	40023800 	.word	0x40023800
 8002958:	42470060 	.word	0x42470060

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0cc      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d90c      	bls.n	8002998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0b8      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b0:	4b59      	ldr	r3, [pc, #356]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4a58      	ldr	r2, [pc, #352]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b50      	ldr	r3, [pc, #320]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	494d      	ldr	r1, [pc, #308]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d044      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d107      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d119      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e07f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b3f      	ldr	r3, [pc, #252]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e06f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e067      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b37      	ldr	r3, [pc, #220]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4934      	ldr	r1, [pc, #208]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe f8c6 	bl	8000bdc <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7fe f8c2 	bl	8000bdc <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e04f      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d20c      	bcs.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a92:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e032      	b.n	8002b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4916      	ldr	r1, [pc, #88]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d009      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	490e      	ldr	r1, [pc, #56]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ae2:	f000 f821 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	fa21 f303 	lsr.w	r3, r1, r3
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd feca 	bl	800089c <HAL_InitTick>

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023c00 	.word	0x40023c00
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	080195b8 	.word	0x080195b8
 8002b20:	20000000 	.word	0x20000000
 8002b24:	20000004 	.word	0x20000004

08002b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3e:	4b63      	ldr	r3, [pc, #396]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d007      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x32>
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x38>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80b4 	bne.w	8002cbc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b56:	60bb      	str	r3, [r7, #8]
       break;
 8002b58:	e0b3      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5a:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b5c:	60bb      	str	r3, [r7, #8]
      break;
 8002b5e:	e0b0      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b60:	4b5a      	ldr	r3, [pc, #360]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6a:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04a      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	f04f 0400 	mov.w	r4, #0
 8002b80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	ea03 0501 	and.w	r5, r3, r1
 8002b8c:	ea04 0602 	and.w	r6, r4, r2
 8002b90:	4629      	mov	r1, r5
 8002b92:	4632      	mov	r2, r6
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	f04f 0400 	mov.w	r4, #0
 8002b9c:	0154      	lsls	r4, r2, #5
 8002b9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ba2:	014b      	lsls	r3, r1, #5
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	1b49      	subs	r1, r1, r5
 8002baa:	eb62 0206 	sbc.w	r2, r2, r6
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	f04f 0400 	mov.w	r4, #0
 8002bb6:	0194      	lsls	r4, r2, #6
 8002bb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bbc:	018b      	lsls	r3, r1, #6
 8002bbe:	1a5b      	subs	r3, r3, r1
 8002bc0:	eb64 0402 	sbc.w	r4, r4, r2
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	00e2      	lsls	r2, r4, #3
 8002bce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bd2:	00d9      	lsls	r1, r3, #3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4614      	mov	r4, r2
 8002bd8:	195b      	adds	r3, r3, r5
 8002bda:	eb44 0406 	adc.w	r4, r4, r6
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	0262      	lsls	r2, r4, #9
 8002be8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002bec:	0259      	lsls	r1, r3, #9
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f04f 0400 	mov.w	r4, #0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	f7fd fb3e 	bl	8000280 <__aeabi_uldivmod>
 8002c04:	4603      	mov	r3, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e049      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	f04f 0400 	mov.w	r4, #0
 8002c16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	ea03 0501 	and.w	r5, r3, r1
 8002c22:	ea04 0602 	and.w	r6, r4, r2
 8002c26:	4629      	mov	r1, r5
 8002c28:	4632      	mov	r2, r6
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	f04f 0400 	mov.w	r4, #0
 8002c32:	0154      	lsls	r4, r2, #5
 8002c34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c38:	014b      	lsls	r3, r1, #5
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	1b49      	subs	r1, r1, r5
 8002c40:	eb62 0206 	sbc.w	r2, r2, r6
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	f04f 0400 	mov.w	r4, #0
 8002c4c:	0194      	lsls	r4, r2, #6
 8002c4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c52:	018b      	lsls	r3, r1, #6
 8002c54:	1a5b      	subs	r3, r3, r1
 8002c56:	eb64 0402 	sbc.w	r4, r4, r2
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c68:	00d9      	lsls	r1, r3, #3
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	195b      	adds	r3, r3, r5
 8002c70:	eb44 0406 	adc.w	r4, r4, r6
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	02a2      	lsls	r2, r4, #10
 8002c7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c82:	0299      	lsls	r1, r3, #10
 8002c84:	460b      	mov	r3, r1
 8002c86:	4614      	mov	r4, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f04f 0400 	mov.w	r4, #0
 8002c92:	461a      	mov	r2, r3
 8002c94:	4623      	mov	r3, r4
 8002c96:	f7fd faf3 	bl	8000280 <__aeabi_uldivmod>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460c      	mov	r4, r1
 8002c9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	60bb      	str	r3, [r7, #8]
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cbe:	60bb      	str	r3, [r7, #8]
      break;
 8002cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_RCC_GetHCLKFreq+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000000 	.word	0x20000000

08002cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cf4:	f7ff fff0 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf8:	4601      	mov	r1, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	0b5b      	lsrs	r3, r3, #13
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4a03      	ldr	r2, [pc, #12]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40023800 	.word	0x40023800
 8002d14:	080195c8 	.word	0x080195c8

08002d18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	220f      	movs	r2, #15
 8002d26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_RCC_GetClockConfig+0x5c>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0203 	and.w	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <HAL_RCC_GetClockConfig+0x5c>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <HAL_RCC_GetClockConfig+0x5c>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d4c:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <HAL_RCC_GetClockConfig+0x5c>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	08db      	lsrs	r3, r3, #3
 8002d52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <HAL_RCC_GetClockConfig+0x60>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 020f 	and.w	r2, r3, #15
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	601a      	str	r2, [r3, #0]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40023c00 	.word	0x40023c00

08002d7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e01d      	b.n	8002dca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f815 	bl	8002dd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f000 f968 	bl	8003090 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b06      	cmp	r3, #6
 8002e0e:	d007      	beq.n	8002e20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d122      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d11b      	bne.n	8002e8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f06f 0202 	mvn.w	r2, #2
 8002e5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f8ee 	bl	8003052 <HAL_TIM_IC_CaptureCallback>
 8002e76:	e005      	b.n	8002e84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f8e0 	bl	800303e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f8f1 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d122      	bne.n	8002ede <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d11b      	bne.n	8002ede <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f06f 0204 	mvn.w	r2, #4
 8002eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8c4 	bl	8003052 <HAL_TIM_IC_CaptureCallback>
 8002eca:	e005      	b.n	8002ed8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f8b6 	bl	800303e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f8c7 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d122      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d11b      	bne.n	8002f32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f06f 0208 	mvn.w	r2, #8
 8002f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2204      	movs	r2, #4
 8002f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f89a 	bl	8003052 <HAL_TIM_IC_CaptureCallback>
 8002f1e:	e005      	b.n	8002f2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f88c 	bl	800303e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f89d 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d122      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d11b      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f06f 0210 	mvn.w	r2, #16
 8002f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f870 	bl	8003052 <HAL_TIM_IC_CaptureCallback>
 8002f72:	e005      	b.n	8002f80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f862 	bl	800303e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f873 	bl	8003066 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10e      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d107      	bne.n	8002fb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f06f 0201 	mvn.w	r2, #1
 8002faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fd fc33 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d10e      	bne.n	8002fde <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fca:	2b80      	cmp	r3, #128	; 0x80
 8002fcc:	d107      	bne.n	8002fde <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f903 	bl	80031e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d10e      	bne.n	800300a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d107      	bne.n	800300a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f838 	bl	800307a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d10e      	bne.n	8003036 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b20      	cmp	r3, #32
 8003024:	d107      	bne.n	8003036 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f06f 0220 	mvn.w	r2, #32
 800302e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8cd 	bl	80031d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a40      	ldr	r2, [pc, #256]	; (80031a4 <TIM_Base_SetConfig+0x114>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d013      	beq.n	80030d0 <TIM_Base_SetConfig+0x40>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ae:	d00f      	beq.n	80030d0 <TIM_Base_SetConfig+0x40>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a3d      	ldr	r2, [pc, #244]	; (80031a8 <TIM_Base_SetConfig+0x118>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00b      	beq.n	80030d0 <TIM_Base_SetConfig+0x40>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <TIM_Base_SetConfig+0x11c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <TIM_Base_SetConfig+0x40>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a3b      	ldr	r2, [pc, #236]	; (80031b0 <TIM_Base_SetConfig+0x120>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_Base_SetConfig+0x40>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a3a      	ldr	r2, [pc, #232]	; (80031b4 <TIM_Base_SetConfig+0x124>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d108      	bne.n	80030e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <TIM_Base_SetConfig+0x114>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02b      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d027      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <TIM_Base_SetConfig+0x118>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d023      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <TIM_Base_SetConfig+0x11c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01f      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a2a      	ldr	r2, [pc, #168]	; (80031b0 <TIM_Base_SetConfig+0x120>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01b      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <TIM_Base_SetConfig+0x124>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d017      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a28      	ldr	r2, [pc, #160]	; (80031b8 <TIM_Base_SetConfig+0x128>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <TIM_Base_SetConfig+0x12c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00f      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <TIM_Base_SetConfig+0x130>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00b      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <TIM_Base_SetConfig+0x134>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <TIM_Base_SetConfig+0x138>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a23      	ldr	r2, [pc, #140]	; (80031cc <TIM_Base_SetConfig+0x13c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d108      	bne.n	8003154 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <TIM_Base_SetConfig+0x114>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_Base_SetConfig+0xf8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a0c      	ldr	r2, [pc, #48]	; (80031b4 <TIM_Base_SetConfig+0x124>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d103      	bne.n	8003190 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	615a      	str	r2, [r3, #20]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40010400 	.word	0x40010400
 80031b8:	40014000 	.word	0x40014000
 80031bc:	40014400 	.word	0x40014400
 80031c0:	40014800 	.word	0x40014800
 80031c4:	40001800 	.word	0x40001800
 80031c8:	40001c00 	.word	0x40001c00
 80031cc:	40002000 	.word	0x40002000

080031d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b08e      	sub	sp, #56	; 0x38
 80031fc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80031fe:	4ba0      	ldr	r3, [pc, #640]	; (8003480 <MX_LWIP_Init+0x288>)
 8003200:	22c0      	movs	r2, #192	; 0xc0
 8003202:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003204:	4b9e      	ldr	r3, [pc, #632]	; (8003480 <MX_LWIP_Init+0x288>)
 8003206:	22a8      	movs	r2, #168	; 0xa8
 8003208:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800320a:	4b9d      	ldr	r3, [pc, #628]	; (8003480 <MX_LWIP_Init+0x288>)
 800320c:	2200      	movs	r2, #0
 800320e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8003210:	4b9b      	ldr	r3, [pc, #620]	; (8003480 <MX_LWIP_Init+0x288>)
 8003212:	220a      	movs	r2, #10
 8003214:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003216:	4b9b      	ldr	r3, [pc, #620]	; (8003484 <MX_LWIP_Init+0x28c>)
 8003218:	22ff      	movs	r2, #255	; 0xff
 800321a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800321c:	4b99      	ldr	r3, [pc, #612]	; (8003484 <MX_LWIP_Init+0x28c>)
 800321e:	22ff      	movs	r2, #255	; 0xff
 8003220:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003222:	4b98      	ldr	r3, [pc, #608]	; (8003484 <MX_LWIP_Init+0x28c>)
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003228:	4b96      	ldr	r3, [pc, #600]	; (8003484 <MX_LWIP_Init+0x28c>)
 800322a:	2200      	movs	r2, #0
 800322c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800322e:	4b96      	ldr	r3, [pc, #600]	; (8003488 <MX_LWIP_Init+0x290>)
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003234:	4b94      	ldr	r3, [pc, #592]	; (8003488 <MX_LWIP_Init+0x290>)
 8003236:	2200      	movs	r2, #0
 8003238:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800323a:	4b93      	ldr	r3, [pc, #588]	; (8003488 <MX_LWIP_Init+0x290>)
 800323c:	2200      	movs	r2, #0
 800323e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003240:	4b91      	ldr	r3, [pc, #580]	; (8003488 <MX_LWIP_Init+0x290>)
 8003242:	2200      	movs	r2, #0
 8003244:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003246:	2100      	movs	r1, #0
 8003248:	2000      	movs	r0, #0
 800324a:	f006 f963 	bl	8009514 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800324e:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <MX_LWIP_Init+0x288>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	061a      	lsls	r2, r3, #24
 8003254:	4b8a      	ldr	r3, [pc, #552]	; (8003480 <MX_LWIP_Init+0x288>)
 8003256:	785b      	ldrb	r3, [r3, #1]
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	4b88      	ldr	r3, [pc, #544]	; (8003480 <MX_LWIP_Init+0x288>)
 800325e:	789b      	ldrb	r3, [r3, #2]
 8003260:	021b      	lsls	r3, r3, #8
 8003262:	4313      	orrs	r3, r2
 8003264:	4a86      	ldr	r2, [pc, #536]	; (8003480 <MX_LWIP_Init+0x288>)
 8003266:	78d2      	ldrb	r2, [r2, #3]
 8003268:	4313      	orrs	r3, r2
 800326a:	061a      	lsls	r2, r3, #24
 800326c:	4b84      	ldr	r3, [pc, #528]	; (8003480 <MX_LWIP_Init+0x288>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	0619      	lsls	r1, r3, #24
 8003272:	4b83      	ldr	r3, [pc, #524]	; (8003480 <MX_LWIP_Init+0x288>)
 8003274:	785b      	ldrb	r3, [r3, #1]
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	4319      	orrs	r1, r3
 800327a:	4b81      	ldr	r3, [pc, #516]	; (8003480 <MX_LWIP_Init+0x288>)
 800327c:	789b      	ldrb	r3, [r3, #2]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	430b      	orrs	r3, r1
 8003282:	497f      	ldr	r1, [pc, #508]	; (8003480 <MX_LWIP_Init+0x288>)
 8003284:	78c9      	ldrb	r1, [r1, #3]
 8003286:	430b      	orrs	r3, r1
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800328e:	431a      	orrs	r2, r3
 8003290:	4b7b      	ldr	r3, [pc, #492]	; (8003480 <MX_LWIP_Init+0x288>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	0619      	lsls	r1, r3, #24
 8003296:	4b7a      	ldr	r3, [pc, #488]	; (8003480 <MX_LWIP_Init+0x288>)
 8003298:	785b      	ldrb	r3, [r3, #1]
 800329a:	041b      	lsls	r3, r3, #16
 800329c:	4319      	orrs	r1, r3
 800329e:	4b78      	ldr	r3, [pc, #480]	; (8003480 <MX_LWIP_Init+0x288>)
 80032a0:	789b      	ldrb	r3, [r3, #2]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	430b      	orrs	r3, r1
 80032a6:	4976      	ldr	r1, [pc, #472]	; (8003480 <MX_LWIP_Init+0x288>)
 80032a8:	78c9      	ldrb	r1, [r1, #3]
 80032aa:	430b      	orrs	r3, r1
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80032b2:	431a      	orrs	r2, r3
 80032b4:	4b72      	ldr	r3, [pc, #456]	; (8003480 <MX_LWIP_Init+0x288>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	0619      	lsls	r1, r3, #24
 80032ba:	4b71      	ldr	r3, [pc, #452]	; (8003480 <MX_LWIP_Init+0x288>)
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	041b      	lsls	r3, r3, #16
 80032c0:	4319      	orrs	r1, r3
 80032c2:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <MX_LWIP_Init+0x288>)
 80032c4:	789b      	ldrb	r3, [r3, #2]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	430b      	orrs	r3, r1
 80032ca:	496d      	ldr	r1, [pc, #436]	; (8003480 <MX_LWIP_Init+0x288>)
 80032cc:	78c9      	ldrb	r1, [r1, #3]
 80032ce:	430b      	orrs	r3, r1
 80032d0:	0e1b      	lsrs	r3, r3, #24
 80032d2:	4313      	orrs	r3, r2
 80032d4:	4a6d      	ldr	r2, [pc, #436]	; (800348c <MX_LWIP_Init+0x294>)
 80032d6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80032d8:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <MX_LWIP_Init+0x28c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	061a      	lsls	r2, r3, #24
 80032de:	4b69      	ldr	r3, [pc, #420]	; (8003484 <MX_LWIP_Init+0x28c>)
 80032e0:	785b      	ldrb	r3, [r3, #1]
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	431a      	orrs	r2, r3
 80032e6:	4b67      	ldr	r3, [pc, #412]	; (8003484 <MX_LWIP_Init+0x28c>)
 80032e8:	789b      	ldrb	r3, [r3, #2]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	4313      	orrs	r3, r2
 80032ee:	4a65      	ldr	r2, [pc, #404]	; (8003484 <MX_LWIP_Init+0x28c>)
 80032f0:	78d2      	ldrb	r2, [r2, #3]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	061a      	lsls	r2, r3, #24
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <MX_LWIP_Init+0x28c>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	0619      	lsls	r1, r3, #24
 80032fc:	4b61      	ldr	r3, [pc, #388]	; (8003484 <MX_LWIP_Init+0x28c>)
 80032fe:	785b      	ldrb	r3, [r3, #1]
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	4319      	orrs	r1, r3
 8003304:	4b5f      	ldr	r3, [pc, #380]	; (8003484 <MX_LWIP_Init+0x28c>)
 8003306:	789b      	ldrb	r3, [r3, #2]
 8003308:	021b      	lsls	r3, r3, #8
 800330a:	430b      	orrs	r3, r1
 800330c:	495d      	ldr	r1, [pc, #372]	; (8003484 <MX_LWIP_Init+0x28c>)
 800330e:	78c9      	ldrb	r1, [r1, #3]
 8003310:	430b      	orrs	r3, r1
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003318:	431a      	orrs	r2, r3
 800331a:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <MX_LWIP_Init+0x28c>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	0619      	lsls	r1, r3, #24
 8003320:	4b58      	ldr	r3, [pc, #352]	; (8003484 <MX_LWIP_Init+0x28c>)
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	041b      	lsls	r3, r3, #16
 8003326:	4319      	orrs	r1, r3
 8003328:	4b56      	ldr	r3, [pc, #344]	; (8003484 <MX_LWIP_Init+0x28c>)
 800332a:	789b      	ldrb	r3, [r3, #2]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	430b      	orrs	r3, r1
 8003330:	4954      	ldr	r1, [pc, #336]	; (8003484 <MX_LWIP_Init+0x28c>)
 8003332:	78c9      	ldrb	r1, [r1, #3]
 8003334:	430b      	orrs	r3, r1
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800333c:	431a      	orrs	r2, r3
 800333e:	4b51      	ldr	r3, [pc, #324]	; (8003484 <MX_LWIP_Init+0x28c>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	0619      	lsls	r1, r3, #24
 8003344:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <MX_LWIP_Init+0x28c>)
 8003346:	785b      	ldrb	r3, [r3, #1]
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	4319      	orrs	r1, r3
 800334c:	4b4d      	ldr	r3, [pc, #308]	; (8003484 <MX_LWIP_Init+0x28c>)
 800334e:	789b      	ldrb	r3, [r3, #2]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	430b      	orrs	r3, r1
 8003354:	494b      	ldr	r1, [pc, #300]	; (8003484 <MX_LWIP_Init+0x28c>)
 8003356:	78c9      	ldrb	r1, [r1, #3]
 8003358:	430b      	orrs	r3, r1
 800335a:	0e1b      	lsrs	r3, r3, #24
 800335c:	4313      	orrs	r3, r2
 800335e:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <MX_LWIP_Init+0x298>)
 8003360:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003362:	4b49      	ldr	r3, [pc, #292]	; (8003488 <MX_LWIP_Init+0x290>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	061a      	lsls	r2, r3, #24
 8003368:	4b47      	ldr	r3, [pc, #284]	; (8003488 <MX_LWIP_Init+0x290>)
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	431a      	orrs	r2, r3
 8003370:	4b45      	ldr	r3, [pc, #276]	; (8003488 <MX_LWIP_Init+0x290>)
 8003372:	789b      	ldrb	r3, [r3, #2]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	4313      	orrs	r3, r2
 8003378:	4a43      	ldr	r2, [pc, #268]	; (8003488 <MX_LWIP_Init+0x290>)
 800337a:	78d2      	ldrb	r2, [r2, #3]
 800337c:	4313      	orrs	r3, r2
 800337e:	061a      	lsls	r2, r3, #24
 8003380:	4b41      	ldr	r3, [pc, #260]	; (8003488 <MX_LWIP_Init+0x290>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	0619      	lsls	r1, r3, #24
 8003386:	4b40      	ldr	r3, [pc, #256]	; (8003488 <MX_LWIP_Init+0x290>)
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	4319      	orrs	r1, r3
 800338e:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <MX_LWIP_Init+0x290>)
 8003390:	789b      	ldrb	r3, [r3, #2]
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	430b      	orrs	r3, r1
 8003396:	493c      	ldr	r1, [pc, #240]	; (8003488 <MX_LWIP_Init+0x290>)
 8003398:	78c9      	ldrb	r1, [r1, #3]
 800339a:	430b      	orrs	r3, r1
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033a2:	431a      	orrs	r2, r3
 80033a4:	4b38      	ldr	r3, [pc, #224]	; (8003488 <MX_LWIP_Init+0x290>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	0619      	lsls	r1, r3, #24
 80033aa:	4b37      	ldr	r3, [pc, #220]	; (8003488 <MX_LWIP_Init+0x290>)
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	4319      	orrs	r1, r3
 80033b2:	4b35      	ldr	r3, [pc, #212]	; (8003488 <MX_LWIP_Init+0x290>)
 80033b4:	789b      	ldrb	r3, [r3, #2]
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	430b      	orrs	r3, r1
 80033ba:	4933      	ldr	r1, [pc, #204]	; (8003488 <MX_LWIP_Init+0x290>)
 80033bc:	78c9      	ldrb	r1, [r1, #3]
 80033be:	430b      	orrs	r3, r1
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80033c6:	431a      	orrs	r2, r3
 80033c8:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <MX_LWIP_Init+0x290>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	0619      	lsls	r1, r3, #24
 80033ce:	4b2e      	ldr	r3, [pc, #184]	; (8003488 <MX_LWIP_Init+0x290>)
 80033d0:	785b      	ldrb	r3, [r3, #1]
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	4319      	orrs	r1, r3
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <MX_LWIP_Init+0x290>)
 80033d8:	789b      	ldrb	r3, [r3, #2]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	430b      	orrs	r3, r1
 80033de:	492a      	ldr	r1, [pc, #168]	; (8003488 <MX_LWIP_Init+0x290>)
 80033e0:	78c9      	ldrb	r1, [r1, #3]
 80033e2:	430b      	orrs	r3, r1
 80033e4:	0e1b      	lsrs	r3, r3, #24
 80033e6:	4313      	orrs	r3, r2
 80033e8:	4a2a      	ldr	r2, [pc, #168]	; (8003494 <MX_LWIP_Init+0x29c>)
 80033ea:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80033ec:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <MX_LWIP_Init+0x2a0>)
 80033ee:	9302      	str	r3, [sp, #8]
 80033f0:	4b2a      	ldr	r3, [pc, #168]	; (800349c <MX_LWIP_Init+0x2a4>)
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	2300      	movs	r3, #0
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4b26      	ldr	r3, [pc, #152]	; (8003494 <MX_LWIP_Init+0x29c>)
 80033fa:	4a25      	ldr	r2, [pc, #148]	; (8003490 <MX_LWIP_Init+0x298>)
 80033fc:	4923      	ldr	r1, [pc, #140]	; (800348c <MX_LWIP_Init+0x294>)
 80033fe:	4828      	ldr	r0, [pc, #160]	; (80034a0 <MX_LWIP_Init+0x2a8>)
 8003400:	f006 fe0c 	bl	800a01c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003404:	4826      	ldr	r0, [pc, #152]	; (80034a0 <MX_LWIP_Init+0x2a8>)
 8003406:	f006 ffbb 	bl	800a380 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <MX_LWIP_Init+0x2a8>)
 800340c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003410:	089b      	lsrs	r3, r3, #2
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800341c:	4820      	ldr	r0, [pc, #128]	; (80034a0 <MX_LWIP_Init+0x2a8>)
 800341e:	f006 ffbf 	bl	800a3a0 <netif_set_up>
 8003422:	e002      	b.n	800342a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003424:	481e      	ldr	r0, [pc, #120]	; (80034a0 <MX_LWIP_Init+0x2a8>)
 8003426:	f007 f827 	bl	800a478 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800342a:	491e      	ldr	r1, [pc, #120]	; (80034a4 <MX_LWIP_Init+0x2ac>)
 800342c:	481c      	ldr	r0, [pc, #112]	; (80034a0 <MX_LWIP_Init+0x2a8>)
 800342e:	f007 f8b9 	bl	800a5a4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8003432:	2300      	movs	r3, #0
 8003434:	623b      	str	r3, [r7, #32]
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800343a:	f107 0320 	add.w	r3, r7, #32
 800343e:	2101      	movs	r1, #1
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fd85 	bl	8003f50 <osSemaphoreCreate>
 8003446:	4602      	mov	r2, r0
 8003448:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <MX_LWIP_Init+0x2b0>)
 800344a:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800344c:	4b17      	ldr	r3, [pc, #92]	; (80034ac <MX_LWIP_Init+0x2b4>)
 800344e:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <MX_LWIP_Init+0x2a8>)
 8003450:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <MX_LWIP_Init+0x2b0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a15      	ldr	r2, [pc, #84]	; (80034ac <MX_LWIP_Init+0x2b4>)
 8003458:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <MX_LWIP_Init+0x2b8>)
 800345c:	1d3c      	adds	r4, r7, #4
 800345e:	461d      	mov	r5, r3
 8003460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003464:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	490f      	ldr	r1, [pc, #60]	; (80034ac <MX_LWIP_Init+0x2b4>)
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fc70 	bl	8003d56 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bdb0      	pop	{r4, r5, r7, pc}
 800347e:	bf00      	nop
 8003480:	20004420 	.word	0x20004420
 8003484:	2000441c 	.word	0x2000441c
 8003488:	200043e0 	.word	0x200043e0
 800348c:	20004418 	.word	0x20004418
 8003490:	20004424 	.word	0x20004424
 8003494:	20004428 	.word	0x20004428
 8003498:	08009425 	.word	0x08009425
 800349c:	08003ae5 	.word	0x08003ae5
 80034a0:	200043e4 	.word	0x200043e4
 80034a4:	08003bc9 	.word	0x08003bc9
 80034a8:	20000460 	.word	0x20000460
 80034ac:	200043d8 	.word	0x200043d8
 80034b0:	08015c0c 	.word	0x08015c0c

080034b4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <HAL_ETH_MspInit+0x148>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f040 808d 	bne.w	80035f2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80034d8:	2300      	movs	r3, #0
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	4b48      	ldr	r3, [pc, #288]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	4a47      	ldr	r2, [pc, #284]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 80034e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034e6:	6313      	str	r3, [r2, #48]	; 0x30
 80034e8:	4b45      	ldr	r3, [pc, #276]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f0:	623b      	str	r3, [r7, #32]
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	2300      	movs	r3, #0
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	4a40      	ldr	r2, [pc, #256]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 80034fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003502:	6313      	str	r3, [r2, #48]	; 0x30
 8003504:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	4b3a      	ldr	r3, [pc, #232]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	4a39      	ldr	r2, [pc, #228]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 800351a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800351e:	6313      	str	r3, [r2, #48]	; 0x30
 8003520:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	4b33      	ldr	r3, [pc, #204]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4a32      	ldr	r2, [pc, #200]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 8003536:	f043 0304 	orr.w	r3, r3, #4
 800353a:	6313      	str	r3, [r2, #48]	; 0x30
 800353c:	4b30      	ldr	r3, [pc, #192]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	4b2c      	ldr	r3, [pc, #176]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	4a2b      	ldr	r2, [pc, #172]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6313      	str	r3, [r2, #48]	; 0x30
 8003558:	4b29      	ldr	r3, [pc, #164]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4a24      	ldr	r2, [pc, #144]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 800356e:	f043 0302 	orr.w	r3, r3, #2
 8003572:	6313      	str	r3, [r2, #48]	; 0x30
 8003574:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_ETH_MspInit+0x14c>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003580:	2332      	movs	r3, #50	; 0x32
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003590:	230b      	movs	r3, #11
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003598:	4619      	mov	r1, r3
 800359a:	481a      	ldr	r0, [pc, #104]	; (8003604 <HAL_ETH_MspInit+0x150>)
 800359c:	f7fe fdd4 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80035a0:	2386      	movs	r3, #134	; 0x86
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	2302      	movs	r3, #2
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ac:	2303      	movs	r3, #3
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035b0:	230b      	movs	r3, #11
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b8:	4619      	mov	r1, r3
 80035ba:	4813      	ldr	r0, [pc, #76]	; (8003608 <HAL_ETH_MspInit+0x154>)
 80035bc:	f7fe fdc4 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80035c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ce:	2303      	movs	r3, #3
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035d2:	230b      	movs	r3, #11
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035da:	4619      	mov	r1, r3
 80035dc:	480b      	ldr	r0, [pc, #44]	; (800360c <HAL_ETH_MspInit+0x158>)
 80035de:	f7fe fdb3 	bl	8002148 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80035e2:	2200      	movs	r2, #0
 80035e4:	2105      	movs	r1, #5
 80035e6:	203d      	movs	r0, #61	; 0x3d
 80035e8:	f7fd fbde 	bl	8000da8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80035ec:	203d      	movs	r0, #61	; 0x3d
 80035ee:	f7fd fbf7 	bl	8000de0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80035f2:	bf00      	nop
 80035f4:	3738      	adds	r7, #56	; 0x38
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40028000 	.word	0x40028000
 8003600:	40023800 	.word	0x40023800
 8003604:	40020800 	.word	0x40020800
 8003608:	40020000 	.word	0x40020000
 800360c:	40020400 	.word	0x40020400

08003610 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <HAL_ETH_RxCpltCallback+0x1c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fd19 	bl	8004054 <osSemaphoreRelease>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000464 	.word	0x20000464

08003630 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003630:	b5b0      	push	{r4, r5, r7, lr}
 8003632:	b090      	sub	sp, #64	; 0x40
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800363c:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <low_level_init+0x190>)
 800363e:	4a61      	ldr	r2, [pc, #388]	; (80037c4 <low_level_init+0x194>)
 8003640:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003642:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <low_level_init+0x190>)
 8003644:	2201      	movs	r2, #1
 8003646:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003648:	4b5d      	ldr	r3, [pc, #372]	; (80037c0 <low_level_init+0x190>)
 800364a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800364e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003650:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <low_level_init+0x190>)
 8003652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003656:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003658:	4b59      	ldr	r3, [pc, #356]	; (80037c0 <low_level_init+0x190>)
 800365a:	2201      	movs	r2, #1
 800365c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800365e:	2300      	movs	r3, #0
 8003660:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800366a:	23e1      	movs	r3, #225	; 0xe1
 800366c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800367c:	2300      	movs	r3, #0
 800367e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8003682:	4a4f      	ldr	r2, [pc, #316]	; (80037c0 <low_level_init+0x190>)
 8003684:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003688:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800368a:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <low_level_init+0x190>)
 800368c:	2201      	movs	r2, #1
 800368e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003690:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <low_level_init+0x190>)
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003696:	4b4a      	ldr	r3, [pc, #296]	; (80037c0 <low_level_init+0x190>)
 8003698:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800369c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800369e:	4848      	ldr	r0, [pc, #288]	; (80037c0 <low_level_init+0x190>)
 80036a0:	f7fd fbac 	bl	8000dfc <HAL_ETH_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80036aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d108      	bne.n	80036c4 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80036c4:	2304      	movs	r3, #4
 80036c6:	4a40      	ldr	r2, [pc, #256]	; (80037c8 <low_level_init+0x198>)
 80036c8:	4940      	ldr	r1, [pc, #256]	; (80037cc <low_level_init+0x19c>)
 80036ca:	483d      	ldr	r0, [pc, #244]	; (80037c0 <low_level_init+0x190>)
 80036cc:	f7fd fd34 	bl	8001138 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80036d0:	2304      	movs	r3, #4
 80036d2:	4a3f      	ldr	r2, [pc, #252]	; (80037d0 <low_level_init+0x1a0>)
 80036d4:	493f      	ldr	r1, [pc, #252]	; (80037d4 <low_level_init+0x1a4>)
 80036d6:	483a      	ldr	r0, [pc, #232]	; (80037c0 <low_level_init+0x190>)
 80036d8:	f7fd fd97 	bl	800120a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2206      	movs	r2, #6
 80036e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <low_level_init+0x190>)
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	781a      	ldrb	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80036f0:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <low_level_init+0x190>)
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	785a      	ldrb	r2, [r3, #1]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80036fc:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <low_level_init+0x190>)
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	789a      	ldrb	r2, [r3, #2]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003708:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <low_level_init+0x190>)
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	78da      	ldrb	r2, [r3, #3]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <low_level_init+0x190>)
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	791a      	ldrb	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <low_level_init+0x190>)
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	795a      	ldrb	r2, [r3, #5]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003732:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800373a:	f043 030a 	orr.w	r3, r3, #10
 800373e:	b2da      	uxtb	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8003746:	2300      	movs	r3, #0
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	2300      	movs	r3, #0
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800374e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f000 fbfb 	bl	8003f50 <osSemaphoreCreate>
 800375a:	4602      	mov	r2, r0
 800375c:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <low_level_init+0x1a8>)
 800375e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003760:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <low_level_init+0x1ac>)
 8003762:	f107 040c 	add.w	r4, r7, #12
 8003766:	461d      	mov	r5, r3
 8003768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800376a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800376c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003774:	f107 030c 	add.w	r3, r7, #12
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 faeb 	bl	8003d56 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003780:	480f      	ldr	r0, [pc, #60]	; (80037c0 <low_level_init+0x190>)
 8003782:	f7fe f86a 	bl	800185a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003786:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800378a:	461a      	mov	r2, r3
 800378c:	211d      	movs	r1, #29
 800378e:	480c      	ldr	r0, [pc, #48]	; (80037c0 <low_level_init+0x190>)
 8003790:	f7fd ff95 	bl	80016be <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	f043 030b 	orr.w	r3, r3, #11
 800379a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800379c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379e:	461a      	mov	r2, r3
 80037a0:	211d      	movs	r1, #29
 80037a2:	4807      	ldr	r0, [pc, #28]	; (80037c0 <low_level_init+0x190>)
 80037a4:	f7fd fff3 	bl	800178e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80037a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037ac:	461a      	mov	r2, r3
 80037ae:	211d      	movs	r1, #29
 80037b0:	4803      	ldr	r0, [pc, #12]	; (80037c0 <low_level_init+0x190>)
 80037b2:	f7fd ff84 	bl	80016be <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80037b6:	bf00      	nop
 80037b8:	3740      	adds	r7, #64	; 0x40
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bdb0      	pop	{r4, r5, r7, pc}
 80037be:	bf00      	nop
 80037c0:	20005cfc 	.word	0x20005cfc
 80037c4:	40028000 	.word	0x40028000
 80037c8:	20005d44 	.word	0x20005d44
 80037cc:	2000442c 	.word	0x2000442c
 80037d0:	200044ac 	.word	0x200044ac
 80037d4:	20005c7c 	.word	0x20005c7c
 80037d8:	20000464 	.word	0x20000464
 80037dc:	08015c30 	.word	0x08015c30

080037e0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80037ea:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <low_level_output+0x138>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003802:	4b45      	ldr	r3, [pc, #276]	; (8003918 <low_level_output+0x138>)
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	623b      	str	r3, [r7, #32]
 8003810:	e05a      	b.n	80038c8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	da03      	bge.n	8003822 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800381a:	23f8      	movs	r3, #248	; 0xf8
 800381c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003820:	e05c      	b.n	80038dc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	895b      	ldrh	r3, [r3, #10]
 8003826:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800382c:	e02f      	b.n	800388e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	18d0      	adds	r0, r2, r3
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	18d1      	adds	r1, r2, r3
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003842:	3304      	adds	r3, #4
 8003844:	461a      	mov	r2, r3
 8003846:	f011 fa68 	bl	8014d1a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	da03      	bge.n	8003860 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003858:	23f8      	movs	r3, #248	; 0xf8
 800385a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800385e:	e03d      	b.n	80038dc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4413      	add	r3, r2
 800386c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003870:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800387c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003888:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003898:	4293      	cmp	r3, r2
 800389a:	d8c8      	bhi.n	800382e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	18d0      	adds	r0, r2, r3
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4413      	add	r3, r2
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4619      	mov	r1, r3
 80038ae:	f011 fa34 	bl	8014d1a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1a1      	bne.n	8003812 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80038ce:	6979      	ldr	r1, [r7, #20]
 80038d0:	4811      	ldr	r0, [pc, #68]	; (8003918 <low_level_output+0x138>)
 80038d2:	f7fd fd07 	bl	80012e4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <low_level_output+0x138>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e4:	3314      	adds	r3, #20
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <low_level_output+0x138>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f8:	3314      	adds	r3, #20
 80038fa:	2220      	movs	r2, #32
 80038fc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <low_level_output+0x138>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003906:	3304      	adds	r3, #4
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800390c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003910:	4618      	mov	r0, r3
 8003912:	3728      	adds	r7, #40	; 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20005cfc 	.word	0x20005cfc

0800391c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08c      	sub	sp, #48	; 0x30
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003924:	2300      	movs	r3, #0
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003928:	2300      	movs	r3, #0
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800393c:	2300      	movs	r3, #0
 800393e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8003940:	484f      	ldr	r0, [pc, #316]	; (8003a80 <low_level_input+0x164>)
 8003942:	f7fd fdb9 	bl	80014b8 <HAL_ETH_GetReceivedFrame_IT>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <low_level_input+0x34>

    return NULL;
 800394c:	2300      	movs	r3, #0
 800394e:	e092      	b.n	8003a76 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003950:	4b4b      	ldr	r3, [pc, #300]	; (8003a80 <low_level_input+0x164>)
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003956:	4b4a      	ldr	r3, [pc, #296]	; (8003a80 <low_level_input+0x164>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800395c:	89fb      	ldrh	r3, [r7, #14]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003962:	89fb      	ldrh	r3, [r7, #14]
 8003964:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003968:	4619      	mov	r1, r3
 800396a:	2000      	movs	r0, #0
 800396c:	f006 fee4 	bl	800a738 <pbuf_alloc>
 8003970:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d04b      	beq.n	8003a10 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003978:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <low_level_input+0x164>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	62bb      	str	r3, [r7, #40]	; 0x28
 8003986:	e040      	b.n	8003a0a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	895b      	ldrh	r3, [r3, #10]
 800398c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003992:	e021      	b.n	80039d8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	18d0      	adds	r0, r2, r3
 800399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	18d1      	adds	r1, r2, r3
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80039a8:	3304      	adds	r3, #4
 80039aa:	461a      	mov	r2, r3
 80039ac:	f011 f9b5 	bl	8014d1a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	4413      	add	r3, r2
 80039c2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80039c6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80039d2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d8d6      	bhi.n	8003994 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	18d0      	adds	r0, r2, r3
 80039ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4619      	mov	r1, r3
 80039f8:	f011 f98f 	bl	8014d1a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	4413      	add	r3, r2
 8003a02:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1bb      	bne.n	8003988 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <low_level_input+0x164>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	e00b      	b.n	8003a34 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	3301      	adds	r3, #1
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <low_level_input+0x164>)
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d3ee      	bcc.n	8003a1c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <low_level_input+0x164>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <low_level_input+0x164>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a4c:	3314      	adds	r3, #20
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00d      	beq.n	8003a74 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <low_level_input+0x164>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a60:	3314      	adds	r3, #20
 8003a62:	2280      	movs	r2, #128	; 0x80
 8003a64:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <low_level_input+0x164>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6e:	3308      	adds	r3, #8
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3730      	adds	r7, #48	; 0x30
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20005cfc 	.word	0x20005cfc

08003a84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <ethernetif_input+0x58>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f04f 31ff 	mov.w	r1, #4294967295
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fa8d 	bl	8003fb8 <osSemaphoreWait>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f5      	bne.n	8003a90 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8003aa4:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <ethernetif_input+0x5c>)
 8003aa6:	f011 f885 	bl	8014bb4 <sys_mutex_lock>
        p = low_level_input( netif );
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7ff ff36 	bl	800391c <low_level_input>
 8003ab0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	68f9      	ldr	r1, [r7, #12]
 8003abe:	68b8      	ldr	r0, [r7, #8]
 8003ac0:	4798      	blx	r3
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8003ac8:	68b8      	ldr	r0, [r7, #8]
 8003aca:	f007 f915 	bl	800acf8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8003ace:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <ethernetif_input+0x5c>)
 8003ad0:	f011 f87f 	bl	8014bd2 <sys_mutex_unlock>
      } while(p!=NULL);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e4      	bne.n	8003aa4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003ada:	e7d9      	b.n	8003a90 <ethernetif_input+0xc>
 8003adc:	20000464 	.word	0x20000464
 8003ae0:	20007554 	.word	0x20007554

08003ae4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <ethernetif_init+0x1c>
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <ethernetif_init+0x48>)
 8003af4:	f240 222b 	movw	r2, #555	; 0x22b
 8003af8:	490d      	ldr	r1, [pc, #52]	; (8003b30 <ethernetif_init+0x4c>)
 8003afa:	480e      	ldr	r0, [pc, #56]	; (8003b34 <ethernetif_init+0x50>)
 8003afc:	f011 f920 	bl	8014d40 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2273      	movs	r2, #115	; 0x73
 8003b04:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2274      	movs	r2, #116	; 0x74
 8003b0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <ethernetif_init+0x54>)
 8003b14:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <ethernetif_init+0x58>)
 8003b1a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff fd87 	bl	8003630 <low_level_init>

  return ERR_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	08015c4c 	.word	0x08015c4c
 8003b30:	08015c68 	.word	0x08015c68
 8003b34:	08015c78 	.word	0x08015c78
 8003b38:	08012949 	.word	0x08012949
 8003b3c:	080037e1 	.word	0x080037e1

08003b40 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003b44:	f7fd f84a 	bl	8000bdc <HAL_GetTick>
 8003b48:	4603      	mov	r3, r0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003b60:	f107 0308 	add.w	r3, r7, #8
 8003b64:	461a      	mov	r2, r3
 8003b66:	2101      	movs	r1, #1
 8003b68:	4816      	ldr	r0, [pc, #88]	; (8003bc4 <ethernetif_set_link+0x74>)
 8003b6a:	f7fd fda8 	bl	80016be <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d108      	bne.n	8003b98 <ethernetif_set_link+0x48>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d005      	beq.n	8003b98 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f006 fca3 	bl	800a4dc <netif_set_link_up>
 8003b96:	e011      	b.n	8003bbc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <ethernetif_set_link+0x6c>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f006 fcc4 	bl	800a544 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8003bbc:	20c8      	movs	r0, #200	; 0xc8
 8003bbe:	f000 f916 	bl	8003dee <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003bc2:	e7cd      	b.n	8003b60 <ethernetif_set_link+0x10>
 8003bc4:	20005cfc 	.word	0x20005cfc

08003bc8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d05d      	beq.n	8003ca6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003bea:	4b34      	ldr	r3, [pc, #208]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d03f      	beq.n	8003c72 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8003bf2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4830      	ldr	r0, [pc, #192]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003bfa:	f7fd fdc8 	bl	800178e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8003bfe:	f7fc ffed 	bl	8000bdc <HAL_GetTick>
 8003c02:	4603      	mov	r3, r0
 8003c04:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003c06:	f107 0308 	add.w	r3, r7, #8
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	482b      	ldr	r0, [pc, #172]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c10:	f7fd fd55 	bl	80016be <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003c14:	f7fc ffe2 	bl	8000bdc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c22:	d828      	bhi.n	8003c76 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0eb      	beq.n	8003c06 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003c2e:	f107 0308 	add.w	r3, r7, #8
 8003c32:	461a      	mov	r2, r3
 8003c34:	211f      	movs	r1, #31
 8003c36:	4821      	ldr	r0, [pc, #132]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c38:	f7fd fd41 	bl	80016be <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d004      	beq.n	8003c50 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	e002      	b.n	8003c56 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003c60:	4b16      	ldr	r3, [pc, #88]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
 8003c66:	e016      	b.n	8003c96 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003c68:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	e011      	b.n	8003c96 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <ethernetif_update_config+0xb0>
          goto error;
 8003c76:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	08db      	lsrs	r3, r3, #3
 8003c7e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003c80:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	480a      	ldr	r0, [pc, #40]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c92:	f7fd fd7c 	bl	800178e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003c96:	2100      	movs	r1, #0
 8003c98:	4808      	ldr	r0, [pc, #32]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003c9a:	f7fd fe3d 	bl	8001918 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003c9e:	4807      	ldr	r0, [pc, #28]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003ca0:	f7fd fddb 	bl	800185a <HAL_ETH_Start>
 8003ca4:	e002      	b.n	8003cac <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003ca6:	4805      	ldr	r0, [pc, #20]	; (8003cbc <ethernetif_update_config+0xf4>)
 8003ca8:	f7fd fe06 	bl	80018b8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f807 	bl	8003cc0 <ethernetif_notify_conn_changed>
}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20005cfc 	.word	0x20005cfc

08003cc0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ce6:	2b84      	cmp	r3, #132	; 0x84
 8003ce8:	d005      	beq.n	8003cf6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003cea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3303      	adds	r3, #3
 8003cf4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d0a:	f3ef 8305 	mrs	r3, IPSR
 8003d0e:	607b      	str	r3, [r7, #4]
  return(result);
 8003d10:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d2c:	f001 fd08 	bl	8005740 <vTaskStartScheduler>
  
  return osOK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003d3a:	f7ff ffe3 	bl	8003d04 <inHandlerMode>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003d44:	f001 fe14 	bl	8005970 <xTaskGetTickCountFromISR>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	e002      	b.n	8003d52 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003d4c:	f001 fe00 	bl	8005950 <xTaskGetTickCount>
 8003d50:	4603      	mov	r3, r0
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d58:	b089      	sub	sp, #36	; 0x24
 8003d5a:	af04      	add	r7, sp, #16
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <osThreadCreate+0x54>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01c      	beq.n	8003daa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685c      	ldr	r4, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681d      	ldr	r5, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691e      	ldr	r6, [r3, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff ffa6 	bl	8003cd4 <makeFreeRtosPriority>
 8003d88:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d92:	9202      	str	r2, [sp, #8]
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	9100      	str	r1, [sp, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4632      	mov	r2, r6
 8003d9c:	4629      	mov	r1, r5
 8003d9e:	4620      	mov	r0, r4
 8003da0:	f001 fb0a 	bl	80053b8 <xTaskCreateStatic>
 8003da4:	4603      	mov	r3, r0
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	e01c      	b.n	8003de4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685c      	ldr	r4, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003db6:	b29e      	uxth	r6, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ff88 	bl	8003cd4 <makeFreeRtosPriority>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	f107 030c 	add.w	r3, r7, #12
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	9200      	str	r2, [sp, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	4632      	mov	r2, r6
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f001 fb49 	bl	800546c <xTaskCreate>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003de4:	68fb      	ldr	r3, [r7, #12]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <osDelay+0x16>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	e000      	b.n	8003e06 <osDelay+0x18>
 8003e04:	2301      	movs	r3, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 fc66 	bl	80056d8 <vTaskDelay>
  
  return osOK;
 8003e0c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	f000 fc80 	bl	8004732 <xQueueCreateMutexStatic>
 8003e32:	4603      	mov	r3, r0
 8003e34:	e003      	b.n	8003e3e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003e36:	2001      	movs	r0, #1
 8003e38:	f000 fc63 	bl	8004702 <xQueueCreateMutex>
 8003e3c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <osMutexWait+0x18>
    return osErrorParameter;
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	e03a      	b.n	8003ed6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d103      	bne.n	8003e74 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	e009      	b.n	8003e88 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d006      	beq.n	8003e88 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <osMutexWait+0x40>
      ticks = 1;
 8003e84:	2301      	movs	r3, #1
 8003e86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003e88:	f7ff ff3c 	bl	8003d04 <inHandlerMode>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d017      	beq.n	8003ec2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003e92:	f107 0308 	add.w	r3, r7, #8
 8003e96:	461a      	mov	r2, r3
 8003e98:	2100      	movs	r1, #0
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f001 f860 	bl	8004f60 <xQueueReceiveFromISR>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d001      	beq.n	8003eaa <osMutexWait+0x62>
      return osErrorOS;
 8003ea6:	23ff      	movs	r3, #255	; 0xff
 8003ea8:	e015      	b.n	8003ed6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d011      	beq.n	8003ed4 <osMutexWait+0x8c>
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <osMutexWait+0x98>)
 8003eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	e008      	b.n	8003ed4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 ff43 	bl	8004d50 <xQueueSemaphoreTake>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d001      	beq.n	8003ed4 <osMutexWait+0x8c>
    return osErrorOS;
 8003ed0:	23ff      	movs	r3, #255	; 0xff
 8003ed2:	e000      	b.n	8003ed6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003ef4:	f7ff ff06 	bl	8003d04 <inHandlerMode>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003efe:	f107 0308 	add.w	r3, r7, #8
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fdbd 	bl	8004a84 <xQueueGiveFromISR>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d001      	beq.n	8003f14 <osMutexRelease+0x30>
      return osErrorOS;
 8003f10:	23ff      	movs	r3, #255	; 0xff
 8003f12:	e017      	b.n	8003f44 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d013      	beq.n	8003f42 <osMutexRelease+0x5e>
 8003f1a:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <osMutexRelease+0x68>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	e00a      	b.n	8003f42 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fc18 	bl	8004768 <xQueueGenericSend>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d001      	beq.n	8003f42 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003f3e:	23ff      	movs	r3, #255	; 0xff
 8003f40:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d010      	beq.n	8003f84 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d10b      	bne.n	8003f80 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	2200      	movs	r2, #0
 8003f74:	2100      	movs	r1, #0
 8003f76:	2001      	movs	r0, #1
 8003f78:	f000 fad8 	bl	800452c <xQueueGenericCreateStatic>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e016      	b.n	8003fae <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e014      	b.n	8003fae <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d110      	bne.n	8003fac <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f000 fb3f 	bl	8004612 <xQueueGenericCreate>
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <osSemaphoreCreate+0x58>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fbe0 	bl	8004768 <xQueueGenericSend>
      return sema;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	e000      	b.n	8003fae <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003fac:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	e03a      	b.n	8004046 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d103      	bne.n	8003fe4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e009      	b.n	8003ff8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <osSemaphoreWait+0x40>
      ticks = 1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003ff8:	f7ff fe84 	bl	8003d04 <inHandlerMode>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d017      	beq.n	8004032 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004002:	f107 0308 	add.w	r3, r7, #8
 8004006:	461a      	mov	r2, r3
 8004008:	2100      	movs	r1, #0
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 ffa8 	bl	8004f60 <xQueueReceiveFromISR>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004016:	23ff      	movs	r3, #255	; 0xff
 8004018:	e015      	b.n	8004046 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d011      	beq.n	8004044 <osSemaphoreWait+0x8c>
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <osSemaphoreWait+0x98>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	e008      	b.n	8004044 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fe8b 	bl	8004d50 <xQueueSemaphoreTake>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d001      	beq.n	8004044 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004040:	23ff      	movs	r3, #255	; 0xff
 8004042:	e000      	b.n	8004046 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004064:	f7ff fe4e 	bl	8003d04 <inHandlerMode>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fd05 	bl	8004a84 <xQueueGiveFromISR>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004080:	23ff      	movs	r3, #255	; 0xff
 8004082:	e017      	b.n	80040b4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d013      	beq.n	80040b2 <osSemaphoreRelease+0x5e>
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <osSemaphoreRelease+0x68>)
 800408c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	e00a      	b.n	80040b2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800409c:	2300      	movs	r3, #0
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fb60 	bl	8004768 <xQueueGenericSend>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80040ae:	23ff      	movs	r3, #255	; 0xff
 80040b0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80040c8:	f7ff fe1c 	bl	8003d04 <inHandlerMode>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80040d2:	2382      	movs	r3, #130	; 0x82
 80040d4:	e003      	b.n	80040de <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fff9 	bl	80050ce <vQueueDelete>

  return osOK; 
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80040e6:	b590      	push	{r4, r7, lr}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af02      	add	r7, sp, #8
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d012      	beq.n	800411e <osMessageCreate+0x38>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00e      	beq.n	800411e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68dc      	ldr	r4, [r3, #12]
 8004110:	2300      	movs	r3, #0
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4623      	mov	r3, r4
 8004116:	f000 fa09 	bl	800452c <xQueueGenericCreateStatic>
 800411a:	4603      	mov	r3, r0
 800411c:	e008      	b.n	8004130 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	4619      	mov	r1, r3
 800412a:	f000 fa72 	bl	8004612 <xQueueGenericCreate>
 800412e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bd90      	pop	{r4, r7, pc}

08004138 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <osMessagePut+0x1e>
    ticks = 1;
 8004152:	2301      	movs	r3, #1
 8004154:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004156:	f7ff fdd5 	bl	8003d04 <inHandlerMode>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d018      	beq.n	8004192 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004160:	f107 0210 	add.w	r2, r7, #16
 8004164:	f107 0108 	add.w	r1, r7, #8
 8004168:	2300      	movs	r3, #0
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fbf6 	bl	800495c <xQueueGenericSendFromISR>
 8004170:	4603      	mov	r3, r0
 8004172:	2b01      	cmp	r3, #1
 8004174:	d001      	beq.n	800417a <osMessagePut+0x42>
      return osErrorOS;
 8004176:	23ff      	movs	r3, #255	; 0xff
 8004178:	e018      	b.n	80041ac <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d014      	beq.n	80041aa <osMessagePut+0x72>
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <osMessagePut+0x7c>)
 8004182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004186:	601a      	str	r2, [r3, #0]
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	e00b      	b.n	80041aa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004192:	f107 0108 	add.w	r1, r7, #8
 8004196:	2300      	movs	r3, #0
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fae4 	bl	8004768 <xQueueGenericSend>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d001      	beq.n	80041aa <osMessagePut+0x72>
      return osErrorOS;
 80041a6:	23ff      	movs	r3, #255	; 0xff
 80041a8:	e000      	b.n	80041ac <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b08b      	sub	sp, #44	; 0x2c
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	617b      	str	r3, [r7, #20]
    return event;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	461c      	mov	r4, r3
 80041da:	f107 0314 	add.w	r3, r7, #20
 80041de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80041e6:	e054      	b.n	8004292 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f6:	d103      	bne.n	8004200 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e009      	b.n	8004214 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d006      	beq.n	8004214 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <osMessageGet+0x5c>
      ticks = 1;
 8004210:	2301      	movs	r3, #1
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004214:	f7ff fd76 	bl	8003d04 <inHandlerMode>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01c      	beq.n	8004258 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800421e:	f107 0220 	add.w	r2, r7, #32
 8004222:	f107 0314 	add.w	r3, r7, #20
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	68b8      	ldr	r0, [r7, #8]
 800422c:	f000 fe98 	bl	8004f60 <xQueueReceiveFromISR>
 8004230:	4603      	mov	r3, r0
 8004232:	2b01      	cmp	r3, #1
 8004234:	d102      	bne.n	800423c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004236:	2310      	movs	r3, #16
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e001      	b.n	8004240 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01d      	beq.n	8004282 <osMessageGet+0xca>
 8004246:	4b15      	ldr	r3, [pc, #84]	; (800429c <osMessageGet+0xe4>)
 8004248:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	e014      	b.n	8004282 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	3304      	adds	r3, #4
 800425e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004260:	4619      	mov	r1, r3
 8004262:	68b8      	ldr	r0, [r7, #8]
 8004264:	f000 fc98 	bl	8004b98 <xQueueReceive>
 8004268:	4603      	mov	r3, r0
 800426a:	2b01      	cmp	r3, #1
 800426c:	d102      	bne.n	8004274 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800426e:	2310      	movs	r3, #16
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	e006      	b.n	8004282 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <osMessageGet+0xc6>
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <osMessageGet+0xc8>
 800427e:	2340      	movs	r3, #64	; 0x40
 8004280:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	461c      	mov	r4, r3
 8004286:	f107 0314 	add.w	r3, r7, #20
 800428a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800428e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	372c      	adds	r7, #44	; 0x2c
 8004296:	46bd      	mov	sp, r7
 8004298:	bd90      	pop	{r4, r7, pc}
 800429a:	bf00      	nop
 800429c:	e000ed04 	.word	0xe000ed04

080042a0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80042a8:	f7ff fd2c 	bl	8003d04 <inHandlerMode>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 feee 	bl	8005094 <uxQueueMessagesWaitingFromISR>
 80042b8:	4603      	mov	r3, r0
 80042ba:	e003      	b.n	80042c4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fecc 	bl	800505a <uxQueueMessagesWaiting>
 80042c2:	4603      	mov	r3, r0
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80042d4:	f7ff fd16 	bl	8003d04 <inHandlerMode>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <osMessageDelete+0x16>
    return osErrorISR;
 80042de:	2382      	movs	r3, #130	; 0x82
 80042e0:	e003      	b.n	80042ea <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fef3 	bl	80050ce <vQueueDelete>

  return osOK; 
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f103 0208 	add.w	r2, r3, #8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f04f 32ff 	mov.w	r2, #4294967295
 800430a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f103 0208 	add.w	r2, r3, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f103 0208 	add.w	r2, r3, #8
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]
}
 8004388:	bf00      	nop
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	d103      	bne.n	80043b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	e00c      	b.n	80043ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3308      	adds	r3, #8
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e002      	b.n	80043c2 <vListInsert+0x2e>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	60fb      	str	r3, [r7, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d2f6      	bcs.n	80043bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
}
 80043fa:	bf00      	nop
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6892      	ldr	r2, [r2, #8]
 800441c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6852      	ldr	r2, [r2, #4]
 8004426:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	429a      	cmp	r2, r3
 8004430:	d103      	bne.n	800443a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1e5a      	subs	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	e7fe      	b.n	8004482 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004484:	f002 f8ca 	bl	800661c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	68f9      	ldr	r1, [r7, #12]
 8004492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004494:	fb01 f303 	mul.w	r3, r1, r3
 8004498:	441a      	add	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b4:	3b01      	subs	r3, #1
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	441a      	add	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	22ff      	movs	r2, #255	; 0xff
 80044c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	22ff      	movs	r2, #255	; 0xff
 80044d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d114      	bne.n	8004504 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01a      	beq.n	8004518 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3310      	adds	r3, #16
 80044e6:	4618      	mov	r0, r3
 80044e8:	f001 fb8a 	bl	8005c00 <xTaskRemoveFromEventList>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <xQueueGenericReset+0xcc>)
 80044f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	e009      	b.n	8004518 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3310      	adds	r3, #16
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fef2 	bl	80042f2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3324      	adds	r3, #36	; 0x24
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff feed 	bl	80042f2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004518:	f002 f8ae 	bl	8006678 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800451c:	2301      	movs	r3, #1
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08e      	sub	sp, #56	; 0x38
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <xQueueGenericCreateStatic+0x28>
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	62bb      	str	r3, [r7, #40]	; 0x28
 8004552:	e7fe      	b.n	8004552 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <xQueueGenericCreateStatic+0x42>
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	e7fe      	b.n	800456c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <xQueueGenericCreateStatic+0x4e>
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <xQueueGenericCreateStatic+0x52>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <xQueueGenericCreateStatic+0x54>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d109      	bne.n	8004598 <xQueueGenericCreateStatic+0x6c>
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	623b      	str	r3, [r7, #32]
 8004596:	e7fe      	b.n	8004596 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <xQueueGenericCreateStatic+0x78>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <xQueueGenericCreateStatic+0x7c>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <xQueueGenericCreateStatic+0x7e>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <xQueueGenericCreateStatic+0x96>
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	61fb      	str	r3, [r7, #28]
 80045c0:	e7fe      	b.n	80045c0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045c2:	2348      	movs	r3, #72	; 0x48
 80045c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b48      	cmp	r3, #72	; 0x48
 80045ca:	d009      	beq.n	80045e0 <xQueueGenericCreateStatic+0xb4>
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	e7fe      	b.n	80045de <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f844 	bl	8004690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800460a:	4618      	mov	r0, r3
 800460c:	3730      	adds	r7, #48	; 0x30
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004612:	b580      	push	{r7, lr}
 8004614:	b08a      	sub	sp, #40	; 0x28
 8004616:	af02      	add	r7, sp, #8
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	4613      	mov	r3, r2
 800461e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <xQueueGenericCreate+0x28>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	e7fe      	b.n	8004638 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	e004      	b.n	8004650 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	3348      	adds	r3, #72	; 0x48
 8004654:	4618      	mov	r0, r3
 8004656:	f002 f8fb 	bl	8006850 <pvPortMalloc>
 800465a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d011      	beq.n	8004686 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	3348      	adds	r3, #72	; 0x48
 800466a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004674:	79fa      	ldrb	r2, [r7, #7]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	4613      	mov	r3, r2
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f805 	bl	8004690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004686:	69bb      	ldr	r3, [r7, #24]
	}
 8004688:	4618      	mov	r0, r3
 800468a:	3720      	adds	r7, #32
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d103      	bne.n	80046ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e002      	b.n	80046b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046be:	2101      	movs	r1, #1
 80046c0:	69b8      	ldr	r0, [r7, #24]
 80046c2:	f7ff fecb 	bl	800445c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80046ee:	2300      	movs	r3, #0
 80046f0:	2200      	movs	r2, #0
 80046f2:	2100      	movs	r1, #0
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f837 	bl	8004768 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	4603      	mov	r3, r0
 800470a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800470c:	2301      	movs	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	2300      	movs	r3, #0
 8004712:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	461a      	mov	r2, r3
 8004718:	6939      	ldr	r1, [r7, #16]
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f7ff ff79 	bl	8004612 <xQueueGenericCreate>
 8004720:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff ffd3 	bl	80046ce <prvInitialiseMutex>

		return xNewQueue;
 8004728:	68fb      	ldr	r3, [r7, #12]
	}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004732:	b580      	push	{r7, lr}
 8004734:	b088      	sub	sp, #32
 8004736:	af02      	add	r7, sp, #8
 8004738:	4603      	mov	r3, r0
 800473a:	6039      	str	r1, [r7, #0]
 800473c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004746:	79fb      	ldrb	r3, [r7, #7]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2200      	movs	r2, #0
 800474e:	6939      	ldr	r1, [r7, #16]
 8004750:	6978      	ldr	r0, [r7, #20]
 8004752:	f7ff feeb 	bl	800452c <xQueueGenericCreateStatic>
 8004756:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f7ff ffb8 	bl	80046ce <prvInitialiseMutex>

		return xNewQueue;
 800475e:	68fb      	ldr	r3, [r7, #12]
	}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08e      	sub	sp, #56	; 0x38
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004776:	2300      	movs	r3, #0
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800477e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <xQueueGenericSend+0x30>
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
 8004796:	e7fe      	b.n	8004796 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d103      	bne.n	80047a6 <xQueueGenericSend+0x3e>
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <xQueueGenericSend+0x42>
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <xQueueGenericSend+0x44>
 80047aa:	2300      	movs	r3, #0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <xQueueGenericSend+0x5c>
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
 80047c2:	e7fe      	b.n	80047c2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d103      	bne.n	80047d2 <xQueueGenericSend+0x6a>
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <xQueueGenericSend+0x6e>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <xQueueGenericSend+0x70>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <xQueueGenericSend+0x88>
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	e7fe      	b.n	80047ee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047f0:	f001 fbbc 	bl	8005f6c <xTaskGetSchedulerState>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <xQueueGenericSend+0x98>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <xQueueGenericSend+0x9c>
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <xQueueGenericSend+0x9e>
 8004804:	2300      	movs	r3, #0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <xQueueGenericSend+0xb6>
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e7fe      	b.n	800481c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800481e:	f001 fefd 	bl	800661c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <xQueueGenericSend+0xcc>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d129      	bne.n	8004888 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800483a:	f000 fc82 	bl	8005142 <prvCopyDataToQueue>
 800483e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	3324      	adds	r3, #36	; 0x24
 800484c:	4618      	mov	r0, r3
 800484e:	f001 f9d7 	bl	8005c00 <xTaskRemoveFromEventList>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d013      	beq.n	8004880 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004858:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <xQueueGenericSend+0x1f0>)
 800485a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	e00a      	b.n	8004880 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004870:	4b39      	ldr	r3, [pc, #228]	; (8004958 <xQueueGenericSend+0x1f0>)
 8004872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004880:	f001 fefa 	bl	8006678 <vPortExitCritical>
				return pdPASS;
 8004884:	2301      	movs	r3, #1
 8004886:	e063      	b.n	8004950 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800488e:	f001 fef3 	bl	8006678 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004892:	2300      	movs	r3, #0
 8004894:	e05c      	b.n	8004950 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004898:	2b00      	cmp	r3, #0
 800489a:	d106      	bne.n	80048aa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800489c:	f107 0314 	add.w	r3, r7, #20
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fa0f 	bl	8005cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048a6:	2301      	movs	r3, #1
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048aa:	f001 fee5 	bl	8006678 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048ae:	f000 ffa5 	bl	80057fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048b2:	f001 feb3 	bl	800661c <vPortEnterCritical>
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048bc:	b25b      	sxtb	r3, r3
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d103      	bne.n	80048cc <xQueueGenericSend+0x164>
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d2:	b25b      	sxtb	r3, r3
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d103      	bne.n	80048e2 <xQueueGenericSend+0x17a>
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048e2:	f001 fec9 	bl	8006678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048e6:	1d3a      	adds	r2, r7, #4
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	4611      	mov	r1, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 f9fe 	bl	8005cf0 <xTaskCheckForTimeOut>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d124      	bne.n	8004944 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80048fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048fc:	f000 fd19 	bl	8005332 <prvIsQueueFull>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d018      	beq.n	8004938 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	3310      	adds	r3, #16
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f001 f952 	bl	8005bb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004916:	f000 fca4 	bl	8005262 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800491a:	f000 ff7d 	bl	8005818 <xTaskResumeAll>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f af7c 	bne.w	800481e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <xQueueGenericSend+0x1f0>)
 8004928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	e772      	b.n	800481e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004938:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800493a:	f000 fc92 	bl	8005262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800493e:	f000 ff6b 	bl	8005818 <xTaskResumeAll>
 8004942:	e76c      	b.n	800481e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004946:	f000 fc8c 	bl	8005262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800494a:	f000 ff65 	bl	8005818 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800494e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004950:	4618      	mov	r0, r3
 8004952:	3738      	adds	r7, #56	; 0x38
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08e      	sub	sp, #56	; 0x38
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <xQueueGenericSendFromISR+0x2c>
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
 8004986:	e7fe      	b.n	8004986 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <xQueueGenericSendFromISR+0x3a>
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <xQueueGenericSendFromISR+0x3e>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <xQueueGenericSendFromISR+0x40>
 800499a:	2300      	movs	r3, #0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <xQueueGenericSendFromISR+0x58>
 80049a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	e7fe      	b.n	80049b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d103      	bne.n	80049c2 <xQueueGenericSendFromISR+0x66>
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <xQueueGenericSendFromISR+0x6a>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <xQueueGenericSendFromISR+0x6c>
 80049c6:	2300      	movs	r3, #0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <xQueueGenericSendFromISR+0x84>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	61fb      	str	r3, [r7, #28]
 80049de:	e7fe      	b.n	80049de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049e0:	f001 fef8 	bl	80067d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80049e4:	f3ef 8211 	mrs	r2, BASEPRI
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	61ba      	str	r2, [r7, #24]
 80049fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80049fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d302      	bcc.n	8004a12 <xQueueGenericSendFromISR+0xb6>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d12c      	bne.n	8004a6c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	68b9      	ldr	r1, [r7, #8]
 8004a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a22:	f000 fb8e 	bl	8005142 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a26:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d112      	bne.n	8004a56 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d016      	beq.n	8004a66 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	3324      	adds	r3, #36	; 0x24
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 f8df 	bl	8005c00 <xTaskRemoveFromEventList>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00e      	beq.n	8004a66 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e007      	b.n	8004a66 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	b25a      	sxtb	r2, r3
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a66:	2301      	movs	r3, #1
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004a6a:	e001      	b.n	8004a70 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3738      	adds	r7, #56	; 0x38
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08e      	sub	sp, #56	; 0x38
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <xQueueGiveFromISR+0x28>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	e7fe      	b.n	8004aaa <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <xQueueGiveFromISR+0x44>
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	e7fe      	b.n	8004ac6 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <xQueueGiveFromISR+0x54>
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <xQueueGiveFromISR+0x58>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <xQueueGiveFromISR+0x5a>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <xQueueGiveFromISR+0x72>
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	e7fe      	b.n	8004af4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004af6:	f001 fe6d 	bl	80067d4 <vPortValidateInterruptPriority>
	__asm volatile
 8004afa:	f3ef 8211 	mrs	r2, BASEPRI
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	617a      	str	r2, [r7, #20]
 8004b10:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004b12:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d22b      	bcs.n	8004b7e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b40:	d112      	bne.n	8004b68 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d016      	beq.n	8004b78 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	3324      	adds	r3, #36	; 0x24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f001 f856 	bl	8005c00 <xTaskRemoveFromEventList>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00e      	beq.n	8004b78 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00b      	beq.n	8004b78 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	e007      	b.n	8004b78 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	b25a      	sxtb	r2, r3
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b7c:	e001      	b.n	8004b82 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	637b      	str	r3, [r7, #52]	; 0x34
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3738      	adds	r7, #56	; 0x38
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
	...

08004b98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08c      	sub	sp, #48	; 0x30
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d109      	bne.n	8004bc6 <xQueueReceive+0x2e>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	623b      	str	r3, [r7, #32]
 8004bc4:	e7fe      	b.n	8004bc4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d103      	bne.n	8004bd4 <xQueueReceive+0x3c>
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <xQueueReceive+0x40>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <xQueueReceive+0x42>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <xQueueReceive+0x5a>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	e7fe      	b.n	8004bf0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bf2:	f001 f9bb 	bl	8005f6c <xTaskGetSchedulerState>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <xQueueReceive+0x6a>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <xQueueReceive+0x6e>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <xQueueReceive+0x70>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <xQueueReceive+0x88>
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	e7fe      	b.n	8004c1e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c20:	f001 fcfc 	bl	800661c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01f      	beq.n	8004c70 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c34:	f000 faef 	bl	8005216 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00f      	beq.n	8004c68 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	3310      	adds	r3, #16
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 ffd7 	bl	8005c00 <xTaskRemoveFromEventList>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c58:	4b3c      	ldr	r3, [pc, #240]	; (8004d4c <xQueueReceive+0x1b4>)
 8004c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c68:	f001 fd06 	bl	8006678 <vPortExitCritical>
				return pdPASS;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e069      	b.n	8004d44 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c76:	f001 fcff 	bl	8006678 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	e062      	b.n	8004d44 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 f81b 	bl	8005cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c92:	f001 fcf1 	bl	8006678 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c96:	f000 fdb1 	bl	80057fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c9a:	f001 fcbf 	bl	800661c <vPortEnterCritical>
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ca4:	b25b      	sxtb	r3, r3
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d103      	bne.n	8004cb4 <xQueueReceive+0x11c>
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cba:	b25b      	sxtb	r3, r3
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d103      	bne.n	8004cca <xQueueReceive+0x132>
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cca:	f001 fcd5 	bl	8006678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cce:	1d3a      	adds	r2, r7, #4
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 f80a 	bl	8005cf0 <xTaskCheckForTimeOut>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d123      	bne.n	8004d2a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce4:	f000 fb0f 	bl	8005306 <prvIsQueueEmpty>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d017      	beq.n	8004d1e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	3324      	adds	r3, #36	; 0x24
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 ff5e 	bl	8005bb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cfe:	f000 fab0 	bl	8005262 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d02:	f000 fd89 	bl	8005818 <xTaskResumeAll>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d189      	bne.n	8004c20 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004d0c:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <xQueueReceive+0x1b4>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	e780      	b.n	8004c20 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d20:	f000 fa9f 	bl	8005262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d24:	f000 fd78 	bl	8005818 <xTaskResumeAll>
 8004d28:	e77a      	b.n	8004c20 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d2c:	f000 fa99 	bl	8005262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d30:	f000 fd72 	bl	8005818 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d36:	f000 fae6 	bl	8005306 <prvIsQueueEmpty>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f43f af6f 	beq.w	8004c20 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3730      	adds	r7, #48	; 0x30
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	e000ed04 	.word	0xe000ed04

08004d50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08e      	sub	sp, #56	; 0x38
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <xQueueSemaphoreTake+0x30>
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	e7fe      	b.n	8004d7e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <xQueueSemaphoreTake+0x4c>
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	61fb      	str	r3, [r7, #28]
 8004d9a:	e7fe      	b.n	8004d9a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d9c:	f001 f8e6 	bl	8005f6c <xTaskGetSchedulerState>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d102      	bne.n	8004dac <xQueueSemaphoreTake+0x5c>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d101      	bne.n	8004db0 <xQueueSemaphoreTake+0x60>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e000      	b.n	8004db2 <xQueueSemaphoreTake+0x62>
 8004db0:	2300      	movs	r3, #0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <xQueueSemaphoreTake+0x7a>
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	61bb      	str	r3, [r7, #24]
 8004dc8:	e7fe      	b.n	8004dc8 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dca:	f001 fc27 	bl	800661c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d024      	beq.n	8004e24 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	1e5a      	subs	r2, r3, #1
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d104      	bne.n	8004df4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004dea:	f001 fa79 	bl	80062e0 <pvTaskIncrementMutexHeldCount>
 8004dee:	4602      	mov	r2, r0
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00f      	beq.n	8004e1c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfe:	3310      	adds	r3, #16
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 fefd 	bl	8005c00 <xTaskRemoveFromEventList>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d007      	beq.n	8004e1c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e0c:	4b53      	ldr	r3, [pc, #332]	; (8004f5c <xQueueSemaphoreTake+0x20c>)
 8004e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e1c:	f001 fc2c 	bl	8006678 <vPortExitCritical>
				return pdPASS;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e096      	b.n	8004f52 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d110      	bne.n	8004e4c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <xQueueSemaphoreTake+0xf4>
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e7fe      	b.n	8004e42 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e44:	f001 fc18 	bl	8006678 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e082      	b.n	8004f52 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e52:	f107 030c 	add.w	r3, r7, #12
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 ff34 	bl	8005cc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e60:	f001 fc0a 	bl	8006678 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e64:	f000 fcca 	bl	80057fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e68:	f001 fbd8 	bl	800661c <vPortEnterCritical>
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e72:	b25b      	sxtb	r3, r3
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e78:	d103      	bne.n	8004e82 <xQueueSemaphoreTake+0x132>
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8e:	d103      	bne.n	8004e98 <xQueueSemaphoreTake+0x148>
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e98:	f001 fbee 	bl	8006678 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e9c:	463a      	mov	r2, r7
 8004e9e:	f107 030c 	add.w	r3, r7, #12
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 ff23 	bl	8005cf0 <xTaskCheckForTimeOut>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d132      	bne.n	8004f16 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eb2:	f000 fa28 	bl	8005306 <prvIsQueueEmpty>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d026      	beq.n	8004f0a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004ec4:	f001 fbaa 	bl	800661c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f001 f86b 	bl	8005fa8 <xTaskPriorityInherit>
 8004ed2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004ed4:	f001 fbd0 	bl	8006678 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eda:	3324      	adds	r3, #36	; 0x24
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fe69 	bl	8005bb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ee8:	f000 f9bb 	bl	8005262 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004eec:	f000 fc94 	bl	8005818 <xTaskResumeAll>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f47f af69 	bne.w	8004dca <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004ef8:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <xQueueSemaphoreTake+0x20c>)
 8004efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	e75f      	b.n	8004dca <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f0c:	f000 f9a9 	bl	8005262 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f10:	f000 fc82 	bl	8005818 <xTaskResumeAll>
 8004f14:	e759      	b.n	8004dca <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f18:	f000 f9a3 	bl	8005262 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f1c:	f000 fc7c 	bl	8005818 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f22:	f000 f9f0 	bl	8005306 <prvIsQueueEmpty>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f43f af4e 	beq.w	8004dca <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00d      	beq.n	8004f50 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004f34:	f001 fb72 	bl	800661c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004f38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f3a:	f000 f8ea 	bl	8005112 <prvGetDisinheritPriorityAfterTimeout>
 8004f3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 f932 	bl	80061b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f4c:	f001 fb94 	bl	8006678 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3738      	adds	r7, #56	; 0x38
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08e      	sub	sp, #56	; 0x38
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <xQueueReceiveFromISR+0x2a>
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	e7fe      	b.n	8004f88 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <xQueueReceiveFromISR+0x38>
 8004f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <xQueueReceiveFromISR+0x3c>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <xQueueReceiveFromISR+0x3e>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <xQueueReceiveFromISR+0x56>
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e7fe      	b.n	8004fb4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fb6:	f001 fc0d 	bl	80067d4 <vPortValidateInterruptPriority>
	__asm volatile
 8004fba:	f3ef 8211 	mrs	r2, BASEPRI
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	61ba      	str	r2, [r7, #24]
 8004fd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004fd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02f      	beq.n	8005042 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ff0:	f000 f911 	bl	8005216 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	1e5a      	subs	r2, r3, #1
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ffc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d112      	bne.n	800502c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d016      	beq.n	800503c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	3310      	adds	r3, #16
 8005012:	4618      	mov	r0, r3
 8005014:	f000 fdf4 	bl	8005c00 <xTaskRemoveFromEventList>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00e      	beq.n	800503c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00b      	beq.n	800503c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	e007      	b.n	800503c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800502c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005030:	3301      	adds	r3, #1
 8005032:	b2db      	uxtb	r3, r3
 8005034:	b25a      	sxtb	r2, r3
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800503c:	2301      	movs	r3, #1
 800503e:	637b      	str	r3, [r7, #52]	; 0x34
 8005040:	e001      	b.n	8005046 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005042:	2300      	movs	r3, #0
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	613b      	str	r3, [r7, #16]
	__asm volatile
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005052:	4618      	mov	r0, r3
 8005054:	3738      	adds	r7, #56	; 0x38
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	f383 8811 	msr	BASEPRI, r3
 8005070:	f3bf 8f6f 	isb	sy
 8005074:	f3bf 8f4f 	dsb	sy
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	e7fe      	b.n	800507a <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800507c:	f001 face 	bl	800661c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005086:	f001 faf7 	bl	8006678 <vPortExitCritical>

	return uxReturn;
 800508a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <uxQueueMessagesWaitingFromISR+0x26>
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	e7fe      	b.n	80050b8 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80050c0:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80050c2:	4618      	mov	r0, r3
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <vQueueDelete+0x26>
 80050e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	e7fe      	b.n	80050f2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f935 	bl	8005364 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f001 fc65 	bl	80069d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b00      	cmp	r3, #0
 8005120:	d006      	beq.n	8005130 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1c3 0307 	rsb	r3, r3, #7
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e001      	b.n	8005134 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005134:	68fb      	ldr	r3, [r7, #12]
	}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b086      	sub	sp, #24
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10d      	bne.n	800517c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d14d      	bne.n	8005204 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 ff9b 	bl	80060a8 <xTaskPriorityDisinherit>
 8005172:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	609a      	str	r2, [r3, #8]
 800517a:	e043      	b.n	8005204 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d119      	bne.n	80051b6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6858      	ldr	r0, [r3, #4]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	461a      	mov	r2, r3
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	f00f fdc4 	bl	8014d1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	441a      	add	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d32b      	bcc.n	8005204 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	e026      	b.n	8005204 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	68d8      	ldr	r0, [r3, #12]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	461a      	mov	r2, r3
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	f00f fdaa 	bl	8014d1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	425b      	negs	r3, r3
 80051d0:	441a      	add	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d207      	bcs.n	80051f2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	425b      	negs	r3, r3
 80051ec:	441a      	add	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d105      	bne.n	8005204 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3b01      	subs	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800520c:	697b      	ldr	r3, [r7, #20]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d018      	beq.n	800525a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	429a      	cmp	r2, r3
 8005240:	d303      	bcc.n	800524a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68d9      	ldr	r1, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	461a      	mov	r2, r3
 8005254:	6838      	ldr	r0, [r7, #0]
 8005256:	f00f fd60 	bl	8014d1a <memcpy>
	}
}
 800525a:	bf00      	nop
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800526a:	f001 f9d7 	bl	800661c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005274:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005276:	e011      	b.n	800529c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	d012      	beq.n	80052a6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3324      	adds	r3, #36	; 0x24
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fcbb 	bl	8005c00 <xTaskRemoveFromEventList>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005290:	f000 fd8e 	bl	8005db0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	3b01      	subs	r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800529c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dce9      	bgt.n	8005278 <prvUnlockQueue+0x16>
 80052a4:	e000      	b.n	80052a8 <prvUnlockQueue+0x46>
					break;
 80052a6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	22ff      	movs	r2, #255	; 0xff
 80052ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80052b0:	f001 f9e2 	bl	8006678 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052b4:	f001 f9b2 	bl	800661c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052be:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052c0:	e011      	b.n	80052e6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d012      	beq.n	80052f0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3310      	adds	r3, #16
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 fc96 	bl	8005c00 <xTaskRemoveFromEventList>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052da:	f000 fd69 	bl	8005db0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052de:	7bbb      	ldrb	r3, [r7, #14]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dce9      	bgt.n	80052c2 <prvUnlockQueue+0x60>
 80052ee:	e000      	b.n	80052f2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052f0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	22ff      	movs	r2, #255	; 0xff
 80052f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80052fa:	f001 f9bd 	bl	8006678 <vPortExitCritical>
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800530e:	f001 f985 	bl	800661c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800531a:	2301      	movs	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e001      	b.n	8005324 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005324:	f001 f9a8 	bl	8006678 <vPortExitCritical>

	return xReturn;
 8005328:	68fb      	ldr	r3, [r7, #12]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800533a:	f001 f96f 	bl	800661c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	429a      	cmp	r2, r3
 8005348:	d102      	bne.n	8005350 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800534a:	2301      	movs	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e001      	b.n	8005354 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005354:	f001 f990 	bl	8006678 <vPortExitCritical>

	return xReturn;
 8005358:	68fb      	ldr	r3, [r7, #12]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e016      	b.n	80053a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005372:	4a10      	ldr	r2, [pc, #64]	; (80053b4 <vQueueUnregisterQueue+0x50>)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4413      	add	r3, r2
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	429a      	cmp	r2, r3
 8005380:	d10b      	bne.n	800539a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005382:	4a0c      	ldr	r2, [pc, #48]	; (80053b4 <vQueueUnregisterQueue+0x50>)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2100      	movs	r1, #0
 8005388:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800538c:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <vQueueUnregisterQueue+0x50>)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	4413      	add	r3, r2
 8005394:	2200      	movs	r2, #0
 8005396:	605a      	str	r2, [r3, #4]
				break;
 8005398:	e005      	b.n	80053a6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3301      	adds	r3, #1
 800539e:	60fb      	str	r3, [r7, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b07      	cmp	r3, #7
 80053a4:	d9e5      	bls.n	8005372 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80053a6:	bf00      	nop
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20007514 	.word	0x20007514

080053b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af04      	add	r7, sp, #16
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <xTaskCreateStatic+0x28>
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	623b      	str	r3, [r7, #32]
 80053de:	e7fe      	b.n	80053de <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <xTaskCreateStatic+0x42>
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	e7fe      	b.n	80053f8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053fa:	2354      	movs	r3, #84	; 0x54
 80053fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b54      	cmp	r3, #84	; 0x54
 8005402:	d009      	beq.n	8005418 <xTaskCreateStatic+0x60>
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	e7fe      	b.n	8005416 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005418:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800541a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01e      	beq.n	800545e <xTaskCreateStatic+0xa6>
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01b      	beq.n	800545e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800542e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005438:	2300      	movs	r3, #0
 800543a:	9303      	str	r3, [sp, #12]
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	9302      	str	r3, [sp, #8]
 8005440:	f107 0314 	add.w	r3, r7, #20
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f850 	bl	80054f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005458:	f000 f8d4 	bl	8005604 <prvAddNewTaskToReadyList>
 800545c:	e001      	b.n	8005462 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005462:	697b      	ldr	r3, [r7, #20]
	}
 8005464:	4618      	mov	r0, r3
 8005466:	3728      	adds	r7, #40	; 0x28
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08c      	sub	sp, #48	; 0x30
 8005470:	af04      	add	r7, sp, #16
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4618      	mov	r0, r3
 8005482:	f001 f9e5 	bl	8006850 <pvPortMalloc>
 8005486:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00e      	beq.n	80054ac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800548e:	2054      	movs	r0, #84	; 0x54
 8005490:	f001 f9de 	bl	8006850 <pvPortMalloc>
 8005494:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
 80054a2:	e005      	b.n	80054b0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054a4:	6978      	ldr	r0, [r7, #20]
 80054a6:	f001 fa95 	bl	80069d4 <vPortFree>
 80054aa:	e001      	b.n	80054b0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054ac:	2300      	movs	r3, #0
 80054ae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d017      	beq.n	80054e6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054be:	88fa      	ldrh	r2, [r7, #6]
 80054c0:	2300      	movs	r3, #0
 80054c2:	9303      	str	r3, [sp, #12]
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	9302      	str	r3, [sp, #8]
 80054c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f80e 	bl	80054f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054da:	69f8      	ldr	r0, [r7, #28]
 80054dc:	f000 f892 	bl	8005604 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054e0:	2301      	movs	r3, #1
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	e002      	b.n	80054ec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054e6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054ec:	69bb      	ldr	r3, [r7, #24]
	}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b088      	sub	sp, #32
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800550e:	3b01      	subs	r3, #1
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f023 0307 	bic.w	r3, r3, #7
 800551c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <prvInitialiseNewTask+0x46>
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e7fe      	b.n	800553a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01f      	beq.n	8005582 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e012      	b.n	800556e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	7819      	ldrb	r1, [r3, #0]
 8005550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	4413      	add	r3, r2
 8005556:	3334      	adds	r3, #52	; 0x34
 8005558:	460a      	mov	r2, r1
 800555a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d006      	beq.n	8005576 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	3301      	adds	r3, #1
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	2b0f      	cmp	r3, #15
 8005572:	d9e9      	bls.n	8005548 <prvInitialiseNewTask+0x52>
 8005574:	e000      	b.n	8005578 <prvInitialiseNewTask+0x82>
			{
				break;
 8005576:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005580:	e003      	b.n	800558a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	2b06      	cmp	r3, #6
 800558e:	d901      	bls.n	8005594 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005590:	2306      	movs	r3, #6
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005598:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800559e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	2200      	movs	r2, #0
 80055a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	3304      	adds	r3, #4
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fe fec1 	bl	8004332 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	3318      	adds	r3, #24
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe febc 	bl	8004332 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	f1c3 0207 	rsb	r2, r3, #7
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	2200      	movs	r2, #0
 80055d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	69b8      	ldr	r0, [r7, #24]
 80055e4:	f000 fef6 	bl	80063d4 <pxPortInitialiseStack>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055fa:	bf00      	nop
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
	...

08005604 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800560c:	f001 f806 	bl	800661c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005610:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <prvAddNewTaskToReadyList+0xb8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	4a29      	ldr	r2, [pc, #164]	; (80056bc <prvAddNewTaskToReadyList+0xb8>)
 8005618:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800561a:	4b29      	ldr	r3, [pc, #164]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005622:	4a27      	ldr	r2, [pc, #156]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <prvAddNewTaskToReadyList+0xb8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d110      	bne.n	8005652 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005630:	f000 fbe2 	bl	8005df8 <prvInitialiseTaskLists>
 8005634:	e00d      	b.n	8005652 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005636:	4b23      	ldr	r3, [pc, #140]	; (80056c4 <prvAddNewTaskToReadyList+0xc0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800563e:	4b20      	ldr	r3, [pc, #128]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d802      	bhi.n	8005652 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800564c:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005652:	4b1d      	ldr	r3, [pc, #116]	; (80056c8 <prvAddNewTaskToReadyList+0xc4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <prvAddNewTaskToReadyList+0xc4>)
 800565a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	2201      	movs	r2, #1
 8005662:	409a      	lsls	r2, r3
 8005664:	4b19      	ldr	r3, [pc, #100]	; (80056cc <prvAddNewTaskToReadyList+0xc8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4313      	orrs	r3, r2
 800566a:	4a18      	ldr	r2, [pc, #96]	; (80056cc <prvAddNewTaskToReadyList+0xc8>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <prvAddNewTaskToReadyList+0xcc>)
 800567c:	441a      	add	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3304      	adds	r3, #4
 8005682:	4619      	mov	r1, r3
 8005684:	4610      	mov	r0, r2
 8005686:	f7fe fe61 	bl	800434c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800568a:	f000 fff5 	bl	8006678 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800568e:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <prvAddNewTaskToReadyList+0xc0>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <prvAddNewTaskToReadyList+0xbc>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d207      	bcs.n	80056b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <prvAddNewTaskToReadyList+0xd0>)
 80056a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	20000568 	.word	0x20000568
 80056c0:	20000468 	.word	0x20000468
 80056c4:	20000574 	.word	0x20000574
 80056c8:	20000584 	.word	0x20000584
 80056cc:	20000570 	.word	0x20000570
 80056d0:	2000046c 	.word	0x2000046c
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d016      	beq.n	8005718 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ea:	4b13      	ldr	r3, [pc, #76]	; (8005738 <vTaskDelay+0x60>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <vTaskDelay+0x2e>
 80056f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	e7fe      	b.n	8005704 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005706:	f000 f879 	bl	80057fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800570a:	2100      	movs	r1, #0
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fdfb 	bl	8006308 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005712:	f000 f881 	bl	8005818 <xTaskResumeAll>
 8005716:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d107      	bne.n	800572e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <vTaskDelay+0x64>)
 8005720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000590 	.word	0x20000590
 800573c:	e000ed04 	.word	0xe000ed04

08005740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08a      	sub	sp, #40	; 0x28
 8005744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800574a:	2300      	movs	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800574e:	463a      	mov	r2, r7
 8005750:	1d39      	adds	r1, r7, #4
 8005752:	f107 0308 	add.w	r3, r7, #8
 8005756:	4618      	mov	r0, r3
 8005758:	f7fa ff12 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	9202      	str	r2, [sp, #8]
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	2300      	movs	r3, #0
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	2300      	movs	r3, #0
 800576c:	460a      	mov	r2, r1
 800576e:	491d      	ldr	r1, [pc, #116]	; (80057e4 <vTaskStartScheduler+0xa4>)
 8005770:	481d      	ldr	r0, [pc, #116]	; (80057e8 <vTaskStartScheduler+0xa8>)
 8005772:	f7ff fe21 	bl	80053b8 <xTaskCreateStatic>
 8005776:	4602      	mov	r2, r0
 8005778:	4b1c      	ldr	r3, [pc, #112]	; (80057ec <vTaskStartScheduler+0xac>)
 800577a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800577c:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <vTaskStartScheduler+0xac>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005784:	2301      	movs	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e001      	b.n	800578e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d115      	bne.n	80057c0 <vTaskStartScheduler+0x80>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057a6:	4b12      	ldr	r3, [pc, #72]	; (80057f0 <vTaskStartScheduler+0xb0>)
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ae:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <vTaskStartScheduler+0xb4>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057b4:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <vTaskStartScheduler+0xb8>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ba:	f000 fe91 	bl	80064e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057be:	e00d      	b.n	80057dc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d109      	bne.n	80057dc <vTaskStartScheduler+0x9c>
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e7fe      	b.n	80057da <vTaskStartScheduler+0x9a>
}
 80057dc:	bf00      	nop
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	08015ca0 	.word	0x08015ca0
 80057e8:	08005dc9 	.word	0x08005dc9
 80057ec:	2000058c 	.word	0x2000058c
 80057f0:	20000588 	.word	0x20000588
 80057f4:	20000574 	.word	0x20000574
 80057f8:	2000056c 	.word	0x2000056c

080057fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <vTaskSuspendAll+0x18>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	4a03      	ldr	r2, [pc, #12]	; (8005814 <vTaskSuspendAll+0x18>)
 8005808:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800580a:	bf00      	nop
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	20000590 	.word	0x20000590

08005818 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005822:	2300      	movs	r3, #0
 8005824:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005826:	4b41      	ldr	r3, [pc, #260]	; (800592c <xTaskResumeAll+0x114>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <xTaskResumeAll+0x2a>
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	e7fe      	b.n	8005840 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005842:	f000 feeb 	bl	800661c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005846:	4b39      	ldr	r3, [pc, #228]	; (800592c <xTaskResumeAll+0x114>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3b01      	subs	r3, #1
 800584c:	4a37      	ldr	r2, [pc, #220]	; (800592c <xTaskResumeAll+0x114>)
 800584e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005850:	4b36      	ldr	r3, [pc, #216]	; (800592c <xTaskResumeAll+0x114>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d161      	bne.n	800591c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005858:	4b35      	ldr	r3, [pc, #212]	; (8005930 <xTaskResumeAll+0x118>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d05d      	beq.n	800591c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005860:	e02e      	b.n	80058c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005862:	4b34      	ldr	r3, [pc, #208]	; (8005934 <xTaskResumeAll+0x11c>)
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3318      	adds	r3, #24
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe fdc9 	bl	8004406 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3304      	adds	r3, #4
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fdc4 	bl	8004406 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	2201      	movs	r2, #1
 8005884:	409a      	lsls	r2, r3
 8005886:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <xTaskResumeAll+0x120>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	4a2a      	ldr	r2, [pc, #168]	; (8005938 <xTaskResumeAll+0x120>)
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4a27      	ldr	r2, [pc, #156]	; (800593c <xTaskResumeAll+0x124>)
 800589e:	441a      	add	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7fe fd50 	bl	800434c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4b23      	ldr	r3, [pc, #140]	; (8005940 <xTaskResumeAll+0x128>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80058ba:	4b22      	ldr	r3, [pc, #136]	; (8005944 <xTaskResumeAll+0x12c>)
 80058bc:	2201      	movs	r2, #1
 80058be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058c0:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <xTaskResumeAll+0x11c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1cc      	bne.n	8005862 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ce:	f000 fb2d 	bl	8005f2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <xTaskResumeAll+0x130>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d010      	beq.n	8005900 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058de:	f000 f859 	bl	8005994 <xTaskIncrementTick>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <xTaskResumeAll+0x12c>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f1      	bne.n	80058de <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <xTaskResumeAll+0x130>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <xTaskResumeAll+0x12c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <xTaskResumeAll+0x134>)
 800590e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800591c:	f000 feac 	bl	8006678 <vPortExitCritical>

	return xAlreadyYielded;
 8005920:	68bb      	ldr	r3, [r7, #8]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000590 	.word	0x20000590
 8005930:	20000568 	.word	0x20000568
 8005934:	20000528 	.word	0x20000528
 8005938:	20000570 	.word	0x20000570
 800593c:	2000046c 	.word	0x2000046c
 8005940:	20000468 	.word	0x20000468
 8005944:	2000057c 	.word	0x2000057c
 8005948:	20000578 	.word	0x20000578
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <xTaskGetTickCount+0x1c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800595c:	687b      	ldr	r3, [r7, #4]
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	2000056c 	.word	0x2000056c

08005970 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005976:	f000 ff2d 	bl	80067d4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800597a:	2300      	movs	r3, #0
 800597c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <xTaskGetTickCountFromISR+0x20>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005984:	683b      	ldr	r3, [r7, #0]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	2000056c 	.word	0x2000056c

08005994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800599a:	2300      	movs	r3, #0
 800599c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800599e:	4b4e      	ldr	r3, [pc, #312]	; (8005ad8 <xTaskIncrementTick+0x144>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 8087 	bne.w	8005ab6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059a8:	4b4c      	ldr	r3, [pc, #304]	; (8005adc <xTaskIncrementTick+0x148>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059b0:	4a4a      	ldr	r2, [pc, #296]	; (8005adc <xTaskIncrementTick+0x148>)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d11f      	bne.n	80059fc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80059bc:	4b48      	ldr	r3, [pc, #288]	; (8005ae0 <xTaskIncrementTick+0x14c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <xTaskIncrementTick+0x46>
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	e7fe      	b.n	80059d8 <xTaskIncrementTick+0x44>
 80059da:	4b41      	ldr	r3, [pc, #260]	; (8005ae0 <xTaskIncrementTick+0x14c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	4b40      	ldr	r3, [pc, #256]	; (8005ae4 <xTaskIncrementTick+0x150>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a3e      	ldr	r2, [pc, #248]	; (8005ae0 <xTaskIncrementTick+0x14c>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	4a3e      	ldr	r2, [pc, #248]	; (8005ae4 <xTaskIncrementTick+0x150>)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	4b3e      	ldr	r3, [pc, #248]	; (8005ae8 <xTaskIncrementTick+0x154>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	4a3c      	ldr	r2, [pc, #240]	; (8005ae8 <xTaskIncrementTick+0x154>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	f000 fa98 	bl	8005f2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059fc:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <xTaskIncrementTick+0x158>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d348      	bcc.n	8005a98 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a06:	4b36      	ldr	r3, [pc, #216]	; (8005ae0 <xTaskIncrementTick+0x14c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d104      	bne.n	8005a1a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a10:	4b36      	ldr	r3, [pc, #216]	; (8005aec <xTaskIncrementTick+0x158>)
 8005a12:	f04f 32ff 	mov.w	r2, #4294967295
 8005a16:	601a      	str	r2, [r3, #0]
					break;
 8005a18:	e03e      	b.n	8005a98 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1a:	4b31      	ldr	r3, [pc, #196]	; (8005ae0 <xTaskIncrementTick+0x14c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d203      	bcs.n	8005a3a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a32:	4a2e      	ldr	r2, [pc, #184]	; (8005aec <xTaskIncrementTick+0x158>)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a38:	e02e      	b.n	8005a98 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe fce1 	bl	8004406 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	3318      	adds	r3, #24
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe fcd8 	bl	8004406 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <xTaskIncrementTick+0x15c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	4a22      	ldr	r2, [pc, #136]	; (8005af0 <xTaskIncrementTick+0x15c>)
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4a1f      	ldr	r2, [pc, #124]	; (8005af4 <xTaskIncrementTick+0x160>)
 8005a76:	441a      	add	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f7fe fc64 	bl	800434c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a88:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <xTaskIncrementTick+0x164>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d3b9      	bcc.n	8005a06 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005a92:	2301      	movs	r3, #1
 8005a94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a96:	e7b6      	b.n	8005a06 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a98:	4b17      	ldr	r3, [pc, #92]	; (8005af8 <xTaskIncrementTick+0x164>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9e:	4915      	ldr	r1, [pc, #84]	; (8005af4 <xTaskIncrementTick+0x160>)
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d907      	bls.n	8005ac0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e004      	b.n	8005ac0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ab6:	4b11      	ldr	r3, [pc, #68]	; (8005afc <xTaskIncrementTick+0x168>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3301      	adds	r3, #1
 8005abc:	4a0f      	ldr	r2, [pc, #60]	; (8005afc <xTaskIncrementTick+0x168>)
 8005abe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ac0:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <xTaskIncrementTick+0x16c>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005acc:	697b      	ldr	r3, [r7, #20]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000590 	.word	0x20000590
 8005adc:	2000056c 	.word	0x2000056c
 8005ae0:	20000520 	.word	0x20000520
 8005ae4:	20000524 	.word	0x20000524
 8005ae8:	20000580 	.word	0x20000580
 8005aec:	20000588 	.word	0x20000588
 8005af0:	20000570 	.word	0x20000570
 8005af4:	2000046c 	.word	0x2000046c
 8005af8:	20000468 	.word	0x20000468
 8005afc:	20000578 	.word	0x20000578
 8005b00:	2000057c 	.word	0x2000057c

08005b04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b0a:	4b26      	ldr	r3, [pc, #152]	; (8005ba4 <vTaskSwitchContext+0xa0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b12:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <vTaskSwitchContext+0xa4>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b18:	e03e      	b.n	8005b98 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005b1a:	4b23      	ldr	r3, [pc, #140]	; (8005ba8 <vTaskSwitchContext+0xa4>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b20:	4b22      	ldr	r3, [pc, #136]	; (8005bac <vTaskSwitchContext+0xa8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	fab3 f383 	clz	r3, r3
 8005b2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b2e:	7afb      	ldrb	r3, [r7, #11]
 8005b30:	f1c3 031f 	rsb	r3, r3, #31
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	491e      	ldr	r1, [pc, #120]	; (8005bb0 <vTaskSwitchContext+0xac>)
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d109      	bne.n	8005b5e <vTaskSwitchContext+0x5a>
	__asm volatile
 8005b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b4e:	f383 8811 	msr	BASEPRI, r3
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	f3bf 8f4f 	dsb	sy
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	e7fe      	b.n	8005b5c <vTaskSwitchContext+0x58>
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4a11      	ldr	r2, [pc, #68]	; (8005bb0 <vTaskSwitchContext+0xac>)
 8005b6a:	4413      	add	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	605a      	str	r2, [r3, #4]
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	3308      	adds	r3, #8
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d104      	bne.n	8005b8e <vTaskSwitchContext+0x8a>
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	4a07      	ldr	r2, [pc, #28]	; (8005bb4 <vTaskSwitchContext+0xb0>)
 8005b96:	6013      	str	r3, [r2, #0]
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	20000590 	.word	0x20000590
 8005ba8:	2000057c 	.word	0x2000057c
 8005bac:	20000570 	.word	0x20000570
 8005bb0:	2000046c 	.word	0x2000046c
 8005bb4:	20000468 	.word	0x20000468

08005bb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <vTaskPlaceOnEventList+0x24>
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e7fe      	b.n	8005bda <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <vTaskPlaceOnEventList+0x44>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3318      	adds	r3, #24
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f7fe fbd5 	bl	8004394 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bea:	2101      	movs	r1, #1
 8005bec:	6838      	ldr	r0, [r7, #0]
 8005bee:	f000 fb8b 	bl	8006308 <prvAddCurrentTaskToDelayedList>
}
 8005bf2:	bf00      	nop
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000468 	.word	0x20000468

08005c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <xTaskRemoveFromEventList+0x2a>
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	e7fe      	b.n	8005c28 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	3318      	adds	r3, #24
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fbe9 	bl	8004406 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <xTaskRemoveFromEventList+0xac>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d11c      	bne.n	8005c76 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fbe0 	bl	8004406 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	409a      	lsls	r2, r3
 8005c4e:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <xTaskRemoveFromEventList+0xb0>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <xTaskRemoveFromEventList+0xb0>)
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <xTaskRemoveFromEventList+0xb4>)
 8005c66:	441a      	add	r2, r3
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f7fe fb6c 	bl	800434c <vListInsertEnd>
 8005c74:	e005      	b.n	8005c82 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3318      	adds	r3, #24
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	480e      	ldr	r0, [pc, #56]	; (8005cb8 <xTaskRemoveFromEventList+0xb8>)
 8005c7e:	f7fe fb65 	bl	800434c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c86:	4b0d      	ldr	r3, [pc, #52]	; (8005cbc <xTaskRemoveFromEventList+0xbc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d905      	bls.n	8005c9c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <xTaskRemoveFromEventList+0xc0>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e001      	b.n	8005ca0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ca0:	697b      	ldr	r3, [r7, #20]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000590 	.word	0x20000590
 8005cb0:	20000570 	.word	0x20000570
 8005cb4:	2000046c 	.word	0x2000046c
 8005cb8:	20000528 	.word	0x20000528
 8005cbc:	20000468 	.word	0x20000468
 8005cc0:	2000057c 	.word	0x2000057c

08005cc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ccc:	4b06      	ldr	r3, [pc, #24]	; (8005ce8 <vTaskInternalSetTimeOutState+0x24>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <vTaskInternalSetTimeOutState+0x28>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	605a      	str	r2, [r3, #4]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20000580 	.word	0x20000580
 8005cec:	2000056c 	.word	0x2000056c

08005cf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b088      	sub	sp, #32
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d109      	bne.n	8005d14 <xTaskCheckForTimeOut+0x24>
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	e7fe      	b.n	8005d12 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d109      	bne.n	8005d2e <xTaskCheckForTimeOut+0x3e>
 8005d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1e:	f383 8811 	msr	BASEPRI, r3
 8005d22:	f3bf 8f6f 	isb	sy
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e7fe      	b.n	8005d2c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005d2e:	f000 fc75 	bl	800661c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d32:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <xTaskCheckForTimeOut+0xb8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d102      	bne.n	8005d52 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61fb      	str	r3, [r7, #28]
 8005d50:	e023      	b.n	8005d9a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b15      	ldr	r3, [pc, #84]	; (8005dac <xTaskCheckForTimeOut+0xbc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d007      	beq.n	8005d6e <xTaskCheckForTimeOut+0x7e>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d302      	bcc.n	8005d6e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	e015      	b.n	8005d9a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d20b      	bcs.n	8005d90 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff ff9d 	bl	8005cc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e004      	b.n	8005d9a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d9a:	f000 fc6d 	bl	8006678 <vPortExitCritical>

	return xReturn;
 8005d9e:	69fb      	ldr	r3, [r7, #28]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	2000056c 	.word	0x2000056c
 8005dac:	20000580 	.word	0x20000580

08005db0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005db4:	4b03      	ldr	r3, [pc, #12]	; (8005dc4 <vTaskMissedYield+0x14>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
}
 8005dba:	bf00      	nop
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	2000057c 	.word	0x2000057c

08005dc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005dd0:	f000 f852 	bl	8005e78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005dd4:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <prvIdleTask+0x28>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d9f9      	bls.n	8005dd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ddc:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <prvIdleTask+0x2c>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005dec:	e7f0      	b.n	8005dd0 <prvIdleTask+0x8>
 8005dee:	bf00      	nop
 8005df0:	2000046c 	.word	0x2000046c
 8005df4:	e000ed04 	.word	0xe000ed04

08005df8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dfe:	2300      	movs	r3, #0
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	e00c      	b.n	8005e1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4a12      	ldr	r2, [pc, #72]	; (8005e58 <prvInitialiseTaskLists+0x60>)
 8005e10:	4413      	add	r3, r2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe fa6d 	bl	80042f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	607b      	str	r3, [r7, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b06      	cmp	r3, #6
 8005e22:	d9ef      	bls.n	8005e04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e24:	480d      	ldr	r0, [pc, #52]	; (8005e5c <prvInitialiseTaskLists+0x64>)
 8005e26:	f7fe fa64 	bl	80042f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e2a:	480d      	ldr	r0, [pc, #52]	; (8005e60 <prvInitialiseTaskLists+0x68>)
 8005e2c:	f7fe fa61 	bl	80042f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e30:	480c      	ldr	r0, [pc, #48]	; (8005e64 <prvInitialiseTaskLists+0x6c>)
 8005e32:	f7fe fa5e 	bl	80042f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e36:	480c      	ldr	r0, [pc, #48]	; (8005e68 <prvInitialiseTaskLists+0x70>)
 8005e38:	f7fe fa5b 	bl	80042f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e3c:	480b      	ldr	r0, [pc, #44]	; (8005e6c <prvInitialiseTaskLists+0x74>)
 8005e3e:	f7fe fa58 	bl	80042f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <prvInitialiseTaskLists+0x78>)
 8005e44:	4a05      	ldr	r2, [pc, #20]	; (8005e5c <prvInitialiseTaskLists+0x64>)
 8005e46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <prvInitialiseTaskLists+0x7c>)
 8005e4a:	4a05      	ldr	r2, [pc, #20]	; (8005e60 <prvInitialiseTaskLists+0x68>)
 8005e4c:	601a      	str	r2, [r3, #0]
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	2000046c 	.word	0x2000046c
 8005e5c:	200004f8 	.word	0x200004f8
 8005e60:	2000050c 	.word	0x2000050c
 8005e64:	20000528 	.word	0x20000528
 8005e68:	2000053c 	.word	0x2000053c
 8005e6c:	20000554 	.word	0x20000554
 8005e70:	20000520 	.word	0x20000520
 8005e74:	20000524 	.word	0x20000524

08005e78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e7e:	e019      	b.n	8005eb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e80:	f000 fbcc 	bl	800661c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e84:	4b0f      	ldr	r3, [pc, #60]	; (8005ec4 <prvCheckTasksWaitingTermination+0x4c>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fe fab8 	bl	8004406 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e96:	4b0c      	ldr	r3, [pc, #48]	; (8005ec8 <prvCheckTasksWaitingTermination+0x50>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	4a0a      	ldr	r2, [pc, #40]	; (8005ec8 <prvCheckTasksWaitingTermination+0x50>)
 8005e9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <prvCheckTasksWaitingTermination+0x54>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	4a09      	ldr	r2, [pc, #36]	; (8005ecc <prvCheckTasksWaitingTermination+0x54>)
 8005ea8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eaa:	f000 fbe5 	bl	8006678 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f80e 	bl	8005ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <prvCheckTasksWaitingTermination+0x54>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e1      	bne.n	8005e80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ebc:	bf00      	nop
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	2000053c 	.word	0x2000053c
 8005ec8:	20000568 	.word	0x20000568
 8005ecc:	20000550 	.word	0x20000550

08005ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d108      	bne.n	8005ef4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 fd74 	bl	80069d4 <vPortFree>
				vPortFree( pxTCB );
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fd71 	bl	80069d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ef2:	e017      	b.n	8005f24 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d103      	bne.n	8005f06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fd68 	bl	80069d4 <vPortFree>
	}
 8005f04:	e00e      	b.n	8005f24 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d009      	beq.n	8005f24 <prvDeleteTCB+0x54>
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	e7fe      	b.n	8005f22 <prvDeleteTCB+0x52>
	}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f32:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <prvResetNextTaskUnblockTime+0x38>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d104      	bne.n	8005f46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <prvResetNextTaskUnblockTime+0x3c>)
 8005f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f44:	e008      	b.n	8005f58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f46:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <prvResetNextTaskUnblockTime+0x38>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <prvResetNextTaskUnblockTime+0x3c>)
 8005f56:	6013      	str	r3, [r2, #0]
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	20000520 	.word	0x20000520
 8005f68:	20000588 	.word	0x20000588

08005f6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <xTaskGetSchedulerState+0x34>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	e008      	b.n	8005f92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f80:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <xTaskGetSchedulerState+0x38>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d102      	bne.n	8005f8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	607b      	str	r3, [r7, #4]
 8005f8c:	e001      	b.n	8005f92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f92:	687b      	ldr	r3, [r7, #4]
	}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	20000574 	.word	0x20000574
 8005fa4:	20000590 	.word	0x20000590

08005fa8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d069      	beq.n	8006092 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc2:	4b36      	ldr	r3, [pc, #216]	; (800609c <xTaskPriorityInherit+0xf4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d259      	bcs.n	8006080 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	db06      	blt.n	8005fe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd4:	4b31      	ldr	r3, [pc, #196]	; (800609c <xTaskPriorityInherit+0xf4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	f1c3 0207 	rsb	r2, r3, #7
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6959      	ldr	r1, [r3, #20]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4a2b      	ldr	r2, [pc, #172]	; (80060a0 <xTaskPriorityInherit+0xf8>)
 8005ff4:	4413      	add	r3, r2
 8005ff6:	4299      	cmp	r1, r3
 8005ff8:	d13a      	bne.n	8006070 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe fa01 	bl	8004406 <uxListRemove>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d115      	bne.n	8006036 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600e:	4924      	ldr	r1, [pc, #144]	; (80060a0 <xTaskPriorityInherit+0xf8>)
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <xTaskPriorityInherit+0x8e>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	2201      	movs	r2, #1
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	43da      	mvns	r2, r3
 800602c:	4b1d      	ldr	r3, [pc, #116]	; (80060a4 <xTaskPriorityInherit+0xfc>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4013      	ands	r3, r2
 8006032:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <xTaskPriorityInherit+0xfc>)
 8006034:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006036:	4b19      	ldr	r3, [pc, #100]	; (800609c <xTaskPriorityInherit+0xf4>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	2201      	movs	r2, #1
 8006046:	409a      	lsls	r2, r3
 8006048:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <xTaskPriorityInherit+0xfc>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4313      	orrs	r3, r2
 800604e:	4a15      	ldr	r2, [pc, #84]	; (80060a4 <xTaskPriorityInherit+0xfc>)
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4a10      	ldr	r2, [pc, #64]	; (80060a0 <xTaskPriorityInherit+0xf8>)
 8006060:	441a      	add	r2, r3
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	3304      	adds	r3, #4
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f7fe f96f 	bl	800434c <vListInsertEnd>
 800606e:	e004      	b.n	800607a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <xTaskPriorityInherit+0xf4>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	e008      	b.n	8006092 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006084:	4b05      	ldr	r3, [pc, #20]	; (800609c <xTaskPriorityInherit+0xf4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	429a      	cmp	r2, r3
 800608c:	d201      	bcs.n	8006092 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800608e:	2301      	movs	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006092:	68fb      	ldr	r3, [r7, #12]
	}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000468 	.word	0x20000468
 80060a0:	2000046c 	.word	0x2000046c
 80060a4:	20000570 	.word	0x20000570

080060a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d06c      	beq.n	8006198 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060be:	4b39      	ldr	r3, [pc, #228]	; (80061a4 <xTaskPriorityDisinherit+0xfc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d009      	beq.n	80060dc <xTaskPriorityDisinherit+0x34>
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	e7fe      	b.n	80060da <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <xTaskPriorityDisinherit+0x50>
 80060e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e8:	f383 8811 	msr	BASEPRI, r3
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f3bf 8f4f 	dsb	sy
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	e7fe      	b.n	80060f6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060fc:	1e5a      	subs	r2, r3, #1
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	429a      	cmp	r2, r3
 800610c:	d044      	beq.n	8006198 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006112:	2b00      	cmp	r3, #0
 8006114:	d140      	bne.n	8006198 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3304      	adds	r3, #4
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe f973 	bl	8004406 <uxListRemove>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d115      	bne.n	8006152 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	491f      	ldr	r1, [pc, #124]	; (80061a8 <xTaskPriorityDisinherit+0x100>)
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xTaskPriorityDisinherit+0xaa>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	2201      	movs	r2, #1
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43da      	mvns	r2, r3
 8006148:	4b18      	ldr	r3, [pc, #96]	; (80061ac <xTaskPriorityDisinherit+0x104>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4013      	ands	r3, r2
 800614e:	4a17      	ldr	r2, [pc, #92]	; (80061ac <xTaskPriorityDisinherit+0x104>)
 8006150:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615e:	f1c3 0207 	rsb	r2, r3, #7
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	2201      	movs	r2, #1
 800616c:	409a      	lsls	r2, r3
 800616e:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <xTaskPriorityDisinherit+0x104>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4313      	orrs	r3, r2
 8006174:	4a0d      	ldr	r2, [pc, #52]	; (80061ac <xTaskPriorityDisinherit+0x104>)
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4a08      	ldr	r2, [pc, #32]	; (80061a8 <xTaskPriorityDisinherit+0x100>)
 8006186:	441a      	add	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	3304      	adds	r3, #4
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7fe f8dc 	bl	800434c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006194:	2301      	movs	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006198:	697b      	ldr	r3, [r7, #20]
	}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000468 	.word	0x20000468
 80061a8:	2000046c 	.word	0x2000046c
 80061ac:	20000570 	.word	0x20000570

080061b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80061be:	2301      	movs	r3, #1
 80061c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 8081 	beq.w	80062cc <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e7fe      	b.n	80061e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d902      	bls.n	80061f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e002      	b.n	80061fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	429a      	cmp	r2, r3
 8006204:	d062      	beq.n	80062cc <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	429a      	cmp	r2, r3
 800620e:	d15d      	bne.n	80062cc <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006210:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	429a      	cmp	r2, r3
 8006218:	d109      	bne.n	800622e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	60bb      	str	r3, [r7, #8]
 800622c:	e7fe      	b.n	800622c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	db04      	blt.n	800624c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f1c3 0207 	rsb	r2, r3, #7
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	6959      	ldr	r1, [r3, #20]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4a1f      	ldr	r2, [pc, #124]	; (80062d8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800625c:	4413      	add	r3, r2
 800625e:	4299      	cmp	r1, r3
 8006260:	d134      	bne.n	80062cc <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	3304      	adds	r3, #4
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe f8cd 	bl	8004406 <uxListRemove>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d115      	bne.n	800629e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006276:	4918      	ldr	r1, [pc, #96]	; (80062d8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	2201      	movs	r2, #1
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43da      	mvns	r2, r3
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4013      	ands	r3, r2
 800629a:	4a10      	ldr	r2, [pc, #64]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800629c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	2201      	movs	r2, #1
 80062a4:	409a      	lsls	r2, r3
 80062a6:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	4a0b      	ldr	r2, [pc, #44]	; (80062dc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b4:	4613      	mov	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4a06      	ldr	r2, [pc, #24]	; (80062d8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80062be:	441a      	add	r2, r3
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	3304      	adds	r3, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f7fe f840 	bl	800434c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062cc:	bf00      	nop
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000468 	.word	0x20000468
 80062d8:	2000046c 	.word	0x2000046c
 80062dc:	20000570 	.word	0x20000570

080062e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80062e4:	4b07      	ldr	r3, [pc, #28]	; (8006304 <pvTaskIncrementMutexHeldCount+0x24>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80062ec:	4b05      	ldr	r3, [pc, #20]	; (8006304 <pvTaskIncrementMutexHeldCount+0x24>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062f2:	3201      	adds	r2, #1
 80062f4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80062f6:	4b03      	ldr	r3, [pc, #12]	; (8006304 <pvTaskIncrementMutexHeldCount+0x24>)
 80062f8:	681b      	ldr	r3, [r3, #0]
	}
 80062fa:	4618      	mov	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	20000468 	.word	0x20000468

08006308 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006312:	4b29      	ldr	r3, [pc, #164]	; (80063b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006318:	4b28      	ldr	r3, [pc, #160]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3304      	adds	r3, #4
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe f871 	bl	8004406 <uxListRemove>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800632a:	4b24      	ldr	r3, [pc, #144]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	2201      	movs	r2, #1
 8006332:	fa02 f303 	lsl.w	r3, r2, r3
 8006336:	43da      	mvns	r2, r3
 8006338:	4b21      	ldr	r3, [pc, #132]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4013      	ands	r3, r2
 800633e:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006340:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d10a      	bne.n	8006360 <prvAddCurrentTaskToDelayedList+0x58>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d007      	beq.n	8006360 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006350:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	481a      	ldr	r0, [pc, #104]	; (80063c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800635a:	f7fd fff7 	bl	800434c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800635e:	e026      	b.n	80063ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006368:	4b14      	ldr	r3, [pc, #80]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	429a      	cmp	r2, r3
 8006376:	d209      	bcs.n	800638c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006378:	4b13      	ldr	r3, [pc, #76]	; (80063c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f7fe f805 	bl	8004394 <vListInsert>
}
 800638a:	e010      	b.n	80063ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4b0a      	ldr	r3, [pc, #40]	; (80063bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3304      	adds	r3, #4
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f7fd fffb 	bl	8004394 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d202      	bcs.n	80063ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80063a8:	4a09      	ldr	r2, [pc, #36]	; (80063d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6013      	str	r3, [r2, #0]
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	2000056c 	.word	0x2000056c
 80063bc:	20000468 	.word	0x20000468
 80063c0:	20000570 	.word	0x20000570
 80063c4:	20000554 	.word	0x20000554
 80063c8:	20000524 	.word	0x20000524
 80063cc:	20000520 	.word	0x20000520
 80063d0:	20000588 	.word	0x20000588

080063d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	3b04      	subs	r3, #4
 80063e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3b04      	subs	r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f023 0201 	bic.w	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3b04      	subs	r3, #4
 8006402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006404:	4a0c      	ldr	r2, [pc, #48]	; (8006438 <pxPortInitialiseStack+0x64>)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3b14      	subs	r3, #20
 800640e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3b04      	subs	r3, #4
 800641a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f06f 0202 	mvn.w	r2, #2
 8006422:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3b20      	subs	r3, #32
 8006428:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800642a:	68fb      	ldr	r3, [r7, #12]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	0800643d 	.word	0x0800643d

0800643c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006442:	2300      	movs	r3, #0
 8006444:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006446:	4b11      	ldr	r3, [pc, #68]	; (800648c <prvTaskExitError+0x50>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d009      	beq.n	8006464 <prvTaskExitError+0x28>
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	e7fe      	b.n	8006462 <prvTaskExitError+0x26>
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006476:	bf00      	nop
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0fc      	beq.n	8006478 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800647e:	bf00      	nop
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	2000000c 	.word	0x2000000c

08006490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <pxCurrentTCBConst2>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	6808      	ldr	r0, [r1, #0]
 8006496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649a:	f380 8809 	msr	PSP, r0
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f380 8811 	msr	BASEPRI, r0
 80064aa:	4770      	bx	lr
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst2>:
 80064b0:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064b8:	4808      	ldr	r0, [pc, #32]	; (80064dc <prvPortStartFirstTask+0x24>)
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f380 8808 	msr	MSP, r0
 80064c2:	f04f 0000 	mov.w	r0, #0
 80064c6:	f380 8814 	msr	CONTROL, r0
 80064ca:	b662      	cpsie	i
 80064cc:	b661      	cpsie	f
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	df00      	svc	0
 80064d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064da:	bf00      	nop
 80064dc:	e000ed08 	.word	0xe000ed08

080064e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064e6:	4b44      	ldr	r3, [pc, #272]	; (80065f8 <xPortStartScheduler+0x118>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a44      	ldr	r2, [pc, #272]	; (80065fc <xPortStartScheduler+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d109      	bne.n	8006504 <xPortStartScheduler+0x24>
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	e7fe      	b.n	8006502 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006504:	4b3c      	ldr	r3, [pc, #240]	; (80065f8 <xPortStartScheduler+0x118>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a3d      	ldr	r2, [pc, #244]	; (8006600 <xPortStartScheduler+0x120>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d109      	bne.n	8006522 <xPortStartScheduler+0x42>
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e7fe      	b.n	8006520 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006522:	4b38      	ldr	r3, [pc, #224]	; (8006604 <xPortStartScheduler+0x124>)
 8006524:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	22ff      	movs	r2, #255	; 0xff
 8006532:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006544:	b2da      	uxtb	r2, r3
 8006546:	4b30      	ldr	r3, [pc, #192]	; (8006608 <xPortStartScheduler+0x128>)
 8006548:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800654a:	4b30      	ldr	r3, [pc, #192]	; (800660c <xPortStartScheduler+0x12c>)
 800654c:	2207      	movs	r2, #7
 800654e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006550:	e009      	b.n	8006566 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006552:	4b2e      	ldr	r3, [pc, #184]	; (800660c <xPortStartScheduler+0x12c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3b01      	subs	r3, #1
 8006558:	4a2c      	ldr	r2, [pc, #176]	; (800660c <xPortStartScheduler+0x12c>)
 800655a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	b2db      	uxtb	r3, r3
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	b2db      	uxtb	r3, r3
 8006564:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b80      	cmp	r3, #128	; 0x80
 8006570:	d0ef      	beq.n	8006552 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006572:	4b26      	ldr	r3, [pc, #152]	; (800660c <xPortStartScheduler+0x12c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f1c3 0307 	rsb	r3, r3, #7
 800657a:	2b04      	cmp	r3, #4
 800657c:	d009      	beq.n	8006592 <xPortStartScheduler+0xb2>
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	60bb      	str	r3, [r7, #8]
 8006590:	e7fe      	b.n	8006590 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006592:	4b1e      	ldr	r3, [pc, #120]	; (800660c <xPortStartScheduler+0x12c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	4a1c      	ldr	r2, [pc, #112]	; (800660c <xPortStartScheduler+0x12c>)
 800659a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800659c:	4b1b      	ldr	r3, [pc, #108]	; (800660c <xPortStartScheduler+0x12c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065a4:	4a19      	ldr	r2, [pc, #100]	; (800660c <xPortStartScheduler+0x12c>)
 80065a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065b0:	4b17      	ldr	r3, [pc, #92]	; (8006610 <xPortStartScheduler+0x130>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a16      	ldr	r2, [pc, #88]	; (8006610 <xPortStartScheduler+0x130>)
 80065b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065bc:	4b14      	ldr	r3, [pc, #80]	; (8006610 <xPortStartScheduler+0x130>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a13      	ldr	r2, [pc, #76]	; (8006610 <xPortStartScheduler+0x130>)
 80065c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80065c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065c8:	f000 f8d6 	bl	8006778 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <xPortStartScheduler+0x134>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065d2:	f000 f8f5 	bl	80067c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <xPortStartScheduler+0x138>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a0f      	ldr	r2, [pc, #60]	; (8006618 <xPortStartScheduler+0x138>)
 80065dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065e2:	f7ff ff69 	bl	80064b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065e6:	f7ff fa8d 	bl	8005b04 <vTaskSwitchContext>
	prvTaskExitError();
 80065ea:	f7ff ff27 	bl	800643c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed00 	.word	0xe000ed00
 80065fc:	410fc271 	.word	0x410fc271
 8006600:	410fc270 	.word	0x410fc270
 8006604:	e000e400 	.word	0xe000e400
 8006608:	20000594 	.word	0x20000594
 800660c:	20000598 	.word	0x20000598
 8006610:	e000ed20 	.word	0xe000ed20
 8006614:	2000000c 	.word	0x2000000c
 8006618:	e000ef34 	.word	0xe000ef34

0800661c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <vPortEnterCritical+0x54>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	4a0d      	ldr	r2, [pc, #52]	; (8006670 <vPortEnterCritical+0x54>)
 800663c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800663e:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <vPortEnterCritical+0x54>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d10e      	bne.n	8006664 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <vPortEnterCritical+0x58>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <vPortEnterCritical+0x48>
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	603b      	str	r3, [r7, #0]
 8006662:	e7fe      	b.n	8006662 <vPortEnterCritical+0x46>
	}
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	2000000c 	.word	0x2000000c
 8006674:	e000ed04 	.word	0xe000ed04

08006678 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800667e:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <vPortExitCritical+0x4c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d109      	bne.n	800669a <vPortExitCritical+0x22>
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	607b      	str	r3, [r7, #4]
 8006698:	e7fe      	b.n	8006698 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <vPortExitCritical+0x4c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3b01      	subs	r3, #1
 80066a0:	4a08      	ldr	r2, [pc, #32]	; (80066c4 <vPortExitCritical+0x4c>)
 80066a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066a4:	4b07      	ldr	r3, [pc, #28]	; (80066c4 <vPortExitCritical+0x4c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d104      	bne.n	80066b6 <vPortExitCritical+0x3e>
 80066ac:	2300      	movs	r3, #0
 80066ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	2000000c 	.word	0x2000000c
	...

080066d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066d0:	f3ef 8009 	mrs	r0, PSP
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	4b15      	ldr	r3, [pc, #84]	; (8006730 <pxCurrentTCBConst>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	f01e 0f10 	tst.w	lr, #16
 80066e0:	bf08      	it	eq
 80066e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ea:	6010      	str	r0, [r2, #0]
 80066ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066f4:	f380 8811 	msr	BASEPRI, r0
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f7ff fa00 	bl	8005b04 <vTaskSwitchContext>
 8006704:	f04f 0000 	mov.w	r0, #0
 8006708:	f380 8811 	msr	BASEPRI, r0
 800670c:	bc09      	pop	{r0, r3}
 800670e:	6819      	ldr	r1, [r3, #0]
 8006710:	6808      	ldr	r0, [r1, #0]
 8006712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006716:	f01e 0f10 	tst.w	lr, #16
 800671a:	bf08      	it	eq
 800671c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006720:	f380 8809 	msr	PSP, r0
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	f3af 8000 	nop.w

08006730 <pxCurrentTCBConst>:
 8006730:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop

08006738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	f383 8811 	msr	BASEPRI, r3
 8006746:	f3bf 8f6f 	isb	sy
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006750:	f7ff f920 	bl	8005994 <xTaskIncrementTick>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800675a:	4b06      	ldr	r3, [pc, #24]	; (8006774 <SysTick_Handler+0x3c>)
 800675c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	2300      	movs	r3, #0
 8006764:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800676c:	bf00      	nop
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	e000ed04 	.word	0xe000ed04

08006778 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <vPortSetupTimerInterrupt+0x34>)
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006782:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <vPortSetupTimerInterrupt+0x38>)
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <vPortSetupTimerInterrupt+0x3c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a0a      	ldr	r2, [pc, #40]	; (80067b8 <vPortSetupTimerInterrupt+0x40>)
 800678e:	fba2 2303 	umull	r2, r3, r2, r3
 8006792:	099b      	lsrs	r3, r3, #6
 8006794:	4a09      	ldr	r2, [pc, #36]	; (80067bc <vPortSetupTimerInterrupt+0x44>)
 8006796:	3b01      	subs	r3, #1
 8006798:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800679a:	4b04      	ldr	r3, [pc, #16]	; (80067ac <vPortSetupTimerInterrupt+0x34>)
 800679c:	2207      	movs	r2, #7
 800679e:	601a      	str	r2, [r3, #0]
}
 80067a0:	bf00      	nop
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	e000e010 	.word	0xe000e010
 80067b0:	e000e018 	.word	0xe000e018
 80067b4:	20000000 	.word	0x20000000
 80067b8:	10624dd3 	.word	0x10624dd3
 80067bc:	e000e014 	.word	0xe000e014

080067c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067d0 <vPortEnableVFP+0x10>
 80067c4:	6801      	ldr	r1, [r0, #0]
 80067c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ca:	6001      	str	r1, [r0, #0]
 80067cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067ce:	bf00      	nop
 80067d0:	e000ed88 	.word	0xe000ed88

080067d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067da:	f3ef 8305 	mrs	r3, IPSR
 80067de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	d913      	bls.n	800680e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067e6:	4a16      	ldr	r2, [pc, #88]	; (8006840 <vPortValidateInterruptPriority+0x6c>)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067f0:	4b14      	ldr	r3, [pc, #80]	; (8006844 <vPortValidateInterruptPriority+0x70>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	7afa      	ldrb	r2, [r7, #11]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d209      	bcs.n	800680e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	607b      	str	r3, [r7, #4]
 800680c:	e7fe      	b.n	800680c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800680e:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <vPortValidateInterruptPriority+0x74>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006816:	4b0d      	ldr	r3, [pc, #52]	; (800684c <vPortValidateInterruptPriority+0x78>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d909      	bls.n	8006832 <vPortValidateInterruptPriority+0x5e>
 800681e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	e7fe      	b.n	8006830 <vPortValidateInterruptPriority+0x5c>
	}
 8006832:	bf00      	nop
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	e000e3f0 	.word	0xe000e3f0
 8006844:	20000594 	.word	0x20000594
 8006848:	e000ed0c 	.word	0xe000ed0c
 800684c:	20000598 	.word	0x20000598

08006850 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08a      	sub	sp, #40	; 0x28
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800685c:	f7fe ffce 	bl	80057fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006860:	4b57      	ldr	r3, [pc, #348]	; (80069c0 <pvPortMalloc+0x170>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006868:	f000 f90c 	bl	8006a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800686c:	4b55      	ldr	r3, [pc, #340]	; (80069c4 <pvPortMalloc+0x174>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	f040 808c 	bne.w	8006992 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01c      	beq.n	80068ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006880:	2208      	movs	r2, #8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4413      	add	r3, r2
 8006886:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	2b00      	cmp	r3, #0
 8006890:	d013      	beq.n	80068ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f023 0307 	bic.w	r3, r3, #7
 8006898:	3308      	adds	r3, #8
 800689a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <pvPortMalloc+0x6a>
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e7fe      	b.n	80068b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d068      	beq.n	8006992 <pvPortMalloc+0x142>
 80068c0:	4b41      	ldr	r3, [pc, #260]	; (80069c8 <pvPortMalloc+0x178>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d863      	bhi.n	8006992 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068ca:	4b40      	ldr	r3, [pc, #256]	; (80069cc <pvPortMalloc+0x17c>)
 80068cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068ce:	4b3f      	ldr	r3, [pc, #252]	; (80069cc <pvPortMalloc+0x17c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068d4:	e004      	b.n	80068e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d903      	bls.n	80068f2 <pvPortMalloc+0xa2>
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1f1      	bne.n	80068d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068f2:	4b33      	ldr	r3, [pc, #204]	; (80069c0 <pvPortMalloc+0x170>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d04a      	beq.n	8006992 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2208      	movs	r2, #8
 8006902:	4413      	add	r3, r2
 8006904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800690e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	2308      	movs	r3, #8
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	429a      	cmp	r2, r3
 800691c:	d91e      	bls.n	800695c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800691e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4413      	add	r3, r2
 8006924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <pvPortMalloc+0xf4>
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	613b      	str	r3, [r7, #16]
 8006942:	e7fe      	b.n	8006942 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006956:	69b8      	ldr	r0, [r7, #24]
 8006958:	f000 f8f6 	bl	8006b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800695c:	4b1a      	ldr	r3, [pc, #104]	; (80069c8 <pvPortMalloc+0x178>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <pvPortMalloc+0x178>)
 8006968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800696a:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <pvPortMalloc+0x178>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4b18      	ldr	r3, [pc, #96]	; (80069d0 <pvPortMalloc+0x180>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d203      	bcs.n	800697e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006976:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <pvPortMalloc+0x178>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <pvPortMalloc+0x180>)
 800697c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <pvPortMalloc+0x174>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	431a      	orrs	r2, r3
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006992:	f7fe ff41 	bl	8005818 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <pvPortMalloc+0x164>
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	e7fe      	b.n	80069b2 <pvPortMalloc+0x162>
	return pvReturn;
 80069b4:	69fb      	ldr	r3, [r7, #28]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3728      	adds	r7, #40	; 0x28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	200041a4 	.word	0x200041a4
 80069c4:	200041b0 	.word	0x200041b0
 80069c8:	200041a8 	.word	0x200041a8
 80069cc:	2000419c 	.word	0x2000419c
 80069d0:	200041ac 	.word	0x200041ac

080069d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d046      	beq.n	8006a74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069e6:	2308      	movs	r3, #8
 80069e8:	425b      	negs	r3, r3
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	4b20      	ldr	r3, [pc, #128]	; (8006a7c <vPortFree+0xa8>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <vPortFree+0x42>
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	e7fe      	b.n	8006a14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d009      	beq.n	8006a32 <vPortFree+0x5e>
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	60bb      	str	r3, [r7, #8]
 8006a30:	e7fe      	b.n	8006a30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b11      	ldr	r3, [pc, #68]	; (8006a7c <vPortFree+0xa8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d019      	beq.n	8006a74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d115      	bne.n	8006a74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <vPortFree+0xa8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	43db      	mvns	r3, r3
 8006a52:	401a      	ands	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a58:	f7fe fed0 	bl	80057fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4b07      	ldr	r3, [pc, #28]	; (8006a80 <vPortFree+0xac>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4413      	add	r3, r2
 8006a66:	4a06      	ldr	r2, [pc, #24]	; (8006a80 <vPortFree+0xac>)
 8006a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a6a:	6938      	ldr	r0, [r7, #16]
 8006a6c:	f000 f86c 	bl	8006b48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006a70:	f7fe fed2 	bl	8005818 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a74:	bf00      	nop
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	200041b0 	.word	0x200041b0
 8006a80:	200041a8 	.word	0x200041a8

08006a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <prvHeapInit+0xac>)
 8006a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 0307 	and.w	r3, r3, #7
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00c      	beq.n	8006ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0307 	bic.w	r3, r3, #7
 8006aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	4a1f      	ldr	r2, [pc, #124]	; (8006b30 <prvHeapInit+0xac>)
 8006ab4:	4413      	add	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <prvHeapInit+0xb0>)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ac2:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <prvHeapInit+0xb0>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	4413      	add	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ad0:	2208      	movs	r2, #8
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f023 0307 	bic.w	r3, r3, #7
 8006ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <prvHeapInit+0xb4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2200      	movs	r2, #0
 8006aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006aee:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <prvHeapInit+0xb4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <prvHeapInit+0xb4>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <prvHeapInit+0xb8>)
 8006b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <prvHeapInit+0xbc>)
 8006b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <prvHeapInit+0xc0>)
 8006b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	2000059c 	.word	0x2000059c
 8006b34:	2000419c 	.word	0x2000419c
 8006b38:	200041a4 	.word	0x200041a4
 8006b3c:	200041ac 	.word	0x200041ac
 8006b40:	200041a8 	.word	0x200041a8
 8006b44:	200041b0 	.word	0x200041b0

08006b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b50:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <prvInsertBlockIntoFreeList+0xac>)
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	e002      	b.n	8006b5c <prvInsertBlockIntoFreeList+0x14>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d8f7      	bhi.n	8006b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	4413      	add	r3, r2
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d108      	bne.n	8006b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	441a      	add	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	441a      	add	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d118      	bne.n	8006bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d00d      	beq.n	8006bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	e008      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e003      	b.n	8006bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d002      	beq.n	8006be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	2000419c 	.word	0x2000419c
 8006bf8:	200041a4 	.word	0x200041a4

08006bfc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f002 fc69 	bl	80094e8 <tcpip_send_msg_wait_sem>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8006c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <netconn_apimsg+0x2e>
    return apimsg->err;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006c28:	e001      	b.n	8006c2e <netconn_apimsg+0x32>
  }
  return err;
 8006c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	603a      	str	r2, [r7, #0]
 8006c42:	71fb      	strb	r3, [r7, #7]
 8006c44:	460b      	mov	r3, r1
 8006c46:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fdd1 	bl	80077f4 <netconn_alloc>
 8006c52:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8006c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d054      	beq.n	8006d04 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006c5a:	79bb      	ldrb	r3, [r7, #6]
 8006c5c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006c62:	f107 0308 	add.w	r3, r7, #8
 8006c66:	4619      	mov	r1, r3
 8006c68:	4829      	ldr	r0, [pc, #164]	; (8006d10 <netconn_new_with_proto_and_callback+0xd8>)
 8006c6a:	f7ff ffc7 	bl	8006bfc <netconn_apimsg>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8006c74:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d043      	beq.n	8006d04 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <netconn_new_with_proto_and_callback+0x58>
 8006c84:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <netconn_new_with_proto_and_callback+0xdc>)
 8006c86:	22a3      	movs	r2, #163	; 0xa3
 8006c88:	4923      	ldr	r1, [pc, #140]	; (8006d18 <netconn_new_with_proto_and_callback+0xe0>)
 8006c8a:	4824      	ldr	r0, [pc, #144]	; (8006d1c <netconn_new_with_proto_and_callback+0xe4>)
 8006c8c:	f00e f858 	bl	8014d40 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	3310      	adds	r3, #16
 8006c94:	4618      	mov	r0, r3
 8006c96:	f00d feb4 	bl	8014a02 <sys_mbox_valid>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d105      	bne.n	8006cac <netconn_new_with_proto_and_callback+0x74>
 8006ca0:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <netconn_new_with_proto_and_callback+0xdc>)
 8006ca2:	22a4      	movs	r2, #164	; 0xa4
 8006ca4:	491e      	ldr	r1, [pc, #120]	; (8006d20 <netconn_new_with_proto_and_callback+0xe8>)
 8006ca6:	481d      	ldr	r0, [pc, #116]	; (8006d1c <netconn_new_with_proto_and_callback+0xe4>)
 8006ca8:	f00e f84a 	bl	8014d40 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	3314      	adds	r3, #20
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f00d fea6 	bl	8014a02 <sys_mbox_valid>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <netconn_new_with_proto_and_callback+0x90>
 8006cbc:	4b15      	ldr	r3, [pc, #84]	; (8006d14 <netconn_new_with_proto_and_callback+0xdc>)
 8006cbe:	22a6      	movs	r2, #166	; 0xa6
 8006cc0:	4918      	ldr	r1, [pc, #96]	; (8006d24 <netconn_new_with_proto_and_callback+0xec>)
 8006cc2:	4816      	ldr	r0, [pc, #88]	; (8006d1c <netconn_new_with_proto_and_callback+0xe4>)
 8006cc4:	f00e f83c 	bl	8014d40 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	330c      	adds	r3, #12
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f00d ff29 	bl	8014b24 <sys_sem_valid>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <netconn_new_with_proto_and_callback+0xac>
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	; (8006d14 <netconn_new_with_proto_and_callback+0xdc>)
 8006cda:	22a9      	movs	r2, #169	; 0xa9
 8006cdc:	4912      	ldr	r1, [pc, #72]	; (8006d28 <netconn_new_with_proto_and_callback+0xf0>)
 8006cde:	480f      	ldr	r0, [pc, #60]	; (8006d1c <netconn_new_with_proto_and_callback+0xe4>)
 8006ce0:	f00e f82e 	bl	8014d40 <iprintf>
      sys_sem_free(&conn->op_completed);
 8006ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f00d ff0e 	bl	8014b0a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	3310      	adds	r3, #16
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f00d fdfe 	bl	80148f4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cfa:	2007      	movs	r0, #7
 8006cfc:	f003 f95c 	bl	8009fb8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	e000      	b.n	8006d06 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3730      	adds	r7, #48	; 0x30
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	080077c9 	.word	0x080077c9
 8006d14:	08015ca8 	.word	0x08015ca8
 8006d18:	08015cdc 	.word	0x08015cdc
 8006d1c:	08015d00 	.word	0x08015d00
 8006d20:	08015d28 	.word	0x08015d28
 8006d24:	08015d40 	.word	0x08015d40
 8006d28:	08015d64 	.word	0x08015d64

08006d2c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08c      	sub	sp, #48	; 0x30
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e014      	b.n	8006d68 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006d42:	2329      	movs	r3, #41	; 0x29
 8006d44:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8006d46:	f107 030c 	add.w	r3, r7, #12
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	4808      	ldr	r0, [pc, #32]	; (8006d70 <netconn_prepare_delete+0x44>)
 8006d4e:	f7ff ff55 	bl	8006bfc <netconn_apimsg>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8006d58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <netconn_prepare_delete+0x3a>
    return err;
 8006d60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d64:	e000      	b.n	8006d68 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3730      	adds	r7, #48	; 0x30
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	08007d2d 	.word	0x08007d2d

08006d74 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <netconn_delete+0x12>
    return ERR_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	e00d      	b.n	8006da2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7ff ffd0 	bl	8006d2c <netconn_prepare_delete>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8006d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <netconn_delete+0x2a>
    netconn_free(conn);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fd99 	bl	80078d0 <netconn_free>
  }
  return err;
 8006d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08e      	sub	sp, #56	; 0x38
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d109      	bne.n	8006dd4 <netconn_connect+0x28>
 8006dc0:	4b11      	ldr	r3, [pc, #68]	; (8006e08 <netconn_connect+0x5c>)
 8006dc2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8006dc6:	4911      	ldr	r1, [pc, #68]	; (8006e0c <netconn_connect+0x60>)
 8006dc8:	4811      	ldr	r0, [pc, #68]	; (8006e10 <netconn_connect+0x64>)
 8006dca:	f00d ffb9 	bl	8014d40 <iprintf>
 8006dce:	f06f 030f 	mvn.w	r3, #15
 8006dd2:	e015      	b.n	8006e00 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8006dda:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <netconn_connect+0x68>)
 8006ddc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8006dea:	f107 0314 	add.w	r3, r7, #20
 8006dee:	4619      	mov	r1, r3
 8006df0:	4809      	ldr	r0, [pc, #36]	; (8006e18 <netconn_connect+0x6c>)
 8006df2:	f7ff ff03 	bl	8006bfc <netconn_apimsg>
 8006df6:	4603      	mov	r3, r0
 8006df8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8006dfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3738      	adds	r7, #56	; 0x38
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	08015ca8 	.word	0x08015ca8
 8006e0c:	08015e1c 	.word	0x08015e1c
 8006e10:	08015d00 	.word	0x08015d00
 8006e14:	08019728 	.word	0x08019728
 8006e18:	08008015 	.word	0x08008015

08006e1c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08c      	sub	sp, #48	; 0x30
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <netconn_disconnect+0x22>
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <netconn_disconnect+0x44>)
 8006e2c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8006e30:	490c      	ldr	r1, [pc, #48]	; (8006e64 <netconn_disconnect+0x48>)
 8006e32:	480d      	ldr	r0, [pc, #52]	; (8006e68 <netconn_disconnect+0x4c>)
 8006e34:	f00d ff84 	bl	8014d40 <iprintf>
 8006e38:	f06f 030f 	mvn.w	r3, #15
 8006e3c:	e00c      	b.n	8006e58 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8006e42:	f107 030c 	add.w	r3, r7, #12
 8006e46:	4619      	mov	r1, r3
 8006e48:	4808      	ldr	r0, [pc, #32]	; (8006e6c <netconn_disconnect+0x50>)
 8006e4a:	f7ff fed7 	bl	8006bfc <netconn_apimsg>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8006e54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3730      	adds	r7, #48	; 0x30
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	08015ca8 	.word	0x08015ca8
 8006e64:	08015e3c 	.word	0x08015e3c
 8006e68:	08015d00 	.word	0x08015d00
 8006e6c:	08008191 	.word	0x08008191

08006e70 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08c      	sub	sp, #48	; 0x30
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <netconn_send+0x24>
 8006e80:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <netconn_send+0x4c>)
 8006e82:	f240 32b2 	movw	r2, #946	; 0x3b2
 8006e86:	490e      	ldr	r1, [pc, #56]	; (8006ec0 <netconn_send+0x50>)
 8006e88:	480e      	ldr	r0, [pc, #56]	; (8006ec4 <netconn_send+0x54>)
 8006e8a:	f00d ff59 	bl	8014d40 <iprintf>
 8006e8e:	f06f 030f 	mvn.w	r3, #15
 8006e92:	e00e      	b.n	8006eb2 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8006e9c:	f107 030c 	add.w	r3, r7, #12
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4809      	ldr	r0, [pc, #36]	; (8006ec8 <netconn_send+0x58>)
 8006ea4:	f7ff feaa 	bl	8006bfc <netconn_apimsg>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8006eae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3730      	adds	r7, #48	; 0x30
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	08015ca8 	.word	0x08015ca8
 8006ec0:	08015f64 	.word	0x08015f64
 8006ec4:	08015d00 	.word	0x08015d00
 8006ec8:	080081cd 	.word	0x080081cd

08006ecc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af02      	add	r7, sp, #8
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	f107 0110 	add.w	r1, r7, #16
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	4613      	mov	r3, r2
 8006eee:	2201      	movs	r2, #1
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f805 	bl	8006f00 <netconn_write_vectors_partly>
 8006ef6:	4603      	mov	r3, r0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b092      	sub	sp, #72	; 0x48
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	460b      	mov	r3, r1
 8006f10:	80fb      	strh	r3, [r7, #6]
 8006f12:	4613      	mov	r3, r2
 8006f14:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d109      	bne.n	8006f30 <netconn_write_vectors_partly+0x30>
 8006f1c:	4b4e      	ldr	r3, [pc, #312]	; (8007058 <netconn_write_vectors_partly+0x158>)
 8006f1e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006f22:	494e      	ldr	r1, [pc, #312]	; (800705c <netconn_write_vectors_partly+0x15c>)
 8006f24:	484e      	ldr	r0, [pc, #312]	; (8007060 <netconn_write_vectors_partly+0x160>)
 8006f26:	f00d ff0b 	bl	8014d40 <iprintf>
 8006f2a:	f06f 030f 	mvn.w	r3, #15
 8006f2e:	e08e      	b.n	800704e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f38:	2b10      	cmp	r3, #16
 8006f3a:	d009      	beq.n	8006f50 <netconn_write_vectors_partly+0x50>
 8006f3c:	4b46      	ldr	r3, [pc, #280]	; (8007058 <netconn_write_vectors_partly+0x158>)
 8006f3e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006f42:	4948      	ldr	r1, [pc, #288]	; (8007064 <netconn_write_vectors_partly+0x164>)
 8006f44:	4846      	ldr	r0, [pc, #280]	; (8007060 <netconn_write_vectors_partly+0x160>)
 8006f46:	f00d fefb 	bl	8014d40 <iprintf>
 8006f4a:	f06f 0305 	mvn.w	r3, #5
 8006f4e:	e07e      	b.n	800704e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	7f1b      	ldrb	r3, [r3, #28]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <netconn_write_vectors_partly+0x66>
 8006f5c:	797b      	ldrb	r3, [r7, #5]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <netconn_write_vectors_partly+0x6a>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <netconn_write_vectors_partly+0x6c>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8006f70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d005      	beq.n	8006f84 <netconn_write_vectors_partly+0x84>
 8006f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8006f7e:	f06f 0305 	mvn.w	r3, #5
 8006f82:	e064      	b.n	800704e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8006f88:	2300      	movs	r3, #0
 8006f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8006f8c:	e015      	b.n	8006fba <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8006f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	4413      	add	r3, r2
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f9a:	4413      	add	r3, r2
 8006f9c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8006f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d202      	bcs.n	8006fb4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8006fae:	f06f 0305 	mvn.w	r3, #5
 8006fb2:	e04c      	b.n	800704e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8006fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	643b      	str	r3, [r7, #64]	; 0x40
 8006fba:	88fb      	ldrh	r3, [r7, #6]
 8006fbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	dbe5      	blt.n	8006f8e <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8006fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e040      	b.n	800704e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8006fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	da0a      	bge.n	8006fe8 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8006fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8006fd8:	f06f 0305 	mvn.w	r3, #5
 8006fdc:	e037      	b.n	800704e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8006fde:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006fe2:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8006ff0:	88fb      	ldrh	r3, [r7, #6]
 8006ff2:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006ff8:	797b      	ldrb	r3, [r7, #5]
 8006ffa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8006ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007000:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8007006:	f107 0314 	add.w	r3, r7, #20
 800700a:	4619      	mov	r1, r3
 800700c:	4816      	ldr	r0, [pc, #88]	; (8007068 <netconn_write_vectors_partly+0x168>)
 800700e:	f7ff fdf5 	bl	8006bfc <netconn_apimsg>
 8007012:	4603      	mov	r3, r0
 8007014:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8007018:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800701c:	2b00      	cmp	r3, #0
 800701e:	d114      	bne.n	800704a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8007020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8007026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800702c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10a      	bne.n	800704a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007038:	429a      	cmp	r2, r3
 800703a:	d006      	beq.n	800704a <netconn_write_vectors_partly+0x14a>
 800703c:	4b06      	ldr	r3, [pc, #24]	; (8007058 <netconn_write_vectors_partly+0x158>)
 800703e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007042:	490a      	ldr	r1, [pc, #40]	; (800706c <netconn_write_vectors_partly+0x16c>)
 8007044:	4806      	ldr	r0, [pc, #24]	; (8007060 <netconn_write_vectors_partly+0x160>)
 8007046:	f00d fe7b 	bl	8014d40 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800704a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800704e:	4618      	mov	r0, r3
 8007050:	3748      	adds	r7, #72	; 0x48
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	08015ca8 	.word	0x08015ca8
 800705c:	08015f80 	.word	0x08015f80
 8007060:	08015d00 	.word	0x08015d00
 8007064:	08015f9c 	.word	0x08015f9c
 8007068:	08008601 	.word	0x08008601
 800706c:	08015fc0 	.word	0x08015fc0

08007070 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <netconn_err+0x12>
    return ERR_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	e00d      	b.n	800709e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8007082:	f00d fdd9 	bl	8014c38 <sys_arch_protect>
 8007086:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7a1b      	ldrb	r3, [r3, #8]
 800708c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f00d fddd 	bl	8014c54 <sys_arch_unprotect>
  return err;
 800709a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80070b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070b6:	f113 0f0e 	cmn.w	r3, #14
 80070ba:	d008      	beq.n	80070ce <lwip_netconn_err_to_msg+0x26>
 80070bc:	f113 0f0d 	cmn.w	r3, #13
 80070c0:	d003      	beq.n	80070ca <lwip_netconn_err_to_msg+0x22>
 80070c2:	f113 0f0f 	cmn.w	r3, #15
 80070c6:	d004      	beq.n	80070d2 <lwip_netconn_err_to_msg+0x2a>
 80070c8:	e005      	b.n	80070d6 <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <lwip_netconn_err_to_msg+0x4c>)
 80070cc:	e00e      	b.n	80070ec <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80070ce:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <lwip_netconn_err_to_msg+0x50>)
 80070d0:	e00c      	b.n	80070ec <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80070d2:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <lwip_netconn_err_to_msg+0x54>)
 80070d4:	e00a      	b.n	80070ec <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80070d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <lwip_netconn_err_to_msg+0x42>
 80070de:	4b08      	ldr	r3, [pc, #32]	; (8007100 <lwip_netconn_err_to_msg+0x58>)
 80070e0:	227d      	movs	r2, #125	; 0x7d
 80070e2:	4908      	ldr	r1, [pc, #32]	; (8007104 <lwip_netconn_err_to_msg+0x5c>)
 80070e4:	4808      	ldr	r0, [pc, #32]	; (8007108 <lwip_netconn_err_to_msg+0x60>)
 80070e6:	f00d fe2b 	bl	8014d40 <iprintf>
      return NULL;
 80070ea:	2300      	movs	r3, #0
  }
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	080195d0 	.word	0x080195d0
 80070f8:	080195d1 	.word	0x080195d1
 80070fc:	080195d2 	.word	0x080195d2
 8007100:	08016000 	.word	0x08016000
 8007104:	08016034 	.word	0x08016034
 8007108:	08016044 	.word	0x08016044

0800710c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d105      	bne.n	8007128 <lwip_netconn_is_err_msg+0x1c>
 800711c:	4b12      	ldr	r3, [pc, #72]	; (8007168 <lwip_netconn_is_err_msg+0x5c>)
 800711e:	2285      	movs	r2, #133	; 0x85
 8007120:	4912      	ldr	r1, [pc, #72]	; (800716c <lwip_netconn_is_err_msg+0x60>)
 8007122:	4813      	ldr	r0, [pc, #76]	; (8007170 <lwip_netconn_is_err_msg+0x64>)
 8007124:	f00d fe0c 	bl	8014d40 <iprintf>

  if (msg == &netconn_aborted) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a12      	ldr	r2, [pc, #72]	; (8007174 <lwip_netconn_is_err_msg+0x68>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d104      	bne.n	800713a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	22f3      	movs	r2, #243	; 0xf3
 8007134:	701a      	strb	r2, [r3, #0]
    return 1;
 8007136:	2301      	movs	r3, #1
 8007138:	e012      	b.n	8007160 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a0e      	ldr	r2, [pc, #56]	; (8007178 <lwip_netconn_is_err_msg+0x6c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d104      	bne.n	800714c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	22f2      	movs	r2, #242	; 0xf2
 8007146:	701a      	strb	r2, [r3, #0]
    return 1;
 8007148:	2301      	movs	r3, #1
 800714a:	e009      	b.n	8007160 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a0b      	ldr	r2, [pc, #44]	; (800717c <lwip_netconn_is_err_msg+0x70>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d104      	bne.n	800715e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	22f1      	movs	r2, #241	; 0xf1
 8007158:	701a      	strb	r2, [r3, #0]
    return 1;
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	08016000 	.word	0x08016000
 800716c:	0801606c 	.word	0x0801606c
 8007170:	08016044 	.word	0x08016044
 8007174:	080195d0 	.word	0x080195d0
 8007178:	080195d1 	.word	0x080195d1
 800717c:	080195d2 	.word	0x080195d2

08007180 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d105      	bne.n	80071a0 <recv_udp+0x20>
 8007194:	4b34      	ldr	r3, [pc, #208]	; (8007268 <recv_udp+0xe8>)
 8007196:	22e5      	movs	r2, #229	; 0xe5
 8007198:	4934      	ldr	r1, [pc, #208]	; (800726c <recv_udp+0xec>)
 800719a:	4835      	ldr	r0, [pc, #212]	; (8007270 <recv_udp+0xf0>)
 800719c:	f00d fdd0 	bl	8014d40 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d105      	bne.n	80071b2 <recv_udp+0x32>
 80071a6:	4b30      	ldr	r3, [pc, #192]	; (8007268 <recv_udp+0xe8>)
 80071a8:	22e6      	movs	r2, #230	; 0xe6
 80071aa:	4932      	ldr	r1, [pc, #200]	; (8007274 <recv_udp+0xf4>)
 80071ac:	4830      	ldr	r0, [pc, #192]	; (8007270 <recv_udp+0xf0>)
 80071ae:	f00d fdc7 	bl	8014d40 <iprintf>
  conn = (struct netconn *)arg;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d103      	bne.n	80071c4 <recv_udp+0x44>
    pbuf_free(p);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f003 fd9b 	bl	800acf8 <pbuf_free>
    return;
 80071c2:	e04d      	b.n	8007260 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d005      	beq.n	80071da <recv_udp+0x5a>
 80071ce:	4b26      	ldr	r3, [pc, #152]	; (8007268 <recv_udp+0xe8>)
 80071d0:	22ee      	movs	r2, #238	; 0xee
 80071d2:	4929      	ldr	r1, [pc, #164]	; (8007278 <recv_udp+0xf8>)
 80071d4:	4826      	ldr	r0, [pc, #152]	; (8007270 <recv_udp+0xf0>)
 80071d6:	f00d fdb3 	bl	8014d40 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	3310      	adds	r3, #16
 80071de:	4618      	mov	r0, r3
 80071e0:	f00d fc0f 	bl	8014a02 <sys_mbox_valid>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f003 fd84 	bl	800acf8 <pbuf_free>
    return;
 80071f0:	e036      	b.n	8007260 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80071f2:	2006      	movs	r0, #6
 80071f4:	f002 fe8e 	bl	8009f14 <memp_malloc>
 80071f8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <recv_udp+0x88>
    pbuf_free(p);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f003 fd79 	bl	800acf8 <pbuf_free>
    return;
 8007206:	e02b      	b.n	8007260 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <recv_udp+0xa0>
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	e000      	b.n	8007222 <recv_udp+0xa2>
 8007220:	2300      	movs	r3, #0
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800722a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	891b      	ldrh	r3, [r3, #8]
 8007230:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	3310      	adds	r3, #16
 8007236:	69b9      	ldr	r1, [r7, #24]
 8007238:	4618      	mov	r0, r3
 800723a:	f00d fb6d 	bl	8014918 <sys_mbox_trypost>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <recv_udp+0xcc>
    netbuf_delete(buf);
 8007244:	69b8      	ldr	r0, [r7, #24]
 8007246:	f001 fa85 	bl	8008754 <netbuf_delete>
    return;
 800724a:	e009      	b.n	8007260 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <recv_udp+0xe0>
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	8afa      	ldrh	r2, [r7, #22]
 800725a:	2100      	movs	r1, #0
 800725c:	69f8      	ldr	r0, [r7, #28]
 800725e:	4798      	blx	r3
  }
}
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	08016000 	.word	0x08016000
 800726c:	08016078 	.word	0x08016078
 8007270:	08016044 	.word	0x08016044
 8007274:	0801609c 	.word	0x0801609c
 8007278:	080160bc 	.word	0x080160bc

0800727c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d106      	bne.n	800729e <recv_tcp+0x22>
 8007290:	4b36      	ldr	r3, [pc, #216]	; (800736c <recv_tcp+0xf0>)
 8007292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007296:	4936      	ldr	r1, [pc, #216]	; (8007370 <recv_tcp+0xf4>)
 8007298:	4836      	ldr	r0, [pc, #216]	; (8007374 <recv_tcp+0xf8>)
 800729a:	f00d fd51 	bl	8014d40 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <recv_tcp+0x36>
 80072a4:	4b31      	ldr	r3, [pc, #196]	; (800736c <recv_tcp+0xf0>)
 80072a6:	f240 122d 	movw	r2, #301	; 0x12d
 80072aa:	4933      	ldr	r1, [pc, #204]	; (8007378 <recv_tcp+0xfc>)
 80072ac:	4831      	ldr	r0, [pc, #196]	; (8007374 <recv_tcp+0xf8>)
 80072ae:	f00d fd47 	bl	8014d40 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80072b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d006      	beq.n	80072c8 <recv_tcp+0x4c>
 80072ba:	4b2c      	ldr	r3, [pc, #176]	; (800736c <recv_tcp+0xf0>)
 80072bc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80072c0:	492e      	ldr	r1, [pc, #184]	; (800737c <recv_tcp+0x100>)
 80072c2:	482c      	ldr	r0, [pc, #176]	; (8007374 <recv_tcp+0xf8>)
 80072c4:	f00d fd3c 	bl	8014d40 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <recv_tcp+0x5c>
    return ERR_VAL;
 80072d2:	f06f 0305 	mvn.w	r3, #5
 80072d6:	e045      	b.n	8007364 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d006      	beq.n	80072f0 <recv_tcp+0x74>
 80072e2:	4b22      	ldr	r3, [pc, #136]	; (800736c <recv_tcp+0xf0>)
 80072e4:	f240 1235 	movw	r2, #309	; 0x135
 80072e8:	4925      	ldr	r1, [pc, #148]	; (8007380 <recv_tcp+0x104>)
 80072ea:	4822      	ldr	r0, [pc, #136]	; (8007374 <recv_tcp+0xf8>)
 80072ec:	f00d fd28 	bl	8014d40 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	3310      	adds	r3, #16
 80072f4:	4618      	mov	r0, r3
 80072f6:	f00d fb84 	bl	8014a02 <sys_mbox_valid>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10d      	bne.n	800731c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d008      	beq.n	8007318 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	891b      	ldrh	r3, [r3, #8]
 800730a:	4619      	mov	r1, r3
 800730c:	68b8      	ldr	r0, [r7, #8]
 800730e:	f004 fb4f 	bl	800b9b0 <tcp_recved>
      pbuf_free(p);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f003 fcf0 	bl	800acf8 <pbuf_free>
    }
    return ERR_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e023      	b.n	8007364 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <recv_tcp+0xb2>
    msg = p;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	891b      	ldrh	r3, [r3, #8]
 800732a:	83fb      	strh	r3, [r7, #30]
 800732c:	e003      	b.n	8007336 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800732e:	4b15      	ldr	r3, [pc, #84]	; (8007384 <recv_tcp+0x108>)
 8007330:	61bb      	str	r3, [r7, #24]
    len = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	3310      	adds	r3, #16
 800733a:	69b9      	ldr	r1, [r7, #24]
 800733c:	4618      	mov	r0, r3
 800733e:	f00d faeb 	bl	8014918 <sys_mbox_trypost>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8007348:	f04f 33ff 	mov.w	r3, #4294967295
 800734c:	e00a      	b.n	8007364 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <recv_tcp+0xe6>
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	8bfa      	ldrh	r2, [r7, #30]
 800735c:	2100      	movs	r1, #0
 800735e:	6978      	ldr	r0, [r7, #20]
 8007360:	4798      	blx	r3
  }

  return ERR_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3720      	adds	r7, #32
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	08016000 	.word	0x08016000
 8007370:	080160dc 	.word	0x080160dc
 8007374:	08016044 	.word	0x08016044
 8007378:	08016100 	.word	0x08016100
 800737c:	08016120 	.word	0x08016120
 8007380:	08016138 	.word	0x08016138
 8007384:	080195d2 	.word	0x080195d2

08007388 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d106      	bne.n	80073aa <poll_tcp+0x22>
 800739c:	4b29      	ldr	r3, [pc, #164]	; (8007444 <poll_tcp+0xbc>)
 800739e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80073a2:	4929      	ldr	r1, [pc, #164]	; (8007448 <poll_tcp+0xc0>)
 80073a4:	4829      	ldr	r0, [pc, #164]	; (800744c <poll_tcp+0xc4>)
 80073a6:	f00d fccb 	bl	8014d40 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d104      	bne.n	80073bc <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80073b2:	2101      	movs	r1, #1
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 ff57 	bl	8008268 <lwip_netconn_do_writemore>
 80073ba:	e016      	b.n	80073ea <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d112      	bne.n	80073ea <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <poll_tcp+0x5a>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	7a5b      	ldrb	r3, [r3, #9]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	7a5a      	ldrb	r2, [r3, #9]
 80073dc:	3a01      	subs	r2, #1
 80073de:	b2d2      	uxtb	r2, r2
 80073e0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80073e2:	2101      	movs	r1, #1
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fb3b 	bl	8007a60 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	7f1b      	ldrb	r3, [r3, #28]
 80073ee:	f003 0310 	and.w	r3, r3, #16
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d021      	beq.n	800743a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01d      	beq.n	800743a <poll_tcp+0xb2>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007406:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800740a:	d316      	bcc.n	800743a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007414:	2b04      	cmp	r3, #4
 8007416:	d810      	bhi.n	800743a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	7f1b      	ldrb	r3, [r3, #28]
 800741c:	f023 0310 	bic.w	r3, r3, #16
 8007420:	b2da      	uxtb	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <poll_tcp+0xb2>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2200      	movs	r2, #0
 8007434:	2102      	movs	r1, #2
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	08016000 	.word	0x08016000
 8007448:	08016158 	.word	0x08016158
 800744c:	08016044 	.word	0x08016044

08007450 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <sent_tcp+0x26>
 8007468:	4b20      	ldr	r3, [pc, #128]	; (80074ec <sent_tcp+0x9c>)
 800746a:	f240 1293 	movw	r2, #403	; 0x193
 800746e:	4920      	ldr	r1, [pc, #128]	; (80074f0 <sent_tcp+0xa0>)
 8007470:	4820      	ldr	r0, [pc, #128]	; (80074f4 <sent_tcp+0xa4>)
 8007472:	f00d fc65 	bl	8014d40 <iprintf>

  if (conn) {
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d032      	beq.n	80074e2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d104      	bne.n	800748e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007484:	2101      	movs	r1, #1
 8007486:	6978      	ldr	r0, [r7, #20]
 8007488:	f000 feee 	bl	8008268 <lwip_netconn_do_writemore>
 800748c:	e007      	b.n	800749e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b04      	cmp	r3, #4
 8007494:	d103      	bne.n	800749e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007496:	2101      	movs	r1, #1
 8007498:	6978      	ldr	r0, [r7, #20]
 800749a:	f000 fae1 	bl	8007a60 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01d      	beq.n	80074e2 <sent_tcp+0x92>
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80074ae:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80074b2:	d316      	bcc.n	80074e2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80074bc:	2b04      	cmp	r3, #4
 80074be:	d810      	bhi.n	80074e2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	7f1b      	ldrb	r3, [r3, #28]
 80074c4:	f023 0310 	bic.w	r3, r3, #16
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d005      	beq.n	80074e2 <sent_tcp+0x92>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074da:	88fa      	ldrh	r2, [r7, #6]
 80074dc:	2102      	movs	r1, #2
 80074de:	6978      	ldr	r0, [r7, #20]
 80074e0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	08016000 	.word	0x08016000
 80074f0:	08016158 	.word	0x08016158
 80074f4:	08016044 	.word	0x08016044

080074f8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d106      	bne.n	800751c <err_tcp+0x24>
 800750e:	4b5f      	ldr	r3, [pc, #380]	; (800768c <err_tcp+0x194>)
 8007510:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8007514:	495e      	ldr	r1, [pc, #376]	; (8007690 <err_tcp+0x198>)
 8007516:	485f      	ldr	r0, [pc, #380]	; (8007694 <err_tcp+0x19c>)
 8007518:	f00d fc12 	bl	8014d40 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800751c:	f00d fb8c 	bl	8014c38 <sys_arch_protect>
 8007520:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	2200      	movs	r2, #0
 8007526:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	7f1b      	ldrb	r3, [r3, #28]
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	b2da      	uxtb	r2, r3
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2200      	movs	r2, #0
 8007546:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8007548:	69b8      	ldr	r0, [r7, #24]
 800754a:	f00d fb83 	bl	8014c54 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	d005      	beq.n	8007562 <err_tcp+0x6a>
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	2200      	movs	r2, #0
 800755c:	2104      	movs	r1, #4
 800755e:	69f8      	ldr	r0, [r7, #28]
 8007560:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <err_tcp+0x7e>
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	2200      	movs	r2, #0
 8007570:	2100      	movs	r1, #0
 8007572:	69f8      	ldr	r0, [r7, #28]
 8007574:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <err_tcp+0x92>
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	2200      	movs	r2, #0
 8007584:	2102      	movs	r1, #2
 8007586:	69f8      	ldr	r0, [r7, #28]
 8007588:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800758a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff fd8a 	bl	80070a8 <lwip_netconn_err_to_msg>
 8007594:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	3310      	adds	r3, #16
 800759a:	4618      	mov	r0, r3
 800759c:	f00d fa31 	bl	8014a02 <sys_mbox_valid>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d005      	beq.n	80075b2 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	3310      	adds	r3, #16
 80075aa:	6939      	ldr	r1, [r7, #16]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f00d f9b3 	bl	8014918 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	3314      	adds	r3, #20
 80075b6:	4618      	mov	r0, r3
 80075b8:	f00d fa23 	bl	8014a02 <sys_mbox_valid>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	3314      	adds	r3, #20
 80075c6:	6939      	ldr	r1, [r7, #16]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f00d f9a5 	bl	8014918 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d005      	beq.n	80075e0 <err_tcp+0xe8>
 80075d4:	7dfb      	ldrb	r3, [r7, #23]
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d002      	beq.n	80075e0 <err_tcp+0xe8>
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d143      	bne.n	8007668 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	7f1b      	ldrb	r3, [r3, #28]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bf14      	ite	ne
 80075ec:	2301      	movne	r3, #1
 80075ee:	2300      	moveq	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	7f1b      	ldrb	r3, [r3, #28]
 80075f8:	f023 0304 	bic.w	r3, r3, #4
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d13b      	bne.n	8007680 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <err_tcp+0x126>
 8007610:	4b1e      	ldr	r3, [pc, #120]	; (800768c <err_tcp+0x194>)
 8007612:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007616:	4920      	ldr	r1, [pc, #128]	; (8007698 <err_tcp+0x1a0>)
 8007618:	481e      	ldr	r0, [pc, #120]	; (8007694 <err_tcp+0x19c>)
 800761a:	f00d fb91 	bl	8014d40 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b04      	cmp	r3, #4
 8007622:	d104      	bne.n	800762e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	2200      	movs	r2, #0
 800762a:	711a      	strb	r2, [r3, #4]
 800762c:	e003      	b.n	8007636 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	78fa      	ldrb	r2, [r7, #3]
 8007634:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	330c      	adds	r3, #12
 800763e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007640:	68b8      	ldr	r0, [r7, #8]
 8007642:	f00d fa6f 	bl	8014b24 <sys_sem_valid>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <err_tcp+0x162>
 800764c:	4b0f      	ldr	r3, [pc, #60]	; (800768c <err_tcp+0x194>)
 800764e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8007652:	4912      	ldr	r1, [pc, #72]	; (800769c <err_tcp+0x1a4>)
 8007654:	480f      	ldr	r0, [pc, #60]	; (8007694 <err_tcp+0x19c>)
 8007656:	f00d fb73 	bl	8014d40 <iprintf>
      conn->current_msg = NULL;
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	2200      	movs	r2, #0
 800765e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8007660:	68b8      	ldr	r0, [r7, #8]
 8007662:	f00d fa45 	bl	8014af0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8007666:	e00b      	b.n	8007680 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d008      	beq.n	8007682 <err_tcp+0x18a>
 8007670:	4b06      	ldr	r3, [pc, #24]	; (800768c <err_tcp+0x194>)
 8007672:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007676:	490a      	ldr	r1, [pc, #40]	; (80076a0 <err_tcp+0x1a8>)
 8007678:	4806      	ldr	r0, [pc, #24]	; (8007694 <err_tcp+0x19c>)
 800767a:	f00d fb61 	bl	8014d40 <iprintf>
  }
}
 800767e:	e000      	b.n	8007682 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8007680:	bf00      	nop
}
 8007682:	bf00      	nop
 8007684:	3720      	adds	r7, #32
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	08016000 	.word	0x08016000
 8007690:	08016158 	.word	0x08016158
 8007694:	08016044 	.word	0x08016044
 8007698:	08016168 	.word	0x08016168
 800769c:	08016184 	.word	0x08016184
 80076a0:	080161a0 	.word	0x080161a0

080076a4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f005 f955 	bl	800c964 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80076ba:	490a      	ldr	r1, [pc, #40]	; (80076e4 <setup_tcp+0x40>)
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f005 f963 	bl	800c988 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80076c2:	4909      	ldr	r1, [pc, #36]	; (80076e8 <setup_tcp+0x44>)
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f005 f981 	bl	800c9cc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80076ca:	2202      	movs	r2, #2
 80076cc:	4907      	ldr	r1, [pc, #28]	; (80076ec <setup_tcp+0x48>)
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f005 f9d8 	bl	800ca84 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80076d4:	4906      	ldr	r1, [pc, #24]	; (80076f0 <setup_tcp+0x4c>)
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f005 f99a 	bl	800ca10 <tcp_err>
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	0800727d 	.word	0x0800727d
 80076e8:	08007451 	.word	0x08007451
 80076ec:	08007389 	.word	0x08007389
 80076f0:	080074f9 	.word	0x080074f9

080076f4 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80076f4:	b590      	push	{r4, r7, lr}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d006      	beq.n	8007718 <pcb_new+0x24>
 800770a:	4b2b      	ldr	r3, [pc, #172]	; (80077b8 <pcb_new+0xc4>)
 800770c:	f240 2265 	movw	r2, #613	; 0x265
 8007710:	492a      	ldr	r1, [pc, #168]	; (80077bc <pcb_new+0xc8>)
 8007712:	482b      	ldr	r0, [pc, #172]	; (80077c0 <pcb_new+0xcc>)
 8007714:	f00d fb14 	bl	8014d40 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007722:	2b10      	cmp	r3, #16
 8007724:	d022      	beq.n	800776c <pcb_new+0x78>
 8007726:	2b20      	cmp	r3, #32
 8007728:	d133      	bne.n	8007792 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681c      	ldr	r4, [r3, #0]
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	4618      	mov	r0, r3
 8007732:	f00a fc80 	bl	8012036 <udp_new_ip_type>
 8007736:	4603      	mov	r3, r0
 8007738:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d02a      	beq.n	800779a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b22      	cmp	r3, #34	; 0x22
 800774c:	d104      	bne.n	8007758 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6858      	ldr	r0, [r3, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	4917      	ldr	r1, [pc, #92]	; (80077c4 <pcb_new+0xd0>)
 8007766:	f00a fbed 	bl	8011f44 <udp_recv>
      }
      break;
 800776a:	e016      	b.n	800779a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681c      	ldr	r4, [r3, #0]
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	4618      	mov	r0, r3
 8007774:	f005 f8e8 	bl	800c948 <tcp_new_ip_type>
 8007778:	4603      	mov	r3, r0
 800777a:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff ff8a 	bl	80076a4 <setup_tcp>
      }
      break;
 8007790:	e005      	b.n	800779e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	22fa      	movs	r2, #250	; 0xfa
 8007796:	711a      	strb	r2, [r3, #4]
      return;
 8007798:	e00a      	b.n	80077b0 <pcb_new+0xbc>
      break;
 800779a:	bf00      	nop
 800779c:	e000      	b.n	80077a0 <pcb_new+0xac>
      break;
 800779e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	22ff      	movs	r2, #255	; 0xff
 80077ae:	711a      	strb	r2, [r3, #4]
  }
}
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd90      	pop	{r4, r7, pc}
 80077b6:	bf00      	nop
 80077b8:	08016000 	.word	0x08016000
 80077bc:	080161e4 	.word	0x080161e4
 80077c0:	08016044 	.word	0x08016044
 80077c4:	08007181 	.word	0x08007181

080077c8 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7ff ff85 	bl	80076f4 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
	...

080077f4 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	6039      	str	r1, [r7, #0]
 80077fe:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007804:	2007      	movs	r0, #7
 8007806:	f002 fb85 	bl	8009f14 <memp_malloc>
 800780a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <netconn_alloc+0x22>
    return NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	e052      	b.n	80078bc <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	79fa      	ldrb	r2, [r7, #7]
 8007820:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800782e:	2b10      	cmp	r3, #16
 8007830:	d004      	beq.n	800783c <netconn_alloc+0x48>
 8007832:	2b20      	cmp	r3, #32
 8007834:	d105      	bne.n	8007842 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8007836:	2306      	movs	r3, #6
 8007838:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800783a:	e00a      	b.n	8007852 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800783c:	2306      	movs	r3, #6
 800783e:	617b      	str	r3, [r7, #20]
      break;
 8007840:	e007      	b.n	8007852 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007842:	4b20      	ldr	r3, [pc, #128]	; (80078c4 <netconn_alloc+0xd0>)
 8007844:	f240 22e5 	movw	r2, #741	; 0x2e5
 8007848:	491f      	ldr	r1, [pc, #124]	; (80078c8 <netconn_alloc+0xd4>)
 800784a:	4820      	ldr	r0, [pc, #128]	; (80078cc <netconn_alloc+0xd8>)
 800784c:	f00d fa78 	bl	8014d40 <iprintf>
      goto free_and_return;
 8007850:	e02f      	b.n	80078b2 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3310      	adds	r3, #16
 8007856:	6979      	ldr	r1, [r7, #20]
 8007858:	4618      	mov	r0, r3
 800785a:	f00d f829 	bl	80148b0 <sys_mbox_new>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d125      	bne.n	80078b0 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	330c      	adds	r3, #12
 8007868:	2100      	movs	r1, #0
 800786a:	4618      	mov	r0, r3
 800786c:	f00d f8e7 	bl	8014a3e <sys_sem_new>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3310      	adds	r3, #16
 800787a:	4618      	mov	r0, r3
 800787c:	f00d f83a 	bl	80148f4 <sys_mbox_free>
    goto free_and_return;
 8007880:	e017      	b.n	80078b2 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3314      	adds	r3, #20
 8007886:	4618      	mov	r0, r3
 8007888:	f00d f8cc 	bl	8014a24 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f04f 32ff 	mov.w	r2, #4294967295
 8007898:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	7cfa      	ldrb	r2, [r7, #19]
 80078aa:	771a      	strb	r2, [r3, #28]
  return conn;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	e005      	b.n	80078bc <netconn_alloc+0xc8>
    goto free_and_return;
 80078b0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80078b2:	68f9      	ldr	r1, [r7, #12]
 80078b4:	2007      	movs	r0, #7
 80078b6:	f002 fb7f 	bl	8009fb8 <memp_free>
  return NULL;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	08016000 	.word	0x08016000
 80078c8:	08016204 	.word	0x08016204
 80078cc:	08016044 	.word	0x08016044

080078d0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d006      	beq.n	80078ee <netconn_free+0x1e>
 80078e0:	4b1b      	ldr	r3, [pc, #108]	; (8007950 <netconn_free+0x80>)
 80078e2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80078e6:	491b      	ldr	r1, [pc, #108]	; (8007954 <netconn_free+0x84>)
 80078e8:	481b      	ldr	r0, [pc, #108]	; (8007958 <netconn_free+0x88>)
 80078ea:	f00d fa29 	bl	8014d40 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	3310      	adds	r3, #16
 80078f2:	4618      	mov	r0, r3
 80078f4:	f00d f885 	bl	8014a02 <sys_mbox_valid>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d006      	beq.n	800790c <netconn_free+0x3c>
 80078fe:	4b14      	ldr	r3, [pc, #80]	; (8007950 <netconn_free+0x80>)
 8007900:	f44f 7249 	mov.w	r2, #804	; 0x324
 8007904:	4915      	ldr	r1, [pc, #84]	; (800795c <netconn_free+0x8c>)
 8007906:	4814      	ldr	r0, [pc, #80]	; (8007958 <netconn_free+0x88>)
 8007908:	f00d fa1a 	bl	8014d40 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3314      	adds	r3, #20
 8007910:	4618      	mov	r0, r3
 8007912:	f00d f876 	bl	8014a02 <sys_mbox_valid>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d006      	beq.n	800792a <netconn_free+0x5a>
 800791c:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <netconn_free+0x80>)
 800791e:	f240 3227 	movw	r2, #807	; 0x327
 8007922:	490f      	ldr	r1, [pc, #60]	; (8007960 <netconn_free+0x90>)
 8007924:	480c      	ldr	r0, [pc, #48]	; (8007958 <netconn_free+0x88>)
 8007926:	f00d fa0b 	bl	8014d40 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	330c      	adds	r3, #12
 800792e:	4618      	mov	r0, r3
 8007930:	f00d f8eb 	bl	8014b0a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	330c      	adds	r3, #12
 8007938:	4618      	mov	r0, r3
 800793a:	f00d f904 	bl	8014b46 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	2007      	movs	r0, #7
 8007942:	f002 fb39 	bl	8009fb8 <memp_free>
}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	08016000 	.word	0x08016000
 8007954:	0801622c 	.word	0x0801622c
 8007958:	08016044 	.word	0x08016044
 800795c:	0801625c 	.word	0x0801625c
 8007960:	08016298 	.word	0x08016298

08007964 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3310      	adds	r3, #16
 8007970:	4618      	mov	r0, r3
 8007972:	f00d f846 	bl	8014a02 <sys_mbox_valid>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d02f      	beq.n	80079dc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800797c:	e018      	b.n	80079b0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007986:	2b10      	cmp	r3, #16
 8007988:	d10e      	bne.n	80079a8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f107 020f 	add.w	r2, r7, #15
 8007990:	4611      	mov	r1, r2
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff fbba 	bl	800710c <lwip_netconn_is_err_msg>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d108      	bne.n	80079b0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f003 f9a9 	bl	800acf8 <pbuf_free>
 80079a6:	e003      	b.n	80079b0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fed2 	bl	8008754 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3310      	adds	r3, #16
 80079b4:	f107 0210 	add.w	r2, r7, #16
 80079b8:	4611      	mov	r1, r2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f00d f805 	bl	80149ca <sys_arch_mbox_tryfetch>
 80079c0:	4603      	mov	r3, r0
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d1da      	bne.n	800797e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3310      	adds	r3, #16
 80079cc:	4618      	mov	r0, r3
 80079ce:	f00c ff91 	bl	80148f4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3310      	adds	r3, #16
 80079d6:	4618      	mov	r0, r3
 80079d8:	f00d f824 	bl	8014a24 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3314      	adds	r3, #20
 80079e0:	4618      	mov	r0, r3
 80079e2:	f00d f80e 	bl	8014a02 <sys_mbox_valid>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d034      	beq.n	8007a56 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80079ec:	e01d      	b.n	8007a2a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f107 020e 	add.w	r2, r7, #14
 80079f4:	4611      	mov	r1, r2
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff fb88 	bl	800710c <lwip_netconn_is_err_msg>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d113      	bne.n	8007a2a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8007a06:	6978      	ldr	r0, [r7, #20]
 8007a08:	f7ff ffac 	bl	8007964 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d007      	beq.n	8007a24 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f003 ff63 	bl	800b8e4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2200      	movs	r2, #0
 8007a22:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	f7ff ff53 	bl	80078d0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3314      	adds	r3, #20
 8007a2e:	f107 0210 	add.w	r2, r7, #16
 8007a32:	4611      	mov	r1, r2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f00c ffc8 	bl	80149ca <sys_arch_mbox_tryfetch>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a40:	d1d5      	bne.n	80079ee <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3314      	adds	r3, #20
 8007a46:	4618      	mov	r0, r3
 8007a48:	f00c ff54 	bl	80148f4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3314      	adds	r3, #20
 8007a50:	4618      	mov	r0, r3
 8007a52:	f00c ffe7 	bl	8014a24 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8007a56:	bf00      	nop
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	460b      	mov	r3, r1
 8007a6a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d106      	bne.n	8007a84 <lwip_netconn_do_close_internal+0x24>
 8007a76:	4ba1      	ldr	r3, [pc, #644]	; (8007cfc <lwip_netconn_do_close_internal+0x29c>)
 8007a78:	f240 32a2 	movw	r2, #930	; 0x3a2
 8007a7c:	49a0      	ldr	r1, [pc, #640]	; (8007d00 <lwip_netconn_do_close_internal+0x2a0>)
 8007a7e:	48a1      	ldr	r0, [pc, #644]	; (8007d04 <lwip_netconn_do_close_internal+0x2a4>)
 8007a80:	f00d f95e 	bl	8014d40 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a8c:	2b10      	cmp	r3, #16
 8007a8e:	d006      	beq.n	8007a9e <lwip_netconn_do_close_internal+0x3e>
 8007a90:	4b9a      	ldr	r3, [pc, #616]	; (8007cfc <lwip_netconn_do_close_internal+0x29c>)
 8007a92:	f240 32a3 	movw	r2, #931	; 0x3a3
 8007a96:	499c      	ldr	r1, [pc, #624]	; (8007d08 <lwip_netconn_do_close_internal+0x2a8>)
 8007a98:	489a      	ldr	r0, [pc, #616]	; (8007d04 <lwip_netconn_do_close_internal+0x2a4>)
 8007a9a:	f00d f951 	bl	8014d40 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	785b      	ldrb	r3, [r3, #1]
 8007aa2:	2b04      	cmp	r3, #4
 8007aa4:	d006      	beq.n	8007ab4 <lwip_netconn_do_close_internal+0x54>
 8007aa6:	4b95      	ldr	r3, [pc, #596]	; (8007cfc <lwip_netconn_do_close_internal+0x29c>)
 8007aa8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8007aac:	4997      	ldr	r1, [pc, #604]	; (8007d0c <lwip_netconn_do_close_internal+0x2ac>)
 8007aae:	4895      	ldr	r0, [pc, #596]	; (8007d04 <lwip_netconn_do_close_internal+0x2a4>)
 8007ab0:	f00d f946 	bl	8014d40 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <lwip_netconn_do_close_internal+0x6a>
 8007abc:	4b8f      	ldr	r3, [pc, #572]	; (8007cfc <lwip_netconn_do_close_internal+0x29c>)
 8007abe:	f240 32a5 	movw	r2, #933	; 0x3a5
 8007ac2:	4993      	ldr	r1, [pc, #588]	; (8007d10 <lwip_netconn_do_close_internal+0x2b0>)
 8007ac4:	488f      	ldr	r0, [pc, #572]	; (8007d04 <lwip_netconn_do_close_internal+0x2a4>)
 8007ac6:	f00d f93b 	bl	8014d40 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <lwip_netconn_do_close_internal+0x80>
 8007ad2:	4b8a      	ldr	r3, [pc, #552]	; (8007cfc <lwip_netconn_do_close_internal+0x29c>)
 8007ad4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007ad8:	498e      	ldr	r1, [pc, #568]	; (8007d14 <lwip_netconn_do_close_internal+0x2b4>)
 8007ada:	488a      	ldr	r0, [pc, #552]	; (8007d04 <lwip_netconn_do_close_internal+0x2a4>)
 8007adc:	f00d f930 	bl	8014d40 <iprintf>

  tpcb = conn->pcb.tcp;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	7a1b      	ldrb	r3, [r3, #8]
 8007aec:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d102      	bne.n	8007b0a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8007b04:	2301      	movs	r3, #1
 8007b06:	75bb      	strb	r3, [r7, #22]
 8007b08:	e01f      	b.n	8007b4a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00e      	beq.n	8007b2e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8007b14:	2b05      	cmp	r3, #5
 8007b16:	d007      	beq.n	8007b28 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8007b1c:	2b06      	cmp	r3, #6
 8007b1e:	d003      	beq.n	8007b28 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8007b24:	2b08      	cmp	r3, #8
 8007b26:	d102      	bne.n	8007b2e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75bb      	strb	r3, [r7, #22]
 8007b2c:	e00d      	b.n	8007b4a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007b2e:	7b7b      	ldrb	r3, [r7, #13]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <lwip_netconn_do_close_internal+0xe6>
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	8b5b      	ldrh	r3, [r3, #26]
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8007b40:	2301      	movs	r3, #1
 8007b42:	75bb      	strb	r3, [r7, #22]
 8007b44:	e001      	b.n	8007b4a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8007b4a:	7dbb      	ldrb	r3, [r7, #22]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8007b50:	2100      	movs	r1, #0
 8007b52:	6938      	ldr	r0, [r7, #16]
 8007b54:	f004 ff06 	bl	800c964 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	7d1b      	ldrb	r3, [r3, #20]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d104      	bne.n	8007b6a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8007b60:	2100      	movs	r1, #0
 8007b62:	6938      	ldr	r0, [r7, #16]
 8007b64:	f004 ff76 	bl	800ca54 <tcp_accept>
 8007b68:	e01d      	b.n	8007ba6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8007b6a:	7bbb      	ldrb	r3, [r7, #14]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8007b70:	2100      	movs	r1, #0
 8007b72:	6938      	ldr	r0, [r7, #16]
 8007b74:	f004 ff08 	bl	800c988 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007b78:	2100      	movs	r1, #0
 8007b7a:	6938      	ldr	r0, [r7, #16]
 8007b7c:	f004 ff6a 	bl	800ca54 <tcp_accept>
    }
    if (shut_tx) {
 8007b80:	7b7b      	ldrb	r3, [r7, #13]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8007b86:	2100      	movs	r1, #0
 8007b88:	6938      	ldr	r0, [r7, #16]
 8007b8a:	f004 ff1f 	bl	800c9cc <tcp_sent>
    }
    if (shut_close) {
 8007b8e:	7dbb      	ldrb	r3, [r7, #22]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8007b94:	2200      	movs	r2, #0
 8007b96:	2100      	movs	r1, #0
 8007b98:	6938      	ldr	r0, [r7, #16]
 8007b9a:	f004 ff73 	bl	800ca84 <tcp_poll>
      tcp_err(tpcb, NULL);
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	6938      	ldr	r0, [r7, #16]
 8007ba2:	f004 ff35 	bl	800ca10 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8007ba6:	7dbb      	ldrb	r3, [r7, #22]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8007bac:	6938      	ldr	r0, [r7, #16]
 8007bae:	f003 fd55 	bl	800b65c <tcp_close>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	75fb      	strb	r3, [r7, #23]
 8007bb6:	e007      	b.n	8007bc8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007bb8:	7bbb      	ldrb	r3, [r7, #14]
 8007bba:	7b7a      	ldrb	r2, [r7, #13]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6938      	ldr	r0, [r7, #16]
 8007bc0:	f003 fd78 	bl	800b6b4 <tcp_shutdown>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8007bc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d102      	bne.n	8007bd6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	757b      	strb	r3, [r7, #21]
 8007bd4:	e016      	b.n	8007c04 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8007bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bde:	d10f      	bne.n	8007c00 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	7a5b      	ldrb	r3, [r3, #9]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10c      	bne.n	8007c04 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8007bea:	2301      	movs	r3, #1
 8007bec:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8007bee:	7dbb      	ldrb	r3, [r7, #22]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d007      	beq.n	8007c04 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8007bf4:	6938      	ldr	r0, [r7, #16]
 8007bf6:	f003 fe75 	bl	800b8e4 <tcp_abort>
          err = ERR_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
 8007bfe:	e001      	b.n	8007c04 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8007c00:	2301      	movs	r3, #1
 8007c02:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8007c04:	7d7b      	ldrb	r3, [r7, #21]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d044      	beq.n	8007c94 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	330c      	adds	r3, #12
 8007c12:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	7dfa      	ldrb	r2, [r7, #23]
 8007c1a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8007c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d129      	bne.n	8007c84 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8007c30:	7dbb      	ldrb	r3, [r7, #22]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00c      	beq.n	8007c50 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <lwip_netconn_do_close_internal+0x1f0>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2104      	movs	r1, #4
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	4798      	blx	r3
      }
      if (shut_rx) {
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <lwip_netconn_do_close_internal+0x20a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	2200      	movs	r2, #0
 8007c64:	2100      	movs	r1, #0
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
      }
      if (shut_tx) {
 8007c6a:	7b7b      	ldrb	r3, [r7, #13]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d009      	beq.n	8007c84 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <lwip_netconn_do_close_internal+0x224>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2102      	movs	r1, #2
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8007c8a:	68b8      	ldr	r0, [r7, #8]
 8007c8c:	f00c ff30 	bl	8014af0 <sys_sem_signal>
    }
    return ERR_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	e02e      	b.n	8007cf2 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8007c94:	7d7b      	ldrb	r3, [r7, #21]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d11e      	bne.n	8007cd8 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	7d1b      	ldrb	r3, [r3, #20]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d106      	bne.n	8007cb0 <lwip_netconn_do_close_internal+0x250>
 8007ca2:	4b16      	ldr	r3, [pc, #88]	; (8007cfc <lwip_netconn_do_close_internal+0x29c>)
 8007ca4:	f240 4241 	movw	r2, #1089	; 0x441
 8007ca8:	491b      	ldr	r1, [pc, #108]	; (8007d18 <lwip_netconn_do_close_internal+0x2b8>)
 8007caa:	4816      	ldr	r0, [pc, #88]	; (8007d04 <lwip_netconn_do_close_internal+0x2a4>)
 8007cac:	f00d f848 	bl	8014d40 <iprintf>
    if (shut_tx) {
 8007cb0:	7b7b      	ldrb	r3, [r7, #13]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8007cb6:	4919      	ldr	r1, [pc, #100]	; (8007d1c <lwip_netconn_do_close_internal+0x2bc>)
 8007cb8:	6938      	ldr	r0, [r7, #16]
 8007cba:	f004 fe87 	bl	800c9cc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	4917      	ldr	r1, [pc, #92]	; (8007d20 <lwip_netconn_do_close_internal+0x2c0>)
 8007cc2:	6938      	ldr	r0, [r7, #16]
 8007cc4:	f004 fede 	bl	800ca84 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8007cc8:	4916      	ldr	r1, [pc, #88]	; (8007d24 <lwip_netconn_do_close_internal+0x2c4>)
 8007cca:	6938      	ldr	r0, [r7, #16]
 8007ccc:	f004 fea0 	bl	800ca10 <tcp_err>
    tcp_arg(tpcb, conn);
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	6938      	ldr	r0, [r7, #16]
 8007cd4:	f004 fe46 	bl	800c964 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8007cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <lwip_netconn_do_close_internal+0x28e>
 8007ce0:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <lwip_netconn_do_close_internal+0x29c>)
 8007ce2:	f240 424d 	movw	r2, #1101	; 0x44d
 8007ce6:	4910      	ldr	r1, [pc, #64]	; (8007d28 <lwip_netconn_do_close_internal+0x2c8>)
 8007ce8:	4806      	ldr	r0, [pc, #24]	; (8007d04 <lwip_netconn_do_close_internal+0x2a4>)
 8007cea:	f00d f829 	bl	8014d40 <iprintf>
  return err;
 8007cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	08016000 	.word	0x08016000
 8007d00:	080162d4 	.word	0x080162d4
 8007d04:	08016044 	.word	0x08016044
 8007d08:	080162e4 	.word	0x080162e4
 8007d0c:	08016304 	.word	0x08016304
 8007d10:	08016328 	.word	0x08016328
 8007d14:	08016168 	.word	0x08016168
 8007d18:	0801633c 	.word	0x0801633c
 8007d1c:	08007451 	.word	0x08007451
 8007d20:	08007389 	.word	0x08007389
 8007d24:	080074f9 	.word	0x080074f9
 8007d28:	08016360 	.word	0x08016360

08007d2c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00d      	beq.n	8007d62 <lwip_netconn_do_delconn+0x36>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d50:	2b10      	cmp	r3, #16
 8007d52:	d006      	beq.n	8007d62 <lwip_netconn_do_delconn+0x36>
 8007d54:	4b60      	ldr	r3, [pc, #384]	; (8007ed8 <lwip_netconn_do_delconn+0x1ac>)
 8007d56:	f240 425f 	movw	r2, #1119	; 0x45f
 8007d5a:	4960      	ldr	r1, [pc, #384]	; (8007edc <lwip_netconn_do_delconn+0x1b0>)
 8007d5c:	4860      	ldr	r0, [pc, #384]	; (8007ee0 <lwip_netconn_do_delconn+0x1b4>)
 8007d5e:	f00c ffef 	bl	8014d40 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <lwip_netconn_do_delconn+0x48>
 8007d68:	7afb      	ldrb	r3, [r7, #11]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d002      	beq.n	8007d74 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	2b03      	cmp	r3, #3
 8007d72:	d109      	bne.n	8007d88 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d10a      	bne.n	8007d90 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	7f1b      	ldrb	r3, [r3, #28]
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	22fb      	movs	r2, #251	; 0xfb
 8007d8c:	711a      	strb	r2, [r3, #4]
 8007d8e:	e097      	b.n	8007ec0 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d10d      	bne.n	8007db2 <lwip_netconn_do_delconn+0x86>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	7f1b      	ldrb	r3, [r3, #28]
 8007d9c:	f003 0304 	and.w	r3, r3, #4
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <lwip_netconn_do_delconn+0x86>
 8007da4:	4b4c      	ldr	r3, [pc, #304]	; (8007ed8 <lwip_netconn_do_delconn+0x1ac>)
 8007da6:	f240 427b 	movw	r2, #1147	; 0x47b
 8007daa:	494e      	ldr	r1, [pc, #312]	; (8007ee4 <lwip_netconn_do_delconn+0x1b8>)
 8007dac:	484c      	ldr	r0, [pc, #304]	; (8007ee0 <lwip_netconn_do_delconn+0x1b4>)
 8007dae:	f00c ffc7 	bl	8014d40 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff fdd1 	bl	8007964 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d05f      	beq.n	8007e8c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d00e      	beq.n	8007df8 <lwip_netconn_do_delconn+0xcc>
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	d000      	beq.n	8007de0 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8007dde:	e051      	b.n	8007e84 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f00a f8c7 	bl	8011f84 <udp_remove>
          break;
 8007df6:	e045      	b.n	8007e84 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d006      	beq.n	8007e10 <lwip_netconn_do_delconn+0xe4>
 8007e02:	4b35      	ldr	r3, [pc, #212]	; (8007ed8 <lwip_netconn_do_delconn+0x1ac>)
 8007e04:	f240 4294 	movw	r2, #1172	; 0x494
 8007e08:	4937      	ldr	r1, [pc, #220]	; (8007ee8 <lwip_netconn_do_delconn+0x1bc>)
 8007e0a:	4835      	ldr	r0, [pc, #212]	; (8007ee0 <lwip_netconn_do_delconn+0x1b4>)
 8007e0c:	f00c ff98 	bl	8014d40 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	2204      	movs	r2, #4
 8007e16:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff fe17 	bl	8007a60 <lwip_netconn_do_close_internal>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d04a      	beq.n	8007ece <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	785b      	ldrb	r3, [r3, #1]
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d006      	beq.n	8007e50 <lwip_netconn_do_delconn+0x124>
 8007e42:	4b25      	ldr	r3, [pc, #148]	; (8007ed8 <lwip_netconn_do_delconn+0x1ac>)
 8007e44:	f240 429a 	movw	r2, #1178	; 0x49a
 8007e48:	4928      	ldr	r1, [pc, #160]	; (8007eec <lwip_netconn_do_delconn+0x1c0>)
 8007e4a:	4825      	ldr	r0, [pc, #148]	; (8007ee0 <lwip_netconn_do_delconn+0x1b4>)
 8007e4c:	f00c ff78 	bl	8014d40 <iprintf>
            UNLOCK_TCPIP_CORE();
 8007e50:	4827      	ldr	r0, [pc, #156]	; (8007ef0 <lwip_netconn_do_delconn+0x1c4>)
 8007e52:	f00c febe 	bl	8014bd2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f00c fe15 	bl	8014a8e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8007e64:	4822      	ldr	r0, [pc, #136]	; (8007ef0 <lwip_netconn_do_delconn+0x1c4>)
 8007e66:	f00c fea5 	bl	8014bb4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	785b      	ldrb	r3, [r3, #1]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d02c      	beq.n	8007ece <lwip_netconn_do_delconn+0x1a2>
 8007e74:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <lwip_netconn_do_delconn+0x1ac>)
 8007e76:	f240 429e 	movw	r2, #1182	; 0x49e
 8007e7a:	491c      	ldr	r1, [pc, #112]	; (8007eec <lwip_netconn_do_delconn+0x1c0>)
 8007e7c:	4818      	ldr	r0, [pc, #96]	; (8007ee0 <lwip_netconn_do_delconn+0x1b4>)
 8007e7e:	f00c ff5f 	bl	8014d40 <iprintf>
          return;
 8007e82:	e024      	b.n	8007ece <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <lwip_netconn_do_delconn+0x17a>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	6810      	ldr	r0, [r2, #0]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2100      	movs	r1, #0
 8007ea4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <lwip_netconn_do_delconn+0x194>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	6810      	ldr	r0, [r2, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2102      	movs	r1, #2
 8007ebe:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f00c fe2c 	bl	8014b24 <sys_sem_valid>
 8007ecc:	e000      	b.n	8007ed0 <lwip_netconn_do_delconn+0x1a4>
          return;
 8007ece:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	08016000 	.word	0x08016000
 8007edc:	08016370 	.word	0x08016370
 8007ee0:	08016044 	.word	0x08016044
 8007ee4:	08016384 	.word	0x08016384
 8007ee8:	080163a4 	.word	0x080163a4
 8007eec:	080163c0 	.word	0x080163c0
 8007ef0:	20007554 	.word	0x20007554

08007ef4 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8007f10:	f06f 0305 	mvn.w	r3, #5
 8007f14:	e070      	b.n	8007ff8 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	785b      	ldrb	r3, [r3, #1]
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d006      	beq.n	8007f2c <lwip_netconn_do_connected+0x38>
 8007f1e:	4b38      	ldr	r3, [pc, #224]	; (8008000 <lwip_netconn_do_connected+0x10c>)
 8007f20:	f240 5223 	movw	r2, #1315	; 0x523
 8007f24:	4937      	ldr	r1, [pc, #220]	; (8008004 <lwip_netconn_do_connected+0x110>)
 8007f26:	4838      	ldr	r0, [pc, #224]	; (8008008 <lwip_netconn_do_connected+0x114>)
 8007f28:	f00c ff0a 	bl	8014d40 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10c      	bne.n	8007f4e <lwip_netconn_do_connected+0x5a>
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	7f1b      	ldrb	r3, [r3, #28]
 8007f38:	f003 0304 	and.w	r3, r3, #4
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d106      	bne.n	8007f4e <lwip_netconn_do_connected+0x5a>
 8007f40:	4b2f      	ldr	r3, [pc, #188]	; (8008000 <lwip_netconn_do_connected+0x10c>)
 8007f42:	f240 5225 	movw	r2, #1317	; 0x525
 8007f46:	4931      	ldr	r1, [pc, #196]	; (800800c <lwip_netconn_do_connected+0x118>)
 8007f48:	482f      	ldr	r0, [pc, #188]	; (8008008 <lwip_netconn_do_connected+0x114>)
 8007f4a:	f00c fef9 	bl	8014d40 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d008      	beq.n	8007f68 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	79fa      	ldrb	r2, [r7, #7]
 8007f5c:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	330c      	adds	r3, #12
 8007f66:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d106      	bne.n	8007f82 <lwip_netconn_do_connected+0x8e>
 8007f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d102      	bne.n	8007f82 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8007f7c:	69b8      	ldr	r0, [r7, #24]
 8007f7e:	f7ff fb91 	bl	80076a4 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	7f1b      	ldrb	r3, [r3, #28]
 8007f86:	f003 0304 	and.w	r3, r3, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bf0c      	ite	eq
 8007f8e:	2301      	moveq	r3, #1
 8007f90:	2300      	movne	r3, #0
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	7f1b      	ldrb	r3, [r3, #28]
 8007f9a:	f023 0304 	bic.w	r3, r3, #4
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <lwip_netconn_do_connected+0xbc>
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10c      	bne.n	8007fca <lwip_netconn_do_connected+0xd6>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <lwip_netconn_do_connected+0xc8>
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d006      	beq.n	8007fca <lwip_netconn_do_connected+0xd6>
 8007fbc:	4b10      	ldr	r3, [pc, #64]	; (8008000 <lwip_netconn_do_connected+0x10c>)
 8007fbe:	f240 5232 	movw	r2, #1330	; 0x532
 8007fc2:	4913      	ldr	r1, [pc, #76]	; (8008010 <lwip_netconn_do_connected+0x11c>)
 8007fc4:	4810      	ldr	r0, [pc, #64]	; (8008008 <lwip_netconn_do_connected+0x114>)
 8007fc6:	f00c febb 	bl	8014d40 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d005      	beq.n	8007fea <lwip_netconn_do_connected+0xf6>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2102      	movs	r1, #2
 8007fe6:	69b8      	ldr	r0, [r7, #24]
 8007fe8:	4798      	blx	r3

  if (was_blocking) {
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8007ff0:	69f8      	ldr	r0, [r7, #28]
 8007ff2:	f00c fd7d 	bl	8014af0 <sys_sem_signal>
  }
  return ERR_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	08016000 	.word	0x08016000
 8008004:	080163c8 	.word	0x080163c8
 8008008:	08016044 	.word	0x08016044
 800800c:	080163e8 	.word	0x080163e8
 8008010:	08016428 	.word	0x08016428

08008014 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800802a:	23f1      	movs	r3, #241	; 0xf1
 800802c:	75fb      	strb	r3, [r7, #23]
 800802e:	e09b      	b.n	8008168 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800803a:	2b10      	cmp	r3, #16
 800803c:	d00f      	beq.n	800805e <lwip_netconn_do_connect+0x4a>
 800803e:	2b20      	cmp	r3, #32
 8008040:	f040 8087 	bne.w	8008152 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	6858      	ldr	r0, [r3, #4]
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6899      	ldr	r1, [r3, #8]
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	899b      	ldrh	r3, [r3, #12]
 8008052:	461a      	mov	r2, r3
 8008054:	f009 fee0 	bl	8011e18 <udp_connect>
 8008058:	4603      	mov	r3, r0
 800805a:	75fb      	strb	r3, [r7, #23]
        break;
 800805c:	e084      	b.n	8008168 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	785b      	ldrb	r3, [r3, #1]
 8008064:	2b03      	cmp	r3, #3
 8008066:	d102      	bne.n	800806e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8008068:	23f7      	movs	r3, #247	; 0xf7
 800806a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800806c:	e07b      	b.n	8008166 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	785b      	ldrb	r3, [r3, #1]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8008078:	23f6      	movs	r3, #246	; 0xf6
 800807a:	75fb      	strb	r3, [r7, #23]
        break;
 800807c:	e073      	b.n	8008166 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff fb0e 	bl	80076a4 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6858      	ldr	r0, [r3, #4]
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	6899      	ldr	r1, [r3, #8]
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	899a      	ldrh	r2, [r3, #12]
 8008096:	4b38      	ldr	r3, [pc, #224]	; (8008178 <lwip_netconn_do_connect+0x164>)
 8008098:	f003 fd20 	bl	800badc <tcp_connect>
 800809c:	4603      	mov	r3, r0
 800809e:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80080a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d15e      	bne.n	8008166 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	7f1b      	ldrb	r3, [r3, #28]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	bf14      	ite	ne
 80080b6:	2301      	movne	r3, #1
 80080b8:	2300      	moveq	r3, #0
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2203      	movs	r2, #3
 80080c4:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <lwip_netconn_do_connect+0xcc>
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	7f1a      	ldrb	r2, [r3, #28]
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f042 0204 	orr.w	r2, r2, #4
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	771a      	strb	r2, [r3, #28]
 80080de:	e008      	b.n	80080f2 <lwip_netconn_do_connect+0xde>
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	7f1a      	ldrb	r2, [r3, #28]
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0204 	bic.w	r2, r2, #4
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80080f8:	23fb      	movs	r3, #251	; 0xfb
 80080fa:	75fb      	strb	r3, [r7, #23]
        break;
 80080fc:	e033      	b.n	8008166 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	785b      	ldrb	r3, [r3, #1]
 800810c:	2b03      	cmp	r3, #3
 800810e:	d006      	beq.n	800811e <lwip_netconn_do_connect+0x10a>
 8008110:	4b1a      	ldr	r3, [pc, #104]	; (800817c <lwip_netconn_do_connect+0x168>)
 8008112:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8008116:	491a      	ldr	r1, [pc, #104]	; (8008180 <lwip_netconn_do_connect+0x16c>)
 8008118:	481a      	ldr	r0, [pc, #104]	; (8008184 <lwip_netconn_do_connect+0x170>)
 800811a:	f00c fe11 	bl	8014d40 <iprintf>
              UNLOCK_TCPIP_CORE();
 800811e:	481a      	ldr	r0, [pc, #104]	; (8008188 <lwip_netconn_do_connect+0x174>)
 8008120:	f00c fd57 	bl	8014bd2 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f00c fcae 	bl	8014a8e <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8008132:	4815      	ldr	r0, [pc, #84]	; (8008188 <lwip_netconn_do_connect+0x174>)
 8008134:	f00c fd3e 	bl	8014bb4 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	785b      	ldrb	r3, [r3, #1]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d116      	bne.n	8008170 <lwip_netconn_do_connect+0x15c>
 8008142:	4b0e      	ldr	r3, [pc, #56]	; (800817c <lwip_netconn_do_connect+0x168>)
 8008144:	f240 5274 	movw	r2, #1396	; 0x574
 8008148:	490d      	ldr	r1, [pc, #52]	; (8008180 <lwip_netconn_do_connect+0x16c>)
 800814a:	480e      	ldr	r0, [pc, #56]	; (8008184 <lwip_netconn_do_connect+0x170>)
 800814c:	f00c fdf8 	bl	8014d40 <iprintf>
              return;
 8008150:	e00e      	b.n	8008170 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <lwip_netconn_do_connect+0x168>)
 8008154:	f240 527f 	movw	r2, #1407	; 0x57f
 8008158:	490c      	ldr	r1, [pc, #48]	; (800818c <lwip_netconn_do_connect+0x178>)
 800815a:	480a      	ldr	r0, [pc, #40]	; (8008184 <lwip_netconn_do_connect+0x170>)
 800815c:	f00c fdf0 	bl	8014d40 <iprintf>
 8008160:	23fa      	movs	r3, #250	; 0xfa
 8008162:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8008164:	e000      	b.n	8008168 <lwip_netconn_do_connect+0x154>
        break;
 8008166:	bf00      	nop
    }
  }
  msg->err = err;
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	7dfa      	ldrb	r2, [r7, #23]
 800816c:	711a      	strb	r2, [r3, #4]
 800816e:	e000      	b.n	8008172 <lwip_netconn_do_connect+0x15e>
              return;
 8008170:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	08007ef5 	.word	0x08007ef5
 800817c:	08016000 	.word	0x08016000
 8008180:	080163c0 	.word	0x080163c0
 8008184:	08016044 	.word	0x08016044
 8008188:	20007554 	.word	0x20007554
 800818c:	08016448 	.word	0x08016448

08008190 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081a6:	2b20      	cmp	r3, #32
 80081a8:	d109      	bne.n	80081be <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f009 fe9f 	bl	8011ef4 <udp_disconnect>
    msg->err = ERR_OK;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 80081bc:	e002      	b.n	80081c4 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	22fa      	movs	r2, #250	; 0xfa
 80081c2:	711a      	strb	r2, [r3, #4]
}
 80081c4:	bf00      	nop
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7fe ff47 	bl	8007070 <netconn_err>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80081e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d135      	bne.n	800825a <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d02e      	beq.n	8008256 <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008202:	2b20      	cmp	r3, #32
 8008204:	d123      	bne.n	800824e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10c      	bne.n	800822a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f009 fb88 	bl	8011934 <udp_send>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8008228:	e017      	b.n	800825a <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6858      	ldr	r0, [r3, #4]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	6819      	ldr	r1, [r3, #0]
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f103 0208 	add.w	r2, r3, #8
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	899b      	ldrh	r3, [r3, #12]
 8008244:	f009 fbaa 	bl	801199c <udp_sendto>
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]
          break;
 800824c:	e005      	b.n	800825a <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800824e:	23f5      	movs	r3, #245	; 0xf5
 8008250:	73fb      	strb	r3, [r7, #15]
          break;
 8008252:	bf00      	nop
 8008254:	e001      	b.n	800825a <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 8008256:	23f5      	movs	r3, #245	; 0xf5
 8008258:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	7bfa      	ldrb	r2, [r7, #15]
 800825e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8008260:	bf00      	nop
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d106      	bne.n	800828c <lwip_netconn_do_writemore+0x24>
 800827e:	4b96      	ldr	r3, [pc, #600]	; (80084d8 <lwip_netconn_do_writemore+0x270>)
 8008280:	f240 6273 	movw	r2, #1651	; 0x673
 8008284:	4995      	ldr	r1, [pc, #596]	; (80084dc <lwip_netconn_do_writemore+0x274>)
 8008286:	4896      	ldr	r0, [pc, #600]	; (80084e0 <lwip_netconn_do_writemore+0x278>)
 8008288:	f00c fd5a 	bl	8014d40 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	785b      	ldrb	r3, [r3, #1]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d006      	beq.n	80082a2 <lwip_netconn_do_writemore+0x3a>
 8008294:	4b90      	ldr	r3, [pc, #576]	; (80084d8 <lwip_netconn_do_writemore+0x270>)
 8008296:	f240 6274 	movw	r2, #1652	; 0x674
 800829a:	4992      	ldr	r1, [pc, #584]	; (80084e4 <lwip_netconn_do_writemore+0x27c>)
 800829c:	4890      	ldr	r0, [pc, #576]	; (80084e0 <lwip_netconn_do_writemore+0x278>)
 800829e:	f00c fd4f 	bl	8014d40 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <lwip_netconn_do_writemore+0x50>
 80082aa:	4b8b      	ldr	r3, [pc, #556]	; (80084d8 <lwip_netconn_do_writemore+0x270>)
 80082ac:	f240 6275 	movw	r2, #1653	; 0x675
 80082b0:	498d      	ldr	r1, [pc, #564]	; (80084e8 <lwip_netconn_do_writemore+0x280>)
 80082b2:	488b      	ldr	r0, [pc, #556]	; (80084e0 <lwip_netconn_do_writemore+0x278>)
 80082b4:	f00c fd44 	bl	8014d40 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d106      	bne.n	80082ce <lwip_netconn_do_writemore+0x66>
 80082c0:	4b85      	ldr	r3, [pc, #532]	; (80084d8 <lwip_netconn_do_writemore+0x270>)
 80082c2:	f240 6276 	movw	r2, #1654	; 0x676
 80082c6:	4989      	ldr	r1, [pc, #548]	; (80084ec <lwip_netconn_do_writemore+0x284>)
 80082c8:	4885      	ldr	r0, [pc, #532]	; (80084e0 <lwip_netconn_do_writemore+0x278>)
 80082ca:	f00c fd39 	bl	8014d40 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	699a      	ldr	r2, [r3, #24]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d306      	bcc.n	80082ec <lwip_netconn_do_writemore+0x84>
 80082de:	4b7e      	ldr	r3, [pc, #504]	; (80084d8 <lwip_netconn_do_writemore+0x270>)
 80082e0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80082e4:	4982      	ldr	r1, [pc, #520]	; (80084f0 <lwip_netconn_do_writemore+0x288>)
 80082e6:	487e      	ldr	r0, [pc, #504]	; (80084e0 <lwip_netconn_do_writemore+0x278>)
 80082e8:	f00c fd2a 	bl	8014d40 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	899b      	ldrh	r3, [r3, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d106      	bne.n	8008304 <lwip_netconn_do_writemore+0x9c>
 80082f6:	4b78      	ldr	r3, [pc, #480]	; (80084d8 <lwip_netconn_do_writemore+0x270>)
 80082f8:	f240 6279 	movw	r2, #1657	; 0x679
 80082fc:	497d      	ldr	r1, [pc, #500]	; (80084f4 <lwip_netconn_do_writemore+0x28c>)
 80082fe:	4878      	ldr	r0, [pc, #480]	; (80084e0 <lwip_netconn_do_writemore+0x278>)
 8008300:	f00c fd1e 	bl	8014d40 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a1b      	ldr	r3, [r3, #32]
 8008308:	7f1b      	ldrb	r3, [r3, #28]
 800830a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	7f1b      	ldrb	r3, [r3, #28]
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d104      	bne.n	8008322 <lwip_netconn_do_writemore+0xba>
 8008318:	7ebb      	ldrb	r3, [r7, #26]
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <lwip_netconn_do_writemore+0xbe>
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <lwip_netconn_do_writemore+0xc0>
 8008326:	2300      	movs	r3, #0
 8008328:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	4413      	add	r3, r2
 800833a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1b      	ldr	r3, [r3, #32]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008354:	d307      	bcc.n	8008366 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8008356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800835a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800835c:	7ebb      	ldrb	r3, [r7, #26]
 800835e:	f043 0302 	orr.w	r3, r3, #2
 8008362:	76bb      	strb	r3, [r7, #26]
 8008364:	e001      	b.n	800836a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008372:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8008374:	89fa      	ldrh	r2, [r7, #14]
 8008376:	8bbb      	ldrh	r3, [r7, #28]
 8008378:	429a      	cmp	r2, r3
 800837a:	d216      	bcs.n	80083aa <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8008380:	7e3b      	ldrb	r3, [r7, #24]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00d      	beq.n	80083a2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8008386:	8bbb      	ldrh	r3, [r7, #28]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10e      	bne.n	80083aa <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <lwip_netconn_do_writemore+0x134>
 8008396:	f06f 0306 	mvn.w	r3, #6
 800839a:	e000      	b.n	800839e <lwip_netconn_do_writemore+0x136>
 800839c:	2300      	movs	r3, #0
 800839e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80083a0:	e07d      	b.n	800849e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80083a2:	7ebb      	ldrb	r3, [r7, #26]
 80083a4:	f043 0302 	orr.w	r3, r3, #2
 80083a8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	8bbb      	ldrh	r3, [r7, #28]
 80083b2:	441a      	add	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d906      	bls.n	80083ce <lwip_netconn_do_writemore+0x166>
 80083c0:	4b45      	ldr	r3, [pc, #276]	; (80084d8 <lwip_netconn_do_writemore+0x270>)
 80083c2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80083c6:	494c      	ldr	r1, [pc, #304]	; (80084f8 <lwip_netconn_do_writemore+0x290>)
 80083c8:	4845      	ldr	r0, [pc, #276]	; (80084e0 <lwip_netconn_do_writemore+0x278>)
 80083ca:	f00c fcb9 	bl	8014d40 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80083ce:	8bbb      	ldrh	r3, [r7, #28]
 80083d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d103      	bne.n	80083e0 <lwip_netconn_do_writemore+0x178>
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083de:	d209      	bcs.n	80083f4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80083e4:	8bba      	ldrh	r2, [r7, #28]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d10b      	bne.n	8008402 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	899b      	ldrh	r3, [r3, #12]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d906      	bls.n	8008402 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80083f4:	2301      	movs	r3, #1
 80083f6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80083f8:	7ebb      	ldrb	r3, [r7, #26]
 80083fa:	f043 0302 	orr.w	r3, r3, #2
 80083fe:	76bb      	strb	r3, [r7, #26]
 8008400:	e001      	b.n	8008406 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6858      	ldr	r0, [r3, #4]
 800840a:	7ebb      	ldrb	r3, [r7, #26]
 800840c:	8bba      	ldrh	r2, [r7, #28]
 800840e:	6979      	ldr	r1, [r7, #20]
 8008410:	f007 f9e4 	bl	800f7dc <tcp_write>
 8008414:	4603      	mov	r3, r0
 8008416:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8008418:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d12c      	bne.n	800847a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1b      	ldr	r3, [r3, #32]
 8008424:	6999      	ldr	r1, [r3, #24]
 8008426:	8bba      	ldrh	r2, [r7, #28]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	440a      	add	r2, r1
 800842e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	6919      	ldr	r1, [r3, #16]
 8008436:	8bba      	ldrh	r2, [r7, #28]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	440a      	add	r2, r1
 800843e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	691a      	ldr	r2, [r3, #16]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	429a      	cmp	r2, r3
 8008450:	d113      	bne.n	800847a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	899a      	ldrh	r2, [r3, #12]
 8008458:	3a01      	subs	r2, #1
 800845a:	b292      	uxth	r2, r2
 800845c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	899b      	ldrh	r3, [r3, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	689a      	ldr	r2, [r3, #8]
 800846e:	3208      	adds	r2, #8
 8008470:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a1b      	ldr	r3, [r3, #32]
 8008476:	2200      	movs	r2, #0
 8008478:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800847a:	7e7b      	ldrb	r3, [r7, #25]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d004      	beq.n	800848a <lwip_netconn_do_writemore+0x222>
 8008480:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f43f af50 	beq.w	800832a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800848a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d004      	beq.n	800849c <lwip_netconn_do_writemore+0x234>
 8008492:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800849a:	d146      	bne.n	800852a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800849c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800849e:	7e3b      	ldrb	r3, [r7, #24]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d02b      	beq.n	80084fc <lwip_netconn_do_writemore+0x294>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d223      	bcs.n	80084fc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d005      	beq.n	80084c8 <lwip_netconn_do_writemore+0x260>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	2200      	movs	r2, #0
 80084c2:	2103      	movs	r1, #3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	7f1b      	ldrb	r3, [r3, #28]
 80084cc:	f043 0310 	orr.w	r3, r3, #16
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	771a      	strb	r2, [r3, #28]
 80084d6:	e028      	b.n	800852a <lwip_netconn_do_writemore+0x2c2>
 80084d8:	08016000 	.word	0x08016000
 80084dc:	08016158 	.word	0x08016158
 80084e0:	08016044 	.word	0x08016044
 80084e4:	08016460 	.word	0x08016460
 80084e8:	08016168 	.word	0x08016168
 80084ec:	08016480 	.word	0x08016480
 80084f0:	08016498 	.word	0x08016498
 80084f4:	080164d8 	.word	0x080164d8
 80084f8:	08016500 	.word	0x08016500
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008504:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008508:	d305      	bcc.n	8008516 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008512:	2b04      	cmp	r3, #4
 8008514:	d909      	bls.n	800852a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <lwip_netconn_do_writemore+0x2c2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	2200      	movs	r2, #0
 8008524:	2103      	movs	r1, #3
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800852a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d11d      	bne.n	800856e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	699a      	ldr	r2, [r3, #24]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	429a      	cmp	r2, r3
 8008540:	d002      	beq.n	8008548 <lwip_netconn_do_writemore+0x2e0>
 8008542:	7e3b      	ldrb	r3, [r7, #24]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8008548:	2301      	movs	r3, #1
 800854a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	4618      	mov	r0, r3
 8008552:	f007 ff2f 	bl	80103b4 <tcp_output>
 8008556:	4603      	mov	r3, r0
 8008558:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800855a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800855e:	f113 0f04 	cmn.w	r3, #4
 8008562:	d12c      	bne.n	80085be <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008564:	7b3b      	ldrb	r3, [r7, #12]
 8008566:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008568:	2301      	movs	r3, #1
 800856a:	76fb      	strb	r3, [r7, #27]
 800856c:	e027      	b.n	80085be <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800856e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d120      	bne.n	80085ba <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	4618      	mov	r0, r3
 800857e:	f007 ff19 	bl	80103b4 <tcp_output>
 8008582:	4603      	mov	r3, r0
 8008584:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8008586:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800858a:	f113 0f04 	cmn.w	r3, #4
 800858e:	d104      	bne.n	800859a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008590:	7b7b      	ldrb	r3, [r7, #13]
 8008592:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8008594:	2301      	movs	r3, #1
 8008596:	76fb      	strb	r3, [r7, #27]
 8008598:	e011      	b.n	80085be <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800859a:	7e3b      	ldrb	r3, [r7, #24]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00e      	beq.n	80085be <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d102      	bne.n	80085b0 <lwip_netconn_do_writemore+0x348>
 80085aa:	f06f 0306 	mvn.w	r3, #6
 80085ae:	e000      	b.n	80085b2 <lwip_netconn_do_writemore+0x34a>
 80085b0:	2300      	movs	r3, #0
 80085b2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80085b4:	2301      	movs	r3, #1
 80085b6:	76fb      	strb	r3, [r7, #27]
 80085b8:	e001      	b.n	80085be <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80085ba:	2301      	movs	r3, #1
 80085bc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80085be:	7efb      	ldrb	r3, [r7, #27]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d015      	beq.n	80085f0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	330c      	adds	r3, #12
 80085cc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	7ffa      	ldrb	r2, [r7, #31]
 80085d4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80085e2:	78fb      	ldrb	r3, [r7, #3]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d006      	beq.n	80085f6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80085e8:	68b8      	ldr	r0, [r7, #8]
 80085ea:	f00c fa81 	bl	8014af0 <sys_sem_signal>
 80085ee:	e002      	b.n	80085f6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80085f0:	f04f 33ff 	mov.w	r3, #4294967295
 80085f4:	e000      	b.n	80085f8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3720      	adds	r7, #32
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe fd2d 	bl	8007070 <netconn_err>
 8008616:	4603      	mov	r3, r0
 8008618:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800861a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d166      	bne.n	80086f0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800862c:	2b10      	cmp	r3, #16
 800862e:	d15d      	bne.n	80086ec <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	785b      	ldrb	r3, [r3, #1]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800863a:	23fb      	movs	r3, #251	; 0xfb
 800863c:	73fb      	strb	r3, [r7, #15]
 800863e:	e057      	b.n	80086f0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d04d      	beq.n	80086e6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2201      	movs	r2, #1
 8008650:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6a1b      	ldr	r3, [r3, #32]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d006      	beq.n	800866a <lwip_netconn_do_write+0x6a>
 800865c:	4b28      	ldr	r3, [pc, #160]	; (8008700 <lwip_netconn_do_write+0x100>)
 800865e:	f240 7223 	movw	r2, #1827	; 0x723
 8008662:	4928      	ldr	r1, [pc, #160]	; (8008704 <lwip_netconn_do_write+0x104>)
 8008664:	4828      	ldr	r0, [pc, #160]	; (8008708 <lwip_netconn_do_write+0x108>)
 8008666:	f00c fb6b 	bl	8014d40 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <lwip_netconn_do_write+0x80>
 8008672:	4b23      	ldr	r3, [pc, #140]	; (8008700 <lwip_netconn_do_write+0x100>)
 8008674:	f240 7224 	movw	r2, #1828	; 0x724
 8008678:	4924      	ldr	r1, [pc, #144]	; (800870c <lwip_netconn_do_write+0x10c>)
 800867a:	4823      	ldr	r0, [pc, #140]	; (8008708 <lwip_netconn_do_write+0x108>)
 800867c:	f00c fb60 	bl	8014d40 <iprintf>
        msg->conn->current_msg = msg;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fdea 	bl	8008268 <lwip_netconn_do_writemore>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d02e      	beq.n	80086f8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	785b      	ldrb	r3, [r3, #1]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d006      	beq.n	80086b2 <lwip_netconn_do_write+0xb2>
 80086a4:	4b16      	ldr	r3, [pc, #88]	; (8008700 <lwip_netconn_do_write+0x100>)
 80086a6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80086aa:	4919      	ldr	r1, [pc, #100]	; (8008710 <lwip_netconn_do_write+0x110>)
 80086ac:	4816      	ldr	r0, [pc, #88]	; (8008708 <lwip_netconn_do_write+0x108>)
 80086ae:	f00c fb47 	bl	8014d40 <iprintf>
          UNLOCK_TCPIP_CORE();
 80086b2:	4818      	ldr	r0, [pc, #96]	; (8008714 <lwip_netconn_do_write+0x114>)
 80086b4:	f00c fa8d 	bl	8014bd2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	330c      	adds	r3, #12
 80086be:	2100      	movs	r1, #0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f00c f9e4 	bl	8014a8e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80086c6:	4813      	ldr	r0, [pc, #76]	; (8008714 <lwip_netconn_do_write+0x114>)
 80086c8:	f00c fa74 	bl	8014bb4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d110      	bne.n	80086f8 <lwip_netconn_do_write+0xf8>
 80086d6:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <lwip_netconn_do_write+0x100>)
 80086d8:	f240 722c 	movw	r2, #1836	; 0x72c
 80086dc:	490c      	ldr	r1, [pc, #48]	; (8008710 <lwip_netconn_do_write+0x110>)
 80086de:	480a      	ldr	r0, [pc, #40]	; (8008708 <lwip_netconn_do_write+0x108>)
 80086e0:	f00c fb2e 	bl	8014d40 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80086e4:	e008      	b.n	80086f8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80086e6:	23f5      	movs	r3, #245	; 0xf5
 80086e8:	73fb      	strb	r3, [r7, #15]
 80086ea:	e001      	b.n	80086f0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80086ec:	23fa      	movs	r3, #250	; 0xfa
 80086ee:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	7bfa      	ldrb	r2, [r7, #15]
 80086f4:	711a      	strb	r2, [r3, #4]
 80086f6:	e000      	b.n	80086fa <lwip_netconn_do_write+0xfa>
        return;
 80086f8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	08016000 	.word	0x08016000
 8008704:	080163a4 	.word	0x080163a4
 8008708:	08016044 	.word	0x08016044
 800870c:	0801652c 	.word	0x0801652c
 8008710:	080163c0 	.word	0x080163c0
 8008714:	20007554 	.word	0x20007554

08008718 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8008722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008726:	2b00      	cmp	r3, #0
 8008728:	dc04      	bgt.n	8008734 <err_to_errno+0x1c>
 800872a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800872e:	425b      	negs	r3, r3
 8008730:	2b10      	cmp	r3, #16
 8008732:	dd01      	ble.n	8008738 <err_to_errno+0x20>
    return EIO;
 8008734:	2305      	movs	r3, #5
 8008736:	e005      	b.n	8008744 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8008738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800873c:	425b      	negs	r3, r3
 800873e:	4a04      	ldr	r2, [pc, #16]	; (8008750 <err_to_errno+0x38>)
 8008740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8008744:	4618      	mov	r0, r3
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	080195d4 	.word	0x080195d4

08008754 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d013      	beq.n	800878a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f002 fac2 	bl	800acf8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	605a      	str	r2, [r3, #4]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	2006      	movs	r0, #6
 8008786:	f001 fc17 	bl	8009fb8 <memp_free>
  }
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <netbuf_free+0x1c>
 80087a2:	4b0d      	ldr	r3, [pc, #52]	; (80087d8 <netbuf_free+0x44>)
 80087a4:	2281      	movs	r2, #129	; 0x81
 80087a6:	490d      	ldr	r1, [pc, #52]	; (80087dc <netbuf_free+0x48>)
 80087a8:	480d      	ldr	r0, [pc, #52]	; (80087e0 <netbuf_free+0x4c>)
 80087aa:	f00c fac9 	bl	8014d40 <iprintf>
 80087ae:	e00f      	b.n	80087d0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d004      	beq.n	80087c2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 fa9b 	bl	800acf8 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	605a      	str	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	08016558 	.word	0x08016558
 80087dc:	080165f4 	.word	0x080165f4
 80087e0:	080165a8 	.word	0x080165a8

080087e4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	4613      	mov	r3, r2
 80087f0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d108      	bne.n	800880a <netbuf_ref+0x26>
 80087f8:	4b1c      	ldr	r3, [pc, #112]	; (800886c <netbuf_ref+0x88>)
 80087fa:	2299      	movs	r2, #153	; 0x99
 80087fc:	491c      	ldr	r1, [pc, #112]	; (8008870 <netbuf_ref+0x8c>)
 80087fe:	481d      	ldr	r0, [pc, #116]	; (8008874 <netbuf_ref+0x90>)
 8008800:	f00c fa9e 	bl	8014d40 <iprintf>
 8008804:	f06f 030f 	mvn.w	r3, #15
 8008808:	e02b      	b.n	8008862 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4618      	mov	r0, r3
 8008818:	f002 fa6e 	bl	800acf8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800881c:	2241      	movs	r2, #65	; 0x41
 800881e:	2100      	movs	r1, #0
 8008820:	2036      	movs	r0, #54	; 0x36
 8008822:	f001 ff89 	bl	800a738 <pbuf_alloc>
 8008826:	4602      	mov	r2, r0
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d105      	bne.n	8008840 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	e010      	b.n	8008862 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	88fa      	ldrh	r2, [r7, #6]
 800884e:	811a      	strh	r2, [r3, #8]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	891b      	ldrh	r3, [r3, #8]
 8008856:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	08016558 	.word	0x08016558
 8008870:	08016610 	.word	0x08016610
 8008874:	080165a8 	.word	0x080165a8

08008878 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	db02      	blt.n	8008890 <tryget_socket_unconn_nouse+0x18>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b03      	cmp	r3, #3
 800888e:	dd01      	ble.n	8008894 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8008890:	2300      	movs	r3, #0
 8008892:	e003      	b.n	800889c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	4a03      	ldr	r2, [pc, #12]	; (80088a8 <tryget_socket_unconn_nouse+0x30>)
 800889a:	4413      	add	r3, r2
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	200041b4 	.word	0x200041b4

080088ac <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7ff ffdf 	bl	8008878 <tryget_socket_unconn_nouse>
 80088ba:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 80088bc:	68fb      	ldr	r3, [r7, #12]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff ffec 	bl	80088ac <tryget_socket_unconn>
 80088d4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <tryget_socket+0x22>
    if (sock->conn) {
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <tryget_socket+0x22>
      return sock;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	e000      	b.n	80088ea <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
	...

080088f4 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff ffe2 	bl	80088c6 <tryget_socket>
 8008902:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d104      	bne.n	8008914 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800890a:	4b05      	ldr	r3, [pc, #20]	; (8008920 <get_socket+0x2c>)
 800890c:	2209      	movs	r2, #9
 800890e:	601a      	str	r2, [r3, #0]
    return NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	e000      	b.n	8008916 <get_socket+0x22>
  }
  return sock;
 8008914:	68fb      	ldr	r3, [r7, #12]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	2000e648 	.word	0x2000e648

08008924 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800892e:	2300      	movs	r3, #0
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	e052      	b.n	80089da <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8008934:	f00c f980 	bl	8014c38 <sys_arch_protect>
 8008938:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800893a:	4a2c      	ldr	r2, [pc, #176]	; (80089ec <alloc_socket+0xc8>)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	4413      	add	r3, r2
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d142      	bne.n	80089ce <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8008948:	4a28      	ldr	r2, [pc, #160]	; (80089ec <alloc_socket+0xc8>)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	011b      	lsls	r3, r3, #4
 800894e:	4413      	add	r3, r2
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8008954:	68b8      	ldr	r0, [r7, #8]
 8008956:	f00c f97d 	bl	8014c54 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800895a:	4a24      	ldr	r2, [pc, #144]	; (80089ec <alloc_socket+0xc8>)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	4413      	add	r3, r2
 8008962:	3304      	adds	r3, #4
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 8008968:	4a20      	ldr	r2, [pc, #128]	; (80089ec <alloc_socket+0xc8>)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	4413      	add	r3, r2
 8008970:	330e      	adds	r3, #14
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d006      	beq.n	8008986 <alloc_socket+0x62>
 8008978:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <alloc_socket+0xcc>)
 800897a:	f240 220e 	movw	r2, #526	; 0x20e
 800897e:	491d      	ldr	r1, [pc, #116]	; (80089f4 <alloc_socket+0xd0>)
 8008980:	481d      	ldr	r0, [pc, #116]	; (80089f8 <alloc_socket+0xd4>)
 8008982:	f00c f9dd 	bl	8014d40 <iprintf>
      sockets[i].rcvevent   = 0;
 8008986:	4a19      	ldr	r2, [pc, #100]	; (80089ec <alloc_socket+0xc8>)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	011b      	lsls	r3, r3, #4
 800898c:	4413      	add	r3, r2
 800898e:	3308      	adds	r3, #8
 8008990:	2200      	movs	r2, #0
 8008992:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800899c:	2b10      	cmp	r3, #16
 800899e:	d102      	bne.n	80089a6 <alloc_socket+0x82>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <alloc_socket+0x86>
 80089a6:	2301      	movs	r3, #1
 80089a8:	e000      	b.n	80089ac <alloc_socket+0x88>
 80089aa:	2300      	movs	r3, #0
 80089ac:	b299      	uxth	r1, r3
 80089ae:	4a0f      	ldr	r2, [pc, #60]	; (80089ec <alloc_socket+0xc8>)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	4413      	add	r3, r2
 80089b6:	330a      	adds	r3, #10
 80089b8:	460a      	mov	r2, r1
 80089ba:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80089bc:	4a0b      	ldr	r2, [pc, #44]	; (80089ec <alloc_socket+0xc8>)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	011b      	lsls	r3, r3, #4
 80089c2:	4413      	add	r3, r2
 80089c4:	330c      	adds	r3, #12
 80089c6:	2200      	movs	r2, #0
 80089c8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	e00a      	b.n	80089e4 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 80089ce:	68b8      	ldr	r0, [r7, #8]
 80089d0:	f00c f940 	bl	8014c54 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	3301      	adds	r3, #1
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b03      	cmp	r3, #3
 80089de:	dda9      	ble.n	8008934 <alloc_socket+0x10>
  }
  return -1;
 80089e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	200041b4 	.word	0x200041b4
 80089f0:	080166f0 	.word	0x080166f0
 80089f4:	08016724 	.word	0x08016724
 80089f8:	08016744 	.word	0x08016744

080089fc <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	6852      	ldr	r2, [r2, #4]
 8008a10:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
  return 1;
 8008a26:	2301      	movs	r3, #1
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00d      	beq.n	8008a64 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f002 f950 	bl	800acf8 <pbuf_free>
 8008a58:	e004      	b.n	8008a64 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff fe78 	bl	8008754 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d002      	beq.n	8008a70 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 8008a6a:	68b8      	ldr	r0, [r7, #8]
 8008a6c:	f7fe f982 	bl	8006d74 <netconn_delete>
  }
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 8008a82:	f00c f8d9 	bl	8014c38 <sys_arch_protect>
 8008a86:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 8008a88:	f107 0308 	add.w	r3, r7, #8
 8008a8c:	f107 020c 	add.w	r2, r7, #12
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f7ff ffb2 	bl	80089fc <free_socket_locked>
 8008a98:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 8008a9a:	6978      	ldr	r0, [r7, #20]
 8008a9c:	f00c f8da 	bl	8014c54 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d006      	beq.n	8008ab4 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f107 0208 	add.w	r2, r7, #8
 8008aac:	4619      	mov	r1, r3
 8008aae:	6838      	ldr	r0, [r7, #0]
 8008ab0:	f7ff ffc0 	bl	8008a34 <free_socket_free_elements>
  }
}
 8008ab4:	bf00      	nop
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f7ff ff13 	bl	80088f4 <get_socket>
 8008ace:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d102      	bne.n	8008adc <lwip_close+0x20>
    return -1;
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ada:	e039      	b.n	8008b50 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00b      	beq.n	8008afc <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	bf0c      	ite	eq
 8008af2:	2301      	moveq	r3, #1
 8008af4:	2300      	movne	r3, #0
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	617b      	str	r3, [r7, #20]
 8008afa:	e00a      	b.n	8008b12 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <lwip_close+0x56>
 8008b04:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <lwip_close+0x9c>)
 8008b06:	f44f 7245 	mov.w	r2, #788	; 0x314
 8008b0a:	4914      	ldr	r1, [pc, #80]	; (8008b5c <lwip_close+0xa0>)
 8008b0c:	4814      	ldr	r0, [pc, #80]	; (8008b60 <lwip_close+0xa4>)
 8008b0e:	f00c f917 	bl	8014d40 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7fe f908 	bl	8006d2c <netconn_prepare_delete>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00e      	beq.n	8008b46 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8008b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff fdf3 	bl	8008718 <err_to_errno>
 8008b32:	60b8      	str	r0, [r7, #8]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <lwip_close+0x84>
 8008b3a:	4a0a      	ldr	r2, [pc, #40]	; (8008b64 <lwip_close+0xa8>)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8008b40:	f04f 33ff 	mov.w	r3, #4294967295
 8008b44:	e004      	b.n	8008b50 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8008b46:	6979      	ldr	r1, [r7, #20]
 8008b48:	6938      	ldr	r0, [r7, #16]
 8008b4a:	f7ff ff95 	bl	8008a78 <free_socket>
  set_errno(0);
  return 0;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	080166f0 	.word	0x080166f0
 8008b5c:	080167b0 	.word	0x080167b0
 8008b60:	08016744 	.word	0x08016744
 8008b64:	2000e648 	.word	0x2000e648

08008b68 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08c      	sub	sp, #48	; 0x30
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff febd 	bl	80088f4 <get_socket>
 8008b7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d102      	bne.n	8008b88 <lwip_connect+0x20>
    return -1;
 8008b82:	f04f 33ff 	mov.w	r3, #4294967295
 8008b86:	e062      	b.n	8008c4e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	785b      	ldrb	r3, [r3, #1]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d108      	bne.n	8008ba2 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe f941 	bl	8006e1c <netconn_disconnect>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008ba0:	e039      	b.n	8008c16 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b10      	cmp	r3, #16
 8008ba6:	d10c      	bne.n	8008bc2 <lwip_connect+0x5a>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	785b      	ldrb	r3, [r3, #1]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <lwip_connect+0x50>
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	785b      	ldrb	r3, [r3, #1]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d104      	bne.n	8008bc2 <lwip_connect+0x5a>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d014      	beq.n	8008bec <lwip_connect+0x84>
 8008bc2:	4b25      	ldr	r3, [pc, #148]	; (8008c58 <lwip_connect+0xf0>)
 8008bc4:	f240 3249 	movw	r2, #841	; 0x349
 8008bc8:	4924      	ldr	r1, [pc, #144]	; (8008c5c <lwip_connect+0xf4>)
 8008bca:	4825      	ldr	r0, [pc, #148]	; (8008c60 <lwip_connect+0xf8>)
 8008bcc:	f00c f8b8 	bl	8014d40 <iprintf>
 8008bd0:	f06f 000f 	mvn.w	r0, #15
 8008bd4:	f7ff fda0 	bl	8008718 <err_to_errno>
 8008bd8:	6238      	str	r0, [r7, #32]
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <lwip_connect+0x7e>
 8008be0:	4a20      	ldr	r2, [pc, #128]	; (8008c64 <lwip_connect+0xfc>)
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	6013      	str	r3, [r2, #0]
 8008be6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bea:	e030      	b.n	8008c4e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	617b      	str	r3, [r7, #20]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	885b      	ldrh	r3, [r3, #2]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fcd6 	bl	80095a8 <lwip_htons>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008c06:	f107 0114 	add.w	r1, r7, #20
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fe f8ce 	bl	8006dac <netconn_connect>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 8008c16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00e      	beq.n	8008c3c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8008c1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7ff fd78 	bl	8008718 <err_to_errno>
 8008c28:	61b8      	str	r0, [r7, #24]
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d002      	beq.n	8008c36 <lwip_connect+0xce>
 8008c30:	4a0c      	ldr	r2, [pc, #48]	; (8008c64 <lwip_connect+0xfc>)
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3a:	e008      	b.n	8008c4e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	61fb      	str	r3, [r7, #28]
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <lwip_connect+0xe4>
 8008c46:	4a07      	ldr	r2, [pc, #28]	; (8008c64 <lwip_connect+0xfc>)
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3730      	adds	r7, #48	; 0x30
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	080166f0 	.word	0x080166f0
 8008c5c:	080167c8 	.word	0x080167c8
 8008c60:	08016744 	.word	0x08016744
 8008c64:	2000e648 	.word	0x2000e648

08008c68 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af02      	add	r7, sp, #8
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff fe3c 	bl	80088f4 <get_socket>
 8008c7c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <lwip_send+0x22>
    return -1;
 8008c84:	f04f 33ff 	mov.w	r3, #4294967295
 8008c88:	e046      	b.n	8008d18 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c94:	2b10      	cmp	r3, #16
 8008c96:	d00b      	beq.n	8008cb0 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 f83c 	bl	8008d24 <lwip_sendto>
 8008cac:	4603      	mov	r3, r0
 8008cae:	e033      	b.n	8008d18 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <lwip_send+0x56>
 8008cba:	2203      	movs	r2, #3
 8008cbc:	e000      	b.n	8008cc0 <lwip_send+0x58>
 8008cbe:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	105b      	asrs	r3, r3, #1
 8008cc4:	b25b      	sxtb	r3, r3
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 8008cd0:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	7efa      	ldrb	r2, [r7, #27]
 8008cdc:	f107 0310 	add.w	r3, r7, #16
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	68b9      	ldr	r1, [r7, #8]
 8008ce8:	f7fe f8f0 	bl	8006ecc <netconn_write_partly>
 8008cec:	4603      	mov	r3, r0
 8008cee:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 8008cf0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7ff fd0f 	bl	8008718 <err_to_errno>
 8008cfa:	6178      	str	r0, [r7, #20]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <lwip_send+0xa0>
 8008d02:	4a07      	ldr	r2, [pc, #28]	; (8008d20 <lwip_send+0xb8>)
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8008d08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <lwip_send+0xac>
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	e001      	b.n	8008d18 <lwip_send+0xb0>
 8008d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3720      	adds	r7, #32
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	2000e648 	.word	0x2000e648

08008d24 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08e      	sub	sp, #56	; 0x38
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
 8008d30:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fdde 	bl	80088f4 <get_socket>
 8008d38:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <lwip_sendto+0x22>
    return -1;
 8008d40:	f04f 33ff 	mov.w	r3, #4294967295
 8008d44:	e093      	b.n	8008e6e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d50:	2b10      	cmp	r3, #16
 8008d52:	d107      	bne.n	8008d64 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f7ff ff84 	bl	8008c68 <lwip_send>
 8008d60:	4603      	mov	r3, r0
 8008d62:	e084      	b.n	8008e6e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d6a:	d30a      	bcc.n	8008d82 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 8008d6c:	235a      	movs	r3, #90	; 0x5a
 8008d6e:	623b      	str	r3, [r7, #32]
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <lwip_sendto+0x58>
 8008d76:	4a40      	ldr	r2, [pc, #256]	; (8008e78 <lwip_sendto+0x154>)
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8008d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d80:	e075      	b.n	8008e6e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 8008d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <lwip_sendto+0x6e>
 8008d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d023      	beq.n	8008dda <lwip_sendto+0xb6>
 8008d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d94:	2b10      	cmp	r3, #16
 8008d96:	d10b      	bne.n	8008db0 <lwip_sendto+0x8c>
 8008d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d008      	beq.n	8008db0 <lwip_sendto+0x8c>
 8008d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d104      	bne.n	8008db0 <lwip_sendto+0x8c>
 8008da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008da8:	f003 0303 	and.w	r3, r3, #3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d014      	beq.n	8008dda <lwip_sendto+0xb6>
 8008db0:	4b32      	ldr	r3, [pc, #200]	; (8008e7c <lwip_sendto+0x158>)
 8008db2:	f240 6255 	movw	r2, #1621	; 0x655
 8008db6:	4932      	ldr	r1, [pc, #200]	; (8008e80 <lwip_sendto+0x15c>)
 8008db8:	4832      	ldr	r0, [pc, #200]	; (8008e84 <lwip_sendto+0x160>)
 8008dba:	f00b ffc1 	bl	8014d40 <iprintf>
 8008dbe:	f06f 000f 	mvn.w	r0, #15
 8008dc2:	f7ff fca9 	bl	8008718 <err_to_errno>
 8008dc6:	62b8      	str	r0, [r7, #40]	; 0x28
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <lwip_sendto+0xb0>
 8008dce:	4a2a      	ldr	r2, [pc, #168]	; (8008e78 <lwip_sendto+0x154>)
 8008dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd8:	e049      	b.n	8008e6e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	617b      	str	r3, [r7, #20]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 8008de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8008de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df0:	885b      	ldrh	r3, [r3, #2]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fbd8 	bl	80095a8 <lwip_htons>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008dfc:	e003      	b.n	8008e06 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 8008e02:	2300      	movs	r3, #0
 8008e04:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8008e06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008e08:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8008e0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e0c:	f107 0310 	add.w	r3, r7, #16
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff fce6 	bl	80087e4 <netbuf_ref>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8008e1e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10a      	bne.n	8008e3c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f107 0210 	add.w	r2, r7, #16
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe f81d 	bl	8006e70 <netconn_send>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8008e3c:	f107 0310 	add.w	r3, r7, #16
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff fca7 	bl	8008794 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8008e46:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff fc64 	bl	8008718 <err_to_errno>
 8008e50:	6278      	str	r0, [r7, #36]	; 0x24
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <lwip_sendto+0x13a>
 8008e58:	4a07      	ldr	r2, [pc, #28]	; (8008e78 <lwip_sendto+0x154>)
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 8008e5e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <lwip_sendto+0x146>
 8008e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e68:	e001      	b.n	8008e6e <lwip_sendto+0x14a>
 8008e6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3738      	adds	r7, #56	; 0x38
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	2000e648 	.word	0x2000e648
 8008e7c:	080166f0 	.word	0x080166f0
 8008e80:	080169d0 	.word	0x080169d0
 8008e84:	08016744 	.word	0x08016744

08008e88 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d00d      	beq.n	8008eb6 <lwip_socket+0x2e>
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d002      	beq.n	8008ea4 <lwip_socket+0x1c>
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d016      	beq.n	8008ed0 <lwip_socket+0x48>
 8008ea2:	e01c      	b.n	8008ede <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	4a21      	ldr	r2, [pc, #132]	; (8008f30 <lwip_socket+0xa8>)
 8008eaa:	4619      	mov	r1, r3
 8008eac:	2040      	movs	r0, #64	; 0x40
 8008eae:	f7fd fec3 	bl	8006c38 <netconn_new_with_proto_and_callback>
 8008eb2:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8008eb4:	e019      	b.n	8008eea <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b88      	cmp	r3, #136	; 0x88
 8008eba:	d101      	bne.n	8008ec0 <lwip_socket+0x38>
 8008ebc:	2321      	movs	r3, #33	; 0x21
 8008ebe:	e000      	b.n	8008ec2 <lwip_socket+0x3a>
 8008ec0:	2320      	movs	r3, #32
 8008ec2:	4a1b      	ldr	r2, [pc, #108]	; (8008f30 <lwip_socket+0xa8>)
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fd feb6 	bl	8006c38 <netconn_new_with_proto_and_callback>
 8008ecc:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008ece:	e00c      	b.n	8008eea <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 8008ed0:	4a17      	ldr	r2, [pc, #92]	; (8008f30 <lwip_socket+0xa8>)
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	2010      	movs	r0, #16
 8008ed6:	f7fd feaf 	bl	8006c38 <netconn_new_with_proto_and_callback>
 8008eda:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8008edc:	e005      	b.n	8008eea <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 8008ede:	4b15      	ldr	r3, [pc, #84]	; (8008f34 <lwip_socket+0xac>)
 8008ee0:	2216      	movs	r2, #22
 8008ee2:	601a      	str	r2, [r3, #0]
      return -1;
 8008ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee8:	e01e      	b.n	8008f28 <lwip_socket+0xa0>
  }

  if (!conn) {
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d105      	bne.n	8008efc <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8008ef0:	4b10      	ldr	r3, [pc, #64]	; (8008f34 <lwip_socket+0xac>)
 8008ef2:	2269      	movs	r2, #105	; 0x69
 8008ef4:	601a      	str	r2, [r3, #0]
    return -1;
 8008ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8008efa:	e015      	b.n	8008f28 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 8008efc:	2100      	movs	r1, #0
 8008efe:	6978      	ldr	r0, [r7, #20]
 8008f00:	f7ff fd10 	bl	8008924 <alloc_socket>
 8008f04:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0c:	d108      	bne.n	8008f20 <lwip_socket+0x98>
    netconn_delete(conn);
 8008f0e:	6978      	ldr	r0, [r7, #20]
 8008f10:	f7fd ff30 	bl	8006d74 <netconn_delete>
    set_errno(ENFILE);
 8008f14:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <lwip_socket+0xac>)
 8008f16:	2217      	movs	r2, #23
 8008f18:	601a      	str	r2, [r3, #0]
    return -1;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1e:	e003      	b.n	8008f28 <lwip_socket+0xa0>
  }
  conn->socket = i;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8008f26:	693b      	ldr	r3, [r7, #16]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	08008fc1 	.word	0x08008fc1
 8008f34:	2000e648 	.word	0x2000e648

08008f38 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e02c      	b.n	8008fa6 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	695a      	ldr	r2, [r3, #20]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	4413      	add	r3, r2
 8008f56:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d11e      	bne.n	8008fa0 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d009      	beq.n	8008f7c <lwip_poll_should_wake+0x44>
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	f003 0301 	and.w	r3, r3, #1
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <lwip_poll_should_wake+0x44>
        return 1;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e01a      	b.n	8008fb2 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d009      	beq.n	8008f96 <lwip_poll_should_wake+0x5e>
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <lwip_poll_should_wake+0x5e>
        return 1;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e00d      	b.n	8008fb2 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e008      	b.n	8008fb2 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	617b      	str	r3, [r7, #20]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	697a      	ldr	r2, [r7, #20]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d3cd      	bcc.n	8008f4c <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	; 0x28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 80a4 	beq.w	8009120 <event_callback+0x160>
    s = conn->socket;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 8008fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	da18      	bge.n	8009016 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8008fe4:	f00b fe28 	bl	8014c38 <sys_arch_protect>
 8008fe8:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	da0b      	bge.n	800900a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8008ff2:	78fb      	ldrb	r3, [r7, #3]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d104      	bne.n	8009002 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	699b      	ldr	r3, [r3, #24]
 8008ffc:	1e5a      	subs	r2, r3, #1
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8009002:	69f8      	ldr	r0, [r7, #28]
 8009004:	f00b fe26 	bl	8014c54 <sys_arch_unprotect>
        return;
 8009008:	e08d      	b.n	8009126 <event_callback+0x166>
      }
      s = conn->socket;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 8009010:	69f8      	ldr	r0, [r7, #28]
 8009012:	f00b fe1f 	bl	8014c54 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8009016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009018:	f7ff fc6c 	bl	80088f4 <get_socket>
 800901c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d07f      	beq.n	8009124 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 8009024:	2301      	movs	r3, #1
 8009026:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 8009028:	f00b fe06 	bl	8014c38 <sys_arch_protect>
 800902c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800902e:	78fb      	ldrb	r3, [r7, #3]
 8009030:	2b04      	cmp	r3, #4
 8009032:	d83e      	bhi.n	80090b2 <event_callback+0xf2>
 8009034:	a201      	add	r2, pc, #4	; (adr r2, 800903c <event_callback+0x7c>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	08009051 	.word	0x08009051
 8009040:	08009073 	.word	0x08009073
 8009044:	0800908b 	.word	0x0800908b
 8009048:	0800909f 	.word	0x0800909f
 800904c:	080090ab 	.word	0x080090ab
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009056:	b29b      	uxth	r3, r3
 8009058:	3301      	adds	r3, #1
 800905a:	b29b      	uxth	r3, r3
 800905c:	b21a      	sxth	r2, r3
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009068:	2b01      	cmp	r3, #1
 800906a:	dd2a      	ble.n	80090c2 <event_callback+0x102>
        check_waiters = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	623b      	str	r3, [r7, #32]
      }
      break;
 8009070:	e027      	b.n	80090c2 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009078:	b29b      	uxth	r3, r3
 800907a:	3b01      	subs	r3, #1
 800907c:	b29b      	uxth	r3, r3
 800907e:	b21a      	sxth	r2, r3
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	623b      	str	r3, [r7, #32]
      break;
 8009088:	e01c      	b.n	80090c4 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	895b      	ldrh	r3, [r3, #10]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d001      	beq.n	8009096 <event_callback+0xd6>
        check_waiters = 0;
 8009092:	2300      	movs	r3, #0
 8009094:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	2201      	movs	r2, #1
 800909a:	815a      	strh	r2, [r3, #10]
      break;
 800909c:	e012      	b.n	80090c4 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	2200      	movs	r2, #0
 80090a2:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	623b      	str	r3, [r7, #32]
      break;
 80090a8:	e00c      	b.n	80090c4 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	2201      	movs	r2, #1
 80090ae:	819a      	strh	r2, [r3, #12]
      break;
 80090b0:	e008      	b.n	80090c4 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 80090b2:	4b1e      	ldr	r3, [pc, #120]	; (800912c <event_callback+0x16c>)
 80090b4:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 80090b8:	491d      	ldr	r1, [pc, #116]	; (8009130 <event_callback+0x170>)
 80090ba:	481e      	ldr	r0, [pc, #120]	; (8009134 <event_callback+0x174>)
 80090bc:	f00b fe40 	bl	8014d40 <iprintf>
      break;
 80090c0:	e000      	b.n	80090c4 <event_callback+0x104>
      break;
 80090c2:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	7b9b      	ldrb	r3, [r3, #14]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d025      	beq.n	8009118 <event_callback+0x158>
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d022      	beq.n	8009118 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	bfcc      	ite	gt
 80090dc:	2301      	movgt	r3, #1
 80090de:	2300      	movle	r3, #0
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	895b      	ldrh	r3, [r3, #10]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bf14      	ite	ne
 80090ec:	2301      	movne	r3, #1
 80090ee:	2300      	moveq	r3, #0
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	899b      	ldrh	r3, [r3, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bf14      	ite	ne
 80090fc:	2301      	movne	r3, #1
 80090fe:	2300      	moveq	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8009104:	69f8      	ldr	r0, [r7, #28]
 8009106:	f00b fda5 	bl	8014c54 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	693a      	ldr	r2, [r7, #16]
 800910e:	6979      	ldr	r1, [r7, #20]
 8009110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009112:	f000 f811 	bl	8009138 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8009116:	e006      	b.n	8009126 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8009118:	69f8      	ldr	r0, [r7, #28]
 800911a:	f00b fd9b 	bl	8014c54 <sys_arch_unprotect>
 800911e:	e002      	b.n	8009126 <event_callback+0x166>
    return;
 8009120:	bf00      	nop
 8009122:	e000      	b.n	8009126 <event_callback+0x166>
      return;
 8009124:	bf00      	nop
  }
  done_socket(sock);
}
 8009126:	3728      	adds	r7, #40	; 0x28
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	080166f0 	.word	0x080166f0
 8009130:	08016a6c 	.word	0x08016a6c
 8009134:	08016744 	.word	0x08016744

08009138 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b088      	sub	sp, #32
 800913c:	af02      	add	r7, sp, #8
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8009146:	4b3d      	ldr	r3, [pc, #244]	; (800923c <select_check_waiters+0x104>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e06f      	b.n	800922e <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	69db      	ldr	r3, [r3, #28]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d168      	bne.n	8009228 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d009      	beq.n	8009176 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	68f9      	ldr	r1, [r7, #12]
 800916c:	6978      	ldr	r0, [r7, #20]
 800916e:	f7ff fee3 	bl	8008f38 <lwip_poll_should_wake>
 8009172:	6138      	str	r0, [r7, #16]
 8009174:	e04d      	b.n	8009212 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d014      	beq.n	80091a6 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d010      	beq.n	80091a6 <select_check_waiters+0x6e>
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	0952      	lsrs	r2, r2, #5
 800918c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	f002 021f 	and.w	r2, r2, #31
 8009196:	2101      	movs	r1, #1
 8009198:	fa01 f202 	lsl.w	r2, r1, r2
 800919c:	4013      	ands	r3, r2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <select_check_waiters+0x6e>
            do_signal = 1;
 80091a2:	2301      	movs	r3, #1
 80091a4:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d017      	beq.n	80091dc <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d114      	bne.n	80091dc <select_check_waiters+0xa4>
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d010      	beq.n	80091dc <select_check_waiters+0xa4>
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	0952      	lsrs	r2, r2, #5
 80091c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	f002 021f 	and.w	r2, r2, #31
 80091cc:	2101      	movs	r1, #1
 80091ce:	fa01 f202 	lsl.w	r2, r1, r2
 80091d2:	4013      	ands	r3, r2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <select_check_waiters+0xa4>
            do_signal = 1;
 80091d8:	2301      	movs	r3, #1
 80091da:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d017      	beq.n	8009212 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d114      	bne.n	8009212 <select_check_waiters+0xda>
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d010      	beq.n	8009212 <select_check_waiters+0xda>
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	0952      	lsrs	r2, r2, #5
 80091f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	f002 021f 	and.w	r2, r2, #31
 8009202:	2101      	movs	r1, #1
 8009204:	fa01 f202 	lsl.w	r2, r1, r2
 8009208:	4013      	ands	r3, r2
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <select_check_waiters+0xda>
            do_signal = 1;
 800920e:	2301      	movs	r3, #1
 8009210:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d007      	beq.n	8009228 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2201      	movs	r2, #1
 800921c:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	3320      	adds	r3, #32
 8009222:	4618      	mov	r0, r3
 8009224:	f00b fc64 	bl	8014af0 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	617b      	str	r3, [r7, #20]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d18c      	bne.n	800914e <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8009234:	bf00      	nop
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}
 800923c:	200041f4 	.word	0x200041f4

08009240 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800924a:	f008 f979 	bl	8011540 <sys_timeouts_sleeptime>
 800924e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009256:	d10b      	bne.n	8009270 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009258:	4813      	ldr	r0, [pc, #76]	; (80092a8 <tcpip_timeouts_mbox_fetch+0x68>)
 800925a:	f00b fcba 	bl	8014bd2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800925e:	2200      	movs	r2, #0
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f00b fb72 	bl	801494c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009268:	480f      	ldr	r0, [pc, #60]	; (80092a8 <tcpip_timeouts_mbox_fetch+0x68>)
 800926a:	f00b fca3 	bl	8014bb4 <sys_mutex_lock>
    return;
 800926e:	e018      	b.n	80092a2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009276:	f008 f929 	bl	80114cc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800927a:	e7e6      	b.n	800924a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800927c:	480a      	ldr	r0, [pc, #40]	; (80092a8 <tcpip_timeouts_mbox_fetch+0x68>)
 800927e:	f00b fca8 	bl	8014bd2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	6839      	ldr	r1, [r7, #0]
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f00b fb60 	bl	801494c <sys_arch_mbox_fetch>
 800928c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800928e:	4806      	ldr	r0, [pc, #24]	; (80092a8 <tcpip_timeouts_mbox_fetch+0x68>)
 8009290:	f00b fc90 	bl	8014bb4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929a:	d102      	bne.n	80092a2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800929c:	f008 f916 	bl	80114cc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80092a0:	e7d3      	b.n	800924a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	20007554 	.word	0x20007554

080092ac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80092b4:	4810      	ldr	r0, [pc, #64]	; (80092f8 <tcpip_thread+0x4c>)
 80092b6:	f00b fc7d 	bl	8014bb4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80092ba:	4b10      	ldr	r3, [pc, #64]	; (80092fc <tcpip_thread+0x50>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d005      	beq.n	80092ce <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80092c2:	4b0e      	ldr	r3, [pc, #56]	; (80092fc <tcpip_thread+0x50>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a0e      	ldr	r2, [pc, #56]	; (8009300 <tcpip_thread+0x54>)
 80092c8:	6812      	ldr	r2, [r2, #0]
 80092ca:	4610      	mov	r0, r2
 80092cc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80092ce:	f107 030c 	add.w	r3, r7, #12
 80092d2:	4619      	mov	r1, r3
 80092d4:	480b      	ldr	r0, [pc, #44]	; (8009304 <tcpip_thread+0x58>)
 80092d6:	f7ff ffb3 	bl	8009240 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d106      	bne.n	80092ee <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80092e0:	4b09      	ldr	r3, [pc, #36]	; (8009308 <tcpip_thread+0x5c>)
 80092e2:	2291      	movs	r2, #145	; 0x91
 80092e4:	4909      	ldr	r1, [pc, #36]	; (800930c <tcpip_thread+0x60>)
 80092e6:	480a      	ldr	r0, [pc, #40]	; (8009310 <tcpip_thread+0x64>)
 80092e8:	f00b fd2a 	bl	8014d40 <iprintf>
      continue;
 80092ec:	e003      	b.n	80092f6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 f80f 	bl	8009314 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80092f6:	e7ea      	b.n	80092ce <tcpip_thread+0x22>
 80092f8:	20007554 	.word	0x20007554
 80092fc:	200041f8 	.word	0x200041f8
 8009300:	200041fc 	.word	0x200041fc
 8009304:	20004200 	.word	0x20004200
 8009308:	08016ac0 	.word	0x08016ac0
 800930c:	08016af0 	.word	0x08016af0
 8009310:	08016b10 	.word	0x08016b10

08009314 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d018      	beq.n	8009356 <tcpip_thread_handle_msg+0x42>
 8009324:	2b02      	cmp	r3, #2
 8009326:	d021      	beq.n	800936c <tcpip_thread_handle_msg+0x58>
 8009328:	2b00      	cmp	r3, #0
 800932a:	d126      	bne.n	800937a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6850      	ldr	r0, [r2, #4]
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	6892      	ldr	r2, [r2, #8]
 8009338:	4611      	mov	r1, r2
 800933a:	4798      	blx	r3
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d004      	beq.n	800934c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	4618      	mov	r0, r3
 8009348:	f001 fcd6 	bl	800acf8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800934c:	6879      	ldr	r1, [r7, #4]
 800934e:	2009      	movs	r0, #9
 8009350:	f000 fe32 	bl	8009fb8 <memp_free>
      break;
 8009354:	e018      	b.n	8009388 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6892      	ldr	r2, [r2, #8]
 800935e:	4610      	mov	r0, r2
 8009360:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	2008      	movs	r0, #8
 8009366:	f000 fe27 	bl	8009fb8 <memp_free>
      break;
 800936a:	e00d      	b.n	8009388 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6892      	ldr	r2, [r2, #8]
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
      break;
 8009378:	e006      	b.n	8009388 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800937a:	4b05      	ldr	r3, [pc, #20]	; (8009390 <tcpip_thread_handle_msg+0x7c>)
 800937c:	22cf      	movs	r2, #207	; 0xcf
 800937e:	4905      	ldr	r1, [pc, #20]	; (8009394 <tcpip_thread_handle_msg+0x80>)
 8009380:	4805      	ldr	r0, [pc, #20]	; (8009398 <tcpip_thread_handle_msg+0x84>)
 8009382:	f00b fcdd 	bl	8014d40 <iprintf>
      break;
 8009386:	bf00      	nop
  }
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	08016ac0 	.word	0x08016ac0
 8009394:	08016af0 	.word	0x08016af0
 8009398:	08016b10 	.word	0x08016b10

0800939c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80093a8:	481a      	ldr	r0, [pc, #104]	; (8009414 <tcpip_inpkt+0x78>)
 80093aa:	f00b fb2a 	bl	8014a02 <sys_mbox_valid>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d105      	bne.n	80093c0 <tcpip_inpkt+0x24>
 80093b4:	4b18      	ldr	r3, [pc, #96]	; (8009418 <tcpip_inpkt+0x7c>)
 80093b6:	22fc      	movs	r2, #252	; 0xfc
 80093b8:	4918      	ldr	r1, [pc, #96]	; (800941c <tcpip_inpkt+0x80>)
 80093ba:	4819      	ldr	r0, [pc, #100]	; (8009420 <tcpip_inpkt+0x84>)
 80093bc:	f00b fcc0 	bl	8014d40 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80093c0:	2009      	movs	r0, #9
 80093c2:	f000 fda7 	bl	8009f14 <memp_malloc>
 80093c6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80093ce:	f04f 33ff 	mov.w	r3, #4294967295
 80093d2:	e01a      	b.n	800940a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	2200      	movs	r2, #0
 80093d8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80093ec:	6979      	ldr	r1, [r7, #20]
 80093ee:	4809      	ldr	r0, [pc, #36]	; (8009414 <tcpip_inpkt+0x78>)
 80093f0:	f00b fa92 	bl	8014918 <sys_mbox_trypost>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d006      	beq.n	8009408 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80093fa:	6979      	ldr	r1, [r7, #20]
 80093fc:	2009      	movs	r0, #9
 80093fe:	f000 fddb 	bl	8009fb8 <memp_free>
    return ERR_MEM;
 8009402:	f04f 33ff 	mov.w	r3, #4294967295
 8009406:	e000      	b.n	800940a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009408:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800940a:	4618      	mov	r0, r3
 800940c:	3718      	adds	r7, #24
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	20004200 	.word	0x20004200
 8009418:	08016ac0 	.word	0x08016ac0
 800941c:	08016b38 	.word	0x08016b38
 8009420:	08016b10 	.word	0x08016b10

08009424 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009434:	f003 0318 	and.w	r3, r3, #24
 8009438:	2b00      	cmp	r3, #0
 800943a:	d006      	beq.n	800944a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800943c:	4a08      	ldr	r2, [pc, #32]	; (8009460 <tcpip_input+0x3c>)
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff ffab 	bl	800939c <tcpip_inpkt>
 8009446:	4603      	mov	r3, r0
 8009448:	e005      	b.n	8009456 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800944a:	4a06      	ldr	r2, [pc, #24]	; (8009464 <tcpip_input+0x40>)
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff ffa4 	bl	800939c <tcpip_inpkt>
 8009454:	4603      	mov	r3, r0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	08014705 	.word	0x08014705
 8009464:	08013399 	.word	0x08013399

08009468 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009472:	4819      	ldr	r0, [pc, #100]	; (80094d8 <tcpip_try_callback+0x70>)
 8009474:	f00b fac5 	bl	8014a02 <sys_mbox_valid>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d106      	bne.n	800948c <tcpip_try_callback+0x24>
 800947e:	4b17      	ldr	r3, [pc, #92]	; (80094dc <tcpip_try_callback+0x74>)
 8009480:	f240 125d 	movw	r2, #349	; 0x15d
 8009484:	4916      	ldr	r1, [pc, #88]	; (80094e0 <tcpip_try_callback+0x78>)
 8009486:	4817      	ldr	r0, [pc, #92]	; (80094e4 <tcpip_try_callback+0x7c>)
 8009488:	f00b fc5a 	bl	8014d40 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800948c:	2008      	movs	r0, #8
 800948e:	f000 fd41 	bl	8009f14 <memp_malloc>
 8009492:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800949a:	f04f 33ff 	mov.w	r3, #4294967295
 800949e:	e017      	b.n	80094d0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2201      	movs	r2, #1
 80094a4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80094b2:	68f9      	ldr	r1, [r7, #12]
 80094b4:	4808      	ldr	r0, [pc, #32]	; (80094d8 <tcpip_try_callback+0x70>)
 80094b6:	f00b fa2f 	bl	8014918 <sys_mbox_trypost>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d006      	beq.n	80094ce <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80094c0:	68f9      	ldr	r1, [r7, #12]
 80094c2:	2008      	movs	r0, #8
 80094c4:	f000 fd78 	bl	8009fb8 <memp_free>
    return ERR_MEM;
 80094c8:	f04f 33ff 	mov.w	r3, #4294967295
 80094cc:	e000      	b.n	80094d0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	20004200 	.word	0x20004200
 80094dc:	08016ac0 	.word	0x08016ac0
 80094e0:	08016b38 	.word	0x08016b38
 80094e4:	08016b10 	.word	0x08016b10

080094e8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80094f4:	4806      	ldr	r0, [pc, #24]	; (8009510 <tcpip_send_msg_wait_sem+0x28>)
 80094f6:	f00b fb5d 	bl	8014bb4 <sys_mutex_lock>
  fn(apimsg);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	68b8      	ldr	r0, [r7, #8]
 80094fe:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009500:	4803      	ldr	r0, [pc, #12]	; (8009510 <tcpip_send_msg_wait_sem+0x28>)
 8009502:	f00b fb66 	bl	8014bd2 <sys_mutex_unlock>
  return ERR_OK;
 8009506:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	20007554 	.word	0x20007554

08009514 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af02      	add	r7, sp, #8
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800951e:	f000 f871 	bl	8009604 <lwip_init>

  tcpip_init_done = initfunc;
 8009522:	4a17      	ldr	r2, [pc, #92]	; (8009580 <tcpip_init+0x6c>)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009528:	4a16      	ldr	r2, [pc, #88]	; (8009584 <tcpip_init+0x70>)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800952e:	2106      	movs	r1, #6
 8009530:	4815      	ldr	r0, [pc, #84]	; (8009588 <tcpip_init+0x74>)
 8009532:	f00b f9bd 	bl	80148b0 <sys_mbox_new>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d006      	beq.n	800954a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800953c:	4b13      	ldr	r3, [pc, #76]	; (800958c <tcpip_init+0x78>)
 800953e:	f240 2261 	movw	r2, #609	; 0x261
 8009542:	4913      	ldr	r1, [pc, #76]	; (8009590 <tcpip_init+0x7c>)
 8009544:	4813      	ldr	r0, [pc, #76]	; (8009594 <tcpip_init+0x80>)
 8009546:	f00b fbfb 	bl	8014d40 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800954a:	4813      	ldr	r0, [pc, #76]	; (8009598 <tcpip_init+0x84>)
 800954c:	f00b fb16 	bl	8014b7c <sys_mutex_new>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d006      	beq.n	8009564 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009556:	4b0d      	ldr	r3, [pc, #52]	; (800958c <tcpip_init+0x78>)
 8009558:	f240 2265 	movw	r2, #613	; 0x265
 800955c:	490f      	ldr	r1, [pc, #60]	; (800959c <tcpip_init+0x88>)
 800955e:	480d      	ldr	r0, [pc, #52]	; (8009594 <tcpip_init+0x80>)
 8009560:	f00b fbee 	bl	8014d40 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009564:	2300      	movs	r3, #0
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800956c:	2200      	movs	r2, #0
 800956e:	490c      	ldr	r1, [pc, #48]	; (80095a0 <tcpip_init+0x8c>)
 8009570:	480c      	ldr	r0, [pc, #48]	; (80095a4 <tcpip_init+0x90>)
 8009572:	f00b fb3b 	bl	8014bec <sys_thread_new>
}
 8009576:	bf00      	nop
 8009578:	3708      	adds	r7, #8
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	200041f8 	.word	0x200041f8
 8009584:	200041fc 	.word	0x200041fc
 8009588:	20004200 	.word	0x20004200
 800958c:	08016ac0 	.word	0x08016ac0
 8009590:	08016b48 	.word	0x08016b48
 8009594:	08016b10 	.word	0x08016b10
 8009598:	20007554 	.word	0x20007554
 800959c:	08016b6c 	.word	0x08016b6c
 80095a0:	080092ad 	.word	0x080092ad
 80095a4:	08016b90 	.word	0x08016b90

080095a8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80095b2:	88fb      	ldrh	r3, [r7, #6]
 80095b4:	021b      	lsls	r3, r3, #8
 80095b6:	b21a      	sxth	r2, r3
 80095b8:	88fb      	ldrh	r3, [r7, #6]
 80095ba:	0a1b      	lsrs	r3, r3, #8
 80095bc:	b29b      	uxth	r3, r3
 80095be:	b21b      	sxth	r3, r3
 80095c0:	4313      	orrs	r3, r2
 80095c2:	b21b      	sxth	r3, r3
 80095c4:	b29b      	uxth	r3, r3
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b083      	sub	sp, #12
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	061a      	lsls	r2, r3, #24
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095e6:	431a      	orrs	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	0a1b      	lsrs	r3, r3, #8
 80095ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80095f0:	431a      	orrs	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	0e1b      	lsrs	r3, r3, #24
 80095f6:	4313      	orrs	r3, r2
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800960a:	2300      	movs	r3, #0
 800960c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800960e:	f00b faa7 	bl	8014b60 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009612:	f000 f8d5 	bl	80097c0 <mem_init>
  memp_init();
 8009616:	f000 fc31 	bl	8009e7c <memp_init>
  pbuf_init();
  netif_init();
 800961a:	f000 fcf7 	bl	800a00c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800961e:	f007 ffc7 	bl	80115b0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009622:	f001 fe13 	bl	800b24c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009626:	f007 ff0b 	bl	8011440 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800962a:	bf00      	nop
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	4603      	mov	r3, r0
 800963c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800963e:	4b05      	ldr	r3, [pc, #20]	; (8009654 <ptr_to_mem+0x20>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	88fb      	ldrh	r3, [r7, #6]
 8009644:	4413      	add	r3, r2
}
 8009646:	4618      	mov	r0, r3
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	20004204 	.word	0x20004204

08009658 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a05      	ldr	r2, [pc, #20]	; (8009678 <mem_to_ptr+0x20>)
 8009664:	6812      	ldr	r2, [r2, #0]
 8009666:	1a9b      	subs	r3, r3, r2
 8009668:	b29b      	uxth	r3, r3
}
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20004204 	.word	0x20004204

0800967c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800967c:	b590      	push	{r4, r7, lr}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009684:	4b45      	ldr	r3, [pc, #276]	; (800979c <plug_holes+0x120>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	429a      	cmp	r2, r3
 800968c:	d206      	bcs.n	800969c <plug_holes+0x20>
 800968e:	4b44      	ldr	r3, [pc, #272]	; (80097a0 <plug_holes+0x124>)
 8009690:	f240 12df 	movw	r2, #479	; 0x1df
 8009694:	4943      	ldr	r1, [pc, #268]	; (80097a4 <plug_holes+0x128>)
 8009696:	4844      	ldr	r0, [pc, #272]	; (80097a8 <plug_holes+0x12c>)
 8009698:	f00b fb52 	bl	8014d40 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800969c:	4b43      	ldr	r3, [pc, #268]	; (80097ac <plug_holes+0x130>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d306      	bcc.n	80096b4 <plug_holes+0x38>
 80096a6:	4b3e      	ldr	r3, [pc, #248]	; (80097a0 <plug_holes+0x124>)
 80096a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80096ac:	4940      	ldr	r1, [pc, #256]	; (80097b0 <plug_holes+0x134>)
 80096ae:	483e      	ldr	r0, [pc, #248]	; (80097a8 <plug_holes+0x12c>)
 80096b0:	f00b fb46 	bl	8014d40 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	791b      	ldrb	r3, [r3, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d006      	beq.n	80096ca <plug_holes+0x4e>
 80096bc:	4b38      	ldr	r3, [pc, #224]	; (80097a0 <plug_holes+0x124>)
 80096be:	f240 12e1 	movw	r2, #481	; 0x1e1
 80096c2:	493c      	ldr	r1, [pc, #240]	; (80097b4 <plug_holes+0x138>)
 80096c4:	4838      	ldr	r0, [pc, #224]	; (80097a8 <plug_holes+0x12c>)
 80096c6:	f00b fb3b 	bl	8014d40 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096d2:	d906      	bls.n	80096e2 <plug_holes+0x66>
 80096d4:	4b32      	ldr	r3, [pc, #200]	; (80097a0 <plug_holes+0x124>)
 80096d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80096da:	4937      	ldr	r1, [pc, #220]	; (80097b8 <plug_holes+0x13c>)
 80096dc:	4832      	ldr	r0, [pc, #200]	; (80097a8 <plug_holes+0x12c>)
 80096de:	f00b fb2f 	bl	8014d40 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff ffa4 	bl	8009634 <ptr_to_mem>
 80096ec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d024      	beq.n	8009740 <plug_holes+0xc4>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	791b      	ldrb	r3, [r3, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d120      	bne.n	8009740 <plug_holes+0xc4>
 80096fe:	4b2b      	ldr	r3, [pc, #172]	; (80097ac <plug_holes+0x130>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	429a      	cmp	r2, r3
 8009706:	d01b      	beq.n	8009740 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009708:	4b2c      	ldr	r3, [pc, #176]	; (80097bc <plug_holes+0x140>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	429a      	cmp	r2, r3
 8009710:	d102      	bne.n	8009718 <plug_holes+0x9c>
      lfree = mem;
 8009712:	4a2a      	ldr	r2, [pc, #168]	; (80097bc <plug_holes+0x140>)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	881a      	ldrh	r2, [r3, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009728:	d00a      	beq.n	8009740 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff ff80 	bl	8009634 <ptr_to_mem>
 8009734:	4604      	mov	r4, r0
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff ff8e 	bl	8009658 <mem_to_ptr>
 800973c:	4603      	mov	r3, r0
 800973e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	885b      	ldrh	r3, [r3, #2]
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff ff75 	bl	8009634 <ptr_to_mem>
 800974a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d01f      	beq.n	8009794 <plug_holes+0x118>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	791b      	ldrb	r3, [r3, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d11b      	bne.n	8009794 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800975c:	4b17      	ldr	r3, [pc, #92]	; (80097bc <plug_holes+0x140>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	429a      	cmp	r2, r3
 8009764:	d102      	bne.n	800976c <plug_holes+0xf0>
      lfree = pmem;
 8009766:	4a15      	ldr	r2, [pc, #84]	; (80097bc <plug_holes+0x140>)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	881a      	ldrh	r2, [r3, #0]
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800977c:	d00a      	beq.n	8009794 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	4618      	mov	r0, r3
 8009784:	f7ff ff56 	bl	8009634 <ptr_to_mem>
 8009788:	4604      	mov	r4, r0
 800978a:	68b8      	ldr	r0, [r7, #8]
 800978c:	f7ff ff64 	bl	8009658 <mem_to_ptr>
 8009790:	4603      	mov	r3, r0
 8009792:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009794:	bf00      	nop
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	bd90      	pop	{r4, r7, pc}
 800979c:	20004204 	.word	0x20004204
 80097a0:	08016ba0 	.word	0x08016ba0
 80097a4:	08016bd0 	.word	0x08016bd0
 80097a8:	08016be8 	.word	0x08016be8
 80097ac:	20004208 	.word	0x20004208
 80097b0:	08016c10 	.word	0x08016c10
 80097b4:	08016c2c 	.word	0x08016c2c
 80097b8:	08016c48 	.word	0x08016c48
 80097bc:	20004210 	.word	0x20004210

080097c0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80097c6:	4b1f      	ldr	r3, [pc, #124]	; (8009844 <mem_init+0x84>)
 80097c8:	3303      	adds	r3, #3
 80097ca:	f023 0303 	bic.w	r3, r3, #3
 80097ce:	461a      	mov	r2, r3
 80097d0:	4b1d      	ldr	r3, [pc, #116]	; (8009848 <mem_init+0x88>)
 80097d2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80097d4:	4b1c      	ldr	r3, [pc, #112]	; (8009848 <mem_init+0x88>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80097e0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80097ee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80097f2:	f7ff ff1f 	bl	8009634 <ptr_to_mem>
 80097f6:	4602      	mov	r2, r0
 80097f8:	4b14      	ldr	r3, [pc, #80]	; (800984c <mem_init+0x8c>)
 80097fa:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80097fc:	4b13      	ldr	r3, [pc, #76]	; (800984c <mem_init+0x8c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2201      	movs	r2, #1
 8009802:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009804:	4b11      	ldr	r3, [pc, #68]	; (800984c <mem_init+0x8c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800980c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800980e:	4b0f      	ldr	r3, [pc, #60]	; (800984c <mem_init+0x8c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009816:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <mem_init+0x88>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a0c      	ldr	r2, [pc, #48]	; (8009850 <mem_init+0x90>)
 800981e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009820:	480c      	ldr	r0, [pc, #48]	; (8009854 <mem_init+0x94>)
 8009822:	f00b f9ab 	bl	8014b7c <sys_mutex_new>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d006      	beq.n	800983a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800982c:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <mem_init+0x98>)
 800982e:	f240 221f 	movw	r2, #543	; 0x21f
 8009832:	490a      	ldr	r1, [pc, #40]	; (800985c <mem_init+0x9c>)
 8009834:	480a      	ldr	r0, [pc, #40]	; (8009860 <mem_init+0xa0>)
 8009836:	f00b fa83 	bl	8014d40 <iprintf>
  }
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20007570 	.word	0x20007570
 8009848:	20004204 	.word	0x20004204
 800984c:	20004208 	.word	0x20004208
 8009850:	20004210 	.word	0x20004210
 8009854:	2000420c 	.word	0x2000420c
 8009858:	08016ba0 	.word	0x08016ba0
 800985c:	08016c74 	.word	0x08016c74
 8009860:	08016be8 	.word	0x08016be8

08009864 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff fef3 	bl	8009658 <mem_to_ptr>
 8009872:	4603      	mov	r3, r0
 8009874:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	881b      	ldrh	r3, [r3, #0]
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff feda 	bl	8009634 <ptr_to_mem>
 8009880:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	885b      	ldrh	r3, [r3, #2]
 8009886:	4618      	mov	r0, r3
 8009888:	f7ff fed4 	bl	8009634 <ptr_to_mem>
 800988c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009896:	d818      	bhi.n	80098ca <mem_link_valid+0x66>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	885b      	ldrh	r3, [r3, #2]
 800989c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098a0:	d813      	bhi.n	80098ca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80098a6:	8afa      	ldrh	r2, [r7, #22]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d004      	beq.n	80098b6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	881b      	ldrh	r3, [r3, #0]
 80098b0:	8afa      	ldrh	r2, [r7, #22]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d109      	bne.n	80098ca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80098b6:	4b08      	ldr	r3, [pc, #32]	; (80098d8 <mem_link_valid+0x74>)
 80098b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d006      	beq.n	80098ce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	885b      	ldrh	r3, [r3, #2]
 80098c4:	8afa      	ldrh	r2, [r7, #22]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d001      	beq.n	80098ce <mem_link_valid+0x6a>
    return 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	e000      	b.n	80098d0 <mem_link_valid+0x6c>
  }
  return 1;
 80098ce:	2301      	movs	r3, #1
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3718      	adds	r7, #24
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20004208 	.word	0x20004208

080098dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d070      	beq.n	80099cc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f003 0303 	and.w	r3, r3, #3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00d      	beq.n	8009910 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80098f4:	4b37      	ldr	r3, [pc, #220]	; (80099d4 <mem_free+0xf8>)
 80098f6:	f240 2273 	movw	r2, #627	; 0x273
 80098fa:	4937      	ldr	r1, [pc, #220]	; (80099d8 <mem_free+0xfc>)
 80098fc:	4837      	ldr	r0, [pc, #220]	; (80099dc <mem_free+0x100>)
 80098fe:	f00b fa1f 	bl	8014d40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009902:	f00b f999 	bl	8014c38 <sys_arch_protect>
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f00b f9a3 	bl	8014c54 <sys_arch_unprotect>
    return;
 800990e:	e05e      	b.n	80099ce <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	3b08      	subs	r3, #8
 8009914:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009916:	4b32      	ldr	r3, [pc, #200]	; (80099e0 <mem_free+0x104>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	429a      	cmp	r2, r3
 800991e:	d306      	bcc.n	800992e <mem_free+0x52>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f103 020c 	add.w	r2, r3, #12
 8009926:	4b2f      	ldr	r3, [pc, #188]	; (80099e4 <mem_free+0x108>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	429a      	cmp	r2, r3
 800992c:	d90d      	bls.n	800994a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800992e:	4b29      	ldr	r3, [pc, #164]	; (80099d4 <mem_free+0xf8>)
 8009930:	f240 227f 	movw	r2, #639	; 0x27f
 8009934:	492c      	ldr	r1, [pc, #176]	; (80099e8 <mem_free+0x10c>)
 8009936:	4829      	ldr	r0, [pc, #164]	; (80099dc <mem_free+0x100>)
 8009938:	f00b fa02 	bl	8014d40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800993c:	f00b f97c 	bl	8014c38 <sys_arch_protect>
 8009940:	6138      	str	r0, [r7, #16]
 8009942:	6938      	ldr	r0, [r7, #16]
 8009944:	f00b f986 	bl	8014c54 <sys_arch_unprotect>
    return;
 8009948:	e041      	b.n	80099ce <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800994a:	4828      	ldr	r0, [pc, #160]	; (80099ec <mem_free+0x110>)
 800994c:	f00b f932 	bl	8014bb4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	791b      	ldrb	r3, [r3, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d110      	bne.n	800997a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009958:	4b1e      	ldr	r3, [pc, #120]	; (80099d4 <mem_free+0xf8>)
 800995a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800995e:	4924      	ldr	r1, [pc, #144]	; (80099f0 <mem_free+0x114>)
 8009960:	481e      	ldr	r0, [pc, #120]	; (80099dc <mem_free+0x100>)
 8009962:	f00b f9ed 	bl	8014d40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009966:	4821      	ldr	r0, [pc, #132]	; (80099ec <mem_free+0x110>)
 8009968:	f00b f933 	bl	8014bd2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800996c:	f00b f964 	bl	8014c38 <sys_arch_protect>
 8009970:	6178      	str	r0, [r7, #20]
 8009972:	6978      	ldr	r0, [r7, #20]
 8009974:	f00b f96e 	bl	8014c54 <sys_arch_unprotect>
    return;
 8009978:	e029      	b.n	80099ce <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800997a:	69f8      	ldr	r0, [r7, #28]
 800997c:	f7ff ff72 	bl	8009864 <mem_link_valid>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d110      	bne.n	80099a8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009986:	4b13      	ldr	r3, [pc, #76]	; (80099d4 <mem_free+0xf8>)
 8009988:	f240 2295 	movw	r2, #661	; 0x295
 800998c:	4919      	ldr	r1, [pc, #100]	; (80099f4 <mem_free+0x118>)
 800998e:	4813      	ldr	r0, [pc, #76]	; (80099dc <mem_free+0x100>)
 8009990:	f00b f9d6 	bl	8014d40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009994:	4815      	ldr	r0, [pc, #84]	; (80099ec <mem_free+0x110>)
 8009996:	f00b f91c 	bl	8014bd2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800999a:	f00b f94d 	bl	8014c38 <sys_arch_protect>
 800999e:	61b8      	str	r0, [r7, #24]
 80099a0:	69b8      	ldr	r0, [r7, #24]
 80099a2:	f00b f957 	bl	8014c54 <sys_arch_unprotect>
    return;
 80099a6:	e012      	b.n	80099ce <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	2200      	movs	r2, #0
 80099ac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80099ae:	4b12      	ldr	r3, [pc, #72]	; (80099f8 <mem_free+0x11c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	69fa      	ldr	r2, [r7, #28]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d202      	bcs.n	80099be <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80099b8:	4a0f      	ldr	r2, [pc, #60]	; (80099f8 <mem_free+0x11c>)
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80099be:	69f8      	ldr	r0, [r7, #28]
 80099c0:	f7ff fe5c 	bl	800967c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80099c4:	4809      	ldr	r0, [pc, #36]	; (80099ec <mem_free+0x110>)
 80099c6:	f00b f904 	bl	8014bd2 <sys_mutex_unlock>
 80099ca:	e000      	b.n	80099ce <mem_free+0xf2>
    return;
 80099cc:	bf00      	nop
}
 80099ce:	3720      	adds	r7, #32
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	08016ba0 	.word	0x08016ba0
 80099d8:	08016c90 	.word	0x08016c90
 80099dc:	08016be8 	.word	0x08016be8
 80099e0:	20004204 	.word	0x20004204
 80099e4:	20004208 	.word	0x20004208
 80099e8:	08016cb4 	.word	0x08016cb4
 80099ec:	2000420c 	.word	0x2000420c
 80099f0:	08016cd0 	.word	0x08016cd0
 80099f4:	08016cf8 	.word	0x08016cf8
 80099f8:	20004210 	.word	0x20004210

080099fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	460b      	mov	r3, r1
 8009a06:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009a08:	887b      	ldrh	r3, [r7, #2]
 8009a0a:	3303      	adds	r3, #3
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f023 0303 	bic.w	r3, r3, #3
 8009a12:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009a14:	8bfb      	ldrh	r3, [r7, #30]
 8009a16:	2b0b      	cmp	r3, #11
 8009a18:	d801      	bhi.n	8009a1e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009a1a:	230c      	movs	r3, #12
 8009a1c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009a1e:	8bfb      	ldrh	r3, [r7, #30]
 8009a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a24:	d803      	bhi.n	8009a2e <mem_trim+0x32>
 8009a26:	8bfa      	ldrh	r2, [r7, #30]
 8009a28:	887b      	ldrh	r3, [r7, #2]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d201      	bcs.n	8009a32 <mem_trim+0x36>
    return NULL;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	e0d8      	b.n	8009be4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009a32:	4b6e      	ldr	r3, [pc, #440]	; (8009bec <mem_trim+0x1f0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d304      	bcc.n	8009a46 <mem_trim+0x4a>
 8009a3c:	4b6c      	ldr	r3, [pc, #432]	; (8009bf0 <mem_trim+0x1f4>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d306      	bcc.n	8009a54 <mem_trim+0x58>
 8009a46:	4b6b      	ldr	r3, [pc, #428]	; (8009bf4 <mem_trim+0x1f8>)
 8009a48:	f240 22d2 	movw	r2, #722	; 0x2d2
 8009a4c:	496a      	ldr	r1, [pc, #424]	; (8009bf8 <mem_trim+0x1fc>)
 8009a4e:	486b      	ldr	r0, [pc, #428]	; (8009bfc <mem_trim+0x200>)
 8009a50:	f00b f976 	bl	8014d40 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009a54:	4b65      	ldr	r3, [pc, #404]	; (8009bec <mem_trim+0x1f0>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d304      	bcc.n	8009a68 <mem_trim+0x6c>
 8009a5e:	4b64      	ldr	r3, [pc, #400]	; (8009bf0 <mem_trim+0x1f4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d307      	bcc.n	8009a78 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009a68:	f00b f8e6 	bl	8014c38 <sys_arch_protect>
 8009a6c:	60b8      	str	r0, [r7, #8]
 8009a6e:	68b8      	ldr	r0, [r7, #8]
 8009a70:	f00b f8f0 	bl	8014c54 <sys_arch_unprotect>
    return rmem;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	e0b5      	b.n	8009be4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3b08      	subs	r3, #8
 8009a7c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009a7e:	69b8      	ldr	r0, [r7, #24]
 8009a80:	f7ff fdea 	bl	8009658 <mem_to_ptr>
 8009a84:	4603      	mov	r3, r0
 8009a86:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	881a      	ldrh	r2, [r3, #0]
 8009a8c:	8afb      	ldrh	r3, [r7, #22]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	3b08      	subs	r3, #8
 8009a94:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009a96:	8bfa      	ldrh	r2, [r7, #30]
 8009a98:	8abb      	ldrh	r3, [r7, #20]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d906      	bls.n	8009aac <mem_trim+0xb0>
 8009a9e:	4b55      	ldr	r3, [pc, #340]	; (8009bf4 <mem_trim+0x1f8>)
 8009aa0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009aa4:	4956      	ldr	r1, [pc, #344]	; (8009c00 <mem_trim+0x204>)
 8009aa6:	4855      	ldr	r0, [pc, #340]	; (8009bfc <mem_trim+0x200>)
 8009aa8:	f00b f94a 	bl	8014d40 <iprintf>
  if (newsize > size) {
 8009aac:	8bfa      	ldrh	r2, [r7, #30]
 8009aae:	8abb      	ldrh	r3, [r7, #20]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d901      	bls.n	8009ab8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	e095      	b.n	8009be4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009ab8:	8bfa      	ldrh	r2, [r7, #30]
 8009aba:	8abb      	ldrh	r3, [r7, #20]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d101      	bne.n	8009ac4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	e08f      	b.n	8009be4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009ac4:	484f      	ldr	r0, [pc, #316]	; (8009c04 <mem_trim+0x208>)
 8009ac6:	f00b f875 	bl	8014bb4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	881b      	ldrh	r3, [r3, #0]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff fdb0 	bl	8009634 <ptr_to_mem>
 8009ad4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	791b      	ldrb	r3, [r3, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d13f      	bne.n	8009b5e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ae6:	d106      	bne.n	8009af6 <mem_trim+0xfa>
 8009ae8:	4b42      	ldr	r3, [pc, #264]	; (8009bf4 <mem_trim+0x1f8>)
 8009aea:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009aee:	4946      	ldr	r1, [pc, #280]	; (8009c08 <mem_trim+0x20c>)
 8009af0:	4842      	ldr	r0, [pc, #264]	; (8009bfc <mem_trim+0x200>)
 8009af2:	f00b f925 	bl	8014d40 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009afc:	8afa      	ldrh	r2, [r7, #22]
 8009afe:	8bfb      	ldrh	r3, [r7, #30]
 8009b00:	4413      	add	r3, r2
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	3308      	adds	r3, #8
 8009b06:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009b08:	4b40      	ldr	r3, [pc, #256]	; (8009c0c <mem_trim+0x210>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d106      	bne.n	8009b20 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8009b12:	89fb      	ldrh	r3, [r7, #14]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff fd8d 	bl	8009634 <ptr_to_mem>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4b3b      	ldr	r3, [pc, #236]	; (8009c0c <mem_trim+0x210>)
 8009b1e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009b20:	89fb      	ldrh	r3, [r7, #14]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff fd86 	bl	8009634 <ptr_to_mem>
 8009b28:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	89ba      	ldrh	r2, [r7, #12]
 8009b34:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	8afa      	ldrh	r2, [r7, #22]
 8009b3a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	89fa      	ldrh	r2, [r7, #14]
 8009b40:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b4a:	d047      	beq.n	8009bdc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	881b      	ldrh	r3, [r3, #0]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff fd6f 	bl	8009634 <ptr_to_mem>
 8009b56:	4602      	mov	r2, r0
 8009b58:	89fb      	ldrh	r3, [r7, #14]
 8009b5a:	8053      	strh	r3, [r2, #2]
 8009b5c:	e03e      	b.n	8009bdc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009b5e:	8bfb      	ldrh	r3, [r7, #30]
 8009b60:	f103 0214 	add.w	r2, r3, #20
 8009b64:	8abb      	ldrh	r3, [r7, #20]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d838      	bhi.n	8009bdc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009b6a:	8afa      	ldrh	r2, [r7, #22]
 8009b6c:	8bfb      	ldrh	r3, [r7, #30]
 8009b6e:	4413      	add	r3, r2
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3308      	adds	r3, #8
 8009b74:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b7e:	d106      	bne.n	8009b8e <mem_trim+0x192>
 8009b80:	4b1c      	ldr	r3, [pc, #112]	; (8009bf4 <mem_trim+0x1f8>)
 8009b82:	f240 3216 	movw	r2, #790	; 0x316
 8009b86:	4920      	ldr	r1, [pc, #128]	; (8009c08 <mem_trim+0x20c>)
 8009b88:	481c      	ldr	r0, [pc, #112]	; (8009bfc <mem_trim+0x200>)
 8009b8a:	f00b f8d9 	bl	8014d40 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009b8e:	89fb      	ldrh	r3, [r7, #14]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7ff fd4f 	bl	8009634 <ptr_to_mem>
 8009b96:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009b98:	4b1c      	ldr	r3, [pc, #112]	; (8009c0c <mem_trim+0x210>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d202      	bcs.n	8009ba8 <mem_trim+0x1ac>
      lfree = mem2;
 8009ba2:	4a1a      	ldr	r2, [pc, #104]	; (8009c0c <mem_trim+0x210>)
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2200      	movs	r2, #0
 8009bac:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	881a      	ldrh	r2, [r3, #0]
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	8afa      	ldrh	r2, [r7, #22]
 8009bba:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	89fa      	ldrh	r2, [r7, #14]
 8009bc0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bca:	d007      	beq.n	8009bdc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff fd2f 	bl	8009634 <ptr_to_mem>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	89fb      	ldrh	r3, [r7, #14]
 8009bda:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009bdc:	4809      	ldr	r0, [pc, #36]	; (8009c04 <mem_trim+0x208>)
 8009bde:	f00a fff8 	bl	8014bd2 <sys_mutex_unlock>
  return rmem;
 8009be2:	687b      	ldr	r3, [r7, #4]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3720      	adds	r7, #32
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20004204 	.word	0x20004204
 8009bf0:	20004208 	.word	0x20004208
 8009bf4:	08016ba0 	.word	0x08016ba0
 8009bf8:	08016d2c 	.word	0x08016d2c
 8009bfc:	08016be8 	.word	0x08016be8
 8009c00:	08016d44 	.word	0x08016d44
 8009c04:	2000420c 	.word	0x2000420c
 8009c08:	08016d64 	.word	0x08016d64
 8009c0c:	20004210 	.word	0x20004210

08009c10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <mem_malloc+0x14>
    return NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	e0e2      	b.n	8009dea <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009c24:	88fb      	ldrh	r3, [r7, #6]
 8009c26:	3303      	adds	r3, #3
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	f023 0303 	bic.w	r3, r3, #3
 8009c2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009c30:	8bbb      	ldrh	r3, [r7, #28]
 8009c32:	2b0b      	cmp	r3, #11
 8009c34:	d801      	bhi.n	8009c3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009c36:	230c      	movs	r3, #12
 8009c38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009c3a:	8bbb      	ldrh	r3, [r7, #28]
 8009c3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c40:	d803      	bhi.n	8009c4a <mem_malloc+0x3a>
 8009c42:	8bba      	ldrh	r2, [r7, #28]
 8009c44:	88fb      	ldrh	r3, [r7, #6]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d201      	bcs.n	8009c4e <mem_malloc+0x3e>
    return NULL;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	e0cd      	b.n	8009dea <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009c4e:	4869      	ldr	r0, [pc, #420]	; (8009df4 <mem_malloc+0x1e4>)
 8009c50:	f00a ffb0 	bl	8014bb4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c54:	4b68      	ldr	r3, [pc, #416]	; (8009df8 <mem_malloc+0x1e8>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff fcfd 	bl	8009658 <mem_to_ptr>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	83fb      	strh	r3, [r7, #30]
 8009c62:	e0b7      	b.n	8009dd4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009c64:	8bfb      	ldrh	r3, [r7, #30]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7ff fce4 	bl	8009634 <ptr_to_mem>
 8009c6c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	791b      	ldrb	r3, [r3, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f040 80a7 	bne.w	8009dc6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	8bfb      	ldrh	r3, [r7, #30]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	f1a3 0208 	sub.w	r2, r3, #8
 8009c86:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	f0c0 809c 	bcc.w	8009dc6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	8bfb      	ldrh	r3, [r7, #30]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	f1a3 0208 	sub.w	r2, r3, #8
 8009c9c:	8bbb      	ldrh	r3, [r7, #28]
 8009c9e:	3314      	adds	r3, #20
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d333      	bcc.n	8009d0c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009ca4:	8bfa      	ldrh	r2, [r7, #30]
 8009ca6:	8bbb      	ldrh	r3, [r7, #28]
 8009ca8:	4413      	add	r3, r2
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	3308      	adds	r3, #8
 8009cae:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009cb0:	8a7b      	ldrh	r3, [r7, #18]
 8009cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cb6:	d106      	bne.n	8009cc6 <mem_malloc+0xb6>
 8009cb8:	4b50      	ldr	r3, [pc, #320]	; (8009dfc <mem_malloc+0x1ec>)
 8009cba:	f240 3287 	movw	r2, #903	; 0x387
 8009cbe:	4950      	ldr	r1, [pc, #320]	; (8009e00 <mem_malloc+0x1f0>)
 8009cc0:	4850      	ldr	r0, [pc, #320]	; (8009e04 <mem_malloc+0x1f4>)
 8009cc2:	f00b f83d 	bl	8014d40 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009cc6:	8a7b      	ldrh	r3, [r7, #18]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff fcb3 	bl	8009634 <ptr_to_mem>
 8009cce:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	881a      	ldrh	r2, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8bfa      	ldrh	r2, [r7, #30]
 8009ce2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	8a7a      	ldrh	r2, [r7, #18]
 8009ce8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	2201      	movs	r2, #1
 8009cee:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cf8:	d00b      	beq.n	8009d12 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff fc98 	bl	8009634 <ptr_to_mem>
 8009d04:	4602      	mov	r2, r0
 8009d06:	8a7b      	ldrh	r3, [r7, #18]
 8009d08:	8053      	strh	r3, [r2, #2]
 8009d0a:	e002      	b.n	8009d12 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009d12:	4b39      	ldr	r3, [pc, #228]	; (8009df8 <mem_malloc+0x1e8>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d127      	bne.n	8009d6c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009d1c:	4b36      	ldr	r3, [pc, #216]	; (8009df8 <mem_malloc+0x1e8>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009d22:	e005      	b.n	8009d30 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	881b      	ldrh	r3, [r3, #0]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff fc83 	bl	8009634 <ptr_to_mem>
 8009d2e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	791b      	ldrb	r3, [r3, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d004      	beq.n	8009d42 <mem_malloc+0x132>
 8009d38:	4b33      	ldr	r3, [pc, #204]	; (8009e08 <mem_malloc+0x1f8>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	69ba      	ldr	r2, [r7, #24]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d1f0      	bne.n	8009d24 <mem_malloc+0x114>
          }
          lfree = cur;
 8009d42:	4a2d      	ldr	r2, [pc, #180]	; (8009df8 <mem_malloc+0x1e8>)
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009d48:	4b2b      	ldr	r3, [pc, #172]	; (8009df8 <mem_malloc+0x1e8>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	4b2e      	ldr	r3, [pc, #184]	; (8009e08 <mem_malloc+0x1f8>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d00b      	beq.n	8009d6c <mem_malloc+0x15c>
 8009d54:	4b28      	ldr	r3, [pc, #160]	; (8009df8 <mem_malloc+0x1e8>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	791b      	ldrb	r3, [r3, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d006      	beq.n	8009d6c <mem_malloc+0x15c>
 8009d5e:	4b27      	ldr	r3, [pc, #156]	; (8009dfc <mem_malloc+0x1ec>)
 8009d60:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009d64:	4929      	ldr	r1, [pc, #164]	; (8009e0c <mem_malloc+0x1fc>)
 8009d66:	4827      	ldr	r0, [pc, #156]	; (8009e04 <mem_malloc+0x1f4>)
 8009d68:	f00a ffea 	bl	8014d40 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009d6c:	4821      	ldr	r0, [pc, #132]	; (8009df4 <mem_malloc+0x1e4>)
 8009d6e:	f00a ff30 	bl	8014bd2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009d72:	8bba      	ldrh	r2, [r7, #28]
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	4413      	add	r3, r2
 8009d78:	3308      	adds	r3, #8
 8009d7a:	4a23      	ldr	r2, [pc, #140]	; (8009e08 <mem_malloc+0x1f8>)
 8009d7c:	6812      	ldr	r2, [r2, #0]
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d906      	bls.n	8009d90 <mem_malloc+0x180>
 8009d82:	4b1e      	ldr	r3, [pc, #120]	; (8009dfc <mem_malloc+0x1ec>)
 8009d84:	f240 32ba 	movw	r2, #954	; 0x3ba
 8009d88:	4921      	ldr	r1, [pc, #132]	; (8009e10 <mem_malloc+0x200>)
 8009d8a:	481e      	ldr	r0, [pc, #120]	; (8009e04 <mem_malloc+0x1f4>)
 8009d8c:	f00a ffd8 	bl	8014d40 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d006      	beq.n	8009da8 <mem_malloc+0x198>
 8009d9a:	4b18      	ldr	r3, [pc, #96]	; (8009dfc <mem_malloc+0x1ec>)
 8009d9c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8009da0:	491c      	ldr	r1, [pc, #112]	; (8009e14 <mem_malloc+0x204>)
 8009da2:	4818      	ldr	r0, [pc, #96]	; (8009e04 <mem_malloc+0x1f4>)
 8009da4:	f00a ffcc 	bl	8014d40 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	f003 0303 	and.w	r3, r3, #3
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d006      	beq.n	8009dc0 <mem_malloc+0x1b0>
 8009db2:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <mem_malloc+0x1ec>)
 8009db4:	f240 32be 	movw	r2, #958	; 0x3be
 8009db8:	4917      	ldr	r1, [pc, #92]	; (8009e18 <mem_malloc+0x208>)
 8009dba:	4812      	ldr	r0, [pc, #72]	; (8009e04 <mem_malloc+0x1f4>)
 8009dbc:	f00a ffc0 	bl	8014d40 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	e011      	b.n	8009dea <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009dc6:	8bfb      	ldrh	r3, [r7, #30]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7ff fc33 	bl	8009634 <ptr_to_mem>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009dd4:	8bfa      	ldrh	r2, [r7, #30]
 8009dd6:	8bbb      	ldrh	r3, [r7, #28]
 8009dd8:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	f4ff af41 	bcc.w	8009c64 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009de2:	4804      	ldr	r0, [pc, #16]	; (8009df4 <mem_malloc+0x1e4>)
 8009de4:	f00a fef5 	bl	8014bd2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	2000420c 	.word	0x2000420c
 8009df8:	20004210 	.word	0x20004210
 8009dfc:	08016ba0 	.word	0x08016ba0
 8009e00:	08016d64 	.word	0x08016d64
 8009e04:	08016be8 	.word	0x08016be8
 8009e08:	20004208 	.word	0x20004208
 8009e0c:	08016d78 	.word	0x08016d78
 8009e10:	08016d94 	.word	0x08016d94
 8009e14:	08016dc4 	.word	0x08016dc4
 8009e18:	08016df4 	.word	0x08016df4

08009e1c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	3303      	adds	r3, #3
 8009e32:	f023 0303 	bic.w	r3, r3, #3
 8009e36:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]
 8009e3c:	e011      	b.n	8009e62 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	4413      	add	r3, r2
 8009e5a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	885b      	ldrh	r3, [r3, #2]
 8009e66:	461a      	mov	r2, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	dbe7      	blt.n	8009e3e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009e6e:	bf00      	nop
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
	...

08009e7c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e82:	2300      	movs	r3, #0
 8009e84:	80fb      	strh	r3, [r7, #6]
 8009e86:	e009      	b.n	8009e9c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009e88:	88fb      	ldrh	r3, [r7, #6]
 8009e8a:	4a08      	ldr	r2, [pc, #32]	; (8009eac <memp_init+0x30>)
 8009e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff ffc3 	bl	8009e1c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009e96:	88fb      	ldrh	r3, [r7, #6]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	80fb      	strh	r3, [r7, #6]
 8009e9c:	88fb      	ldrh	r3, [r7, #6]
 8009e9e:	2b0c      	cmp	r3, #12
 8009ea0:	d9f2      	bls.n	8009e88 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	080196b4 	.word	0x080196b4

08009eb0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009eb8:	f00a febe 	bl	8014c38 <sys_arch_protect>
 8009ebc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d015      	beq.n	8009ef8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	f003 0303 	and.w	r3, r3, #3
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d006      	beq.n	8009eee <do_memp_malloc_pool+0x3e>
 8009ee0:	4b09      	ldr	r3, [pc, #36]	; (8009f08 <do_memp_malloc_pool+0x58>)
 8009ee2:	f240 1219 	movw	r2, #281	; 0x119
 8009ee6:	4909      	ldr	r1, [pc, #36]	; (8009f0c <do_memp_malloc_pool+0x5c>)
 8009ee8:	4809      	ldr	r0, [pc, #36]	; (8009f10 <do_memp_malloc_pool+0x60>)
 8009eea:	f00a ff29 	bl	8014d40 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f00a feb0 	bl	8014c54 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	e003      	b.n	8009f00 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f00a feab 	bl	8014c54 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	08016e18 	.word	0x08016e18
 8009f0c:	08016e48 	.word	0x08016e48
 8009f10:	08016e6c 	.word	0x08016e6c

08009f14 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009f1e:	79fb      	ldrb	r3, [r7, #7]
 8009f20:	2b0c      	cmp	r3, #12
 8009f22:	d908      	bls.n	8009f36 <memp_malloc+0x22>
 8009f24:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <memp_malloc+0x3c>)
 8009f26:	f240 1257 	movw	r2, #343	; 0x157
 8009f2a:	490a      	ldr	r1, [pc, #40]	; (8009f54 <memp_malloc+0x40>)
 8009f2c:	480a      	ldr	r0, [pc, #40]	; (8009f58 <memp_malloc+0x44>)
 8009f2e:	f00a ff07 	bl	8014d40 <iprintf>
 8009f32:	2300      	movs	r3, #0
 8009f34:	e008      	b.n	8009f48 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009f36:	79fb      	ldrb	r3, [r7, #7]
 8009f38:	4a08      	ldr	r2, [pc, #32]	; (8009f5c <memp_malloc+0x48>)
 8009f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff ffb6 	bl	8009eb0 <do_memp_malloc_pool>
 8009f44:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009f46:	68fb      	ldr	r3, [r7, #12]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	08016e18 	.word	0x08016e18
 8009f54:	08016ea8 	.word	0x08016ea8
 8009f58:	08016e6c 	.word	0x08016e6c
 8009f5c:	080196b4 	.word	0x080196b4

08009f60 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	f003 0303 	and.w	r3, r3, #3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d006      	beq.n	8009f82 <do_memp_free_pool+0x22>
 8009f74:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <do_memp_free_pool+0x4c>)
 8009f76:	f240 126d 	movw	r2, #365	; 0x16d
 8009f7a:	490d      	ldr	r1, [pc, #52]	; (8009fb0 <do_memp_free_pool+0x50>)
 8009f7c:	480d      	ldr	r0, [pc, #52]	; (8009fb4 <do_memp_free_pool+0x54>)
 8009f7e:	f00a fedf 	bl	8014d40 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009f86:	f00a fe57 	bl	8014c38 <sys_arch_protect>
 8009f8a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	68fa      	ldr	r2, [r7, #12]
 8009f9c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009f9e:	68b8      	ldr	r0, [r7, #8]
 8009fa0:	f00a fe58 	bl	8014c54 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009fa4:	bf00      	nop
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	08016e18 	.word	0x08016e18
 8009fb0:	08016ec8 	.word	0x08016ec8
 8009fb4:	08016e6c 	.word	0x08016e6c

08009fb8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	6039      	str	r1, [r7, #0]
 8009fc2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	2b0c      	cmp	r3, #12
 8009fc8:	d907      	bls.n	8009fda <memp_free+0x22>
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <memp_free+0x44>)
 8009fcc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009fd0:	490b      	ldr	r1, [pc, #44]	; (800a000 <memp_free+0x48>)
 8009fd2:	480c      	ldr	r0, [pc, #48]	; (800a004 <memp_free+0x4c>)
 8009fd4:	f00a feb4 	bl	8014d40 <iprintf>
 8009fd8:	e00c      	b.n	8009ff4 <memp_free+0x3c>

  if (mem == NULL) {
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d008      	beq.n	8009ff2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009fe0:	79fb      	ldrb	r3, [r7, #7]
 8009fe2:	4a09      	ldr	r2, [pc, #36]	; (800a008 <memp_free+0x50>)
 8009fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff ffb8 	bl	8009f60 <do_memp_free_pool>
 8009ff0:	e000      	b.n	8009ff4 <memp_free+0x3c>
    return;
 8009ff2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	08016e18 	.word	0x08016e18
 800a000:	08016ee8 	.word	0x08016ee8
 800a004:	08016e6c 	.word	0x08016e6c
 800a008:	080196b4 	.word	0x080196b4

0800a00c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a010:	bf00      	nop
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr
	...

0800a01c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d108      	bne.n	800a042 <netif_add+0x26>
 800a030:	4b57      	ldr	r3, [pc, #348]	; (800a190 <netif_add+0x174>)
 800a032:	f240 1227 	movw	r2, #295	; 0x127
 800a036:	4957      	ldr	r1, [pc, #348]	; (800a194 <netif_add+0x178>)
 800a038:	4857      	ldr	r0, [pc, #348]	; (800a198 <netif_add+0x17c>)
 800a03a:	f00a fe81 	bl	8014d40 <iprintf>
 800a03e:	2300      	movs	r3, #0
 800a040:	e0a2      	b.n	800a188 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	2b00      	cmp	r3, #0
 800a046:	d108      	bne.n	800a05a <netif_add+0x3e>
 800a048:	4b51      	ldr	r3, [pc, #324]	; (800a190 <netif_add+0x174>)
 800a04a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a04e:	4953      	ldr	r1, [pc, #332]	; (800a19c <netif_add+0x180>)
 800a050:	4851      	ldr	r0, [pc, #324]	; (800a198 <netif_add+0x17c>)
 800a052:	f00a fe75 	bl	8014d40 <iprintf>
 800a056:	2300      	movs	r3, #0
 800a058:	e096      	b.n	800a188 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a060:	4b4f      	ldr	r3, [pc, #316]	; (800a1a0 <netif_add+0x184>)
 800a062:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a06a:	4b4d      	ldr	r3, [pc, #308]	; (800a1a0 <netif_add+0x184>)
 800a06c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a074:	4b4a      	ldr	r3, [pc, #296]	; (800a1a0 <netif_add+0x184>)
 800a076:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2200      	movs	r2, #0
 800a088:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4a45      	ldr	r2, [pc, #276]	; (800a1a4 <netif_add+0x188>)
 800a08e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6a3a      	ldr	r2, [r7, #32]
 800a0a8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a0aa:	4b3f      	ldr	r3, [pc, #252]	; (800a1a8 <netif_add+0x18c>)
 800a0ac:	781a      	ldrb	r2, [r3, #0]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0b8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 f913 	bl	800a2ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	4798      	blx	r3
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <netif_add+0xba>
    return NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e058      	b.n	800a188 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a0dc:	2bff      	cmp	r3, #255	; 0xff
 800a0de:	d103      	bne.n	800a0e8 <netif_add+0xcc>
        netif->num = 0;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a0ec:	4b2f      	ldr	r3, [pc, #188]	; (800a1ac <netif_add+0x190>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	e02b      	b.n	800a14c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d106      	bne.n	800a10a <netif_add+0xee>
 800a0fc:	4b24      	ldr	r3, [pc, #144]	; (800a190 <netif_add+0x174>)
 800a0fe:	f240 128b 	movw	r2, #395	; 0x18b
 800a102:	492b      	ldr	r1, [pc, #172]	; (800a1b0 <netif_add+0x194>)
 800a104:	4824      	ldr	r0, [pc, #144]	; (800a198 <netif_add+0x17c>)
 800a106:	f00a fe1b 	bl	8014d40 <iprintf>
        num_netifs++;
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	3301      	adds	r3, #1
 800a10e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	2bff      	cmp	r3, #255	; 0xff
 800a114:	dd06      	ble.n	800a124 <netif_add+0x108>
 800a116:	4b1e      	ldr	r3, [pc, #120]	; (800a190 <netif_add+0x174>)
 800a118:	f240 128d 	movw	r2, #397	; 0x18d
 800a11c:	4925      	ldr	r1, [pc, #148]	; (800a1b4 <netif_add+0x198>)
 800a11e:	481e      	ldr	r0, [pc, #120]	; (800a198 <netif_add+0x17c>)
 800a120:	f00a fe0e 	bl	8014d40 <iprintf>
        if (netif2->num == netif->num) {
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a130:	429a      	cmp	r2, r3
 800a132:	d108      	bne.n	800a146 <netif_add+0x12a>
          netif->num++;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a13a:	3301      	adds	r3, #1
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a144:	e005      	b.n	800a152 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1d0      	bne.n	800a0f4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1be      	bne.n	800a0d6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a15e:	2bfe      	cmp	r3, #254	; 0xfe
 800a160:	d103      	bne.n	800a16a <netif_add+0x14e>
    netif_num = 0;
 800a162:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <netif_add+0x18c>)
 800a164:	2200      	movs	r2, #0
 800a166:	701a      	strb	r2, [r3, #0]
 800a168:	e006      	b.n	800a178 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a170:	3301      	adds	r3, #1
 800a172:	b2da      	uxtb	r2, r3
 800a174:	4b0c      	ldr	r3, [pc, #48]	; (800a1a8 <netif_add+0x18c>)
 800a176:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a178:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <netif_add+0x190>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a180:	4a0a      	ldr	r2, [pc, #40]	; (800a1ac <netif_add+0x190>)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a186:	68fb      	ldr	r3, [r7, #12]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3718      	adds	r7, #24
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	08016f04 	.word	0x08016f04
 800a194:	08016f98 	.word	0x08016f98
 800a198:	08016f54 	.word	0x08016f54
 800a19c:	08016fb4 	.word	0x08016fb4
 800a1a0:	08019728 	.word	0x08019728
 800a1a4:	0800a5c7 	.word	0x0800a5c7
 800a1a8:	20004248 	.word	0x20004248
 800a1ac:	2000e61c 	.word	0x2000e61c
 800a1b0:	08016fd8 	.word	0x08016fd8
 800a1b4:	08016fec 	.word	0x08016fec

0800a1b8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a1c2:	6839      	ldr	r1, [r7, #0]
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f002 fe03 	bl	800cdd0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f007 ff3f 	bl	8012050 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b086      	sub	sp, #24
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d106      	bne.n	800a1fc <netif_do_set_ipaddr+0x20>
 800a1ee:	4b1d      	ldr	r3, [pc, #116]	; (800a264 <netif_do_set_ipaddr+0x88>)
 800a1f0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a1f4:	491c      	ldr	r1, [pc, #112]	; (800a268 <netif_do_set_ipaddr+0x8c>)
 800a1f6:	481d      	ldr	r0, [pc, #116]	; (800a26c <netif_do_set_ipaddr+0x90>)
 800a1f8:	f00a fda2 	bl	8014d40 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d106      	bne.n	800a210 <netif_do_set_ipaddr+0x34>
 800a202:	4b18      	ldr	r3, [pc, #96]	; (800a264 <netif_do_set_ipaddr+0x88>)
 800a204:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a208:	4917      	ldr	r1, [pc, #92]	; (800a268 <netif_do_set_ipaddr+0x8c>)
 800a20a:	4818      	ldr	r0, [pc, #96]	; (800a26c <netif_do_set_ipaddr+0x90>)
 800a20c:	f00a fd98 	bl	8014d40 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3304      	adds	r3, #4
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d01c      	beq.n	800a258 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	3304      	adds	r3, #4
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a22e:	f107 0314 	add.w	r3, r7, #20
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff ffbf 	bl	800a1b8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d002      	beq.n	800a246 <netif_do_set_ipaddr+0x6a>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	e000      	b.n	800a248 <netif_do_set_ipaddr+0x6c>
 800a246:	2300      	movs	r3, #0
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a24c:	2101      	movs	r1, #1
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 f8d2 	bl	800a3f8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a254:	2301      	movs	r3, #1
 800a256:	e000      	b.n	800a25a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3718      	adds	r7, #24
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	08016f04 	.word	0x08016f04
 800a268:	0801701c 	.word	0x0801701c
 800a26c:	08016f54 	.word	0x08016f54

0800a270 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3308      	adds	r3, #8
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d00a      	beq.n	800a2a0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <netif_do_set_netmask+0x26>
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	e000      	b.n	800a298 <netif_do_set_netmask+0x28>
 800a296:	2300      	movs	r3, #0
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a29c:	2301      	movs	r3, #1
 800a29e:	e000      	b.n	800a2a2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b085      	sub	sp, #20
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	60f8      	str	r0, [r7, #12]
 800a2b6:	60b9      	str	r1, [r7, #8]
 800a2b8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	330c      	adds	r3, #12
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d00a      	beq.n	800a2de <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <netif_do_set_gw+0x26>
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	e000      	b.n	800a2d6 <netif_do_set_gw+0x28>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e000      	b.n	800a2e0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b088      	sub	sp, #32
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a308:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <netif_set_addr+0x90>)
 800a30a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a312:	4b1a      	ldr	r3, [pc, #104]	; (800a37c <netif_set_addr+0x90>)
 800a314:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a31c:	4b17      	ldr	r3, [pc, #92]	; (800a37c <netif_set_addr+0x90>)
 800a31e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d003      	beq.n	800a32e <netif_set_addr+0x42>
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d101      	bne.n	800a332 <netif_set_addr+0x46>
 800a32e:	2301      	movs	r3, #1
 800a330:	e000      	b.n	800a334 <netif_set_addr+0x48>
 800a332:	2300      	movs	r3, #0
 800a334:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d006      	beq.n	800a34a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a33c:	f107 0310 	add.w	r3, r7, #16
 800a340:	461a      	mov	r2, r3
 800a342:	68b9      	ldr	r1, [r7, #8]
 800a344:	68f8      	ldr	r0, [r7, #12]
 800a346:	f7ff ff49 	bl	800a1dc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a34a:	69fa      	ldr	r2, [r7, #28]
 800a34c:	6879      	ldr	r1, [r7, #4]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f7ff ff8e 	bl	800a270 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	6839      	ldr	r1, [r7, #0]
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff ffa8 	bl	800a2ae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d106      	bne.n	800a372 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a364:	f107 0310 	add.w	r3, r7, #16
 800a368:	461a      	mov	r2, r3
 800a36a:	68b9      	ldr	r1, [r7, #8]
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f7ff ff35 	bl	800a1dc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a372:	bf00      	nop
 800a374:	3720      	adds	r7, #32
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	08019728 	.word	0x08019728

0800a380 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a388:	4a04      	ldr	r2, [pc, #16]	; (800a39c <netif_set_default+0x1c>)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a38e:	bf00      	nop
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr
 800a39a:	bf00      	nop
 800a39c:	2000e620 	.word	0x2000e620

0800a3a0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d107      	bne.n	800a3be <netif_set_up+0x1e>
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <netif_set_up+0x4c>)
 800a3b0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a3b4:	490e      	ldr	r1, [pc, #56]	; (800a3f0 <netif_set_up+0x50>)
 800a3b6:	480f      	ldr	r0, [pc, #60]	; (800a3f4 <netif_set_up+0x54>)
 800a3b8:	f00a fcc2 	bl	8014d40 <iprintf>
 800a3bc:	e013      	b.n	800a3e6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10c      	bne.n	800a3e6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3d2:	f043 0301 	orr.w	r3, r3, #1
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a3de:	2103      	movs	r1, #3
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f809 	bl	800a3f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	08016f04 	.word	0x08016f04
 800a3f0:	0801708c 	.word	0x0801708c
 800a3f4:	08016f54 	.word	0x08016f54

0800a3f8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d106      	bne.n	800a418 <netif_issue_reports+0x20>
 800a40a:	4b18      	ldr	r3, [pc, #96]	; (800a46c <netif_issue_reports+0x74>)
 800a40c:	f240 326d 	movw	r2, #877	; 0x36d
 800a410:	4917      	ldr	r1, [pc, #92]	; (800a470 <netif_issue_reports+0x78>)
 800a412:	4818      	ldr	r0, [pc, #96]	; (800a474 <netif_issue_reports+0x7c>)
 800a414:	f00a fc94 	bl	8014d40 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a41e:	f003 0304 	and.w	r3, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01e      	beq.n	800a464 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a42c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a430:	2b00      	cmp	r3, #0
 800a432:	d017      	beq.n	800a464 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a434:	78fb      	ldrb	r3, [r7, #3]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d013      	beq.n	800a466 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	3304      	adds	r3, #4
 800a442:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00e      	beq.n	800a466 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a44e:	f003 0308 	and.w	r3, r3, #8
 800a452:	2b00      	cmp	r3, #0
 800a454:	d007      	beq.n	800a466 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	3304      	adds	r3, #4
 800a45a:	4619      	mov	r1, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f008 fd61 	bl	8012f24 <etharp_request>
 800a462:	e000      	b.n	800a466 <netif_issue_reports+0x6e>
    return;
 800a464:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	08016f04 	.word	0x08016f04
 800a470:	080170a8 	.word	0x080170a8
 800a474:	08016f54 	.word	0x08016f54

0800a478 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d107      	bne.n	800a496 <netif_set_down+0x1e>
 800a486:	4b12      	ldr	r3, [pc, #72]	; (800a4d0 <netif_set_down+0x58>)
 800a488:	f240 329b 	movw	r2, #923	; 0x39b
 800a48c:	4911      	ldr	r1, [pc, #68]	; (800a4d4 <netif_set_down+0x5c>)
 800a48e:	4812      	ldr	r0, [pc, #72]	; (800a4d8 <netif_set_down+0x60>)
 800a490:	f00a fc56 	bl	8014d40 <iprintf>
 800a494:	e019      	b.n	800a4ca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d012      	beq.n	800a4ca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4aa:	f023 0301 	bic.w	r3, r3, #1
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4bc:	f003 0308 	and.w	r3, r3, #8
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f008 f8eb 	bl	80126a0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	08016f04 	.word	0x08016f04
 800a4d4:	080170cc 	.word	0x080170cc
 800a4d8:	08016f54 	.word	0x08016f54

0800a4dc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d107      	bne.n	800a4fa <netif_set_link_up+0x1e>
 800a4ea:	4b13      	ldr	r3, [pc, #76]	; (800a538 <netif_set_link_up+0x5c>)
 800a4ec:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a4f0:	4912      	ldr	r1, [pc, #72]	; (800a53c <netif_set_link_up+0x60>)
 800a4f2:	4813      	ldr	r0, [pc, #76]	; (800a540 <netif_set_link_up+0x64>)
 800a4f4:	f00a fc24 	bl	8014d40 <iprintf>
 800a4f8:	e01b      	b.n	800a532 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a500:	f003 0304 	and.w	r3, r3, #4
 800a504:	2b00      	cmp	r3, #0
 800a506:	d114      	bne.n	800a532 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a50e:	f043 0304 	orr.w	r3, r3, #4
 800a512:	b2da      	uxtb	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a51a:	2103      	movs	r1, #3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff ff6b 	bl	800a3f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <netif_set_link_up+0x56>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	69db      	ldr	r3, [r3, #28]
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	08016f04 	.word	0x08016f04
 800a53c:	080170ec 	.word	0x080170ec
 800a540:	08016f54 	.word	0x08016f54

0800a544 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d107      	bne.n	800a562 <netif_set_link_down+0x1e>
 800a552:	4b11      	ldr	r3, [pc, #68]	; (800a598 <netif_set_link_down+0x54>)
 800a554:	f240 4206 	movw	r2, #1030	; 0x406
 800a558:	4910      	ldr	r1, [pc, #64]	; (800a59c <netif_set_link_down+0x58>)
 800a55a:	4811      	ldr	r0, [pc, #68]	; (800a5a0 <netif_set_link_down+0x5c>)
 800a55c:	f00a fbf0 	bl	8014d40 <iprintf>
 800a560:	e017      	b.n	800a592 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a568:	f003 0304 	and.w	r3, r3, #4
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d010      	beq.n	800a592 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a576:	f023 0304 	bic.w	r3, r3, #4
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <netif_set_link_down+0x4e>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	08016f04 	.word	0x08016f04
 800a59c:	08017110 	.word	0x08017110
 800a5a0:	08016f54 	.word	0x08016f54

0800a5a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	61da      	str	r2, [r3, #28]
  }
}
 800a5ba:	bf00      	nop
 800a5bc:	370c      	adds	r7, #12
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b085      	sub	sp, #20
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60f8      	str	r0, [r7, #12]
 800a5ce:	60b9      	str	r1, [r7, #8]
 800a5d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a5d2:	f06f 030b 	mvn.w	r3, #11
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
	...

0800a5e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d013      	beq.n	800a61c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a5f4:	4b0d      	ldr	r3, [pc, #52]	; (800a62c <netif_get_by_index+0x48>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	60fb      	str	r3, [r7, #12]
 800a5fa:	e00c      	b.n	800a616 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a602:	3301      	adds	r3, #1
 800a604:	b2db      	uxtb	r3, r3
 800a606:	79fa      	ldrb	r2, [r7, #7]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d101      	bne.n	800a610 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	e006      	b.n	800a61e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1ef      	bne.n	800a5fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	2000e61c 	.word	0x2000e61c

0800a630 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a636:	f00a faff 	bl	8014c38 <sys_arch_protect>
 800a63a:	6038      	str	r0, [r7, #0]
 800a63c:	4b0d      	ldr	r3, [pc, #52]	; (800a674 <pbuf_free_ooseq+0x44>)
 800a63e:	2200      	movs	r2, #0
 800a640:	701a      	strb	r2, [r3, #0]
 800a642:	6838      	ldr	r0, [r7, #0]
 800a644:	f00a fb06 	bl	8014c54 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a648:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <pbuf_free_ooseq+0x48>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	607b      	str	r3, [r7, #4]
 800a64e:	e00a      	b.n	800a666 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f002 fbf7 	bl	800ce4c <tcp_free_ooseq>
      return;
 800a65e:	e005      	b.n	800a66c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	607b      	str	r3, [r7, #4]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1f1      	bne.n	800a650 <pbuf_free_ooseq+0x20>
    }
  }
}
 800a66c:	3708      	adds	r7, #8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	2000e624 	.word	0x2000e624
 800a678:	2000e62c 	.word	0x2000e62c

0800a67c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a684:	f7ff ffd4 	bl	800a630 <pbuf_free_ooseq>
}
 800a688:	bf00      	nop
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a696:	f00a facf 	bl	8014c38 <sys_arch_protect>
 800a69a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a69c:	4b0f      	ldr	r3, [pc, #60]	; (800a6dc <pbuf_pool_is_empty+0x4c>)
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a6a2:	4b0e      	ldr	r3, [pc, #56]	; (800a6dc <pbuf_pool_is_empty+0x4c>)
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f00a fad3 	bl	8014c54 <sys_arch_unprotect>

  if (!queued) {
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10f      	bne.n	800a6d4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	480a      	ldr	r0, [pc, #40]	; (800a6e0 <pbuf_pool_is_empty+0x50>)
 800a6b8:	f7fe fed6 	bl	8009468 <tcpip_try_callback>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d008      	beq.n	800a6d4 <pbuf_pool_is_empty+0x44>
 800a6c2:	f00a fab9 	bl	8014c38 <sys_arch_protect>
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <pbuf_pool_is_empty+0x4c>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	701a      	strb	r2, [r3, #0]
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f00a fac0 	bl	8014c54 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	2000e624 	.word	0x2000e624
 800a6e0:	0800a67d 	.word	0x0800a67d

0800a6e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	80fb      	strh	r3, [r7, #6]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	88fa      	ldrh	r2, [r7, #6]
 800a70a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	88ba      	ldrh	r2, [r7, #4]
 800a710:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a712:	8b3b      	ldrh	r3, [r7, #24]
 800a714:	b2da      	uxtb	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	7f3a      	ldrb	r2, [r7, #28]
 800a71e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2201      	movs	r2, #1
 800a724:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	73da      	strb	r2, [r3, #15]
}
 800a72c:	bf00      	nop
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08c      	sub	sp, #48	; 0x30
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	4603      	mov	r3, r0
 800a740:	71fb      	strb	r3, [r7, #7]
 800a742:	460b      	mov	r3, r1
 800a744:	80bb      	strh	r3, [r7, #4]
 800a746:	4613      	mov	r3, r2
 800a748:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a74a:	79fb      	ldrb	r3, [r7, #7]
 800a74c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a74e:	887b      	ldrh	r3, [r7, #2]
 800a750:	2b41      	cmp	r3, #65	; 0x41
 800a752:	d00b      	beq.n	800a76c <pbuf_alloc+0x34>
 800a754:	2b41      	cmp	r3, #65	; 0x41
 800a756:	dc02      	bgt.n	800a75e <pbuf_alloc+0x26>
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d007      	beq.n	800a76c <pbuf_alloc+0x34>
 800a75c:	e0c2      	b.n	800a8e4 <pbuf_alloc+0x1ac>
 800a75e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a762:	d00b      	beq.n	800a77c <pbuf_alloc+0x44>
 800a764:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a768:	d070      	beq.n	800a84c <pbuf_alloc+0x114>
 800a76a:	e0bb      	b.n	800a8e4 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a76c:	887a      	ldrh	r2, [r7, #2]
 800a76e:	88bb      	ldrh	r3, [r7, #4]
 800a770:	4619      	mov	r1, r3
 800a772:	2000      	movs	r0, #0
 800a774:	f000 f8d2 	bl	800a91c <pbuf_alloc_reference>
 800a778:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a77a:	e0bd      	b.n	800a8f8 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a780:	2300      	movs	r3, #0
 800a782:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a784:	88bb      	ldrh	r3, [r7, #4]
 800a786:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a788:	200c      	movs	r0, #12
 800a78a:	f7ff fbc3 	bl	8009f14 <memp_malloc>
 800a78e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d109      	bne.n	800a7aa <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800a796:	f7ff ff7b 	bl	800a690 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800a7a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7a2:	f000 faa9 	bl	800acf8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e0a7      	b.n	800a8fa <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a7aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7ac:	3303      	adds	r3, #3
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	f023 0303 	bic.w	r3, r3, #3
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	8b7a      	ldrh	r2, [r7, #26]
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	bf28      	it	cs
 800a7c2:	4613      	movcs	r3, r2
 800a7c4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a7c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7c8:	3310      	adds	r3, #16
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	3303      	adds	r3, #3
 800a7d0:	f023 0303 	bic.w	r3, r3, #3
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	89f9      	ldrh	r1, [r7, #14]
 800a7d8:	8b7a      	ldrh	r2, [r7, #26]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	9301      	str	r3, [sp, #4]
 800a7de:	887b      	ldrh	r3, [r7, #2]
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	460b      	mov	r3, r1
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	6938      	ldr	r0, [r7, #16]
 800a7e8:	f7ff ff7c 	bl	800a6e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d006      	beq.n	800a806 <pbuf_alloc+0xce>
 800a7f8:	4b42      	ldr	r3, [pc, #264]	; (800a904 <pbuf_alloc+0x1cc>)
 800a7fa:	f240 1201 	movw	r2, #257	; 0x101
 800a7fe:	4942      	ldr	r1, [pc, #264]	; (800a908 <pbuf_alloc+0x1d0>)
 800a800:	4842      	ldr	r0, [pc, #264]	; (800a90c <pbuf_alloc+0x1d4>)
 800a802:	f00a fa9d 	bl	8014d40 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a806:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a808:	3303      	adds	r3, #3
 800a80a:	f023 0303 	bic.w	r3, r3, #3
 800a80e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a812:	d106      	bne.n	800a822 <pbuf_alloc+0xea>
 800a814:	4b3b      	ldr	r3, [pc, #236]	; (800a904 <pbuf_alloc+0x1cc>)
 800a816:	f240 1203 	movw	r2, #259	; 0x103
 800a81a:	493d      	ldr	r1, [pc, #244]	; (800a910 <pbuf_alloc+0x1d8>)
 800a81c:	483b      	ldr	r0, [pc, #236]	; (800a90c <pbuf_alloc+0x1d4>)
 800a81e:	f00a fa8f 	bl	8014d40 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a824:	2b00      	cmp	r3, #0
 800a826:	d102      	bne.n	800a82e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24
 800a82c:	e002      	b.n	800a834 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a838:	8b7a      	ldrh	r2, [r7, #26]
 800a83a:	89fb      	ldrh	r3, [r7, #14]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a844:	8b7b      	ldrh	r3, [r7, #26]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d19e      	bne.n	800a788 <pbuf_alloc+0x50>
      break;
 800a84a:	e055      	b.n	800a8f8 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a84c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a84e:	3303      	adds	r3, #3
 800a850:	b29b      	uxth	r3, r3
 800a852:	f023 0303 	bic.w	r3, r3, #3
 800a856:	b29a      	uxth	r2, r3
 800a858:	88bb      	ldrh	r3, [r7, #4]
 800a85a:	3303      	adds	r3, #3
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	f023 0303 	bic.w	r3, r3, #3
 800a862:	b29b      	uxth	r3, r3
 800a864:	4413      	add	r3, r2
 800a866:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a868:	8b3b      	ldrh	r3, [r7, #24]
 800a86a:	3310      	adds	r3, #16
 800a86c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a86e:	8b3a      	ldrh	r2, [r7, #24]
 800a870:	88bb      	ldrh	r3, [r7, #4]
 800a872:	3303      	adds	r3, #3
 800a874:	f023 0303 	bic.w	r3, r3, #3
 800a878:	429a      	cmp	r2, r3
 800a87a:	d306      	bcc.n	800a88a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a87c:	8afa      	ldrh	r2, [r7, #22]
 800a87e:	88bb      	ldrh	r3, [r7, #4]
 800a880:	3303      	adds	r3, #3
 800a882:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a886:	429a      	cmp	r2, r3
 800a888:	d201      	bcs.n	800a88e <pbuf_alloc+0x156>
        return NULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	e035      	b.n	800a8fa <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a88e:	8afb      	ldrh	r3, [r7, #22]
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff f9bd 	bl	8009c10 <mem_malloc>
 800a896:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <pbuf_alloc+0x16a>
        return NULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e02b      	b.n	800a8fa <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a8a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8a4:	3310      	adds	r3, #16
 800a8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a8:	4413      	add	r3, r2
 800a8aa:	3303      	adds	r3, #3
 800a8ac:	f023 0303 	bic.w	r3, r3, #3
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	88b9      	ldrh	r1, [r7, #4]
 800a8b4:	88ba      	ldrh	r2, [r7, #4]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	9301      	str	r3, [sp, #4]
 800a8ba:	887b      	ldrh	r3, [r7, #2]
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4601      	mov	r1, r0
 800a8c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8c4:	f7ff ff0e 	bl	800a6e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f003 0303 	and.w	r3, r3, #3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d010      	beq.n	800a8f6 <pbuf_alloc+0x1be>
 800a8d4:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <pbuf_alloc+0x1cc>)
 800a8d6:	f240 1223 	movw	r2, #291	; 0x123
 800a8da:	490e      	ldr	r1, [pc, #56]	; (800a914 <pbuf_alloc+0x1dc>)
 800a8dc:	480b      	ldr	r0, [pc, #44]	; (800a90c <pbuf_alloc+0x1d4>)
 800a8de:	f00a fa2f 	bl	8014d40 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a8e2:	e008      	b.n	800a8f6 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a8e4:	4b07      	ldr	r3, [pc, #28]	; (800a904 <pbuf_alloc+0x1cc>)
 800a8e6:	f240 1227 	movw	r2, #295	; 0x127
 800a8ea:	490b      	ldr	r1, [pc, #44]	; (800a918 <pbuf_alloc+0x1e0>)
 800a8ec:	4807      	ldr	r0, [pc, #28]	; (800a90c <pbuf_alloc+0x1d4>)
 800a8ee:	f00a fa27 	bl	8014d40 <iprintf>
      return NULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e001      	b.n	800a8fa <pbuf_alloc+0x1c2>
      break;
 800a8f6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3728      	adds	r7, #40	; 0x28
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	08017134 	.word	0x08017134
 800a908:	08017164 	.word	0x08017164
 800a90c:	08017194 	.word	0x08017194
 800a910:	080171bc 	.word	0x080171bc
 800a914:	080171f0 	.word	0x080171f0
 800a918:	0801721c 	.word	0x0801721c

0800a91c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af02      	add	r7, sp, #8
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	807b      	strh	r3, [r7, #2]
 800a928:	4613      	mov	r3, r2
 800a92a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a92c:	883b      	ldrh	r3, [r7, #0]
 800a92e:	2b41      	cmp	r3, #65	; 0x41
 800a930:	d009      	beq.n	800a946 <pbuf_alloc_reference+0x2a>
 800a932:	883b      	ldrh	r3, [r7, #0]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d006      	beq.n	800a946 <pbuf_alloc_reference+0x2a>
 800a938:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <pbuf_alloc_reference+0x5c>)
 800a93a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a93e:	490f      	ldr	r1, [pc, #60]	; (800a97c <pbuf_alloc_reference+0x60>)
 800a940:	480f      	ldr	r0, [pc, #60]	; (800a980 <pbuf_alloc_reference+0x64>)
 800a942:	f00a f9fd 	bl	8014d40 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a946:	200b      	movs	r0, #11
 800a948:	f7ff fae4 	bl	8009f14 <memp_malloc>
 800a94c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a954:	2300      	movs	r3, #0
 800a956:	e00b      	b.n	800a970 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a958:	8879      	ldrh	r1, [r7, #2]
 800a95a:	887a      	ldrh	r2, [r7, #2]
 800a95c:	2300      	movs	r3, #0
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	883b      	ldrh	r3, [r7, #0]
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	460b      	mov	r3, r1
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f7ff febb 	bl	800a6e4 <pbuf_init_alloced_pbuf>
  return p;
 800a96e:	68fb      	ldr	r3, [r7, #12]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	08017134 	.word	0x08017134
 800a97c:	08017238 	.word	0x08017238
 800a980:	08017194 	.word	0x08017194

0800a984 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af02      	add	r7, sp, #8
 800a98a:	607b      	str	r3, [r7, #4]
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]
 800a990:	460b      	mov	r3, r1
 800a992:	81bb      	strh	r3, [r7, #12]
 800a994:	4613      	mov	r3, r2
 800a996:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a99c:	8a7b      	ldrh	r3, [r7, #18]
 800a99e:	3303      	adds	r3, #3
 800a9a0:	f023 0203 	bic.w	r2, r3, #3
 800a9a4:	89bb      	ldrh	r3, [r7, #12]
 800a9a6:	441a      	add	r2, r3
 800a9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d901      	bls.n	800a9b2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	e018      	b.n	800a9e4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a9b8:	8a7b      	ldrh	r3, [r7, #18]
 800a9ba:	3303      	adds	r3, #3
 800a9bc:	f023 0303 	bic.w	r3, r3, #3
 800a9c0:	6a3a      	ldr	r2, [r7, #32]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	617b      	str	r3, [r7, #20]
 800a9c6:	e001      	b.n	800a9cc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	89b9      	ldrh	r1, [r7, #12]
 800a9d0:	89ba      	ldrh	r2, [r7, #12]
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	9301      	str	r3, [sp, #4]
 800a9d6:	897b      	ldrh	r3, [r7, #10]
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	460b      	mov	r3, r1
 800a9dc:	6979      	ldr	r1, [r7, #20]
 800a9de:	f7ff fe81 	bl	800a6e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a9e2:	687b      	ldr	r3, [r7, #4]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d106      	bne.n	800aa0c <pbuf_realloc+0x20>
 800a9fe:	4b3a      	ldr	r3, [pc, #232]	; (800aae8 <pbuf_realloc+0xfc>)
 800aa00:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800aa04:	4939      	ldr	r1, [pc, #228]	; (800aaec <pbuf_realloc+0x100>)
 800aa06:	483a      	ldr	r0, [pc, #232]	; (800aaf0 <pbuf_realloc+0x104>)
 800aa08:	f00a f99a 	bl	8014d40 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	891b      	ldrh	r3, [r3, #8]
 800aa10:	887a      	ldrh	r2, [r7, #2]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d264      	bcs.n	800aae0 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	891a      	ldrh	r2, [r3, #8]
 800aa1a:	887b      	ldrh	r3, [r7, #2]
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800aa20:	887b      	ldrh	r3, [r7, #2]
 800aa22:	817b      	strh	r3, [r7, #10]
  q = p;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800aa28:	e018      	b.n	800aa5c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	895b      	ldrh	r3, [r3, #10]
 800aa2e:	897a      	ldrh	r2, [r7, #10]
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	891a      	ldrh	r2, [r3, #8]
 800aa38:	893b      	ldrh	r3, [r7, #8]
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	b29a      	uxth	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d106      	bne.n	800aa5c <pbuf_realloc+0x70>
 800aa4e:	4b26      	ldr	r3, [pc, #152]	; (800aae8 <pbuf_realloc+0xfc>)
 800aa50:	f240 12af 	movw	r2, #431	; 0x1af
 800aa54:	4927      	ldr	r1, [pc, #156]	; (800aaf4 <pbuf_realloc+0x108>)
 800aa56:	4826      	ldr	r0, [pc, #152]	; (800aaf0 <pbuf_realloc+0x104>)
 800aa58:	f00a f972 	bl	8014d40 <iprintf>
  while (rem_len > q->len) {
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	895b      	ldrh	r3, [r3, #10]
 800aa60:	897a      	ldrh	r2, [r7, #10]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d8e1      	bhi.n	800aa2a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	7b1b      	ldrb	r3, [r3, #12]
 800aa6a:	f003 030f 	and.w	r3, r3, #15
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d122      	bne.n	800aab8 <pbuf_realloc+0xcc>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	895b      	ldrh	r3, [r3, #10]
 800aa76:	897a      	ldrh	r2, [r7, #10]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d01d      	beq.n	800aab8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	7b5b      	ldrb	r3, [r3, #13]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d117      	bne.n	800aab8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	897b      	ldrh	r3, [r7, #10]
 800aa96:	4413      	add	r3, r2
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7fe ffad 	bl	80099fc <mem_trim>
 800aaa2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <pbuf_realloc+0xcc>
 800aaaa:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <pbuf_realloc+0xfc>)
 800aaac:	f240 12bd 	movw	r2, #445	; 0x1bd
 800aab0:	4911      	ldr	r1, [pc, #68]	; (800aaf8 <pbuf_realloc+0x10c>)
 800aab2:	480f      	ldr	r0, [pc, #60]	; (800aaf0 <pbuf_realloc+0x104>)
 800aab4:	f00a f944 	bl	8014d40 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	897a      	ldrh	r2, [r7, #10]
 800aabc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	895a      	ldrh	r2, [r3, #10]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d004      	beq.n	800aad8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 f910 	bl	800acf8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	e000      	b.n	800aae2 <pbuf_realloc+0xf6>
    return;
 800aae0:	bf00      	nop

}
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	08017134 	.word	0x08017134
 800aaec:	0801724c 	.word	0x0801724c
 800aaf0:	08017194 	.word	0x08017194
 800aaf4:	08017264 	.word	0x08017264
 800aaf8:	0801727c 	.word	0x0801727c

0800aafc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	4613      	mov	r3, r2
 800ab08:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d106      	bne.n	800ab1e <pbuf_add_header_impl+0x22>
 800ab10:	4b2b      	ldr	r3, [pc, #172]	; (800abc0 <pbuf_add_header_impl+0xc4>)
 800ab12:	f240 12df 	movw	r2, #479	; 0x1df
 800ab16:	492b      	ldr	r1, [pc, #172]	; (800abc4 <pbuf_add_header_impl+0xc8>)
 800ab18:	482b      	ldr	r0, [pc, #172]	; (800abc8 <pbuf_add_header_impl+0xcc>)
 800ab1a:	f00a f911 	bl	8014d40 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <pbuf_add_header_impl+0x30>
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab2a:	d301      	bcc.n	800ab30 <pbuf_add_header_impl+0x34>
    return 1;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e043      	b.n	800abb8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <pbuf_add_header_impl+0x3e>
    return 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	e03e      	b.n	800abb8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	891a      	ldrh	r2, [r3, #8]
 800ab42:	8a7b      	ldrh	r3, [r7, #18]
 800ab44:	4413      	add	r3, r2
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	8a7a      	ldrh	r2, [r7, #18]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d901      	bls.n	800ab52 <pbuf_add_header_impl+0x56>
    return 1;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e032      	b.n	800abb8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	7b1b      	ldrb	r3, [r3, #12]
 800ab56:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ab58:	8a3b      	ldrh	r3, [r7, #16]
 800ab5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00c      	beq.n	800ab7c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	425b      	negs	r3, r3
 800ab6a:	4413      	add	r3, r2
 800ab6c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	3310      	adds	r3, #16
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d20d      	bcs.n	800ab94 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e01d      	b.n	800abb8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ab7c:	79fb      	ldrb	r3, [r7, #7]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d006      	beq.n	800ab90 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	685a      	ldr	r2, [r3, #4]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	425b      	negs	r3, r3
 800ab8a:	4413      	add	r3, r2
 800ab8c:	617b      	str	r3, [r7, #20]
 800ab8e:	e001      	b.n	800ab94 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e011      	b.n	800abb8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	895a      	ldrh	r2, [r3, #10]
 800ab9e:	8a7b      	ldrh	r3, [r7, #18]
 800aba0:	4413      	add	r3, r2
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	891a      	ldrh	r2, [r3, #8]
 800abac:	8a7b      	ldrh	r3, [r7, #18]
 800abae:	4413      	add	r3, r2
 800abb0:	b29a      	uxth	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	811a      	strh	r2, [r3, #8]


  return 0;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	08017134 	.word	0x08017134
 800abc4:	08017298 	.word	0x08017298
 800abc8:	08017194 	.word	0x08017194

0800abcc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800abd6:	2200      	movs	r2, #0
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff ff8e 	bl	800aafc <pbuf_add_header_impl>
 800abe0:	4603      	mov	r3, r0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
	...

0800abec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <pbuf_remove_header+0x1e>
 800abfc:	4b20      	ldr	r3, [pc, #128]	; (800ac80 <pbuf_remove_header+0x94>)
 800abfe:	f240 224b 	movw	r2, #587	; 0x24b
 800ac02:	4920      	ldr	r1, [pc, #128]	; (800ac84 <pbuf_remove_header+0x98>)
 800ac04:	4820      	ldr	r0, [pc, #128]	; (800ac88 <pbuf_remove_header+0x9c>)
 800ac06:	f00a f89b 	bl	8014d40 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <pbuf_remove_header+0x2c>
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac16:	d301      	bcc.n	800ac1c <pbuf_remove_header+0x30>
    return 1;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e02c      	b.n	800ac76 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <pbuf_remove_header+0x3a>
    return 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	e027      	b.n	800ac76 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	895b      	ldrh	r3, [r3, #10]
 800ac2e:	89fa      	ldrh	r2, [r7, #14]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d908      	bls.n	800ac46 <pbuf_remove_header+0x5a>
 800ac34:	4b12      	ldr	r3, [pc, #72]	; (800ac80 <pbuf_remove_header+0x94>)
 800ac36:	f240 2255 	movw	r2, #597	; 0x255
 800ac3a:	4914      	ldr	r1, [pc, #80]	; (800ac8c <pbuf_remove_header+0xa0>)
 800ac3c:	4812      	ldr	r0, [pc, #72]	; (800ac88 <pbuf_remove_header+0x9c>)
 800ac3e:	f00a f87f 	bl	8014d40 <iprintf>
 800ac42:	2301      	movs	r3, #1
 800ac44:	e017      	b.n	800ac76 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	441a      	add	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	895a      	ldrh	r2, [r3, #10]
 800ac5c:	89fb      	ldrh	r3, [r7, #14]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	891a      	ldrh	r2, [r3, #8]
 800ac6a:	89fb      	ldrh	r3, [r7, #14]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	08017134 	.word	0x08017134
 800ac84:	08017298 	.word	0x08017298
 800ac88:	08017194 	.word	0x08017194
 800ac8c:	080172a4 	.word	0x080172a4

0800ac90 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	807b      	strh	r3, [r7, #2]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800aca0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	da08      	bge.n	800acba <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800aca8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acac:	425b      	negs	r3, r3
 800acae:	4619      	mov	r1, r3
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff ff9b 	bl	800abec <pbuf_remove_header>
 800acb6:	4603      	mov	r3, r0
 800acb8:	e007      	b.n	800acca <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800acba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acbe:	787a      	ldrb	r2, [r7, #1]
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff ff1a 	bl	800aafc <pbuf_add_header_impl>
 800acc8:	4603      	mov	r3, r0
  }
}
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	460b      	mov	r3, r1
 800acdc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800acde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ace2:	2201      	movs	r2, #1
 800ace4:	4619      	mov	r1, r3
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7ff ffd2 	bl	800ac90 <pbuf_header_impl>
 800acec:	4603      	mov	r3, r0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10b      	bne.n	800ad1e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d106      	bne.n	800ad1a <pbuf_free+0x22>
 800ad0c:	4b3b      	ldr	r3, [pc, #236]	; (800adfc <pbuf_free+0x104>)
 800ad0e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ad12:	493b      	ldr	r1, [pc, #236]	; (800ae00 <pbuf_free+0x108>)
 800ad14:	483b      	ldr	r0, [pc, #236]	; (800ae04 <pbuf_free+0x10c>)
 800ad16:	f00a f813 	bl	8014d40 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e069      	b.n	800adf2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ad22:	e062      	b.n	800adea <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ad24:	f009 ff88 	bl	8014c38 <sys_arch_protect>
 800ad28:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	7b9b      	ldrb	r3, [r3, #14]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d106      	bne.n	800ad40 <pbuf_free+0x48>
 800ad32:	4b32      	ldr	r3, [pc, #200]	; (800adfc <pbuf_free+0x104>)
 800ad34:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ad38:	4933      	ldr	r1, [pc, #204]	; (800ae08 <pbuf_free+0x110>)
 800ad3a:	4832      	ldr	r0, [pc, #200]	; (800ae04 <pbuf_free+0x10c>)
 800ad3c:	f00a f800 	bl	8014d40 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	7b9b      	ldrb	r3, [r3, #14]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	739a      	strb	r2, [r3, #14]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7b9b      	ldrb	r3, [r3, #14]
 800ad50:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ad52:	69b8      	ldr	r0, [r7, #24]
 800ad54:	f009 ff7e 	bl	8014c54 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d143      	bne.n	800ade6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	7b1b      	ldrb	r3, [r3, #12]
 800ad68:	f003 030f 	and.w	r3, r3, #15
 800ad6c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	7b5b      	ldrb	r3, [r3, #13]
 800ad72:	f003 0302 	and.w	r3, r3, #2
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d011      	beq.n	800ad9e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d106      	bne.n	800ad94 <pbuf_free+0x9c>
 800ad86:	4b1d      	ldr	r3, [pc, #116]	; (800adfc <pbuf_free+0x104>)
 800ad88:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ad8c:	491f      	ldr	r1, [pc, #124]	; (800ae0c <pbuf_free+0x114>)
 800ad8e:	481d      	ldr	r0, [pc, #116]	; (800ae04 <pbuf_free+0x10c>)
 800ad90:	f009 ffd6 	bl	8014d40 <iprintf>
        pc->custom_free_function(p);
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	4798      	blx	r3
 800ad9c:	e01d      	b.n	800adda <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ad9e:	7bfb      	ldrb	r3, [r7, #15]
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d104      	bne.n	800adae <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ada4:	6879      	ldr	r1, [r7, #4]
 800ada6:	200c      	movs	r0, #12
 800ada8:	f7ff f906 	bl	8009fb8 <memp_free>
 800adac:	e015      	b.n	800adda <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d104      	bne.n	800adbe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	200b      	movs	r0, #11
 800adb8:	f7ff f8fe 	bl	8009fb8 <memp_free>
 800adbc:	e00d      	b.n	800adda <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d103      	bne.n	800adcc <pbuf_free+0xd4>
          mem_free(p);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f7fe fd89 	bl	80098dc <mem_free>
 800adca:	e006      	b.n	800adda <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800adcc:	4b0b      	ldr	r3, [pc, #44]	; (800adfc <pbuf_free+0x104>)
 800adce:	f240 320f 	movw	r2, #783	; 0x30f
 800add2:	490f      	ldr	r1, [pc, #60]	; (800ae10 <pbuf_free+0x118>)
 800add4:	480b      	ldr	r0, [pc, #44]	; (800ae04 <pbuf_free+0x10c>)
 800add6:	f009 ffb3 	bl	8014d40 <iprintf>
        }
      }
      count++;
 800adda:	7ffb      	ldrb	r3, [r7, #31]
 800addc:	3301      	adds	r3, #1
 800adde:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	607b      	str	r3, [r7, #4]
 800ade4:	e001      	b.n	800adea <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ade6:	2300      	movs	r3, #0
 800ade8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d199      	bne.n	800ad24 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800adf0:	7ffb      	ldrb	r3, [r7, #31]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3720      	adds	r7, #32
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	08017134 	.word	0x08017134
 800ae00:	08017298 	.word	0x08017298
 800ae04:	08017194 	.word	0x08017194
 800ae08:	080172c4 	.word	0x080172c4
 800ae0c:	080172dc 	.word	0x080172dc
 800ae10:	08017300 	.word	0x08017300

0800ae14 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ae20:	e005      	b.n	800ae2e <pbuf_clen+0x1a>
    ++len;
 800ae22:	89fb      	ldrh	r3, [r7, #14]
 800ae24:	3301      	adds	r3, #1
 800ae26:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1f6      	bne.n	800ae22 <pbuf_clen+0xe>
  }
  return len;
 800ae34:	89fb      	ldrh	r3, [r7, #14]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
	...

0800ae44 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d016      	beq.n	800ae80 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ae52:	f009 fef1 	bl	8014c38 <sys_arch_protect>
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	7b9b      	ldrb	r3, [r3, #14]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	739a      	strb	r2, [r3, #14]
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f009 fef5 	bl	8014c54 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	7b9b      	ldrb	r3, [r3, #14]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d106      	bne.n	800ae80 <pbuf_ref+0x3c>
 800ae72:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <pbuf_ref+0x44>)
 800ae74:	f240 3242 	movw	r2, #834	; 0x342
 800ae78:	4904      	ldr	r1, [pc, #16]	; (800ae8c <pbuf_ref+0x48>)
 800ae7a:	4805      	ldr	r0, [pc, #20]	; (800ae90 <pbuf_ref+0x4c>)
 800ae7c:	f009 ff60 	bl	8014d40 <iprintf>
  }
}
 800ae80:	bf00      	nop
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	08017134 	.word	0x08017134
 800ae8c:	08017314 	.word	0x08017314
 800ae90:	08017194 	.word	0x08017194

0800ae94 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <pbuf_cat+0x16>
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d107      	bne.n	800aeba <pbuf_cat+0x26>
 800aeaa:	4b20      	ldr	r3, [pc, #128]	; (800af2c <pbuf_cat+0x98>)
 800aeac:	f240 325a 	movw	r2, #858	; 0x35a
 800aeb0:	491f      	ldr	r1, [pc, #124]	; (800af30 <pbuf_cat+0x9c>)
 800aeb2:	4820      	ldr	r0, [pc, #128]	; (800af34 <pbuf_cat+0xa0>)
 800aeb4:	f009 ff44 	bl	8014d40 <iprintf>
 800aeb8:	e034      	b.n	800af24 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e00a      	b.n	800aed6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	891a      	ldrh	r2, [r3, #8]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	891b      	ldrh	r3, [r3, #8]
 800aec8:	4413      	add	r3, r2
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60fb      	str	r3, [r7, #12]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1f0      	bne.n	800aec0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	891a      	ldrh	r2, [r3, #8]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	895b      	ldrh	r3, [r3, #10]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d006      	beq.n	800aef8 <pbuf_cat+0x64>
 800aeea:	4b10      	ldr	r3, [pc, #64]	; (800af2c <pbuf_cat+0x98>)
 800aeec:	f240 3262 	movw	r2, #866	; 0x362
 800aef0:	4911      	ldr	r1, [pc, #68]	; (800af38 <pbuf_cat+0xa4>)
 800aef2:	4810      	ldr	r0, [pc, #64]	; (800af34 <pbuf_cat+0xa0>)
 800aef4:	f009 ff24 	bl	8014d40 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d006      	beq.n	800af0e <pbuf_cat+0x7a>
 800af00:	4b0a      	ldr	r3, [pc, #40]	; (800af2c <pbuf_cat+0x98>)
 800af02:	f240 3263 	movw	r2, #867	; 0x363
 800af06:	490d      	ldr	r1, [pc, #52]	; (800af3c <pbuf_cat+0xa8>)
 800af08:	480a      	ldr	r0, [pc, #40]	; (800af34 <pbuf_cat+0xa0>)
 800af0a:	f009 ff19 	bl	8014d40 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	891a      	ldrh	r2, [r3, #8]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	891b      	ldrh	r3, [r3, #8]
 800af16:	4413      	add	r3, r2
 800af18:	b29a      	uxth	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	683a      	ldr	r2, [r7, #0]
 800af22:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
 800af2a:	bf00      	nop
 800af2c:	08017134 	.word	0x08017134
 800af30:	08017328 	.word	0x08017328
 800af34:	08017194 	.word	0x08017194
 800af38:	08017360 	.word	0x08017360
 800af3c:	08017390 	.word	0x08017390

0800af40 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff ffa1 	bl	800ae94 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800af52:	6838      	ldr	r0, [r7, #0]
 800af54:	f7ff ff76 	bl	800ae44 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800af6a:	2300      	movs	r3, #0
 800af6c:	617b      	str	r3, [r7, #20]
 800af6e:	2300      	movs	r3, #0
 800af70:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d008      	beq.n	800af8a <pbuf_copy+0x2a>
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d005      	beq.n	800af8a <pbuf_copy+0x2a>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	891a      	ldrh	r2, [r3, #8]
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	891b      	ldrh	r3, [r3, #8]
 800af86:	429a      	cmp	r2, r3
 800af88:	d209      	bcs.n	800af9e <pbuf_copy+0x3e>
 800af8a:	4b57      	ldr	r3, [pc, #348]	; (800b0e8 <pbuf_copy+0x188>)
 800af8c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800af90:	4956      	ldr	r1, [pc, #344]	; (800b0ec <pbuf_copy+0x18c>)
 800af92:	4857      	ldr	r0, [pc, #348]	; (800b0f0 <pbuf_copy+0x190>)
 800af94:	f009 fed4 	bl	8014d40 <iprintf>
 800af98:	f06f 030f 	mvn.w	r3, #15
 800af9c:	e09f      	b.n	800b0de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	895b      	ldrh	r3, [r3, #10]
 800afa2:	461a      	mov	r2, r3
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	1ad2      	subs	r2, r2, r3
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	895b      	ldrh	r3, [r3, #10]
 800afac:	4619      	mov	r1, r3
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	1acb      	subs	r3, r1, r3
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d306      	bcc.n	800afc4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	895b      	ldrh	r3, [r3, #10]
 800afba:	461a      	mov	r2, r3
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	60fb      	str	r3, [r7, #12]
 800afc2:	e005      	b.n	800afd0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	895b      	ldrh	r3, [r3, #10]
 800afc8:	461a      	mov	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685a      	ldr	r2, [r3, #4]
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	18d0      	adds	r0, r2, r3
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	4413      	add	r3, r2
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	4619      	mov	r1, r3
 800afe4:	f009 fe99 	bl	8014d1a <memcpy>
    offset_to += len;
 800afe8:	697a      	ldr	r2, [r7, #20]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	4413      	add	r3, r2
 800afee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4413      	add	r3, r2
 800aff6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	895b      	ldrh	r3, [r3, #10]
 800affc:	461a      	mov	r2, r3
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	4293      	cmp	r3, r2
 800b002:	d906      	bls.n	800b012 <pbuf_copy+0xb2>
 800b004:	4b38      	ldr	r3, [pc, #224]	; (800b0e8 <pbuf_copy+0x188>)
 800b006:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b00a:	493a      	ldr	r1, [pc, #232]	; (800b0f4 <pbuf_copy+0x194>)
 800b00c:	4838      	ldr	r0, [pc, #224]	; (800b0f0 <pbuf_copy+0x190>)
 800b00e:	f009 fe97 	bl	8014d40 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	895b      	ldrh	r3, [r3, #10]
 800b016:	461a      	mov	r2, r3
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d906      	bls.n	800b02c <pbuf_copy+0xcc>
 800b01e:	4b32      	ldr	r3, [pc, #200]	; (800b0e8 <pbuf_copy+0x188>)
 800b020:	f240 32da 	movw	r2, #986	; 0x3da
 800b024:	4934      	ldr	r1, [pc, #208]	; (800b0f8 <pbuf_copy+0x198>)
 800b026:	4832      	ldr	r0, [pc, #200]	; (800b0f0 <pbuf_copy+0x190>)
 800b028:	f009 fe8a 	bl	8014d40 <iprintf>
    if (offset_from >= p_from->len) {
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	895b      	ldrh	r3, [r3, #10]
 800b030:	461a      	mov	r2, r3
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	4293      	cmp	r3, r2
 800b036:	d304      	bcc.n	800b042 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	895b      	ldrh	r3, [r3, #10]
 800b046:	461a      	mov	r2, r3
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d114      	bne.n	800b078 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10c      	bne.n	800b078 <pbuf_copy+0x118>
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d009      	beq.n	800b078 <pbuf_copy+0x118>
 800b064:	4b20      	ldr	r3, [pc, #128]	; (800b0e8 <pbuf_copy+0x188>)
 800b066:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b06a:	4924      	ldr	r1, [pc, #144]	; (800b0fc <pbuf_copy+0x19c>)
 800b06c:	4820      	ldr	r0, [pc, #128]	; (800b0f0 <pbuf_copy+0x190>)
 800b06e:	f009 fe67 	bl	8014d40 <iprintf>
 800b072:	f06f 030f 	mvn.w	r3, #15
 800b076:	e032      	b.n	800b0de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d013      	beq.n	800b0a6 <pbuf_copy+0x146>
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	895a      	ldrh	r2, [r3, #10]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	891b      	ldrh	r3, [r3, #8]
 800b086:	429a      	cmp	r2, r3
 800b088:	d10d      	bne.n	800b0a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d009      	beq.n	800b0a6 <pbuf_copy+0x146>
 800b092:	4b15      	ldr	r3, [pc, #84]	; (800b0e8 <pbuf_copy+0x188>)
 800b094:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800b098:	4919      	ldr	r1, [pc, #100]	; (800b100 <pbuf_copy+0x1a0>)
 800b09a:	4815      	ldr	r0, [pc, #84]	; (800b0f0 <pbuf_copy+0x190>)
 800b09c:	f009 fe50 	bl	8014d40 <iprintf>
 800b0a0:	f06f 0305 	mvn.w	r3, #5
 800b0a4:	e01b      	b.n	800b0de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d013      	beq.n	800b0d4 <pbuf_copy+0x174>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	895a      	ldrh	r2, [r3, #10]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	891b      	ldrh	r3, [r3, #8]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d10d      	bne.n	800b0d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d009      	beq.n	800b0d4 <pbuf_copy+0x174>
 800b0c0:	4b09      	ldr	r3, [pc, #36]	; (800b0e8 <pbuf_copy+0x188>)
 800b0c2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b0c6:	490e      	ldr	r1, [pc, #56]	; (800b100 <pbuf_copy+0x1a0>)
 800b0c8:	4809      	ldr	r0, [pc, #36]	; (800b0f0 <pbuf_copy+0x190>)
 800b0ca:	f009 fe39 	bl	8014d40 <iprintf>
 800b0ce:	f06f 0305 	mvn.w	r3, #5
 800b0d2:	e004      	b.n	800b0de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f47f af61 	bne.w	800af9e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	08017134 	.word	0x08017134
 800b0ec:	080173dc 	.word	0x080173dc
 800b0f0:	08017194 	.word	0x08017194
 800b0f4:	0801740c 	.word	0x0801740c
 800b0f8:	08017424 	.word	0x08017424
 800b0fc:	08017440 	.word	0x08017440
 800b100:	08017450 	.word	0x08017450

0800b104 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	4611      	mov	r1, r2
 800b110:	461a      	mov	r2, r3
 800b112:	460b      	mov	r3, r1
 800b114:	80fb      	strh	r3, [r7, #6]
 800b116:	4613      	mov	r3, r2
 800b118:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d108      	bne.n	800b13a <pbuf_copy_partial+0x36>
 800b128:	4b2b      	ldr	r3, [pc, #172]	; (800b1d8 <pbuf_copy_partial+0xd4>)
 800b12a:	f240 420a 	movw	r2, #1034	; 0x40a
 800b12e:	492b      	ldr	r1, [pc, #172]	; (800b1dc <pbuf_copy_partial+0xd8>)
 800b130:	482b      	ldr	r0, [pc, #172]	; (800b1e0 <pbuf_copy_partial+0xdc>)
 800b132:	f009 fe05 	bl	8014d40 <iprintf>
 800b136:	2300      	movs	r3, #0
 800b138:	e04a      	b.n	800b1d0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d108      	bne.n	800b152 <pbuf_copy_partial+0x4e>
 800b140:	4b25      	ldr	r3, [pc, #148]	; (800b1d8 <pbuf_copy_partial+0xd4>)
 800b142:	f240 420b 	movw	r2, #1035	; 0x40b
 800b146:	4927      	ldr	r1, [pc, #156]	; (800b1e4 <pbuf_copy_partial+0xe0>)
 800b148:	4825      	ldr	r0, [pc, #148]	; (800b1e0 <pbuf_copy_partial+0xdc>)
 800b14a:	f009 fdf9 	bl	8014d40 <iprintf>
 800b14e:	2300      	movs	r3, #0
 800b150:	e03e      	b.n	800b1d0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	61fb      	str	r3, [r7, #28]
 800b156:	e034      	b.n	800b1c2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b158:	88bb      	ldrh	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00a      	beq.n	800b174 <pbuf_copy_partial+0x70>
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	895b      	ldrh	r3, [r3, #10]
 800b162:	88ba      	ldrh	r2, [r7, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d305      	bcc.n	800b174 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	895b      	ldrh	r3, [r3, #10]
 800b16c:	88ba      	ldrh	r2, [r7, #4]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	80bb      	strh	r3, [r7, #4]
 800b172:	e023      	b.n	800b1bc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	895a      	ldrh	r2, [r3, #10]
 800b178:	88bb      	ldrh	r3, [r7, #4]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b17e:	8b3a      	ldrh	r2, [r7, #24]
 800b180:	88fb      	ldrh	r3, [r7, #6]
 800b182:	429a      	cmp	r2, r3
 800b184:	d901      	bls.n	800b18a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b186:	88fb      	ldrh	r3, [r7, #6]
 800b188:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b18a:	8b7b      	ldrh	r3, [r7, #26]
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	18d0      	adds	r0, r2, r3
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	88bb      	ldrh	r3, [r7, #4]
 800b196:	4413      	add	r3, r2
 800b198:	8b3a      	ldrh	r2, [r7, #24]
 800b19a:	4619      	mov	r1, r3
 800b19c:	f009 fdbd 	bl	8014d1a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b1a0:	8afa      	ldrh	r2, [r7, #22]
 800b1a2:	8b3b      	ldrh	r3, [r7, #24]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b1a8:	8b7a      	ldrh	r2, [r7, #26]
 800b1aa:	8b3b      	ldrh	r3, [r7, #24]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b1b0:	88fa      	ldrh	r2, [r7, #6]
 800b1b2:	8b3b      	ldrh	r3, [r7, #24]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b1bc:	69fb      	ldr	r3, [r7, #28]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	61fb      	str	r3, [r7, #28]
 800b1c2:	88fb      	ldrh	r3, [r7, #6]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d002      	beq.n	800b1ce <pbuf_copy_partial+0xca>
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1c4      	bne.n	800b158 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b1ce:	8afb      	ldrh	r3, [r7, #22]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3720      	adds	r7, #32
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	08017134 	.word	0x08017134
 800b1dc:	0801747c 	.word	0x0801747c
 800b1e0:	08017194 	.word	0x08017194
 800b1e4:	0801749c 	.word	0x0801749c

0800b1e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	603a      	str	r2, [r7, #0]
 800b1f2:	71fb      	strb	r3, [r7, #7]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	8919      	ldrh	r1, [r3, #8]
 800b1fc:	88ba      	ldrh	r2, [r7, #4]
 800b1fe:	79fb      	ldrb	r3, [r7, #7]
 800b200:	4618      	mov	r0, r3
 800b202:	f7ff fa99 	bl	800a738 <pbuf_alloc>
 800b206:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <pbuf_clone+0x2a>
    return NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	e011      	b.n	800b236 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b212:	6839      	ldr	r1, [r7, #0]
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7ff fea3 	bl	800af60 <pbuf_copy>
 800b21a:	4603      	mov	r3, r0
 800b21c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b21e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d006      	beq.n	800b234 <pbuf_clone+0x4c>
 800b226:	4b06      	ldr	r3, [pc, #24]	; (800b240 <pbuf_clone+0x58>)
 800b228:	f240 5224 	movw	r2, #1316	; 0x524
 800b22c:	4905      	ldr	r1, [pc, #20]	; (800b244 <pbuf_clone+0x5c>)
 800b22e:	4806      	ldr	r0, [pc, #24]	; (800b248 <pbuf_clone+0x60>)
 800b230:	f009 fd86 	bl	8014d40 <iprintf>
  return q;
 800b234:	68fb      	ldr	r3, [r7, #12]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	08017134 	.word	0x08017134
 800b244:	080175a8 	.word	0x080175a8
 800b248:	08017194 	.word	0x08017194

0800b24c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b250:	f009 fd8e 	bl	8014d70 <rand>
 800b254:	4603      	mov	r3, r0
 800b256:	b29b      	uxth	r3, r3
 800b258:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b262:	b29a      	uxth	r2, r3
 800b264:	4b01      	ldr	r3, [pc, #4]	; (800b26c <tcp_init+0x20>)
 800b266:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b268:	bf00      	nop
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	20000010 	.word	0x20000010

0800b270 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	7d1b      	ldrb	r3, [r3, #20]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d105      	bne.n	800b28c <tcp_free+0x1c>
 800b280:	4b06      	ldr	r3, [pc, #24]	; (800b29c <tcp_free+0x2c>)
 800b282:	22d4      	movs	r2, #212	; 0xd4
 800b284:	4906      	ldr	r1, [pc, #24]	; (800b2a0 <tcp_free+0x30>)
 800b286:	4807      	ldr	r0, [pc, #28]	; (800b2a4 <tcp_free+0x34>)
 800b288:	f009 fd5a 	bl	8014d40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	2001      	movs	r0, #1
 800b290:	f7fe fe92 	bl	8009fb8 <memp_free>
}
 800b294:	bf00      	nop
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	08017634 	.word	0x08017634
 800b2a0:	08017664 	.word	0x08017664
 800b2a4:	08017678 	.word	0x08017678

0800b2a8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	7d1b      	ldrb	r3, [r3, #20]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d105      	bne.n	800b2c4 <tcp_free_listen+0x1c>
 800b2b8:	4b06      	ldr	r3, [pc, #24]	; (800b2d4 <tcp_free_listen+0x2c>)
 800b2ba:	22df      	movs	r2, #223	; 0xdf
 800b2bc:	4906      	ldr	r1, [pc, #24]	; (800b2d8 <tcp_free_listen+0x30>)
 800b2be:	4807      	ldr	r0, [pc, #28]	; (800b2dc <tcp_free_listen+0x34>)
 800b2c0:	f009 fd3e 	bl	8014d40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b2c4:	6879      	ldr	r1, [r7, #4]
 800b2c6:	2002      	movs	r0, #2
 800b2c8:	f7fe fe76 	bl	8009fb8 <memp_free>
}
 800b2cc:	bf00      	nop
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	08017634 	.word	0x08017634
 800b2d8:	080176a0 	.word	0x080176a0
 800b2dc:	08017678 	.word	0x08017678

0800b2e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b2e4:	f001 f850 	bl	800c388 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b2e8:	4b07      	ldr	r3, [pc, #28]	; (800b308 <tcp_tmr+0x28>)
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	4b05      	ldr	r3, [pc, #20]	; (800b308 <tcp_tmr+0x28>)
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	4b04      	ldr	r3, [pc, #16]	; (800b308 <tcp_tmr+0x28>)
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b300:	f000 fd04 	bl	800bd0c <tcp_slowtmr>
  }
}
 800b304:	bf00      	nop
 800b306:	bd80      	pop	{r7, pc}
 800b308:	20004249 	.word	0x20004249

0800b30c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d105      	bne.n	800b328 <tcp_remove_listener+0x1c>
 800b31c:	4b0d      	ldr	r3, [pc, #52]	; (800b354 <tcp_remove_listener+0x48>)
 800b31e:	22ff      	movs	r2, #255	; 0xff
 800b320:	490d      	ldr	r1, [pc, #52]	; (800b358 <tcp_remove_listener+0x4c>)
 800b322:	480e      	ldr	r0, [pc, #56]	; (800b35c <tcp_remove_listener+0x50>)
 800b324:	f009 fd0c 	bl	8014d40 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	60fb      	str	r3, [r7, #12]
 800b32c:	e00a      	b.n	800b344 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	429a      	cmp	r2, r3
 800b336:	d102      	bne.n	800b33e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2200      	movs	r2, #0
 800b33c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1f1      	bne.n	800b32e <tcp_remove_listener+0x22>
    }
  }
}
 800b34a:	bf00      	nop
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	08017634 	.word	0x08017634
 800b358:	080176bc 	.word	0x080176bc
 800b35c:	08017678 	.word	0x08017678

0800b360 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d106      	bne.n	800b37c <tcp_listen_closed+0x1c>
 800b36e:	4b14      	ldr	r3, [pc, #80]	; (800b3c0 <tcp_listen_closed+0x60>)
 800b370:	f240 1211 	movw	r2, #273	; 0x111
 800b374:	4913      	ldr	r1, [pc, #76]	; (800b3c4 <tcp_listen_closed+0x64>)
 800b376:	4814      	ldr	r0, [pc, #80]	; (800b3c8 <tcp_listen_closed+0x68>)
 800b378:	f009 fce2 	bl	8014d40 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	7d1b      	ldrb	r3, [r3, #20]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d006      	beq.n	800b392 <tcp_listen_closed+0x32>
 800b384:	4b0e      	ldr	r3, [pc, #56]	; (800b3c0 <tcp_listen_closed+0x60>)
 800b386:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b38a:	4910      	ldr	r1, [pc, #64]	; (800b3cc <tcp_listen_closed+0x6c>)
 800b38c:	480e      	ldr	r0, [pc, #56]	; (800b3c8 <tcp_listen_closed+0x68>)
 800b38e:	f009 fcd7 	bl	8014d40 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b392:	2301      	movs	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	e00b      	b.n	800b3b0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b398:	4a0d      	ldr	r2, [pc, #52]	; (800b3d0 <tcp_listen_closed+0x70>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	6879      	ldr	r1, [r7, #4]
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7ff ffb1 	bl	800b30c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d9f0      	bls.n	800b398 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b3b6:	bf00      	nop
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	08017634 	.word	0x08017634
 800b3c4:	080176e4 	.word	0x080176e4
 800b3c8:	08017678 	.word	0x08017678
 800b3cc:	080176f0 	.word	0x080176f0
 800b3d0:	08019700 	.word	0x08019700

0800b3d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b3d4:	b5b0      	push	{r4, r5, r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af04      	add	r7, sp, #16
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d106      	bne.n	800b3f4 <tcp_close_shutdown+0x20>
 800b3e6:	4b61      	ldr	r3, [pc, #388]	; (800b56c <tcp_close_shutdown+0x198>)
 800b3e8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b3ec:	4960      	ldr	r1, [pc, #384]	; (800b570 <tcp_close_shutdown+0x19c>)
 800b3ee:	4861      	ldr	r0, [pc, #388]	; (800b574 <tcp_close_shutdown+0x1a0>)
 800b3f0:	f009 fca6 	bl	8014d40 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b3f4:	78fb      	ldrb	r3, [r7, #3]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d066      	beq.n	800b4c8 <tcp_close_shutdown+0xf4>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7d1b      	ldrb	r3, [r3, #20]
 800b3fe:	2b04      	cmp	r3, #4
 800b400:	d003      	beq.n	800b40a <tcp_close_shutdown+0x36>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7d1b      	ldrb	r3, [r3, #20]
 800b406:	2b07      	cmp	r3, #7
 800b408:	d15e      	bne.n	800b4c8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d104      	bne.n	800b41c <tcp_close_shutdown+0x48>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b416:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b41a:	d055      	beq.n	800b4c8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8b5b      	ldrh	r3, [r3, #26]
 800b420:	f003 0310 	and.w	r3, r3, #16
 800b424:	2b00      	cmp	r3, #0
 800b426:	d106      	bne.n	800b436 <tcp_close_shutdown+0x62>
 800b428:	4b50      	ldr	r3, [pc, #320]	; (800b56c <tcp_close_shutdown+0x198>)
 800b42a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b42e:	4952      	ldr	r1, [pc, #328]	; (800b578 <tcp_close_shutdown+0x1a4>)
 800b430:	4850      	ldr	r0, [pc, #320]	; (800b574 <tcp_close_shutdown+0x1a0>)
 800b432:	f009 fc85 	bl	8014d40 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b43e:	687d      	ldr	r5, [r7, #4]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3304      	adds	r3, #4
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	8ad2      	ldrh	r2, [r2, #22]
 800b448:	6879      	ldr	r1, [r7, #4]
 800b44a:	8b09      	ldrh	r1, [r1, #24]
 800b44c:	9102      	str	r1, [sp, #8]
 800b44e:	9201      	str	r2, [sp, #4]
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	462b      	mov	r3, r5
 800b454:	4622      	mov	r2, r4
 800b456:	4601      	mov	r1, r0
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f005 fd6f 	bl	8010f3c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f001 fb40 	bl	800cae4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b464:	4b45      	ldr	r3, [pc, #276]	; (800b57c <tcp_close_shutdown+0x1a8>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d105      	bne.n	800b47a <tcp_close_shutdown+0xa6>
 800b46e:	4b43      	ldr	r3, [pc, #268]	; (800b57c <tcp_close_shutdown+0x1a8>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	4a41      	ldr	r2, [pc, #260]	; (800b57c <tcp_close_shutdown+0x1a8>)
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	e013      	b.n	800b4a2 <tcp_close_shutdown+0xce>
 800b47a:	4b40      	ldr	r3, [pc, #256]	; (800b57c <tcp_close_shutdown+0x1a8>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	e00c      	b.n	800b49c <tcp_close_shutdown+0xc8>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d104      	bne.n	800b496 <tcp_close_shutdown+0xc2>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68da      	ldr	r2, [r3, #12]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	60da      	str	r2, [r3, #12]
 800b494:	e005      	b.n	800b4a2 <tcp_close_shutdown+0xce>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	60fb      	str	r3, [r7, #12]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1ef      	bne.n	800b482 <tcp_close_shutdown+0xae>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	60da      	str	r2, [r3, #12]
 800b4a8:	4b35      	ldr	r3, [pc, #212]	; (800b580 <tcp_close_shutdown+0x1ac>)
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b4ae:	4b35      	ldr	r3, [pc, #212]	; (800b584 <tcp_close_shutdown+0x1b0>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d102      	bne.n	800b4be <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b4b8:	f003 ffd2 	bl	800f460 <tcp_trigger_input_pcb_close>
 800b4bc:	e002      	b.n	800b4c4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff fed6 	bl	800b270 <tcp_free>
      }
      return ERR_OK;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	e04d      	b.n	800b564 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	7d1b      	ldrb	r3, [r3, #20]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d02d      	beq.n	800b52c <tcp_close_shutdown+0x158>
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d036      	beq.n	800b542 <tcp_close_shutdown+0x16e>
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d13f      	bne.n	800b558 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	8adb      	ldrh	r3, [r3, #22]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d021      	beq.n	800b524 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b4e0:	4b29      	ldr	r3, [pc, #164]	; (800b588 <tcp_close_shutdown+0x1b4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d105      	bne.n	800b4f6 <tcp_close_shutdown+0x122>
 800b4ea:	4b27      	ldr	r3, [pc, #156]	; (800b588 <tcp_close_shutdown+0x1b4>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	4a25      	ldr	r2, [pc, #148]	; (800b588 <tcp_close_shutdown+0x1b4>)
 800b4f2:	6013      	str	r3, [r2, #0]
 800b4f4:	e013      	b.n	800b51e <tcp_close_shutdown+0x14a>
 800b4f6:	4b24      	ldr	r3, [pc, #144]	; (800b588 <tcp_close_shutdown+0x1b4>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60bb      	str	r3, [r7, #8]
 800b4fc:	e00c      	b.n	800b518 <tcp_close_shutdown+0x144>
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	429a      	cmp	r2, r3
 800b506:	d104      	bne.n	800b512 <tcp_close_shutdown+0x13e>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	68da      	ldr	r2, [r3, #12]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	60da      	str	r2, [r3, #12]
 800b510:	e005      	b.n	800b51e <tcp_close_shutdown+0x14a>
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	68db      	ldr	r3, [r3, #12]
 800b516:	60bb      	str	r3, [r7, #8]
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1ef      	bne.n	800b4fe <tcp_close_shutdown+0x12a>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7ff fea3 	bl	800b270 <tcp_free>
      break;
 800b52a:	e01a      	b.n	800b562 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff ff17 	bl	800b360 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	4815      	ldr	r0, [pc, #84]	; (800b58c <tcp_close_shutdown+0x1b8>)
 800b536:	f001 fb25 	bl	800cb84 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f7ff feb4 	bl	800b2a8 <tcp_free_listen>
      break;
 800b540:	e00f      	b.n	800b562 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	480d      	ldr	r0, [pc, #52]	; (800b57c <tcp_close_shutdown+0x1a8>)
 800b546:	f001 fb1d 	bl	800cb84 <tcp_pcb_remove>
 800b54a:	4b0d      	ldr	r3, [pc, #52]	; (800b580 <tcp_close_shutdown+0x1ac>)
 800b54c:	2201      	movs	r2, #1
 800b54e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7ff fe8d 	bl	800b270 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b556:	e004      	b.n	800b562 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f819 	bl	800b590 <tcp_close_shutdown_fin>
 800b55e:	4603      	mov	r3, r0
 800b560:	e000      	b.n	800b564 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bdb0      	pop	{r4, r5, r7, pc}
 800b56c:	08017634 	.word	0x08017634
 800b570:	08017708 	.word	0x08017708
 800b574:	08017678 	.word	0x08017678
 800b578:	08017728 	.word	0x08017728
 800b57c:	2000e62c 	.word	0x2000e62c
 800b580:	2000e628 	.word	0x2000e628
 800b584:	2000e640 	.word	0x2000e640
 800b588:	2000e638 	.word	0x2000e638
 800b58c:	2000e634 	.word	0x2000e634

0800b590 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d106      	bne.n	800b5ac <tcp_close_shutdown_fin+0x1c>
 800b59e:	4b2c      	ldr	r3, [pc, #176]	; (800b650 <tcp_close_shutdown_fin+0xc0>)
 800b5a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b5a4:	492b      	ldr	r1, [pc, #172]	; (800b654 <tcp_close_shutdown_fin+0xc4>)
 800b5a6:	482c      	ldr	r0, [pc, #176]	; (800b658 <tcp_close_shutdown_fin+0xc8>)
 800b5a8:	f009 fbca 	bl	8014d40 <iprintf>

  switch (pcb->state) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	7d1b      	ldrb	r3, [r3, #20]
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d010      	beq.n	800b5d6 <tcp_close_shutdown_fin+0x46>
 800b5b4:	2b07      	cmp	r3, #7
 800b5b6:	d01b      	beq.n	800b5f0 <tcp_close_shutdown_fin+0x60>
 800b5b8:	2b03      	cmp	r3, #3
 800b5ba:	d126      	bne.n	800b60a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f004 fdbb 	bl	8010138 <tcp_send_fin>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b5c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d11f      	bne.n	800b60e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2205      	movs	r2, #5
 800b5d2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b5d4:	e01b      	b.n	800b60e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f004 fdae 	bl	8010138 <tcp_send_fin>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b5e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d114      	bne.n	800b612 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2205      	movs	r2, #5
 800b5ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b5ee:	e010      	b.n	800b612 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f004 fda1 	bl	8010138 <tcp_send_fin>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d109      	bne.n	800b616 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2209      	movs	r2, #9
 800b606:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b608:	e005      	b.n	800b616 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b60a:	2300      	movs	r3, #0
 800b60c:	e01c      	b.n	800b648 <tcp_close_shutdown_fin+0xb8>
      break;
 800b60e:	bf00      	nop
 800b610:	e002      	b.n	800b618 <tcp_close_shutdown_fin+0x88>
      break;
 800b612:	bf00      	nop
 800b614:	e000      	b.n	800b618 <tcp_close_shutdown_fin+0x88>
      break;
 800b616:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d103      	bne.n	800b628 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f004 fec7 	bl	80103b4 <tcp_output>
 800b626:	e00d      	b.n	800b644 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800b628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b630:	d108      	bne.n	800b644 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	8b5b      	ldrh	r3, [r3, #26]
 800b636:	f043 0308 	orr.w	r3, r3, #8
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	e001      	b.n	800b648 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800b644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	08017634 	.word	0x08017634
 800b654:	080176e4 	.word	0x080176e4
 800b658:	08017678 	.word	0x08017678

0800b65c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d109      	bne.n	800b67e <tcp_close+0x22>
 800b66a:	4b0f      	ldr	r3, [pc, #60]	; (800b6a8 <tcp_close+0x4c>)
 800b66c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b670:	490e      	ldr	r1, [pc, #56]	; (800b6ac <tcp_close+0x50>)
 800b672:	480f      	ldr	r0, [pc, #60]	; (800b6b0 <tcp_close+0x54>)
 800b674:	f009 fb64 	bl	8014d40 <iprintf>
 800b678:	f06f 030f 	mvn.w	r3, #15
 800b67c:	e00f      	b.n	800b69e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	7d1b      	ldrb	r3, [r3, #20]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d006      	beq.n	800b694 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	8b5b      	ldrh	r3, [r3, #26]
 800b68a:	f043 0310 	orr.w	r3, r3, #16
 800b68e:	b29a      	uxth	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b694:	2101      	movs	r1, #1
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff fe9c 	bl	800b3d4 <tcp_close_shutdown>
 800b69c:	4603      	mov	r3, r0
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	08017634 	.word	0x08017634
 800b6ac:	08017744 	.word	0x08017744
 800b6b0:	08017678 	.word	0x08017678

0800b6b4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d109      	bne.n	800b6da <tcp_shutdown+0x26>
 800b6c6:	4b25      	ldr	r3, [pc, #148]	; (800b75c <tcp_shutdown+0xa8>)
 800b6c8:	f240 2207 	movw	r2, #519	; 0x207
 800b6cc:	4924      	ldr	r1, [pc, #144]	; (800b760 <tcp_shutdown+0xac>)
 800b6ce:	4825      	ldr	r0, [pc, #148]	; (800b764 <tcp_shutdown+0xb0>)
 800b6d0:	f009 fb36 	bl	8014d40 <iprintf>
 800b6d4:	f06f 030f 	mvn.w	r3, #15
 800b6d8:	e03c      	b.n	800b754 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	7d1b      	ldrb	r3, [r3, #20]
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d102      	bne.n	800b6e8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800b6e2:	f06f 030a 	mvn.w	r3, #10
 800b6e6:	e035      	b.n	800b754 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d01b      	beq.n	800b726 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	8b5b      	ldrh	r3, [r3, #26]
 800b6f2:	f043 0310 	orr.w	r3, r3, #16
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d005      	beq.n	800b70e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800b702:	2101      	movs	r1, #1
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f7ff fe65 	bl	800b3d4 <tcp_close_shutdown>
 800b70a:	4603      	mov	r3, r0
 800b70c:	e022      	b.n	800b754 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b712:	2b00      	cmp	r3, #0
 800b714:	d007      	beq.n	800b726 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7ff faec 	bl	800acf8 <pbuf_free>
      pcb->refused_data = NULL;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2200      	movs	r2, #0
 800b724:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d012      	beq.n	800b752 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	7d1b      	ldrb	r3, [r3, #20]
 800b730:	2b03      	cmp	r3, #3
 800b732:	db0b      	blt.n	800b74c <tcp_shutdown+0x98>
 800b734:	2b04      	cmp	r3, #4
 800b736:	dd01      	ble.n	800b73c <tcp_shutdown+0x88>
 800b738:	2b07      	cmp	r3, #7
 800b73a:	d107      	bne.n	800b74c <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	4619      	mov	r1, r3
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff fe46 	bl	800b3d4 <tcp_close_shutdown>
 800b748:	4603      	mov	r3, r0
 800b74a:	e003      	b.n	800b754 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800b74c:	f06f 030a 	mvn.w	r3, #10
 800b750:	e000      	b.n	800b754 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	08017634 	.word	0x08017634
 800b760:	0801775c 	.word	0x0801775c
 800b764:	08017678 	.word	0x08017678

0800b768 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08e      	sub	sp, #56	; 0x38
 800b76c:	af04      	add	r7, sp, #16
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d107      	bne.n	800b788 <tcp_abandon+0x20>
 800b778:	4b52      	ldr	r3, [pc, #328]	; (800b8c4 <tcp_abandon+0x15c>)
 800b77a:	f240 223d 	movw	r2, #573	; 0x23d
 800b77e:	4952      	ldr	r1, [pc, #328]	; (800b8c8 <tcp_abandon+0x160>)
 800b780:	4852      	ldr	r0, [pc, #328]	; (800b8cc <tcp_abandon+0x164>)
 800b782:	f009 fadd 	bl	8014d40 <iprintf>
 800b786:	e099      	b.n	800b8bc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	7d1b      	ldrb	r3, [r3, #20]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d106      	bne.n	800b79e <tcp_abandon+0x36>
 800b790:	4b4c      	ldr	r3, [pc, #304]	; (800b8c4 <tcp_abandon+0x15c>)
 800b792:	f240 2241 	movw	r2, #577	; 0x241
 800b796:	494e      	ldr	r1, [pc, #312]	; (800b8d0 <tcp_abandon+0x168>)
 800b798:	484c      	ldr	r0, [pc, #304]	; (800b8cc <tcp_abandon+0x164>)
 800b79a:	f009 fad1 	bl	8014d40 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	7d1b      	ldrb	r3, [r3, #20]
 800b7a2:	2b0a      	cmp	r3, #10
 800b7a4:	d107      	bne.n	800b7b6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	484a      	ldr	r0, [pc, #296]	; (800b8d4 <tcp_abandon+0x16c>)
 800b7aa:	f001 f9eb 	bl	800cb84 <tcp_pcb_remove>
    tcp_free(pcb);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff fd5e 	bl	800b270 <tcp_free>
 800b7b4:	e082      	b.n	800b8bc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7c2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7d0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	7d1b      	ldrb	r3, [r3, #20]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d126      	bne.n	800b82e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	8adb      	ldrh	r3, [r3, #22]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d02e      	beq.n	800b846 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b7e8:	4b3b      	ldr	r3, [pc, #236]	; (800b8d8 <tcp_abandon+0x170>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d105      	bne.n	800b7fe <tcp_abandon+0x96>
 800b7f2:	4b39      	ldr	r3, [pc, #228]	; (800b8d8 <tcp_abandon+0x170>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	4a37      	ldr	r2, [pc, #220]	; (800b8d8 <tcp_abandon+0x170>)
 800b7fa:	6013      	str	r3, [r2, #0]
 800b7fc:	e013      	b.n	800b826 <tcp_abandon+0xbe>
 800b7fe:	4b36      	ldr	r3, [pc, #216]	; (800b8d8 <tcp_abandon+0x170>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	61fb      	str	r3, [r7, #28]
 800b804:	e00c      	b.n	800b820 <tcp_abandon+0xb8>
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d104      	bne.n	800b81a <tcp_abandon+0xb2>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	68da      	ldr	r2, [r3, #12]
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	60da      	str	r2, [r3, #12]
 800b818:	e005      	b.n	800b826 <tcp_abandon+0xbe>
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	61fb      	str	r3, [r7, #28]
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1ef      	bne.n	800b806 <tcp_abandon+0x9e>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	60da      	str	r2, [r3, #12]
 800b82c:	e00b      	b.n	800b846 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	8adb      	ldrh	r3, [r3, #22]
 800b836:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b838:	6879      	ldr	r1, [r7, #4]
 800b83a:	4828      	ldr	r0, [pc, #160]	; (800b8dc <tcp_abandon+0x174>)
 800b83c:	f001 f9a2 	bl	800cb84 <tcp_pcb_remove>
 800b840:	4b27      	ldr	r3, [pc, #156]	; (800b8e0 <tcp_abandon+0x178>)
 800b842:	2201      	movs	r2, #1
 800b844:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d004      	beq.n	800b858 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b852:	4618      	mov	r0, r3
 800b854:	f000 fe78 	bl	800c548 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d004      	beq.n	800b86a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b864:	4618      	mov	r0, r3
 800b866:	f000 fe6f 	bl	800c548 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d004      	beq.n	800b87c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b876:	4618      	mov	r0, r3
 800b878:	f000 fe66 	bl	800c548 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00e      	beq.n	800b8a0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3304      	adds	r3, #4
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	8b12      	ldrh	r2, [r2, #24]
 800b88c:	9202      	str	r2, [sp, #8]
 800b88e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b890:	9201      	str	r2, [sp, #4]
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	460b      	mov	r3, r1
 800b896:	697a      	ldr	r2, [r7, #20]
 800b898:	69b9      	ldr	r1, [r7, #24]
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f005 fb4e 	bl	8010f3c <tcp_rst>
    }
    last_state = pcb->state;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	7d1b      	ldrb	r3, [r3, #20]
 800b8a4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7ff fce2 	bl	800b270 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d004      	beq.n	800b8bc <tcp_abandon+0x154>
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f06f 010c 	mvn.w	r1, #12
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	4798      	blx	r3
  }
}
 800b8bc:	3728      	adds	r7, #40	; 0x28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	08017634 	.word	0x08017634
 800b8c8:	08017778 	.word	0x08017778
 800b8cc:	08017678 	.word	0x08017678
 800b8d0:	08017794 	.word	0x08017794
 800b8d4:	2000e63c 	.word	0x2000e63c
 800b8d8:	2000e638 	.word	0x2000e638
 800b8dc:	2000e62c 	.word	0x2000e62c
 800b8e0:	2000e628 	.word	0x2000e628

0800b8e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b8ec:	2101      	movs	r1, #1
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7ff ff3a 	bl	800b768 <tcp_abandon>
}
 800b8f4:	bf00      	nop
 800b8f6:	3708      	adds	r7, #8
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d106      	bne.n	800b918 <tcp_update_rcv_ann_wnd+0x1c>
 800b90a:	4b25      	ldr	r3, [pc, #148]	; (800b9a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800b90c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b910:	4924      	ldr	r1, [pc, #144]	; (800b9a4 <tcp_update_rcv_ann_wnd+0xa8>)
 800b912:	4825      	ldr	r0, [pc, #148]	; (800b9a8 <tcp_update_rcv_ann_wnd+0xac>)
 800b914:	f009 fa14 	bl	8014d40 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b920:	4413      	add	r3, r2
 800b922:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b92c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b930:	bf28      	it	cs
 800b932:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b936:	b292      	uxth	r2, r2
 800b938:	4413      	add	r3, r2
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	db08      	blt.n	800b954 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	e020      	b.n	800b996 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	dd03      	ble.n	800b96a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b968:	e014      	b.n	800b994 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b97c:	d306      	bcc.n	800b98c <tcp_update_rcv_ann_wnd+0x90>
 800b97e:	4b08      	ldr	r3, [pc, #32]	; (800b9a0 <tcp_update_rcv_ann_wnd+0xa4>)
 800b980:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b984:	4909      	ldr	r1, [pc, #36]	; (800b9ac <tcp_update_rcv_ann_wnd+0xb0>)
 800b986:	4808      	ldr	r0, [pc, #32]	; (800b9a8 <tcp_update_rcv_ann_wnd+0xac>)
 800b988:	f009 f9da 	bl	8014d40 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	b29a      	uxth	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b994:	2300      	movs	r3, #0
  }
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	08017634 	.word	0x08017634
 800b9a4:	08017890 	.word	0x08017890
 800b9a8:	08017678 	.word	0x08017678
 800b9ac:	080178b4 	.word	0x080178b4

0800b9b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d107      	bne.n	800b9d2 <tcp_recved+0x22>
 800b9c2:	4b1f      	ldr	r3, [pc, #124]	; (800ba40 <tcp_recved+0x90>)
 800b9c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b9c8:	491e      	ldr	r1, [pc, #120]	; (800ba44 <tcp_recved+0x94>)
 800b9ca:	481f      	ldr	r0, [pc, #124]	; (800ba48 <tcp_recved+0x98>)
 800b9cc:	f009 f9b8 	bl	8014d40 <iprintf>
 800b9d0:	e032      	b.n	800ba38 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	7d1b      	ldrb	r3, [r3, #20]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d106      	bne.n	800b9e8 <tcp_recved+0x38>
 800b9da:	4b19      	ldr	r3, [pc, #100]	; (800ba40 <tcp_recved+0x90>)
 800b9dc:	f240 32d3 	movw	r2, #979	; 0x3d3
 800b9e0:	491a      	ldr	r1, [pc, #104]	; (800ba4c <tcp_recved+0x9c>)
 800b9e2:	4819      	ldr	r0, [pc, #100]	; (800ba48 <tcp_recved+0x98>)
 800b9e4:	f009 f9ac 	bl	8014d40 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b9ec:	887b      	ldrh	r3, [r7, #2]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b9f2:	89fb      	ldrh	r3, [r7, #14]
 800b9f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b9f8:	d804      	bhi.n	800ba04 <tcp_recved+0x54>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9fe:	89fa      	ldrh	r2, [r7, #14]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d204      	bcs.n	800ba0e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ba0a:	851a      	strh	r2, [r3, #40]	; 0x28
 800ba0c:	e002      	b.n	800ba14 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	89fa      	ldrh	r2, [r7, #14]
 800ba12:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f7ff ff71 	bl	800b8fc <tcp_update_rcv_ann_wnd>
 800ba1a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ba22:	d309      	bcc.n	800ba38 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	8b5b      	ldrh	r3, [r3, #26]
 800ba28:	f043 0302 	orr.w	r3, r3, #2
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f004 fcbe 	bl	80103b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	08017634 	.word	0x08017634
 800ba44:	080178d0 	.word	0x080178d0
 800ba48:	08017678 	.word	0x08017678
 800ba4c:	080178e8 	.word	0x080178e8

0800ba50 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ba5a:	4b1e      	ldr	r3, [pc, #120]	; (800bad4 <tcp_new_port+0x84>)
 800ba5c:	881b      	ldrh	r3, [r3, #0]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	4b1c      	ldr	r3, [pc, #112]	; (800bad4 <tcp_new_port+0x84>)
 800ba64:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ba66:	4b1b      	ldr	r3, [pc, #108]	; (800bad4 <tcp_new_port+0x84>)
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d103      	bne.n	800ba7a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ba72:	4b18      	ldr	r3, [pc, #96]	; (800bad4 <tcp_new_port+0x84>)
 800ba74:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ba78:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	71fb      	strb	r3, [r7, #7]
 800ba7e:	e01e      	b.n	800babe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ba80:	79fb      	ldrb	r3, [r7, #7]
 800ba82:	4a15      	ldr	r2, [pc, #84]	; (800bad8 <tcp_new_port+0x88>)
 800ba84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	603b      	str	r3, [r7, #0]
 800ba8c:	e011      	b.n	800bab2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	8ada      	ldrh	r2, [r3, #22]
 800ba92:	4b10      	ldr	r3, [pc, #64]	; (800bad4 <tcp_new_port+0x84>)
 800ba94:	881b      	ldrh	r3, [r3, #0]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d108      	bne.n	800baac <tcp_new_port+0x5c>
        n++;
 800ba9a:	88bb      	ldrh	r3, [r7, #4]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800baa0:	88bb      	ldrh	r3, [r7, #4]
 800baa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800baa6:	d3d8      	bcc.n	800ba5a <tcp_new_port+0xa>
          return 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	e00d      	b.n	800bac8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	603b      	str	r3, [r7, #0]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d1ea      	bne.n	800ba8e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800bab8:	79fb      	ldrb	r3, [r7, #7]
 800baba:	3301      	adds	r3, #1
 800babc:	71fb      	strb	r3, [r7, #7]
 800babe:	79fb      	ldrb	r3, [r7, #7]
 800bac0:	2b03      	cmp	r3, #3
 800bac2:	d9dd      	bls.n	800ba80 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800bac4:	4b03      	ldr	r3, [pc, #12]	; (800bad4 <tcp_new_port+0x84>)
 800bac6:	881b      	ldrh	r3, [r3, #0]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	20000010 	.word	0x20000010
 800bad8:	08019700 	.word	0x08019700

0800badc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08a      	sub	sp, #40	; 0x28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	4613      	mov	r3, r2
 800baea:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800baec:	2300      	movs	r3, #0
 800baee:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d109      	bne.n	800bb0a <tcp_connect+0x2e>
 800baf6:	4b7d      	ldr	r3, [pc, #500]	; (800bcec <tcp_connect+0x210>)
 800baf8:	f240 4235 	movw	r2, #1077	; 0x435
 800bafc:	497c      	ldr	r1, [pc, #496]	; (800bcf0 <tcp_connect+0x214>)
 800bafe:	487d      	ldr	r0, [pc, #500]	; (800bcf4 <tcp_connect+0x218>)
 800bb00:	f009 f91e 	bl	8014d40 <iprintf>
 800bb04:	f06f 030f 	mvn.w	r3, #15
 800bb08:	e0ec      	b.n	800bce4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d109      	bne.n	800bb24 <tcp_connect+0x48>
 800bb10:	4b76      	ldr	r3, [pc, #472]	; (800bcec <tcp_connect+0x210>)
 800bb12:	f240 4236 	movw	r2, #1078	; 0x436
 800bb16:	4978      	ldr	r1, [pc, #480]	; (800bcf8 <tcp_connect+0x21c>)
 800bb18:	4876      	ldr	r0, [pc, #472]	; (800bcf4 <tcp_connect+0x218>)
 800bb1a:	f009 f911 	bl	8014d40 <iprintf>
 800bb1e:	f06f 030f 	mvn.w	r3, #15
 800bb22:	e0df      	b.n	800bce4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	7d1b      	ldrb	r3, [r3, #20]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d009      	beq.n	800bb40 <tcp_connect+0x64>
 800bb2c:	4b6f      	ldr	r3, [pc, #444]	; (800bcec <tcp_connect+0x210>)
 800bb2e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800bb32:	4972      	ldr	r1, [pc, #456]	; (800bcfc <tcp_connect+0x220>)
 800bb34:	486f      	ldr	r0, [pc, #444]	; (800bcf4 <tcp_connect+0x218>)
 800bb36:	f009 f903 	bl	8014d40 <iprintf>
 800bb3a:	f06f 0309 	mvn.w	r3, #9
 800bb3e:	e0d1      	b.n	800bce4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <tcp_connect+0x70>
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	e000      	b.n	800bb4e <tcp_connect+0x72>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	88fa      	ldrh	r2, [r7, #6]
 800bb56:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	7a1b      	ldrb	r3, [r3, #8]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d006      	beq.n	800bb6e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	7a1b      	ldrb	r3, [r3, #8]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fe fd3d 	bl	800a5e4 <netif_get_by_index>
 800bb6a:	6278      	str	r0, [r7, #36]	; 0x24
 800bb6c:	e005      	b.n	800bb7a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3304      	adds	r3, #4
 800bb72:	4618      	mov	r0, r3
 800bb74:	f007 fb76 	bl	8013264 <ip4_route>
 800bb78:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d102      	bne.n	800bb86 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800bb80:	f06f 0303 	mvn.w	r3, #3
 800bb84:	e0ae      	b.n	800bce4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d003      	beq.n	800bb94 <tcp_connect+0xb8>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d111      	bne.n	800bbb8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d002      	beq.n	800bba0 <tcp_connect+0xc4>
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	e000      	b.n	800bba2 <tcp_connect+0xc6>
 800bba0:	2300      	movs	r3, #0
 800bba2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d102      	bne.n	800bbb0 <tcp_connect+0xd4>
      return ERR_RTE;
 800bbaa:	f06f 0303 	mvn.w	r3, #3
 800bbae:	e099      	b.n	800bce4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	8adb      	ldrh	r3, [r3, #22]
 800bbbc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	8adb      	ldrh	r3, [r3, #22]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d10c      	bne.n	800bbe0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800bbc6:	f7ff ff43 	bl	800ba50 <tcp_new_port>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	461a      	mov	r2, r3
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	8adb      	ldrh	r3, [r3, #22]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d102      	bne.n	800bbe0 <tcp_connect+0x104>
      return ERR_BUF;
 800bbda:	f06f 0301 	mvn.w	r3, #1
 800bbde:	e081      	b.n	800bce4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f001 f863 	bl	800ccac <tcp_next_iss>
 800bbe6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	697a      	ldr	r2, [r7, #20]
 800bbf2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	1e5a      	subs	r2, r3, #1
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	1e5a      	subs	r2, r3, #1
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	1e5a      	subs	r2, r3, #1
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bc12:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bc2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bc34:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	461a      	mov	r2, r3
 800bc40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc42:	f001 f859 	bl	800ccf8 <tcp_eff_send_mss_netif>
 800bc46:	4603      	mov	r3, r0
 800bc48:	461a      	mov	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	683a      	ldr	r2, [r7, #0]
 800bc5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800bc5e:	2102      	movs	r1, #2
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f004 fab9 	bl	80101d8 <tcp_enqueue_flags>
 800bc66:	4603      	mov	r3, r0
 800bc68:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800bc6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d136      	bne.n	800bce0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2202      	movs	r2, #2
 800bc76:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800bc78:	8b7b      	ldrh	r3, [r7, #26]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d021      	beq.n	800bcc2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bc7e:	4b20      	ldr	r3, [pc, #128]	; (800bd00 <tcp_connect+0x224>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d105      	bne.n	800bc94 <tcp_connect+0x1b8>
 800bc88:	4b1d      	ldr	r3, [pc, #116]	; (800bd00 <tcp_connect+0x224>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	4a1c      	ldr	r2, [pc, #112]	; (800bd00 <tcp_connect+0x224>)
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	e013      	b.n	800bcbc <tcp_connect+0x1e0>
 800bc94:	4b1a      	ldr	r3, [pc, #104]	; (800bd00 <tcp_connect+0x224>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	623b      	str	r3, [r7, #32]
 800bc9a:	e00c      	b.n	800bcb6 <tcp_connect+0x1da>
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d104      	bne.n	800bcb0 <tcp_connect+0x1d4>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	68da      	ldr	r2, [r3, #12]
 800bcaa:	6a3b      	ldr	r3, [r7, #32]
 800bcac:	60da      	str	r2, [r3, #12]
 800bcae:	e005      	b.n	800bcbc <tcp_connect+0x1e0>
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	623b      	str	r3, [r7, #32]
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1ef      	bne.n	800bc9c <tcp_connect+0x1c0>
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800bcc2:	4b10      	ldr	r3, [pc, #64]	; (800bd04 <tcp_connect+0x228>)
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	60da      	str	r2, [r3, #12]
 800bcca:	4a0e      	ldr	r2, [pc, #56]	; (800bd04 <tcp_connect+0x228>)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	f005 faf6 	bl	80112c0 <tcp_timer_needed>
 800bcd4:	4b0c      	ldr	r3, [pc, #48]	; (800bd08 <tcp_connect+0x22c>)
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f004 fb6a 	bl	80103b4 <tcp_output>
  }
  return ret;
 800bce0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3728      	adds	r7, #40	; 0x28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	08017634 	.word	0x08017634
 800bcf0:	08017910 	.word	0x08017910
 800bcf4:	08017678 	.word	0x08017678
 800bcf8:	0801792c 	.word	0x0801792c
 800bcfc:	08017948 	.word	0x08017948
 800bd00:	2000e638 	.word	0x2000e638
 800bd04:	2000e62c 	.word	0x2000e62c
 800bd08:	2000e628 	.word	0x2000e628

0800bd0c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bd0c:	b5b0      	push	{r4, r5, r7, lr}
 800bd0e:	b090      	sub	sp, #64	; 0x40
 800bd10:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bd18:	4b94      	ldr	r3, [pc, #592]	; (800bf6c <tcp_slowtmr+0x260>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	4a93      	ldr	r2, [pc, #588]	; (800bf6c <tcp_slowtmr+0x260>)
 800bd20:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bd22:	4b93      	ldr	r3, [pc, #588]	; (800bf70 <tcp_slowtmr+0x264>)
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	3301      	adds	r3, #1
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	4b91      	ldr	r3, [pc, #580]	; (800bf70 <tcp_slowtmr+0x264>)
 800bd2c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bd32:	4b90      	ldr	r3, [pc, #576]	; (800bf74 <tcp_slowtmr+0x268>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bd38:	e29f      	b.n	800c27a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	7d1b      	ldrb	r3, [r3, #20]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d106      	bne.n	800bd50 <tcp_slowtmr+0x44>
 800bd42:	4b8d      	ldr	r3, [pc, #564]	; (800bf78 <tcp_slowtmr+0x26c>)
 800bd44:	f240 42be 	movw	r2, #1214	; 0x4be
 800bd48:	498c      	ldr	r1, [pc, #560]	; (800bf7c <tcp_slowtmr+0x270>)
 800bd4a:	488d      	ldr	r0, [pc, #564]	; (800bf80 <tcp_slowtmr+0x274>)
 800bd4c:	f008 fff8 	bl	8014d40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	7d1b      	ldrb	r3, [r3, #20]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d106      	bne.n	800bd66 <tcp_slowtmr+0x5a>
 800bd58:	4b87      	ldr	r3, [pc, #540]	; (800bf78 <tcp_slowtmr+0x26c>)
 800bd5a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bd5e:	4989      	ldr	r1, [pc, #548]	; (800bf84 <tcp_slowtmr+0x278>)
 800bd60:	4887      	ldr	r0, [pc, #540]	; (800bf80 <tcp_slowtmr+0x274>)
 800bd62:	f008 ffed 	bl	8014d40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	7d1b      	ldrb	r3, [r3, #20]
 800bd6a:	2b0a      	cmp	r3, #10
 800bd6c:	d106      	bne.n	800bd7c <tcp_slowtmr+0x70>
 800bd6e:	4b82      	ldr	r3, [pc, #520]	; (800bf78 <tcp_slowtmr+0x26c>)
 800bd70:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bd74:	4984      	ldr	r1, [pc, #528]	; (800bf88 <tcp_slowtmr+0x27c>)
 800bd76:	4882      	ldr	r0, [pc, #520]	; (800bf80 <tcp_slowtmr+0x274>)
 800bd78:	f008 ffe2 	bl	8014d40 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7e:	7f9a      	ldrb	r2, [r3, #30]
 800bd80:	4b7b      	ldr	r3, [pc, #492]	; (800bf70 <tcp_slowtmr+0x264>)
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d105      	bne.n	800bd94 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bd92:	e272      	b.n	800c27a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bd94:	4b76      	ldr	r3, [pc, #472]	; (800bf70 <tcp_slowtmr+0x264>)
 800bd96:	781a      	ldrb	r2, [r3, #0]
 800bd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	7d1b      	ldrb	r3, [r3, #20]
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d10a      	bne.n	800bdc6 <tcp_slowtmr+0xba>
 800bdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdb6:	2b05      	cmp	r3, #5
 800bdb8:	d905      	bls.n	800bdc6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bdba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdc4:	e11e      	b.n	800c004 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdcc:	2b0b      	cmp	r3, #11
 800bdce:	d905      	bls.n	800bddc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bdd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdda:	e113      	b.n	800c004 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d075      	beq.n	800bed2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d006      	beq.n	800bdfc <tcp_slowtmr+0xf0>
 800bdee:	4b62      	ldr	r3, [pc, #392]	; (800bf78 <tcp_slowtmr+0x26c>)
 800bdf0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bdf4:	4965      	ldr	r1, [pc, #404]	; (800bf8c <tcp_slowtmr+0x280>)
 800bdf6:	4862      	ldr	r0, [pc, #392]	; (800bf80 <tcp_slowtmr+0x274>)
 800bdf8:	f008 ffa2 	bl	8014d40 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be00:	2b00      	cmp	r3, #0
 800be02:	d106      	bne.n	800be12 <tcp_slowtmr+0x106>
 800be04:	4b5c      	ldr	r3, [pc, #368]	; (800bf78 <tcp_slowtmr+0x26c>)
 800be06:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800be0a:	4961      	ldr	r1, [pc, #388]	; (800bf90 <tcp_slowtmr+0x284>)
 800be0c:	485c      	ldr	r0, [pc, #368]	; (800bf80 <tcp_slowtmr+0x274>)
 800be0e:	f008 ff97 	bl	8014d40 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800be18:	2b0b      	cmp	r3, #11
 800be1a:	d905      	bls.n	800be28 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800be1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be20:	3301      	adds	r3, #1
 800be22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be26:	e0ed      	b.n	800c004 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800be28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800be2e:	3b01      	subs	r3, #1
 800be30:	4a58      	ldr	r2, [pc, #352]	; (800bf94 <tcp_slowtmr+0x288>)
 800be32:	5cd3      	ldrb	r3, [r2, r3]
 800be34:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800be3c:	7c7a      	ldrb	r2, [r7, #17]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d907      	bls.n	800be52 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800be42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800be48:	3301      	adds	r3, #1
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800be52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800be58:	7c7a      	ldrb	r2, [r7, #17]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	f200 80d2 	bhi.w	800c004 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800be60:	2301      	movs	r3, #1
 800be62:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800be64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d108      	bne.n	800be80 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800be6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be70:	f005 f958 	bl	8011124 <tcp_zero_window_probe>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d014      	beq.n	800bea4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800be7a:	2300      	movs	r3, #0
 800be7c:	623b      	str	r3, [r7, #32]
 800be7e:	e011      	b.n	800bea4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be86:	4619      	mov	r1, r3
 800be88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be8a:	f004 f80d 	bl	800fea8 <tcp_split_unsent_seg>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d107      	bne.n	800bea4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800be94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be96:	f004 fa8d 	bl	80103b4 <tcp_output>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d101      	bne.n	800bea4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800bea4:	6a3b      	ldr	r3, [r7, #32]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f000 80ac 	beq.w	800c004 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800beac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beae:	2200      	movs	r2, #0
 800beb0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800beb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800beba:	2b06      	cmp	r3, #6
 800bebc:	f200 80a2 	bhi.w	800c004 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bec6:	3301      	adds	r3, #1
 800bec8:	b2da      	uxtb	r2, r3
 800beca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800becc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800bed0:	e098      	b.n	800c004 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bed8:	2b00      	cmp	r3, #0
 800beda:	db0f      	blt.n	800befc <tcp_slowtmr+0x1f0>
 800bedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bede:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bee2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d008      	beq.n	800befc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	3301      	adds	r3, #1
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	b21a      	sxth	r2, r3
 800bef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800befc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	db7b      	blt.n	800c004 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bf0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf0e:	f004 fd49 	bl	80109a4 <tcp_rexmit_rto_prepare>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d007      	beq.n	800bf28 <tcp_slowtmr+0x21c>
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d171      	bne.n	800c004 <tcp_slowtmr+0x2f8>
 800bf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d06d      	beq.n	800c004 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800bf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2a:	7d1b      	ldrb	r3, [r3, #20]
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d03a      	beq.n	800bfa6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf36:	2b0c      	cmp	r3, #12
 800bf38:	bf28      	it	cs
 800bf3a:	230c      	movcs	r3, #12
 800bf3c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800bf44:	10db      	asrs	r3, r3, #3
 800bf46:	b21b      	sxth	r3, r3
 800bf48:	461a      	mov	r2, r3
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800bf50:	4413      	add	r3, r2
 800bf52:	7efa      	ldrb	r2, [r7, #27]
 800bf54:	4910      	ldr	r1, [pc, #64]	; (800bf98 <tcp_slowtmr+0x28c>)
 800bf56:	5c8a      	ldrb	r2, [r1, r2]
 800bf58:	4093      	lsls	r3, r2
 800bf5a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bf62:	4293      	cmp	r3, r2
 800bf64:	dc1a      	bgt.n	800bf9c <tcp_slowtmr+0x290>
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	b21a      	sxth	r2, r3
 800bf6a:	e019      	b.n	800bfa0 <tcp_slowtmr+0x294>
 800bf6c:	2000e630 	.word	0x2000e630
 800bf70:	2000424a 	.word	0x2000424a
 800bf74:	2000e62c 	.word	0x2000e62c
 800bf78:	08017634 	.word	0x08017634
 800bf7c:	08017978 	.word	0x08017978
 800bf80:	08017678 	.word	0x08017678
 800bf84:	080179a4 	.word	0x080179a4
 800bf88:	080179d0 	.word	0x080179d0
 800bf8c:	08017a00 	.word	0x08017a00
 800bf90:	08017a34 	.word	0x08017a34
 800bf94:	080196f8 	.word	0x080196f8
 800bf98:	080196e8 	.word	0x080196e8
 800bf9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	bf28      	it	cs
 800bfbc:	4613      	movcs	r3, r2
 800bfbe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bfc0:	8a7b      	ldrh	r3, [r7, #18]
 800bfc2:	085b      	lsrs	r3, r3, #1
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d206      	bcs.n	800bfec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff8:	2200      	movs	r2, #0
 800bffa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800bffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c000:	f004 fd40 	bl	8010a84 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c006:	7d1b      	ldrb	r3, [r3, #20]
 800c008:	2b06      	cmp	r3, #6
 800c00a:	d111      	bne.n	800c030 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00e:	8b5b      	ldrh	r3, [r3, #26]
 800c010:	f003 0310 	and.w	r3, r3, #16
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00b      	beq.n	800c030 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c018:	4b9d      	ldr	r3, [pc, #628]	; (800c290 <tcp_slowtmr+0x584>)
 800c01a:	681a      	ldr	r2, [r3, #0]
 800c01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01e:	6a1b      	ldr	r3, [r3, #32]
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	2b28      	cmp	r3, #40	; 0x28
 800c024:	d904      	bls.n	800c030 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c026:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c02a:	3301      	adds	r3, #1
 800c02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c032:	7a5b      	ldrb	r3, [r3, #9]
 800c034:	f003 0308 	and.w	r3, r3, #8
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d04c      	beq.n	800c0d6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c040:	2b04      	cmp	r3, #4
 800c042:	d003      	beq.n	800c04c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c046:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c048:	2b07      	cmp	r3, #7
 800c04a:	d144      	bne.n	800c0d6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c04c:	4b90      	ldr	r3, [pc, #576]	; (800c290 <tcp_slowtmr+0x584>)
 800c04e:	681a      	ldr	r2, [r3, #0]
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c05c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c060:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c064:	498b      	ldr	r1, [pc, #556]	; (800c294 <tcp_slowtmr+0x588>)
 800c066:	fba1 1303 	umull	r1, r3, r1, r3
 800c06a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d90a      	bls.n	800c086 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c074:	3301      	adds	r3, #1
 800c076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c07a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c07e:	3301      	adds	r3, #1
 800c080:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c084:	e027      	b.n	800c0d6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c086:	4b82      	ldr	r3, [pc, #520]	; (800c290 <tcp_slowtmr+0x584>)
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c092:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c098:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c09c:	4618      	mov	r0, r3
 800c09e:	4b7e      	ldr	r3, [pc, #504]	; (800c298 <tcp_slowtmr+0x58c>)
 800c0a0:	fb03 f300 	mul.w	r3, r3, r0
 800c0a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c0a6:	497b      	ldr	r1, [pc, #492]	; (800c294 <tcp_slowtmr+0x588>)
 800c0a8:	fba1 1303 	umull	r1, r3, r1, r3
 800c0ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d911      	bls.n	800c0d6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c0b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0b4:	f004 fff6 	bl	80110a4 <tcp_keepalive>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c0be:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d107      	bne.n	800c0d6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d011      	beq.n	800c102 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c0de:	4b6c      	ldr	r3, [pc, #432]	; (800c290 <tcp_slowtmr+0x584>)
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	1ad2      	subs	r2, r2, r3
 800c0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	440b      	add	r3, r1
 800c0f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d302      	bcc.n	800c102 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c0fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0fe:	f000 fea5 	bl	800ce4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c104:	7d1b      	ldrb	r3, [r3, #20]
 800c106:	2b03      	cmp	r3, #3
 800c108:	d10b      	bne.n	800c122 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c10a:	4b61      	ldr	r3, [pc, #388]	; (800c290 <tcp_slowtmr+0x584>)
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c110:	6a1b      	ldr	r3, [r3, #32]
 800c112:	1ad3      	subs	r3, r2, r3
 800c114:	2b28      	cmp	r3, #40	; 0x28
 800c116:	d904      	bls.n	800c122 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c11c:	3301      	adds	r3, #1
 800c11e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c124:	7d1b      	ldrb	r3, [r3, #20]
 800c126:	2b09      	cmp	r3, #9
 800c128:	d10b      	bne.n	800c142 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c12a:	4b59      	ldr	r3, [pc, #356]	; (800c290 <tcp_slowtmr+0x584>)
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	2bf0      	cmp	r3, #240	; 0xf0
 800c136:	d904      	bls.n	800c142 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c13c:	3301      	adds	r3, #1
 800c13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c146:	2b00      	cmp	r3, #0
 800c148:	d060      	beq.n	800c20c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c150:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c154:	f000 fcc6 	bl	800cae4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d010      	beq.n	800c180 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c15e:	4b4f      	ldr	r3, [pc, #316]	; (800c29c <tcp_slowtmr+0x590>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c164:	429a      	cmp	r2, r3
 800c166:	d106      	bne.n	800c176 <tcp_slowtmr+0x46a>
 800c168:	4b4d      	ldr	r3, [pc, #308]	; (800c2a0 <tcp_slowtmr+0x594>)
 800c16a:	f240 526d 	movw	r2, #1389	; 0x56d
 800c16e:	494d      	ldr	r1, [pc, #308]	; (800c2a4 <tcp_slowtmr+0x598>)
 800c170:	484d      	ldr	r0, [pc, #308]	; (800c2a8 <tcp_slowtmr+0x59c>)
 800c172:	f008 fde5 	bl	8014d40 <iprintf>
        prev->next = pcb->next;
 800c176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c178:	68da      	ldr	r2, [r3, #12]
 800c17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17c:	60da      	str	r2, [r3, #12]
 800c17e:	e00f      	b.n	800c1a0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c180:	4b46      	ldr	r3, [pc, #280]	; (800c29c <tcp_slowtmr+0x590>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c186:	429a      	cmp	r2, r3
 800c188:	d006      	beq.n	800c198 <tcp_slowtmr+0x48c>
 800c18a:	4b45      	ldr	r3, [pc, #276]	; (800c2a0 <tcp_slowtmr+0x594>)
 800c18c:	f240 5271 	movw	r2, #1393	; 0x571
 800c190:	4946      	ldr	r1, [pc, #280]	; (800c2ac <tcp_slowtmr+0x5a0>)
 800c192:	4845      	ldr	r0, [pc, #276]	; (800c2a8 <tcp_slowtmr+0x59c>)
 800c194:	f008 fdd4 	bl	8014d40 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	4a3f      	ldr	r2, [pc, #252]	; (800c29c <tcp_slowtmr+0x590>)
 800c19e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c1a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d013      	beq.n	800c1d0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c1b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1b8:	8ad2      	ldrh	r2, [r2, #22]
 800c1ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1bc:	8b09      	ldrh	r1, [r1, #24]
 800c1be:	9102      	str	r1, [sp, #8]
 800c1c0:	9201      	str	r2, [sp, #4]
 800c1c2:	9300      	str	r3, [sp, #0]
 800c1c4:	462b      	mov	r3, r5
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	4601      	mov	r1, r0
 800c1ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1cc:	f004 feb6 	bl	8010f3c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d8:	7d1b      	ldrb	r3, [r3, #20]
 800c1da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c1e6:	6838      	ldr	r0, [r7, #0]
 800c1e8:	f7ff f842 	bl	800b270 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c1ec:	4b30      	ldr	r3, [pc, #192]	; (800c2b0 <tcp_slowtmr+0x5a4>)
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d004      	beq.n	800c202 <tcp_slowtmr+0x4f6>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f06f 010c 	mvn.w	r1, #12
 800c1fe:	68b8      	ldr	r0, [r7, #8]
 800c200:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c202:	4b2b      	ldr	r3, [pc, #172]	; (800c2b0 <tcp_slowtmr+0x5a4>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d037      	beq.n	800c27a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c20a:	e590      	b.n	800bd2e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	7f1b      	ldrb	r3, [r3, #28]
 800c21a:	3301      	adds	r3, #1
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	7f1a      	ldrb	r2, [r3, #28]
 800c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c228:	7f5b      	ldrb	r3, [r3, #29]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d325      	bcc.n	800c27a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	2200      	movs	r2, #0
 800c232:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c234:	4b1e      	ldr	r3, [pc, #120]	; (800c2b0 <tcp_slowtmr+0x5a4>)
 800c236:	2200      	movs	r2, #0
 800c238:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00b      	beq.n	800c25c <tcp_slowtmr+0x550>
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c24a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c24c:	6912      	ldr	r2, [r2, #16]
 800c24e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c250:	4610      	mov	r0, r2
 800c252:	4798      	blx	r3
 800c254:	4603      	mov	r3, r0
 800c256:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c25a:	e002      	b.n	800c262 <tcp_slowtmr+0x556>
 800c25c:	2300      	movs	r3, #0
 800c25e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c262:	4b13      	ldr	r3, [pc, #76]	; (800c2b0 <tcp_slowtmr+0x5a4>)
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d000      	beq.n	800c26c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c26a:	e560      	b.n	800bd2e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c26c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c270:	2b00      	cmp	r3, #0
 800c272:	d102      	bne.n	800c27a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c276:	f004 f89d 	bl	80103b4 <tcp_output>
  while (pcb != NULL) {
 800c27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f47f ad5c 	bne.w	800bd3a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c286:	4b0b      	ldr	r3, [pc, #44]	; (800c2b4 <tcp_slowtmr+0x5a8>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c28c:	e067      	b.n	800c35e <tcp_slowtmr+0x652>
 800c28e:	bf00      	nop
 800c290:	2000e630 	.word	0x2000e630
 800c294:	10624dd3 	.word	0x10624dd3
 800c298:	000124f8 	.word	0x000124f8
 800c29c:	2000e62c 	.word	0x2000e62c
 800c2a0:	08017634 	.word	0x08017634
 800c2a4:	08017a6c 	.word	0x08017a6c
 800c2a8:	08017678 	.word	0x08017678
 800c2ac:	08017a98 	.word	0x08017a98
 800c2b0:	2000e628 	.word	0x2000e628
 800c2b4:	2000e63c 	.word	0x2000e63c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ba:	7d1b      	ldrb	r3, [r3, #20]
 800c2bc:	2b0a      	cmp	r3, #10
 800c2be:	d006      	beq.n	800c2ce <tcp_slowtmr+0x5c2>
 800c2c0:	4b2a      	ldr	r3, [pc, #168]	; (800c36c <tcp_slowtmr+0x660>)
 800c2c2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c2c6:	492a      	ldr	r1, [pc, #168]	; (800c370 <tcp_slowtmr+0x664>)
 800c2c8:	482a      	ldr	r0, [pc, #168]	; (800c374 <tcp_slowtmr+0x668>)
 800c2ca:	f008 fd39 	bl	8014d40 <iprintf>
    pcb_remove = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c2d4:	4b28      	ldr	r3, [pc, #160]	; (800c378 <tcp_slowtmr+0x66c>)
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2da:	6a1b      	ldr	r3, [r3, #32]
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	2bf0      	cmp	r3, #240	; 0xf0
 800c2e0:	d904      	bls.n	800c2ec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c2e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c2ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d02f      	beq.n	800c354 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c2f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2f6:	f000 fbf5 	bl	800cae4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d010      	beq.n	800c322 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c300:	4b1e      	ldr	r3, [pc, #120]	; (800c37c <tcp_slowtmr+0x670>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c306:	429a      	cmp	r2, r3
 800c308:	d106      	bne.n	800c318 <tcp_slowtmr+0x60c>
 800c30a:	4b18      	ldr	r3, [pc, #96]	; (800c36c <tcp_slowtmr+0x660>)
 800c30c:	f240 52af 	movw	r2, #1455	; 0x5af
 800c310:	491b      	ldr	r1, [pc, #108]	; (800c380 <tcp_slowtmr+0x674>)
 800c312:	4818      	ldr	r0, [pc, #96]	; (800c374 <tcp_slowtmr+0x668>)
 800c314:	f008 fd14 	bl	8014d40 <iprintf>
        prev->next = pcb->next;
 800c318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31a:	68da      	ldr	r2, [r3, #12]
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	60da      	str	r2, [r3, #12]
 800c320:	e00f      	b.n	800c342 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c322:	4b16      	ldr	r3, [pc, #88]	; (800c37c <tcp_slowtmr+0x670>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c328:	429a      	cmp	r2, r3
 800c32a:	d006      	beq.n	800c33a <tcp_slowtmr+0x62e>
 800c32c:	4b0f      	ldr	r3, [pc, #60]	; (800c36c <tcp_slowtmr+0x660>)
 800c32e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c332:	4914      	ldr	r1, [pc, #80]	; (800c384 <tcp_slowtmr+0x678>)
 800c334:	480f      	ldr	r0, [pc, #60]	; (800c374 <tcp_slowtmr+0x668>)
 800c336:	f008 fd03 	bl	8014d40 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	4a0f      	ldr	r2, [pc, #60]	; (800c37c <tcp_slowtmr+0x670>)
 800c340:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c344:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c34c:	69f8      	ldr	r0, [r7, #28]
 800c34e:	f7fe ff8f 	bl	800b270 <tcp_free>
 800c352:	e004      	b.n	800c35e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1a9      	bne.n	800c2b8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c364:	bf00      	nop
 800c366:	3730      	adds	r7, #48	; 0x30
 800c368:	46bd      	mov	sp, r7
 800c36a:	bdb0      	pop	{r4, r5, r7, pc}
 800c36c:	08017634 	.word	0x08017634
 800c370:	08017ac4 	.word	0x08017ac4
 800c374:	08017678 	.word	0x08017678
 800c378:	2000e630 	.word	0x2000e630
 800c37c:	2000e63c 	.word	0x2000e63c
 800c380:	08017af4 	.word	0x08017af4
 800c384:	08017b1c 	.word	0x08017b1c

0800c388 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c38e:	4b2d      	ldr	r3, [pc, #180]	; (800c444 <tcp_fasttmr+0xbc>)
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	b2da      	uxtb	r2, r3
 800c396:	4b2b      	ldr	r3, [pc, #172]	; (800c444 <tcp_fasttmr+0xbc>)
 800c398:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c39a:	4b2b      	ldr	r3, [pc, #172]	; (800c448 <tcp_fasttmr+0xc0>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c3a0:	e048      	b.n	800c434 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	7f9a      	ldrb	r2, [r3, #30]
 800c3a6:	4b27      	ldr	r3, [pc, #156]	; (800c444 <tcp_fasttmr+0xbc>)
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d03f      	beq.n	800c42e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c3ae:	4b25      	ldr	r3, [pc, #148]	; (800c444 <tcp_fasttmr+0xbc>)
 800c3b0:	781a      	ldrb	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	8b5b      	ldrh	r3, [r3, #26]
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d010      	beq.n	800c3e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	8b5b      	ldrh	r3, [r3, #26]
 800c3c6:	f043 0302 	orr.w	r3, r3, #2
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f003 ffef 	bl	80103b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	8b5b      	ldrh	r3, [r3, #26]
 800c3da:	f023 0303 	bic.w	r3, r3, #3
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	8b5b      	ldrh	r3, [r3, #26]
 800c3e8:	f003 0308 	and.w	r3, r3, #8
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d009      	beq.n	800c404 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	8b5b      	ldrh	r3, [r3, #26]
 800c3f4:	f023 0308 	bic.w	r3, r3, #8
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff f8c6 	bl	800b590 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00a      	beq.n	800c428 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c412:	4b0e      	ldr	r3, [pc, #56]	; (800c44c <tcp_fasttmr+0xc4>)
 800c414:	2200      	movs	r2, #0
 800c416:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f819 	bl	800c450 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c41e:	4b0b      	ldr	r3, [pc, #44]	; (800c44c <tcp_fasttmr+0xc4>)
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d000      	beq.n	800c428 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c426:	e7b8      	b.n	800c39a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	607b      	str	r3, [r7, #4]
 800c42c:	e002      	b.n	800c434 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1b3      	bne.n	800c3a2 <tcp_fasttmr+0x1a>
    }
  }
}
 800c43a:	bf00      	nop
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	2000424a 	.word	0x2000424a
 800c448:	2000e62c 	.word	0x2000e62c
 800c44c:	2000e628 	.word	0x2000e628

0800c450 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c450:	b590      	push	{r4, r7, lr}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d109      	bne.n	800c472 <tcp_process_refused_data+0x22>
 800c45e:	4b37      	ldr	r3, [pc, #220]	; (800c53c <tcp_process_refused_data+0xec>)
 800c460:	f240 6209 	movw	r2, #1545	; 0x609
 800c464:	4936      	ldr	r1, [pc, #216]	; (800c540 <tcp_process_refused_data+0xf0>)
 800c466:	4837      	ldr	r0, [pc, #220]	; (800c544 <tcp_process_refused_data+0xf4>)
 800c468:	f008 fc6a 	bl	8014d40 <iprintf>
 800c46c:	f06f 030f 	mvn.w	r3, #15
 800c470:	e060      	b.n	800c534 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c476:	7b5b      	ldrb	r3, [r3, #13]
 800c478:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c47e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00b      	beq.n	800c4a8 <tcp_process_refused_data+0x58>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	6918      	ldr	r0, [r3, #16]
 800c49a:	2300      	movs	r3, #0
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	6879      	ldr	r1, [r7, #4]
 800c4a0:	47a0      	blx	r4
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	73fb      	strb	r3, [r7, #15]
 800c4a6:	e007      	b.n	800c4b8 <tcp_process_refused_data+0x68>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	2000      	movs	r0, #0
 800c4b0:	f000 f8a2 	bl	800c5f8 <tcp_recv_null>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c4b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d12a      	bne.n	800c516 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	f003 0320 	and.w	r3, r3, #32
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d033      	beq.n	800c532 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c4d2:	d005      	beq.n	800c4e0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4d8:	3301      	adds	r3, #1
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00b      	beq.n	800c502 <tcp_process_refused_data+0xb2>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6918      	ldr	r0, [r3, #16]
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	6879      	ldr	r1, [r7, #4]
 800c4fa:	47a0      	blx	r4
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73fb      	strb	r3, [r7, #15]
 800c500:	e001      	b.n	800c506 <tcp_process_refused_data+0xb6>
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c50a:	f113 0f0d 	cmn.w	r3, #13
 800c50e:	d110      	bne.n	800c532 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c510:	f06f 030c 	mvn.w	r3, #12
 800c514:	e00e      	b.n	800c534 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c51a:	f113 0f0d 	cmn.w	r3, #13
 800c51e:	d102      	bne.n	800c526 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c520:	f06f 030c 	mvn.w	r3, #12
 800c524:	e006      	b.n	800c534 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c52c:	f06f 0304 	mvn.w	r3, #4
 800c530:	e000      	b.n	800c534 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3714      	adds	r7, #20
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd90      	pop	{r4, r7, pc}
 800c53c:	08017634 	.word	0x08017634
 800c540:	08017b44 	.word	0x08017b44
 800c544:	08017678 	.word	0x08017678

0800c548 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c550:	e007      	b.n	800c562 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f809 	bl	800c570 <tcp_seg_free>
    seg = next;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1f4      	bne.n	800c552 <tcp_segs_free+0xa>
  }
}
 800c568:	bf00      	nop
 800c56a:	3710      	adds	r7, #16
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00c      	beq.n	800c598 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d004      	beq.n	800c590 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fe fbb4 	bl	800acf8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	2003      	movs	r0, #3
 800c594:	f7fd fd10 	bl	8009fb8 <memp_free>
  }
}
 800c598:	bf00      	nop
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d106      	bne.n	800c5bc <tcp_seg_copy+0x1c>
 800c5ae:	4b0f      	ldr	r3, [pc, #60]	; (800c5ec <tcp_seg_copy+0x4c>)
 800c5b0:	f240 6282 	movw	r2, #1666	; 0x682
 800c5b4:	490e      	ldr	r1, [pc, #56]	; (800c5f0 <tcp_seg_copy+0x50>)
 800c5b6:	480f      	ldr	r0, [pc, #60]	; (800c5f4 <tcp_seg_copy+0x54>)
 800c5b8:	f008 fbc2 	bl	8014d40 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c5bc:	2003      	movs	r0, #3
 800c5be:	f7fd fca9 	bl	8009f14 <memp_malloc>
 800c5c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <tcp_seg_copy+0x2e>
    return NULL;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	e00a      	b.n	800c5e4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c5ce:	2210      	movs	r2, #16
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f008 fba1 	bl	8014d1a <memcpy>
  pbuf_ref(cseg->p);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe fc31 	bl	800ae44 <pbuf_ref>
  return cseg;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	08017634 	.word	0x08017634
 800c5f0:	08017b88 	.word	0x08017b88
 800c5f4:	08017678 	.word	0x08017678

0800c5f8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
 800c604:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d109      	bne.n	800c620 <tcp_recv_null+0x28>
 800c60c:	4b12      	ldr	r3, [pc, #72]	; (800c658 <tcp_recv_null+0x60>)
 800c60e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c612:	4912      	ldr	r1, [pc, #72]	; (800c65c <tcp_recv_null+0x64>)
 800c614:	4812      	ldr	r0, [pc, #72]	; (800c660 <tcp_recv_null+0x68>)
 800c616:	f008 fb93 	bl	8014d40 <iprintf>
 800c61a:	f06f 030f 	mvn.w	r3, #15
 800c61e:	e016      	b.n	800c64e <tcp_recv_null+0x56>

  if (p != NULL) {
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d009      	beq.n	800c63a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	891b      	ldrh	r3, [r3, #8]
 800c62a:	4619      	mov	r1, r3
 800c62c:	68b8      	ldr	r0, [r7, #8]
 800c62e:	f7ff f9bf 	bl	800b9b0 <tcp_recved>
    pbuf_free(p);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7fe fb60 	bl	800acf8 <pbuf_free>
 800c638:	e008      	b.n	800c64c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c63a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d104      	bne.n	800c64c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c642:	68b8      	ldr	r0, [r7, #8]
 800c644:	f7ff f80a 	bl	800b65c <tcp_close>
 800c648:	4603      	mov	r3, r0
 800c64a:	e000      	b.n	800c64e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	08017634 	.word	0x08017634
 800c65c:	08017ba4 	.word	0x08017ba4
 800c660:	08017678 	.word	0x08017678

0800c664 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b086      	sub	sp, #24
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c66e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c672:	2b00      	cmp	r3, #0
 800c674:	db01      	blt.n	800c67a <tcp_kill_prio+0x16>
 800c676:	79fb      	ldrb	r3, [r7, #7]
 800c678:	e000      	b.n	800c67c <tcp_kill_prio+0x18>
 800c67a:	237f      	movs	r3, #127	; 0x7f
 800c67c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c67e:	7afb      	ldrb	r3, [r7, #11]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d034      	beq.n	800c6ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c684:	7afb      	ldrb	r3, [r7, #11]
 800c686:	3b01      	subs	r3, #1
 800c688:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c692:	4b19      	ldr	r3, [pc, #100]	; (800c6f8 <tcp_kill_prio+0x94>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	617b      	str	r3, [r7, #20]
 800c698:	e01f      	b.n	800c6da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	7d5b      	ldrb	r3, [r3, #21]
 800c69e:	7afa      	ldrb	r2, [r7, #11]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d80c      	bhi.n	800c6be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c6a8:	7afa      	ldrb	r2, [r7, #11]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d112      	bne.n	800c6d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <tcp_kill_prio+0x98>)
 800c6b0:	681a      	ldr	r2, [r3, #0]
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d80a      	bhi.n	800c6d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c6be:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <tcp_kill_prio+0x98>)
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	1ad3      	subs	r3, r2, r3
 800c6c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	7d5b      	ldrb	r3, [r3, #21]
 800c6d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	617b      	str	r3, [r7, #20]
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1dc      	bne.n	800c69a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d004      	beq.n	800c6f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c6e6:	6938      	ldr	r0, [r7, #16]
 800c6e8:	f7ff f8fc 	bl	800b8e4 <tcp_abort>
 800c6ec:	e000      	b.n	800c6f0 <tcp_kill_prio+0x8c>
    return;
 800c6ee:	bf00      	nop
  }
}
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	2000e62c 	.word	0x2000e62c
 800c6fc:	2000e630 	.word	0x2000e630

0800c700 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
 800c706:	4603      	mov	r3, r0
 800c708:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c70a:	79fb      	ldrb	r3, [r7, #7]
 800c70c:	2b08      	cmp	r3, #8
 800c70e:	d009      	beq.n	800c724 <tcp_kill_state+0x24>
 800c710:	79fb      	ldrb	r3, [r7, #7]
 800c712:	2b09      	cmp	r3, #9
 800c714:	d006      	beq.n	800c724 <tcp_kill_state+0x24>
 800c716:	4b1a      	ldr	r3, [pc, #104]	; (800c780 <tcp_kill_state+0x80>)
 800c718:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c71c:	4919      	ldr	r1, [pc, #100]	; (800c784 <tcp_kill_state+0x84>)
 800c71e:	481a      	ldr	r0, [pc, #104]	; (800c788 <tcp_kill_state+0x88>)
 800c720:	f008 fb0e 	bl	8014d40 <iprintf>

  inactivity = 0;
 800c724:	2300      	movs	r3, #0
 800c726:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c728:	2300      	movs	r3, #0
 800c72a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c72c:	4b17      	ldr	r3, [pc, #92]	; (800c78c <tcp_kill_state+0x8c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	617b      	str	r3, [r7, #20]
 800c732:	e017      	b.n	800c764 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	7d1b      	ldrb	r3, [r3, #20]
 800c738:	79fa      	ldrb	r2, [r7, #7]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d10f      	bne.n	800c75e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c73e:	4b14      	ldr	r3, [pc, #80]	; (800c790 <tcp_kill_state+0x90>)
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d807      	bhi.n	800c75e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <tcp_kill_state+0x90>)
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	6a1b      	ldr	r3, [r3, #32]
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	68db      	ldr	r3, [r3, #12]
 800c762:	617b      	str	r3, [r7, #20]
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1e4      	bne.n	800c734 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c770:	2100      	movs	r1, #0
 800c772:	6938      	ldr	r0, [r7, #16]
 800c774:	f7fe fff8 	bl	800b768 <tcp_abandon>
  }
}
 800c778:	bf00      	nop
 800c77a:	3718      	adds	r7, #24
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	08017634 	.word	0x08017634
 800c784:	08017bc0 	.word	0x08017bc0
 800c788:	08017678 	.word	0x08017678
 800c78c:	2000e62c 	.word	0x2000e62c
 800c790:	2000e630 	.word	0x2000e630

0800c794 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7a2:	4b12      	ldr	r3, [pc, #72]	; (800c7ec <tcp_kill_timewait+0x58>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	60fb      	str	r3, [r7, #12]
 800c7a8:	e012      	b.n	800c7d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c7aa:	4b11      	ldr	r3, [pc, #68]	; (800c7f0 <tcp_kill_timewait+0x5c>)
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6a1b      	ldr	r3, [r3, #32]
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d807      	bhi.n	800c7ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c7ba:	4b0d      	ldr	r3, [pc, #52]	; (800c7f0 <tcp_kill_timewait+0x5c>)
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	68db      	ldr	r3, [r3, #12]
 800c7ce:	60fb      	str	r3, [r7, #12]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1e9      	bne.n	800c7aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c7dc:	68b8      	ldr	r0, [r7, #8]
 800c7de:	f7ff f881 	bl	800b8e4 <tcp_abort>
  }
}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	2000e63c 	.word	0x2000e63c
 800c7f0:	2000e630 	.word	0x2000e630

0800c7f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c7fa:	4b10      	ldr	r3, [pc, #64]	; (800c83c <tcp_handle_closepend+0x48>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c800:	e014      	b.n	800c82c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	8b5b      	ldrh	r3, [r3, #26]
 800c80c:	f003 0308 	and.w	r3, r3, #8
 800c810:	2b00      	cmp	r3, #0
 800c812:	d009      	beq.n	800c828 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	8b5b      	ldrh	r3, [r3, #26]
 800c818:	f023 0308 	bic.w	r3, r3, #8
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7fe feb4 	bl	800b590 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1e7      	bne.n	800c802 <tcp_handle_closepend+0xe>
  }
}
 800c832:	bf00      	nop
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	2000e62c 	.word	0x2000e62c

0800c840 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	4603      	mov	r3, r0
 800c848:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c84a:	2001      	movs	r0, #1
 800c84c:	f7fd fb62 	bl	8009f14 <memp_malloc>
 800c850:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d126      	bne.n	800c8a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c858:	f7ff ffcc 	bl	800c7f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c85c:	f7ff ff9a 	bl	800c794 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c860:	2001      	movs	r0, #1
 800c862:	f7fd fb57 	bl	8009f14 <memp_malloc>
 800c866:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d11b      	bne.n	800c8a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c86e:	2009      	movs	r0, #9
 800c870:	f7ff ff46 	bl	800c700 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c874:	2001      	movs	r0, #1
 800c876:	f7fd fb4d 	bl	8009f14 <memp_malloc>
 800c87a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d111      	bne.n	800c8a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c882:	2008      	movs	r0, #8
 800c884:	f7ff ff3c 	bl	800c700 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c888:	2001      	movs	r0, #1
 800c88a:	f7fd fb43 	bl	8009f14 <memp_malloc>
 800c88e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d107      	bne.n	800c8a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c896:	79fb      	ldrb	r3, [r7, #7]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff fee3 	bl	800c664 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c89e:	2001      	movs	r0, #1
 800c8a0:	f7fd fb38 	bl	8009f14 <memp_malloc>
 800c8a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d03f      	beq.n	800c92c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c8ac:	229c      	movs	r2, #156	; 0x9c
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f008 fa3d 	bl	8014d30 <memset>
    pcb->prio = prio;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	79fa      	ldrb	r2, [r7, #7]
 800c8ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c8c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c8cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	22ff      	movs	r2, #255	; 0xff
 800c8da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c8e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2206      	movs	r2, #6
 800c8e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2206      	movs	r2, #6
 800c8f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c902:	4b0d      	ldr	r3, [pc, #52]	; (800c938 <tcp_alloc+0xf8>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c90a:	4b0c      	ldr	r3, [pc, #48]	; (800c93c <tcp_alloc+0xfc>)
 800c90c:	781a      	ldrb	r2, [r3, #0]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c918:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4a08      	ldr	r2, [pc, #32]	; (800c940 <tcp_alloc+0x100>)
 800c920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	4a07      	ldr	r2, [pc, #28]	; (800c944 <tcp_alloc+0x104>)
 800c928:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c92c:	68fb      	ldr	r3, [r7, #12]
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3710      	adds	r7, #16
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	2000e630 	.word	0x2000e630
 800c93c:	2000424a 	.word	0x2000424a
 800c940:	0800c5f9 	.word	0x0800c5f9
 800c944:	006ddd00 	.word	0x006ddd00

0800c948 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	4603      	mov	r3, r0
 800c950:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800c952:	2040      	movs	r0, #64	; 0x40
 800c954:	f7ff ff74 	bl	800c840 <tcp_alloc>
 800c958:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800c95a:	68fb      	ldr	r3, [r7, #12]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3710      	adds	r7, #16
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	611a      	str	r2, [r3, #16]
  }
}
 800c97a:	bf00      	nop
 800c97c:	370c      	adds	r7, #12
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr
	...

0800c988 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00e      	beq.n	800c9b6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	7d1b      	ldrb	r3, [r3, #20]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d106      	bne.n	800c9ae <tcp_recv+0x26>
 800c9a0:	4b07      	ldr	r3, [pc, #28]	; (800c9c0 <tcp_recv+0x38>)
 800c9a2:	f240 72df 	movw	r2, #2015	; 0x7df
 800c9a6:	4907      	ldr	r1, [pc, #28]	; (800c9c4 <tcp_recv+0x3c>)
 800c9a8:	4807      	ldr	r0, [pc, #28]	; (800c9c8 <tcp_recv+0x40>)
 800c9aa:	f008 f9c9 	bl	8014d40 <iprintf>
    pcb->recv = recv;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800c9b6:	bf00      	nop
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	08017634 	.word	0x08017634
 800c9c4:	08017bd0 	.word	0x08017bd0
 800c9c8:	08017678 	.word	0x08017678

0800c9cc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00e      	beq.n	800c9fa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7d1b      	ldrb	r3, [r3, #20]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d106      	bne.n	800c9f2 <tcp_sent+0x26>
 800c9e4:	4b07      	ldr	r3, [pc, #28]	; (800ca04 <tcp_sent+0x38>)
 800c9e6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800c9ea:	4907      	ldr	r1, [pc, #28]	; (800ca08 <tcp_sent+0x3c>)
 800c9ec:	4807      	ldr	r0, [pc, #28]	; (800ca0c <tcp_sent+0x40>)
 800c9ee:	f008 f9a7 	bl	8014d40 <iprintf>
    pcb->sent = sent;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	683a      	ldr	r2, [r7, #0]
 800c9f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800c9fa:	bf00      	nop
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	08017634 	.word	0x08017634
 800ca08:	08017bf8 	.word	0x08017bf8
 800ca0c:	08017678 	.word	0x08017678

0800ca10 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00e      	beq.n	800ca3e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	7d1b      	ldrb	r3, [r3, #20]
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d106      	bne.n	800ca36 <tcp_err+0x26>
 800ca28:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <tcp_err+0x38>)
 800ca2a:	f640 020d 	movw	r2, #2061	; 0x80d
 800ca2e:	4907      	ldr	r1, [pc, #28]	; (800ca4c <tcp_err+0x3c>)
 800ca30:	4807      	ldr	r0, [pc, #28]	; (800ca50 <tcp_err+0x40>)
 800ca32:	f008 f985 	bl	8014d40 <iprintf>
    pcb->errf = err;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ca3e:	bf00      	nop
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	08017634 	.word	0x08017634
 800ca4c:	08017c20 	.word	0x08017c20
 800ca50:	08017678 	.word	0x08017678

0800ca54 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d008      	beq.n	800ca76 <tcp_accept+0x22>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	7d1b      	ldrb	r3, [r3, #20]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d104      	bne.n	800ca76 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	619a      	str	r2, [r3, #24]
  }
}
 800ca76:	bf00      	nop
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
	...

0800ca84 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d107      	bne.n	800caa8 <tcp_poll+0x24>
 800ca98:	4b0e      	ldr	r3, [pc, #56]	; (800cad4 <tcp_poll+0x50>)
 800ca9a:	f640 023d 	movw	r2, #2109	; 0x83d
 800ca9e:	490e      	ldr	r1, [pc, #56]	; (800cad8 <tcp_poll+0x54>)
 800caa0:	480e      	ldr	r0, [pc, #56]	; (800cadc <tcp_poll+0x58>)
 800caa2:	f008 f94d 	bl	8014d40 <iprintf>
 800caa6:	e011      	b.n	800cacc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	7d1b      	ldrb	r3, [r3, #20]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d106      	bne.n	800cabe <tcp_poll+0x3a>
 800cab0:	4b08      	ldr	r3, [pc, #32]	; (800cad4 <tcp_poll+0x50>)
 800cab2:	f640 023e 	movw	r2, #2110	; 0x83e
 800cab6:	490a      	ldr	r1, [pc, #40]	; (800cae0 <tcp_poll+0x5c>)
 800cab8:	4808      	ldr	r0, [pc, #32]	; (800cadc <tcp_poll+0x58>)
 800caba:	f008 f941 	bl	8014d40 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	79fa      	ldrb	r2, [r7, #7]
 800caca:	775a      	strb	r2, [r3, #29]
}
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	08017634 	.word	0x08017634
 800cad8:	08017c48 	.word	0x08017c48
 800cadc:	08017678 	.word	0x08017678
 800cae0:	08017c60 	.word	0x08017c60

0800cae4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d107      	bne.n	800cb02 <tcp_pcb_purge+0x1e>
 800caf2:	4b21      	ldr	r3, [pc, #132]	; (800cb78 <tcp_pcb_purge+0x94>)
 800caf4:	f640 0251 	movw	r2, #2129	; 0x851
 800caf8:	4920      	ldr	r1, [pc, #128]	; (800cb7c <tcp_pcb_purge+0x98>)
 800cafa:	4821      	ldr	r0, [pc, #132]	; (800cb80 <tcp_pcb_purge+0x9c>)
 800cafc:	f008 f920 	bl	8014d40 <iprintf>
 800cb00:	e037      	b.n	800cb72 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	7d1b      	ldrb	r3, [r3, #20]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d033      	beq.n	800cb72 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cb0e:	2b0a      	cmp	r3, #10
 800cb10:	d02f      	beq.n	800cb72 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d02b      	beq.n	800cb72 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d007      	beq.n	800cb32 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fe f8e6 	bl	800acf8 <pbuf_free>
      pcb->refused_data = NULL;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d002      	beq.n	800cb40 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f986 	bl	800ce4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb46:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7ff fcfb 	bl	800c548 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff fcf6 	bl	800c548 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	66da      	str	r2, [r3, #108]	; 0x6c
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}
 800cb78:	08017634 	.word	0x08017634
 800cb7c:	08017c80 	.word	0x08017c80
 800cb80:	08017678 	.word	0x08017678

0800cb84 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d106      	bne.n	800cba2 <tcp_pcb_remove+0x1e>
 800cb94:	4b3e      	ldr	r3, [pc, #248]	; (800cc90 <tcp_pcb_remove+0x10c>)
 800cb96:	f640 0283 	movw	r2, #2179	; 0x883
 800cb9a:	493e      	ldr	r1, [pc, #248]	; (800cc94 <tcp_pcb_remove+0x110>)
 800cb9c:	483e      	ldr	r0, [pc, #248]	; (800cc98 <tcp_pcb_remove+0x114>)
 800cb9e:	f008 f8cf 	bl	8014d40 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <tcp_pcb_remove+0x32>
 800cba8:	4b39      	ldr	r3, [pc, #228]	; (800cc90 <tcp_pcb_remove+0x10c>)
 800cbaa:	f640 0284 	movw	r2, #2180	; 0x884
 800cbae:	493b      	ldr	r1, [pc, #236]	; (800cc9c <tcp_pcb_remove+0x118>)
 800cbb0:	4839      	ldr	r0, [pc, #228]	; (800cc98 <tcp_pcb_remove+0x114>)
 800cbb2:	f008 f8c5 	bl	8014d40 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	683a      	ldr	r2, [r7, #0]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d105      	bne.n	800cbcc <tcp_pcb_remove+0x48>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	601a      	str	r2, [r3, #0]
 800cbca:	e013      	b.n	800cbf4 <tcp_pcb_remove+0x70>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	60fb      	str	r3, [r7, #12]
 800cbd2:	e00c      	b.n	800cbee <tcp_pcb_remove+0x6a>
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	683a      	ldr	r2, [r7, #0]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d104      	bne.n	800cbe8 <tcp_pcb_remove+0x64>
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	68da      	ldr	r2, [r3, #12]
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	60da      	str	r2, [r3, #12]
 800cbe6:	e005      	b.n	800cbf4 <tcp_pcb_remove+0x70>
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	60fb      	str	r3, [r7, #12]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1ef      	bne.n	800cbd4 <tcp_pcb_remove+0x50>
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cbfa:	6838      	ldr	r0, [r7, #0]
 800cbfc:	f7ff ff72 	bl	800cae4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	7d1b      	ldrb	r3, [r3, #20]
 800cc04:	2b0a      	cmp	r3, #10
 800cc06:	d013      	beq.n	800cc30 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d00f      	beq.n	800cc30 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	8b5b      	ldrh	r3, [r3, #26]
 800cc14:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d009      	beq.n	800cc30 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	8b5b      	ldrh	r3, [r3, #26]
 800cc20:	f043 0302 	orr.w	r3, r3, #2
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cc2a:	6838      	ldr	r0, [r7, #0]
 800cc2c:	f003 fbc2 	bl	80103b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	7d1b      	ldrb	r3, [r3, #20]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d020      	beq.n	800cc7a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d006      	beq.n	800cc4e <tcp_pcb_remove+0xca>
 800cc40:	4b13      	ldr	r3, [pc, #76]	; (800cc90 <tcp_pcb_remove+0x10c>)
 800cc42:	f640 0293 	movw	r2, #2195	; 0x893
 800cc46:	4916      	ldr	r1, [pc, #88]	; (800cca0 <tcp_pcb_remove+0x11c>)
 800cc48:	4813      	ldr	r0, [pc, #76]	; (800cc98 <tcp_pcb_remove+0x114>)
 800cc4a:	f008 f879 	bl	8014d40 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d006      	beq.n	800cc64 <tcp_pcb_remove+0xe0>
 800cc56:	4b0e      	ldr	r3, [pc, #56]	; (800cc90 <tcp_pcb_remove+0x10c>)
 800cc58:	f640 0294 	movw	r2, #2196	; 0x894
 800cc5c:	4911      	ldr	r1, [pc, #68]	; (800cca4 <tcp_pcb_remove+0x120>)
 800cc5e:	480e      	ldr	r0, [pc, #56]	; (800cc98 <tcp_pcb_remove+0x114>)
 800cc60:	f008 f86e 	bl	8014d40 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d006      	beq.n	800cc7a <tcp_pcb_remove+0xf6>
 800cc6c:	4b08      	ldr	r3, [pc, #32]	; (800cc90 <tcp_pcb_remove+0x10c>)
 800cc6e:	f640 0296 	movw	r2, #2198	; 0x896
 800cc72:	490d      	ldr	r1, [pc, #52]	; (800cca8 <tcp_pcb_remove+0x124>)
 800cc74:	4808      	ldr	r0, [pc, #32]	; (800cc98 <tcp_pcb_remove+0x114>)
 800cc76:	f008 f863 	bl	8014d40 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	2200      	movs	r2, #0
 800cc84:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cc86:	bf00      	nop
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	08017634 	.word	0x08017634
 800cc94:	08017c9c 	.word	0x08017c9c
 800cc98:	08017678 	.word	0x08017678
 800cc9c:	08017cb8 	.word	0x08017cb8
 800cca0:	08017cd8 	.word	0x08017cd8
 800cca4:	08017cf0 	.word	0x08017cf0
 800cca8:	08017d0c 	.word	0x08017d0c

0800ccac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d106      	bne.n	800ccc8 <tcp_next_iss+0x1c>
 800ccba:	4b0a      	ldr	r3, [pc, #40]	; (800cce4 <tcp_next_iss+0x38>)
 800ccbc:	f640 02af 	movw	r2, #2223	; 0x8af
 800ccc0:	4909      	ldr	r1, [pc, #36]	; (800cce8 <tcp_next_iss+0x3c>)
 800ccc2:	480a      	ldr	r0, [pc, #40]	; (800ccec <tcp_next_iss+0x40>)
 800ccc4:	f008 f83c 	bl	8014d40 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ccc8:	4b09      	ldr	r3, [pc, #36]	; (800ccf0 <tcp_next_iss+0x44>)
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	4b09      	ldr	r3, [pc, #36]	; (800ccf4 <tcp_next_iss+0x48>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	4a07      	ldr	r2, [pc, #28]	; (800ccf0 <tcp_next_iss+0x44>)
 800ccd4:	6013      	str	r3, [r2, #0]
  return iss;
 800ccd6:	4b06      	ldr	r3, [pc, #24]	; (800ccf0 <tcp_next_iss+0x44>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	08017634 	.word	0x08017634
 800cce8:	08017d24 	.word	0x08017d24
 800ccec:	08017678 	.word	0x08017678
 800ccf0:	20000014 	.word	0x20000014
 800ccf4:	2000e630 	.word	0x2000e630

0800ccf8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b086      	sub	sp, #24
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	4603      	mov	r3, r0
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
 800cd04:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d106      	bne.n	800cd1a <tcp_eff_send_mss_netif+0x22>
 800cd0c:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <tcp_eff_send_mss_netif+0x68>)
 800cd0e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800cd12:	4914      	ldr	r1, [pc, #80]	; (800cd64 <tcp_eff_send_mss_netif+0x6c>)
 800cd14:	4814      	ldr	r0, [pc, #80]	; (800cd68 <tcp_eff_send_mss_netif+0x70>)
 800cd16:	f008 f813 	bl	8014d40 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cd20:	89fb      	ldrh	r3, [r7, #14]
 800cd22:	e019      	b.n	800cd58 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd28:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cd2a:	8afb      	ldrh	r3, [r7, #22]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d012      	beq.n	800cd56 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cd30:	2328      	movs	r3, #40	; 0x28
 800cd32:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cd34:	8afa      	ldrh	r2, [r7, #22]
 800cd36:	8abb      	ldrh	r3, [r7, #20]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d904      	bls.n	800cd46 <tcp_eff_send_mss_netif+0x4e>
 800cd3c:	8afa      	ldrh	r2, [r7, #22]
 800cd3e:	8abb      	ldrh	r3, [r7, #20]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	e000      	b.n	800cd48 <tcp_eff_send_mss_netif+0x50>
 800cd46:	2300      	movs	r3, #0
 800cd48:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cd4a:	8a7a      	ldrh	r2, [r7, #18]
 800cd4c:	89fb      	ldrh	r3, [r7, #14]
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	bf28      	it	cs
 800cd52:	4613      	movcs	r3, r2
 800cd54:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cd56:	89fb      	ldrh	r3, [r7, #14]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3718      	adds	r7, #24
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	08017634 	.word	0x08017634
 800cd64:	08017d40 	.word	0x08017d40
 800cd68:	08017678 	.word	0x08017678

0800cd6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d119      	bne.n	800cdb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cd80:	4b10      	ldr	r3, [pc, #64]	; (800cdc4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cd82:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cd86:	4910      	ldr	r1, [pc, #64]	; (800cdc8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cd88:	4810      	ldr	r0, [pc, #64]	; (800cdcc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cd8a:	f007 ffd9 	bl	8014d40 <iprintf>

  while (pcb != NULL) {
 800cd8e:	e011      	b.n	800cdb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681a      	ldr	r2, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d108      	bne.n	800cdae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7fe fd9e 	bl	800b8e4 <tcp_abort>
      pcb = next;
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	60fb      	str	r3, [r7, #12]
 800cdac:	e002      	b.n	800cdb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1ea      	bne.n	800cd90 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cdba:	bf00      	nop
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	08017634 	.word	0x08017634
 800cdc8:	08017d68 	.word	0x08017d68
 800cdcc:	08017678 	.word	0x08017678

0800cdd0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d02a      	beq.n	800ce36 <tcp_netif_ip_addr_changed+0x66>
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d026      	beq.n	800ce36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cde8:	4b15      	ldr	r3, [pc, #84]	; (800ce40 <tcp_netif_ip_addr_changed+0x70>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4619      	mov	r1, r3
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7ff ffbc 	bl	800cd6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cdf4:	4b13      	ldr	r3, [pc, #76]	; (800ce44 <tcp_netif_ip_addr_changed+0x74>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7ff ffb6 	bl	800cd6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d017      	beq.n	800ce36 <tcp_netif_ip_addr_changed+0x66>
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d013      	beq.n	800ce36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ce0e:	4b0e      	ldr	r3, [pc, #56]	; (800ce48 <tcp_netif_ip_addr_changed+0x78>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	e00c      	b.n	800ce30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d103      	bne.n	800ce2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1ef      	bne.n	800ce16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ce36:	bf00      	nop
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	2000e62c 	.word	0x2000e62c
 800ce44:	2000e638 	.word	0x2000e638
 800ce48:	2000e634 	.word	0x2000e634

0800ce4c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d007      	beq.n	800ce6c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff fb71 	bl	800c548 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ce74:	b590      	push	{r4, r7, lr}
 800ce76:	b08d      	sub	sp, #52	; 0x34
 800ce78:	af04      	add	r7, sp, #16
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d105      	bne.n	800ce90 <tcp_input+0x1c>
 800ce84:	4b9b      	ldr	r3, [pc, #620]	; (800d0f4 <tcp_input+0x280>)
 800ce86:	2283      	movs	r2, #131	; 0x83
 800ce88:	499b      	ldr	r1, [pc, #620]	; (800d0f8 <tcp_input+0x284>)
 800ce8a:	489c      	ldr	r0, [pc, #624]	; (800d0fc <tcp_input+0x288>)
 800ce8c:	f007 ff58 	bl	8014d40 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	4a9a      	ldr	r2, [pc, #616]	; (800d100 <tcp_input+0x28c>)
 800ce96:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	895b      	ldrh	r3, [r3, #10]
 800ce9c:	2b13      	cmp	r3, #19
 800ce9e:	f240 83c4 	bls.w	800d62a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cea2:	4b98      	ldr	r3, [pc, #608]	; (800d104 <tcp_input+0x290>)
 800cea4:	695a      	ldr	r2, [r3, #20]
 800cea6:	4b97      	ldr	r3, [pc, #604]	; (800d104 <tcp_input+0x290>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4610      	mov	r0, r2
 800ceae:	f006 fc6d 	bl	801378c <ip4_addr_isbroadcast_u32>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	f040 83ba 	bne.w	800d62e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ceba:	4b92      	ldr	r3, [pc, #584]	; (800d104 <tcp_input+0x290>)
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cec2:	2be0      	cmp	r3, #224	; 0xe0
 800cec4:	f000 83b3 	beq.w	800d62e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cec8:	4b8d      	ldr	r3, [pc, #564]	; (800d100 <tcp_input+0x28c>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	899b      	ldrh	r3, [r3, #12]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fc fb69 	bl	80095a8 <lwip_htons>
 800ced6:	4603      	mov	r3, r0
 800ced8:	0b1b      	lsrs	r3, r3, #12
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cee2:	7cbb      	ldrb	r3, [r7, #18]
 800cee4:	2b13      	cmp	r3, #19
 800cee6:	f240 83a2 	bls.w	800d62e <tcp_input+0x7ba>
 800ceea:	7cbb      	ldrb	r3, [r7, #18]
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	891b      	ldrh	r3, [r3, #8]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	f200 839b 	bhi.w	800d62e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cef8:	7cbb      	ldrb	r3, [r7, #18]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	3b14      	subs	r3, #20
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	4b81      	ldr	r3, [pc, #516]	; (800d108 <tcp_input+0x294>)
 800cf02:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cf04:	4b81      	ldr	r3, [pc, #516]	; (800d10c <tcp_input+0x298>)
 800cf06:	2200      	movs	r2, #0
 800cf08:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	895a      	ldrh	r2, [r3, #10]
 800cf0e:	7cbb      	ldrb	r3, [r7, #18]
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d309      	bcc.n	800cf2a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cf16:	4b7c      	ldr	r3, [pc, #496]	; (800d108 <tcp_input+0x294>)
 800cf18:	881a      	ldrh	r2, [r3, #0]
 800cf1a:	4b7d      	ldr	r3, [pc, #500]	; (800d110 <tcp_input+0x29c>)
 800cf1c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cf1e:	7cbb      	ldrb	r3, [r7, #18]
 800cf20:	4619      	mov	r1, r3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f7fd fe62 	bl	800abec <pbuf_remove_header>
 800cf28:	e04e      	b.n	800cfc8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d105      	bne.n	800cf3e <tcp_input+0xca>
 800cf32:	4b70      	ldr	r3, [pc, #448]	; (800d0f4 <tcp_input+0x280>)
 800cf34:	22c2      	movs	r2, #194	; 0xc2
 800cf36:	4977      	ldr	r1, [pc, #476]	; (800d114 <tcp_input+0x2a0>)
 800cf38:	4870      	ldr	r0, [pc, #448]	; (800d0fc <tcp_input+0x288>)
 800cf3a:	f007 ff01 	bl	8014d40 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cf3e:	2114      	movs	r1, #20
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7fd fe53 	bl	800abec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	895a      	ldrh	r2, [r3, #10]
 800cf4a:	4b71      	ldr	r3, [pc, #452]	; (800d110 <tcp_input+0x29c>)
 800cf4c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cf4e:	4b6e      	ldr	r3, [pc, #440]	; (800d108 <tcp_input+0x294>)
 800cf50:	881a      	ldrh	r2, [r3, #0]
 800cf52:	4b6f      	ldr	r3, [pc, #444]	; (800d110 <tcp_input+0x29c>)
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cf5a:	4b6d      	ldr	r3, [pc, #436]	; (800d110 <tcp_input+0x29c>)
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7fd fe43 	bl	800abec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	895b      	ldrh	r3, [r3, #10]
 800cf6c:	8a3a      	ldrh	r2, [r7, #16]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	f200 835f 	bhi.w	800d632 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	4a64      	ldr	r2, [pc, #400]	; (800d10c <tcp_input+0x298>)
 800cf7c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	8a3a      	ldrh	r2, [r7, #16]
 800cf84:	4611      	mov	r1, r2
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fd fe30 	bl	800abec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	891a      	ldrh	r2, [r3, #8]
 800cf90:	8a3b      	ldrh	r3, [r7, #16]
 800cf92:	1ad3      	subs	r3, r2, r3
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	895b      	ldrh	r3, [r3, #10]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d005      	beq.n	800cfae <tcp_input+0x13a>
 800cfa2:	4b54      	ldr	r3, [pc, #336]	; (800d0f4 <tcp_input+0x280>)
 800cfa4:	22df      	movs	r2, #223	; 0xdf
 800cfa6:	495c      	ldr	r1, [pc, #368]	; (800d118 <tcp_input+0x2a4>)
 800cfa8:	4854      	ldr	r0, [pc, #336]	; (800d0fc <tcp_input+0x288>)
 800cfaa:	f007 fec9 	bl	8014d40 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	891a      	ldrh	r2, [r3, #8]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	891b      	ldrh	r3, [r3, #8]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d005      	beq.n	800cfc8 <tcp_input+0x154>
 800cfbc:	4b4d      	ldr	r3, [pc, #308]	; (800d0f4 <tcp_input+0x280>)
 800cfbe:	22e0      	movs	r2, #224	; 0xe0
 800cfc0:	4956      	ldr	r1, [pc, #344]	; (800d11c <tcp_input+0x2a8>)
 800cfc2:	484e      	ldr	r0, [pc, #312]	; (800d0fc <tcp_input+0x288>)
 800cfc4:	f007 febc 	bl	8014d40 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cfc8:	4b4d      	ldr	r3, [pc, #308]	; (800d100 <tcp_input+0x28c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	4b4b      	ldr	r3, [pc, #300]	; (800d100 <tcp_input+0x28c>)
 800cfd2:	681c      	ldr	r4, [r3, #0]
 800cfd4:	4610      	mov	r0, r2
 800cfd6:	f7fc fae7 	bl	80095a8 <lwip_htons>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cfde:	4b48      	ldr	r3, [pc, #288]	; (800d100 <tcp_input+0x28c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	885b      	ldrh	r3, [r3, #2]
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	4b46      	ldr	r3, [pc, #280]	; (800d100 <tcp_input+0x28c>)
 800cfe8:	681c      	ldr	r4, [r3, #0]
 800cfea:	4610      	mov	r0, r2
 800cfec:	f7fc fadc 	bl	80095a8 <lwip_htons>
 800cff0:	4603      	mov	r3, r0
 800cff2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cff4:	4b42      	ldr	r3, [pc, #264]	; (800d100 <tcp_input+0x28c>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	685a      	ldr	r2, [r3, #4]
 800cffa:	4b41      	ldr	r3, [pc, #260]	; (800d100 <tcp_input+0x28c>)
 800cffc:	681c      	ldr	r4, [r3, #0]
 800cffe:	4610      	mov	r0, r2
 800d000:	f7fc fae7 	bl	80095d2 <lwip_htonl>
 800d004:	4603      	mov	r3, r0
 800d006:	6063      	str	r3, [r4, #4]
 800d008:	6863      	ldr	r3, [r4, #4]
 800d00a:	4a45      	ldr	r2, [pc, #276]	; (800d120 <tcp_input+0x2ac>)
 800d00c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d00e:	4b3c      	ldr	r3, [pc, #240]	; (800d100 <tcp_input+0x28c>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	689a      	ldr	r2, [r3, #8]
 800d014:	4b3a      	ldr	r3, [pc, #232]	; (800d100 <tcp_input+0x28c>)
 800d016:	681c      	ldr	r4, [r3, #0]
 800d018:	4610      	mov	r0, r2
 800d01a:	f7fc fada 	bl	80095d2 <lwip_htonl>
 800d01e:	4603      	mov	r3, r0
 800d020:	60a3      	str	r3, [r4, #8]
 800d022:	68a3      	ldr	r3, [r4, #8]
 800d024:	4a3f      	ldr	r2, [pc, #252]	; (800d124 <tcp_input+0x2b0>)
 800d026:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d028:	4b35      	ldr	r3, [pc, #212]	; (800d100 <tcp_input+0x28c>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	89db      	ldrh	r3, [r3, #14]
 800d02e:	b29a      	uxth	r2, r3
 800d030:	4b33      	ldr	r3, [pc, #204]	; (800d100 <tcp_input+0x28c>)
 800d032:	681c      	ldr	r4, [r3, #0]
 800d034:	4610      	mov	r0, r2
 800d036:	f7fc fab7 	bl	80095a8 <lwip_htons>
 800d03a:	4603      	mov	r3, r0
 800d03c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d03e:	4b30      	ldr	r3, [pc, #192]	; (800d100 <tcp_input+0x28c>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	899b      	ldrh	r3, [r3, #12]
 800d044:	b29b      	uxth	r3, r3
 800d046:	4618      	mov	r0, r3
 800d048:	f7fc faae 	bl	80095a8 <lwip_htons>
 800d04c:	4603      	mov	r3, r0
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d054:	b2da      	uxtb	r2, r3
 800d056:	4b34      	ldr	r3, [pc, #208]	; (800d128 <tcp_input+0x2b4>)
 800d058:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	891a      	ldrh	r2, [r3, #8]
 800d05e:	4b33      	ldr	r3, [pc, #204]	; (800d12c <tcp_input+0x2b8>)
 800d060:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d062:	4b31      	ldr	r3, [pc, #196]	; (800d128 <tcp_input+0x2b4>)
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	f003 0303 	and.w	r3, r3, #3
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00c      	beq.n	800d088 <tcp_input+0x214>
    tcplen++;
 800d06e:	4b2f      	ldr	r3, [pc, #188]	; (800d12c <tcp_input+0x2b8>)
 800d070:	881b      	ldrh	r3, [r3, #0]
 800d072:	3301      	adds	r3, #1
 800d074:	b29a      	uxth	r2, r3
 800d076:	4b2d      	ldr	r3, [pc, #180]	; (800d12c <tcp_input+0x2b8>)
 800d078:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	891a      	ldrh	r2, [r3, #8]
 800d07e:	4b2b      	ldr	r3, [pc, #172]	; (800d12c <tcp_input+0x2b8>)
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	429a      	cmp	r2, r3
 800d084:	f200 82d7 	bhi.w	800d636 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d088:	2300      	movs	r3, #0
 800d08a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d08c:	4b28      	ldr	r3, [pc, #160]	; (800d130 <tcp_input+0x2bc>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	61fb      	str	r3, [r7, #28]
 800d092:	e09d      	b.n	800d1d0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	7d1b      	ldrb	r3, [r3, #20]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d105      	bne.n	800d0a8 <tcp_input+0x234>
 800d09c:	4b15      	ldr	r3, [pc, #84]	; (800d0f4 <tcp_input+0x280>)
 800d09e:	22fb      	movs	r2, #251	; 0xfb
 800d0a0:	4924      	ldr	r1, [pc, #144]	; (800d134 <tcp_input+0x2c0>)
 800d0a2:	4816      	ldr	r0, [pc, #88]	; (800d0fc <tcp_input+0x288>)
 800d0a4:	f007 fe4c 	bl	8014d40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	7d1b      	ldrb	r3, [r3, #20]
 800d0ac:	2b0a      	cmp	r3, #10
 800d0ae:	d105      	bne.n	800d0bc <tcp_input+0x248>
 800d0b0:	4b10      	ldr	r3, [pc, #64]	; (800d0f4 <tcp_input+0x280>)
 800d0b2:	22fc      	movs	r2, #252	; 0xfc
 800d0b4:	4920      	ldr	r1, [pc, #128]	; (800d138 <tcp_input+0x2c4>)
 800d0b6:	4811      	ldr	r0, [pc, #68]	; (800d0fc <tcp_input+0x288>)
 800d0b8:	f007 fe42 	bl	8014d40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	7d1b      	ldrb	r3, [r3, #20]
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d105      	bne.n	800d0d0 <tcp_input+0x25c>
 800d0c4:	4b0b      	ldr	r3, [pc, #44]	; (800d0f4 <tcp_input+0x280>)
 800d0c6:	22fd      	movs	r2, #253	; 0xfd
 800d0c8:	491c      	ldr	r1, [pc, #112]	; (800d13c <tcp_input+0x2c8>)
 800d0ca:	480c      	ldr	r0, [pc, #48]	; (800d0fc <tcp_input+0x288>)
 800d0cc:	f007 fe38 	bl	8014d40 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	7a1b      	ldrb	r3, [r3, #8]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d033      	beq.n	800d140 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	7a1a      	ldrb	r2, [r3, #8]
 800d0dc:	4b09      	ldr	r3, [pc, #36]	; (800d104 <tcp_input+0x290>)
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d029      	beq.n	800d140 <tcp_input+0x2cc>
      prev = pcb;
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	61bb      	str	r3, [r7, #24]
      continue;
 800d0f0:	e06b      	b.n	800d1ca <tcp_input+0x356>
 800d0f2:	bf00      	nop
 800d0f4:	08017d9c 	.word	0x08017d9c
 800d0f8:	08017dd0 	.word	0x08017dd0
 800d0fc:	08017de8 	.word	0x08017de8
 800d100:	2000425c 	.word	0x2000425c
 800d104:	20007558 	.word	0x20007558
 800d108:	20004260 	.word	0x20004260
 800d10c:	20004264 	.word	0x20004264
 800d110:	20004262 	.word	0x20004262
 800d114:	08017e10 	.word	0x08017e10
 800d118:	08017e20 	.word	0x08017e20
 800d11c:	08017e2c 	.word	0x08017e2c
 800d120:	2000426c 	.word	0x2000426c
 800d124:	20004270 	.word	0x20004270
 800d128:	20004278 	.word	0x20004278
 800d12c:	20004276 	.word	0x20004276
 800d130:	2000e62c 	.word	0x2000e62c
 800d134:	08017e4c 	.word	0x08017e4c
 800d138:	08017e74 	.word	0x08017e74
 800d13c:	08017ea0 	.word	0x08017ea0
    }

    if (pcb->remote_port == tcphdr->src &&
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	8b1a      	ldrh	r2, [r3, #24]
 800d144:	4b94      	ldr	r3, [pc, #592]	; (800d398 <tcp_input+0x524>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	881b      	ldrh	r3, [r3, #0]
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d13a      	bne.n	800d1c6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	8ada      	ldrh	r2, [r3, #22]
 800d154:	4b90      	ldr	r3, [pc, #576]	; (800d398 <tcp_input+0x524>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	885b      	ldrh	r3, [r3, #2]
 800d15a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d132      	bne.n	800d1c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	685a      	ldr	r2, [r3, #4]
 800d164:	4b8d      	ldr	r3, [pc, #564]	; (800d39c <tcp_input+0x528>)
 800d166:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d168:	429a      	cmp	r2, r3
 800d16a:	d12c      	bne.n	800d1c6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	4b8a      	ldr	r3, [pc, #552]	; (800d39c <tcp_input+0x528>)
 800d172:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d174:	429a      	cmp	r2, r3
 800d176:	d126      	bne.n	800d1c6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	69fa      	ldr	r2, [r7, #28]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d106      	bne.n	800d190 <tcp_input+0x31c>
 800d182:	4b87      	ldr	r3, [pc, #540]	; (800d3a0 <tcp_input+0x52c>)
 800d184:	f240 120d 	movw	r2, #269	; 0x10d
 800d188:	4986      	ldr	r1, [pc, #536]	; (800d3a4 <tcp_input+0x530>)
 800d18a:	4887      	ldr	r0, [pc, #540]	; (800d3a8 <tcp_input+0x534>)
 800d18c:	f007 fdd8 	bl	8014d40 <iprintf>
      if (prev != NULL) {
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00a      	beq.n	800d1ac <tcp_input+0x338>
        prev->next = pcb->next;
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	68da      	ldr	r2, [r3, #12]
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d19e:	4b83      	ldr	r3, [pc, #524]	; (800d3ac <tcp_input+0x538>)
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d1a6:	4a81      	ldr	r2, [pc, #516]	; (800d3ac <tcp_input+0x538>)
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	69fa      	ldr	r2, [r7, #28]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d111      	bne.n	800d1da <tcp_input+0x366>
 800d1b6:	4b7a      	ldr	r3, [pc, #488]	; (800d3a0 <tcp_input+0x52c>)
 800d1b8:	f240 1215 	movw	r2, #277	; 0x115
 800d1bc:	497c      	ldr	r1, [pc, #496]	; (800d3b0 <tcp_input+0x53c>)
 800d1be:	487a      	ldr	r0, [pc, #488]	; (800d3a8 <tcp_input+0x534>)
 800d1c0:	f007 fdbe 	bl	8014d40 <iprintf>
      break;
 800d1c4:	e009      	b.n	800d1da <tcp_input+0x366>
    }
    prev = pcb;
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	61fb      	str	r3, [r7, #28]
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f47f af5e 	bne.w	800d094 <tcp_input+0x220>
 800d1d8:	e000      	b.n	800d1dc <tcp_input+0x368>
      break;
 800d1da:	bf00      	nop
  }

  if (pcb == NULL) {
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f040 8095 	bne.w	800d30e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1e4:	4b73      	ldr	r3, [pc, #460]	; (800d3b4 <tcp_input+0x540>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	61fb      	str	r3, [r7, #28]
 800d1ea:	e03f      	b.n	800d26c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	7d1b      	ldrb	r3, [r3, #20]
 800d1f0:	2b0a      	cmp	r3, #10
 800d1f2:	d006      	beq.n	800d202 <tcp_input+0x38e>
 800d1f4:	4b6a      	ldr	r3, [pc, #424]	; (800d3a0 <tcp_input+0x52c>)
 800d1f6:	f240 121f 	movw	r2, #287	; 0x11f
 800d1fa:	496f      	ldr	r1, [pc, #444]	; (800d3b8 <tcp_input+0x544>)
 800d1fc:	486a      	ldr	r0, [pc, #424]	; (800d3a8 <tcp_input+0x534>)
 800d1fe:	f007 fd9f 	bl	8014d40 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	7a1b      	ldrb	r3, [r3, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d009      	beq.n	800d21e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	7a1a      	ldrb	r2, [r3, #8]
 800d20e:	4b63      	ldr	r3, [pc, #396]	; (800d39c <tcp_input+0x528>)
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d216:	3301      	adds	r3, #1
 800d218:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d122      	bne.n	800d264 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	8b1a      	ldrh	r2, [r3, #24]
 800d222:	4b5d      	ldr	r3, [pc, #372]	; (800d398 <tcp_input+0x524>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	881b      	ldrh	r3, [r3, #0]
 800d228:	b29b      	uxth	r3, r3
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d11b      	bne.n	800d266 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	8ada      	ldrh	r2, [r3, #22]
 800d232:	4b59      	ldr	r3, [pc, #356]	; (800d398 <tcp_input+0x524>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	885b      	ldrh	r3, [r3, #2]
 800d238:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d113      	bne.n	800d266 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d23e:	69fb      	ldr	r3, [r7, #28]
 800d240:	685a      	ldr	r2, [r3, #4]
 800d242:	4b56      	ldr	r3, [pc, #344]	; (800d39c <tcp_input+0x528>)
 800d244:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d246:	429a      	cmp	r2, r3
 800d248:	d10d      	bne.n	800d266 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	4b53      	ldr	r3, [pc, #332]	; (800d39c <tcp_input+0x528>)
 800d250:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d252:	429a      	cmp	r2, r3
 800d254:	d107      	bne.n	800d266 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d256:	69f8      	ldr	r0, [r7, #28]
 800d258:	f000 fb52 	bl	800d900 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f7fd fd4b 	bl	800acf8 <pbuf_free>
        return;
 800d262:	e1ee      	b.n	800d642 <tcp_input+0x7ce>
        continue;
 800d264:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	61fb      	str	r3, [r7, #28]
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d1bc      	bne.n	800d1ec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d272:	2300      	movs	r3, #0
 800d274:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d276:	4b51      	ldr	r3, [pc, #324]	; (800d3bc <tcp_input+0x548>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	617b      	str	r3, [r7, #20]
 800d27c:	e02a      	b.n	800d2d4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	7a1b      	ldrb	r3, [r3, #8]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d00c      	beq.n	800d2a0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	7a1a      	ldrb	r2, [r3, #8]
 800d28a:	4b44      	ldr	r3, [pc, #272]	; (800d39c <tcp_input+0x528>)
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d292:	3301      	adds	r3, #1
 800d294:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d296:	429a      	cmp	r2, r3
 800d298:	d002      	beq.n	800d2a0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	61bb      	str	r3, [r7, #24]
        continue;
 800d29e:	e016      	b.n	800d2ce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	8ada      	ldrh	r2, [r3, #22]
 800d2a4:	4b3c      	ldr	r3, [pc, #240]	; (800d398 <tcp_input+0x524>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	885b      	ldrh	r3, [r3, #2]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d10c      	bne.n	800d2ca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	4b39      	ldr	r3, [pc, #228]	; (800d39c <tcp_input+0x528>)
 800d2b6:	695b      	ldr	r3, [r3, #20]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d00f      	beq.n	800d2dc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00d      	beq.n	800d2de <tcp_input+0x46a>
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d009      	beq.n	800d2de <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	617b      	str	r3, [r7, #20]
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d1d1      	bne.n	800d27e <tcp_input+0x40a>
 800d2da:	e000      	b.n	800d2de <tcp_input+0x46a>
            break;
 800d2dc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d014      	beq.n	800d30e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	68da      	ldr	r2, [r3, #12]
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d2f2:	4b32      	ldr	r3, [pc, #200]	; (800d3bc <tcp_input+0x548>)
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d2fa:	4a30      	ldr	r2, [pc, #192]	; (800d3bc <tcp_input+0x548>)
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d300:	6978      	ldr	r0, [r7, #20]
 800d302:	f000 f9ff 	bl	800d704 <tcp_listen_input>
      }
      pbuf_free(p);
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f7fd fcf6 	bl	800acf8 <pbuf_free>
      return;
 800d30c:	e199      	b.n	800d642 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	2b00      	cmp	r3, #0
 800d312:	f000 8160 	beq.w	800d5d6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d316:	4b2a      	ldr	r3, [pc, #168]	; (800d3c0 <tcp_input+0x54c>)
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	891a      	ldrh	r2, [r3, #8]
 800d320:	4b27      	ldr	r3, [pc, #156]	; (800d3c0 <tcp_input+0x54c>)
 800d322:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d324:	4a26      	ldr	r2, [pc, #152]	; (800d3c0 <tcp_input+0x54c>)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d32a:	4b1b      	ldr	r3, [pc, #108]	; (800d398 <tcp_input+0x524>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a24      	ldr	r2, [pc, #144]	; (800d3c0 <tcp_input+0x54c>)
 800d330:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d332:	4b24      	ldr	r3, [pc, #144]	; (800d3c4 <tcp_input+0x550>)
 800d334:	2200      	movs	r2, #0
 800d336:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d338:	4b23      	ldr	r3, [pc, #140]	; (800d3c8 <tcp_input+0x554>)
 800d33a:	2200      	movs	r2, #0
 800d33c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d33e:	4b23      	ldr	r3, [pc, #140]	; (800d3cc <tcp_input+0x558>)
 800d340:	2200      	movs	r2, #0
 800d342:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d344:	4b22      	ldr	r3, [pc, #136]	; (800d3d0 <tcp_input+0x55c>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	f003 0308 	and.w	r3, r3, #8
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d006      	beq.n	800d35e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	7b5b      	ldrb	r3, [r3, #13]
 800d354:	f043 0301 	orr.w	r3, r3, #1
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d35e:	69fb      	ldr	r3, [r7, #28]
 800d360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d362:	2b00      	cmp	r3, #0
 800d364:	d038      	beq.n	800d3d8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d366:	69f8      	ldr	r0, [r7, #28]
 800d368:	f7ff f872 	bl	800c450 <tcp_process_refused_data>
 800d36c:	4603      	mov	r3, r0
 800d36e:	f113 0f0d 	cmn.w	r3, #13
 800d372:	d007      	beq.n	800d384 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d02d      	beq.n	800d3d8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d37c:	4b15      	ldr	r3, [pc, #84]	; (800d3d4 <tcp_input+0x560>)
 800d37e:	881b      	ldrh	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d029      	beq.n	800d3d8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f040 8104 	bne.w	800d596 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d38e:	69f8      	ldr	r0, [r7, #28]
 800d390:	f003 fe26 	bl	8010fe0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d394:	e0ff      	b.n	800d596 <tcp_input+0x722>
 800d396:	bf00      	nop
 800d398:	2000425c 	.word	0x2000425c
 800d39c:	20007558 	.word	0x20007558
 800d3a0:	08017d9c 	.word	0x08017d9c
 800d3a4:	08017ec8 	.word	0x08017ec8
 800d3a8:	08017de8 	.word	0x08017de8
 800d3ac:	2000e62c 	.word	0x2000e62c
 800d3b0:	08017ef4 	.word	0x08017ef4
 800d3b4:	2000e63c 	.word	0x2000e63c
 800d3b8:	08017f20 	.word	0x08017f20
 800d3bc:	2000e634 	.word	0x2000e634
 800d3c0:	2000424c 	.word	0x2000424c
 800d3c4:	2000427c 	.word	0x2000427c
 800d3c8:	20004279 	.word	0x20004279
 800d3cc:	20004274 	.word	0x20004274
 800d3d0:	20004278 	.word	0x20004278
 800d3d4:	20004276 	.word	0x20004276
      }
    }
    tcp_input_pcb = pcb;
 800d3d8:	4a9b      	ldr	r2, [pc, #620]	; (800d648 <tcp_input+0x7d4>)
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d3de:	69f8      	ldr	r0, [r7, #28]
 800d3e0:	f000 fb0a 	bl	800d9f8 <tcp_process>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d3e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3ec:	f113 0f0d 	cmn.w	r3, #13
 800d3f0:	f000 80d3 	beq.w	800d59a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d3f4:	4b95      	ldr	r3, [pc, #596]	; (800d64c <tcp_input+0x7d8>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	f003 0308 	and.w	r3, r3, #8
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d015      	beq.n	800d42c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d406:	2b00      	cmp	r3, #0
 800d408:	d008      	beq.n	800d41c <tcp_input+0x5a8>
 800d40a:	69fb      	ldr	r3, [r7, #28]
 800d40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d410:	69fa      	ldr	r2, [r7, #28]
 800d412:	6912      	ldr	r2, [r2, #16]
 800d414:	f06f 010d 	mvn.w	r1, #13
 800d418:	4610      	mov	r0, r2
 800d41a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d41c:	69f9      	ldr	r1, [r7, #28]
 800d41e:	488c      	ldr	r0, [pc, #560]	; (800d650 <tcp_input+0x7dc>)
 800d420:	f7ff fbb0 	bl	800cb84 <tcp_pcb_remove>
        tcp_free(pcb);
 800d424:	69f8      	ldr	r0, [r7, #28]
 800d426:	f7fd ff23 	bl	800b270 <tcp_free>
 800d42a:	e0c1      	b.n	800d5b0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d42c:	2300      	movs	r3, #0
 800d42e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d430:	4b88      	ldr	r3, [pc, #544]	; (800d654 <tcp_input+0x7e0>)
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d01d      	beq.n	800d474 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d438:	4b86      	ldr	r3, [pc, #536]	; (800d654 <tcp_input+0x7e0>)
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d444:	2b00      	cmp	r3, #0
 800d446:	d00a      	beq.n	800d45e <tcp_input+0x5ea>
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d44e:	69fa      	ldr	r2, [r7, #28]
 800d450:	6910      	ldr	r0, [r2, #16]
 800d452:	89fa      	ldrh	r2, [r7, #14]
 800d454:	69f9      	ldr	r1, [r7, #28]
 800d456:	4798      	blx	r3
 800d458:	4603      	mov	r3, r0
 800d45a:	74fb      	strb	r3, [r7, #19]
 800d45c:	e001      	b.n	800d462 <tcp_input+0x5ee>
 800d45e:	2300      	movs	r3, #0
 800d460:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d462:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d466:	f113 0f0d 	cmn.w	r3, #13
 800d46a:	f000 8098 	beq.w	800d59e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d46e:	4b79      	ldr	r3, [pc, #484]	; (800d654 <tcp_input+0x7e0>)
 800d470:	2200      	movs	r2, #0
 800d472:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d474:	69f8      	ldr	r0, [r7, #28]
 800d476:	f000 f905 	bl	800d684 <tcp_input_delayed_close>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f040 8090 	bne.w	800d5a2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d482:	4b75      	ldr	r3, [pc, #468]	; (800d658 <tcp_input+0x7e4>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d041      	beq.n	800d50e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d006      	beq.n	800d4a0 <tcp_input+0x62c>
 800d492:	4b72      	ldr	r3, [pc, #456]	; (800d65c <tcp_input+0x7e8>)
 800d494:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d498:	4971      	ldr	r1, [pc, #452]	; (800d660 <tcp_input+0x7ec>)
 800d49a:	4872      	ldr	r0, [pc, #456]	; (800d664 <tcp_input+0x7f0>)
 800d49c:	f007 fc50 	bl	8014d40 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	8b5b      	ldrh	r3, [r3, #26]
 800d4a4:	f003 0310 	and.w	r3, r3, #16
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d008      	beq.n	800d4be <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d4ac:	4b6a      	ldr	r3, [pc, #424]	; (800d658 <tcp_input+0x7e4>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fd fc21 	bl	800acf8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d4b6:	69f8      	ldr	r0, [r7, #28]
 800d4b8:	f7fe fa14 	bl	800b8e4 <tcp_abort>
            goto aborted;
 800d4bc:	e078      	b.n	800d5b0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d00c      	beq.n	800d4e2 <tcp_input+0x66e>
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	6918      	ldr	r0, [r3, #16]
 800d4d2:	4b61      	ldr	r3, [pc, #388]	; (800d658 <tcp_input+0x7e4>)
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	69f9      	ldr	r1, [r7, #28]
 800d4da:	47a0      	blx	r4
 800d4dc:	4603      	mov	r3, r0
 800d4de:	74fb      	strb	r3, [r7, #19]
 800d4e0:	e008      	b.n	800d4f4 <tcp_input+0x680>
 800d4e2:	4b5d      	ldr	r3, [pc, #372]	; (800d658 <tcp_input+0x7e4>)
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	69f9      	ldr	r1, [r7, #28]
 800d4ea:	2000      	movs	r0, #0
 800d4ec:	f7ff f884 	bl	800c5f8 <tcp_recv_null>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d4f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4f8:	f113 0f0d 	cmn.w	r3, #13
 800d4fc:	d053      	beq.n	800d5a6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d4fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d003      	beq.n	800d50e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d506:	4b54      	ldr	r3, [pc, #336]	; (800d658 <tcp_input+0x7e4>)
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d50e:	4b4f      	ldr	r3, [pc, #316]	; (800d64c <tcp_input+0x7d8>)
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	f003 0320 	and.w	r3, r3, #32
 800d516:	2b00      	cmp	r3, #0
 800d518:	d030      	beq.n	800d57c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d009      	beq.n	800d536 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d526:	7b5a      	ldrb	r2, [r3, #13]
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d52c:	f042 0220 	orr.w	r2, r2, #32
 800d530:	b2d2      	uxtb	r2, r2
 800d532:	735a      	strb	r2, [r3, #13]
 800d534:	e022      	b.n	800d57c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d53a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d53e:	d005      	beq.n	800d54c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d544:	3301      	adds	r3, #1
 800d546:	b29a      	uxth	r2, r3
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00b      	beq.n	800d56e <tcp_input+0x6fa>
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	6918      	ldr	r0, [r3, #16]
 800d560:	2300      	movs	r3, #0
 800d562:	2200      	movs	r2, #0
 800d564:	69f9      	ldr	r1, [r7, #28]
 800d566:	47a0      	blx	r4
 800d568:	4603      	mov	r3, r0
 800d56a:	74fb      	strb	r3, [r7, #19]
 800d56c:	e001      	b.n	800d572 <tcp_input+0x6fe>
 800d56e:	2300      	movs	r3, #0
 800d570:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d572:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d576:	f113 0f0d 	cmn.w	r3, #13
 800d57a:	d016      	beq.n	800d5aa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d57c:	4b32      	ldr	r3, [pc, #200]	; (800d648 <tcp_input+0x7d4>)
 800d57e:	2200      	movs	r2, #0
 800d580:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d582:	69f8      	ldr	r0, [r7, #28]
 800d584:	f000 f87e 	bl	800d684 <tcp_input_delayed_close>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10f      	bne.n	800d5ae <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d58e:	69f8      	ldr	r0, [r7, #28]
 800d590:	f002 ff10 	bl	80103b4 <tcp_output>
 800d594:	e00c      	b.n	800d5b0 <tcp_input+0x73c>
        goto aborted;
 800d596:	bf00      	nop
 800d598:	e00a      	b.n	800d5b0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d59a:	bf00      	nop
 800d59c:	e008      	b.n	800d5b0 <tcp_input+0x73c>
              goto aborted;
 800d59e:	bf00      	nop
 800d5a0:	e006      	b.n	800d5b0 <tcp_input+0x73c>
          goto aborted;
 800d5a2:	bf00      	nop
 800d5a4:	e004      	b.n	800d5b0 <tcp_input+0x73c>
            goto aborted;
 800d5a6:	bf00      	nop
 800d5a8:	e002      	b.n	800d5b0 <tcp_input+0x73c>
              goto aborted;
 800d5aa:	bf00      	nop
 800d5ac:	e000      	b.n	800d5b0 <tcp_input+0x73c>
          goto aborted;
 800d5ae:	bf00      	nop
    tcp_input_pcb = NULL;
 800d5b0:	4b25      	ldr	r3, [pc, #148]	; (800d648 <tcp_input+0x7d4>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d5b6:	4b28      	ldr	r3, [pc, #160]	; (800d658 <tcp_input+0x7e4>)
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d5bc:	4b2a      	ldr	r3, [pc, #168]	; (800d668 <tcp_input+0x7f4>)
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d03d      	beq.n	800d640 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800d5c4:	4b28      	ldr	r3, [pc, #160]	; (800d668 <tcp_input+0x7f4>)
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7fd fb95 	bl	800acf8 <pbuf_free>
      inseg.p = NULL;
 800d5ce:	4b26      	ldr	r3, [pc, #152]	; (800d668 <tcp_input+0x7f4>)
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d5d4:	e034      	b.n	800d640 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d5d6:	4b25      	ldr	r3, [pc, #148]	; (800d66c <tcp_input+0x7f8>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	899b      	ldrh	r3, [r3, #12]
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fb ffe2 	bl	80095a8 <lwip_htons>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d118      	bne.n	800d622 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5f0:	4b1f      	ldr	r3, [pc, #124]	; (800d670 <tcp_input+0x7fc>)
 800d5f2:	6819      	ldr	r1, [r3, #0]
 800d5f4:	4b1f      	ldr	r3, [pc, #124]	; (800d674 <tcp_input+0x800>)
 800d5f6:	881b      	ldrh	r3, [r3, #0]
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	4b1f      	ldr	r3, [pc, #124]	; (800d678 <tcp_input+0x804>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d600:	4b1a      	ldr	r3, [pc, #104]	; (800d66c <tcp_input+0x7f8>)
 800d602:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d604:	885b      	ldrh	r3, [r3, #2]
 800d606:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d608:	4a18      	ldr	r2, [pc, #96]	; (800d66c <tcp_input+0x7f8>)
 800d60a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d60c:	8812      	ldrh	r2, [r2, #0]
 800d60e:	b292      	uxth	r2, r2
 800d610:	9202      	str	r2, [sp, #8]
 800d612:	9301      	str	r3, [sp, #4]
 800d614:	4b19      	ldr	r3, [pc, #100]	; (800d67c <tcp_input+0x808>)
 800d616:	9300      	str	r3, [sp, #0]
 800d618:	4b19      	ldr	r3, [pc, #100]	; (800d680 <tcp_input+0x80c>)
 800d61a:	4602      	mov	r2, r0
 800d61c:	2000      	movs	r0, #0
 800d61e:	f003 fc8d 	bl	8010f3c <tcp_rst>
    pbuf_free(p);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7fd fb68 	bl	800acf8 <pbuf_free>
  return;
 800d628:	e00a      	b.n	800d640 <tcp_input+0x7cc>
    goto dropped;
 800d62a:	bf00      	nop
 800d62c:	e004      	b.n	800d638 <tcp_input+0x7c4>
dropped:
 800d62e:	bf00      	nop
 800d630:	e002      	b.n	800d638 <tcp_input+0x7c4>
      goto dropped;
 800d632:	bf00      	nop
 800d634:	e000      	b.n	800d638 <tcp_input+0x7c4>
      goto dropped;
 800d636:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7fd fb5d 	bl	800acf8 <pbuf_free>
 800d63e:	e000      	b.n	800d642 <tcp_input+0x7ce>
  return;
 800d640:	bf00      	nop
}
 800d642:	3724      	adds	r7, #36	; 0x24
 800d644:	46bd      	mov	sp, r7
 800d646:	bd90      	pop	{r4, r7, pc}
 800d648:	2000e640 	.word	0x2000e640
 800d64c:	20004279 	.word	0x20004279
 800d650:	2000e62c 	.word	0x2000e62c
 800d654:	20004274 	.word	0x20004274
 800d658:	2000427c 	.word	0x2000427c
 800d65c:	08017d9c 	.word	0x08017d9c
 800d660:	08017f50 	.word	0x08017f50
 800d664:	08017de8 	.word	0x08017de8
 800d668:	2000424c 	.word	0x2000424c
 800d66c:	2000425c 	.word	0x2000425c
 800d670:	20004270 	.word	0x20004270
 800d674:	20004276 	.word	0x20004276
 800d678:	2000426c 	.word	0x2000426c
 800d67c:	20007568 	.word	0x20007568
 800d680:	2000756c 	.word	0x2000756c

0800d684 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d106      	bne.n	800d6a0 <tcp_input_delayed_close+0x1c>
 800d692:	4b17      	ldr	r3, [pc, #92]	; (800d6f0 <tcp_input_delayed_close+0x6c>)
 800d694:	f240 225a 	movw	r2, #602	; 0x25a
 800d698:	4916      	ldr	r1, [pc, #88]	; (800d6f4 <tcp_input_delayed_close+0x70>)
 800d69a:	4817      	ldr	r0, [pc, #92]	; (800d6f8 <tcp_input_delayed_close+0x74>)
 800d69c:	f007 fb50 	bl	8014d40 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d6a0:	4b16      	ldr	r3, [pc, #88]	; (800d6fc <tcp_input_delayed_close+0x78>)
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f003 0310 	and.w	r3, r3, #16
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d01c      	beq.n	800d6e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	8b5b      	ldrh	r3, [r3, #26]
 800d6b0:	f003 0310 	and.w	r3, r3, #16
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10d      	bne.n	800d6d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d008      	beq.n	800d6d4 <tcp_input_delayed_close+0x50>
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	6912      	ldr	r2, [r2, #16]
 800d6cc:	f06f 010e 	mvn.w	r1, #14
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d6d4:	6879      	ldr	r1, [r7, #4]
 800d6d6:	480a      	ldr	r0, [pc, #40]	; (800d700 <tcp_input_delayed_close+0x7c>)
 800d6d8:	f7ff fa54 	bl	800cb84 <tcp_pcb_remove>
    tcp_free(pcb);
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7fd fdc7 	bl	800b270 <tcp_free>
    return 1;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e000      	b.n	800d6e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d6e6:	2300      	movs	r3, #0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3708      	adds	r7, #8
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	08017d9c 	.word	0x08017d9c
 800d6f4:	08017f6c 	.word	0x08017f6c
 800d6f8:	08017de8 	.word	0x08017de8
 800d6fc:	20004279 	.word	0x20004279
 800d700:	2000e62c 	.word	0x2000e62c

0800d704 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d704:	b590      	push	{r4, r7, lr}
 800d706:	b08b      	sub	sp, #44	; 0x2c
 800d708:	af04      	add	r7, sp, #16
 800d70a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d70c:	4b6f      	ldr	r3, [pc, #444]	; (800d8cc <tcp_listen_input+0x1c8>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	f040 80d3 	bne.w	800d8c0 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d106      	bne.n	800d72e <tcp_listen_input+0x2a>
 800d720:	4b6b      	ldr	r3, [pc, #428]	; (800d8d0 <tcp_listen_input+0x1cc>)
 800d722:	f240 2281 	movw	r2, #641	; 0x281
 800d726:	496b      	ldr	r1, [pc, #428]	; (800d8d4 <tcp_listen_input+0x1d0>)
 800d728:	486b      	ldr	r0, [pc, #428]	; (800d8d8 <tcp_listen_input+0x1d4>)
 800d72a:	f007 fb09 	bl	8014d40 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d72e:	4b67      	ldr	r3, [pc, #412]	; (800d8cc <tcp_listen_input+0x1c8>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	f003 0310 	and.w	r3, r3, #16
 800d736:	2b00      	cmp	r3, #0
 800d738:	d019      	beq.n	800d76e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d73a:	4b68      	ldr	r3, [pc, #416]	; (800d8dc <tcp_listen_input+0x1d8>)
 800d73c:	6819      	ldr	r1, [r3, #0]
 800d73e:	4b68      	ldr	r3, [pc, #416]	; (800d8e0 <tcp_listen_input+0x1dc>)
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	461a      	mov	r2, r3
 800d744:	4b67      	ldr	r3, [pc, #412]	; (800d8e4 <tcp_listen_input+0x1e0>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d74a:	4b67      	ldr	r3, [pc, #412]	; (800d8e8 <tcp_listen_input+0x1e4>)
 800d74c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d74e:	885b      	ldrh	r3, [r3, #2]
 800d750:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d752:	4a65      	ldr	r2, [pc, #404]	; (800d8e8 <tcp_listen_input+0x1e4>)
 800d754:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d756:	8812      	ldrh	r2, [r2, #0]
 800d758:	b292      	uxth	r2, r2
 800d75a:	9202      	str	r2, [sp, #8]
 800d75c:	9301      	str	r3, [sp, #4]
 800d75e:	4b63      	ldr	r3, [pc, #396]	; (800d8ec <tcp_listen_input+0x1e8>)
 800d760:	9300      	str	r3, [sp, #0]
 800d762:	4b63      	ldr	r3, [pc, #396]	; (800d8f0 <tcp_listen_input+0x1ec>)
 800d764:	4602      	mov	r2, r0
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f003 fbe8 	bl	8010f3c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d76c:	e0aa      	b.n	800d8c4 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800d76e:	4b57      	ldr	r3, [pc, #348]	; (800d8cc <tcp_listen_input+0x1c8>)
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	f003 0302 	and.w	r3, r3, #2
 800d776:	2b00      	cmp	r3, #0
 800d778:	f000 80a4 	beq.w	800d8c4 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	7d5b      	ldrb	r3, [r3, #21]
 800d780:	4618      	mov	r0, r3
 800d782:	f7ff f85d 	bl	800c840 <tcp_alloc>
 800d786:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d111      	bne.n	800d7b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	699b      	ldr	r3, [r3, #24]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d00a      	beq.n	800d7ac <tcp_listen_input+0xa8>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	6910      	ldr	r0, [r2, #16]
 800d79e:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	4798      	blx	r3
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	73bb      	strb	r3, [r7, #14]
      return;
 800d7aa:	e08c      	b.n	800d8c6 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d7ac:	23f0      	movs	r3, #240	; 0xf0
 800d7ae:	73bb      	strb	r3, [r7, #14]
      return;
 800d7b0:	e089      	b.n	800d8c6 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d7b2:	4b50      	ldr	r3, [pc, #320]	; (800d8f4 <tcp_listen_input+0x1f0>)
 800d7b4:	695a      	ldr	r2, [r3, #20]
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d7ba:	4b4e      	ldr	r3, [pc, #312]	; (800d8f4 <tcp_listen_input+0x1f0>)
 800d7bc:	691a      	ldr	r2, [r3, #16]
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	8ada      	ldrh	r2, [r3, #22]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d7ca:	4b47      	ldr	r3, [pc, #284]	; (800d8e8 <tcp_listen_input+0x1e4>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	881b      	ldrh	r3, [r3, #0]
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2203      	movs	r2, #3
 800d7da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d7dc:	4b41      	ldr	r3, [pc, #260]	; (800d8e4 <tcp_listen_input+0x1e0>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	1c5a      	adds	r2, r3, #1
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d7ee:	6978      	ldr	r0, [r7, #20]
 800d7f0:	f7ff fa5c 	bl	800ccac <tcp_next_iss>
 800d7f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	693a      	ldr	r2, [r7, #16]
 800d7fa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	693a      	ldr	r2, [r7, #16]
 800d800:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	693a      	ldr	r2, [r7, #16]
 800d80c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d80e:	4b35      	ldr	r3, [pc, #212]	; (800d8e4 <tcp_listen_input+0x1e0>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	1e5a      	subs	r2, r3, #1
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	691a      	ldr	r2, [r3, #16]
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	7a5b      	ldrb	r3, [r3, #9]
 800d82a:	f003 030c 	and.w	r3, r3, #12
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	7a1a      	ldrb	r2, [r3, #8]
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d83c:	4b2e      	ldr	r3, [pc, #184]	; (800d8f8 <tcp_listen_input+0x1f4>)
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	60da      	str	r2, [r3, #12]
 800d844:	4a2c      	ldr	r2, [pc, #176]	; (800d8f8 <tcp_listen_input+0x1f4>)
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	6013      	str	r3, [r2, #0]
 800d84a:	f003 fd39 	bl	80112c0 <tcp_timer_needed>
 800d84e:	4b2b      	ldr	r3, [pc, #172]	; (800d8fc <tcp_listen_input+0x1f8>)
 800d850:	2201      	movs	r2, #1
 800d852:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d854:	6978      	ldr	r0, [r7, #20]
 800d856:	f001 fd8f 	bl	800f378 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d85a:	4b23      	ldr	r3, [pc, #140]	; (800d8e8 <tcp_listen_input+0x1e4>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	89db      	ldrh	r3, [r3, #14]
 800d860:	b29a      	uxth	r2, r3
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	3304      	adds	r3, #4
 800d87c:	4618      	mov	r0, r3
 800d87e:	f005 fcf1 	bl	8013264 <ip4_route>
 800d882:	4601      	mov	r1, r0
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	3304      	adds	r3, #4
 800d888:	461a      	mov	r2, r3
 800d88a:	4620      	mov	r0, r4
 800d88c:	f7ff fa34 	bl	800ccf8 <tcp_eff_send_mss_netif>
 800d890:	4603      	mov	r3, r0
 800d892:	461a      	mov	r2, r3
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d898:	2112      	movs	r1, #18
 800d89a:	6978      	ldr	r0, [r7, #20]
 800d89c:	f002 fc9c 	bl	80101d8 <tcp_enqueue_flags>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d8a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d004      	beq.n	800d8b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	6978      	ldr	r0, [r7, #20]
 800d8b0:	f7fd ff5a 	bl	800b768 <tcp_abandon>
      return;
 800d8b4:	e007      	b.n	800d8c6 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800d8b6:	6978      	ldr	r0, [r7, #20]
 800d8b8:	f002 fd7c 	bl	80103b4 <tcp_output>
  return;
 800d8bc:	bf00      	nop
 800d8be:	e001      	b.n	800d8c4 <tcp_listen_input+0x1c0>
    return;
 800d8c0:	bf00      	nop
 800d8c2:	e000      	b.n	800d8c6 <tcp_listen_input+0x1c2>
  return;
 800d8c4:	bf00      	nop
}
 800d8c6:	371c      	adds	r7, #28
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd90      	pop	{r4, r7, pc}
 800d8cc:	20004278 	.word	0x20004278
 800d8d0:	08017d9c 	.word	0x08017d9c
 800d8d4:	08017f94 	.word	0x08017f94
 800d8d8:	08017de8 	.word	0x08017de8
 800d8dc:	20004270 	.word	0x20004270
 800d8e0:	20004276 	.word	0x20004276
 800d8e4:	2000426c 	.word	0x2000426c
 800d8e8:	2000425c 	.word	0x2000425c
 800d8ec:	20007568 	.word	0x20007568
 800d8f0:	2000756c 	.word	0x2000756c
 800d8f4:	20007558 	.word	0x20007558
 800d8f8:	2000e62c 	.word	0x2000e62c
 800d8fc:	2000e628 	.word	0x2000e628

0800d900 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af04      	add	r7, sp, #16
 800d906:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d908:	4b30      	ldr	r3, [pc, #192]	; (800d9cc <tcp_timewait_input+0xcc>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	2b00      	cmp	r3, #0
 800d912:	d154      	bne.n	800d9be <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d106      	bne.n	800d928 <tcp_timewait_input+0x28>
 800d91a:	4b2d      	ldr	r3, [pc, #180]	; (800d9d0 <tcp_timewait_input+0xd0>)
 800d91c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d920:	492c      	ldr	r1, [pc, #176]	; (800d9d4 <tcp_timewait_input+0xd4>)
 800d922:	482d      	ldr	r0, [pc, #180]	; (800d9d8 <tcp_timewait_input+0xd8>)
 800d924:	f007 fa0c 	bl	8014d40 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d928:	4b28      	ldr	r3, [pc, #160]	; (800d9cc <tcp_timewait_input+0xcc>)
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	f003 0302 	and.w	r3, r3, #2
 800d930:	2b00      	cmp	r3, #0
 800d932:	d02a      	beq.n	800d98a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d934:	4b29      	ldr	r3, [pc, #164]	; (800d9dc <tcp_timewait_input+0xdc>)
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d93c:	1ad3      	subs	r3, r2, r3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	db2d      	blt.n	800d99e <tcp_timewait_input+0x9e>
 800d942:	4b26      	ldr	r3, [pc, #152]	; (800d9dc <tcp_timewait_input+0xdc>)
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d94e:	440b      	add	r3, r1
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	2b00      	cmp	r3, #0
 800d954:	dc23      	bgt.n	800d99e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d956:	4b22      	ldr	r3, [pc, #136]	; (800d9e0 <tcp_timewait_input+0xe0>)
 800d958:	6819      	ldr	r1, [r3, #0]
 800d95a:	4b22      	ldr	r3, [pc, #136]	; (800d9e4 <tcp_timewait_input+0xe4>)
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	461a      	mov	r2, r3
 800d960:	4b1e      	ldr	r3, [pc, #120]	; (800d9dc <tcp_timewait_input+0xdc>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d966:	4b20      	ldr	r3, [pc, #128]	; (800d9e8 <tcp_timewait_input+0xe8>)
 800d968:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d96a:	885b      	ldrh	r3, [r3, #2]
 800d96c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d96e:	4a1e      	ldr	r2, [pc, #120]	; (800d9e8 <tcp_timewait_input+0xe8>)
 800d970:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d972:	8812      	ldrh	r2, [r2, #0]
 800d974:	b292      	uxth	r2, r2
 800d976:	9202      	str	r2, [sp, #8]
 800d978:	9301      	str	r3, [sp, #4]
 800d97a:	4b1c      	ldr	r3, [pc, #112]	; (800d9ec <tcp_timewait_input+0xec>)
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	4b1c      	ldr	r3, [pc, #112]	; (800d9f0 <tcp_timewait_input+0xf0>)
 800d980:	4602      	mov	r2, r0
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f003 fada 	bl	8010f3c <tcp_rst>
      return;
 800d988:	e01c      	b.n	800d9c4 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800d98a:	4b10      	ldr	r3, [pc, #64]	; (800d9cc <tcp_timewait_input+0xcc>)
 800d98c:	781b      	ldrb	r3, [r3, #0]
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	2b00      	cmp	r3, #0
 800d994:	d003      	beq.n	800d99e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d996:	4b17      	ldr	r3, [pc, #92]	; (800d9f4 <tcp_timewait_input+0xf4>)
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d99e:	4b11      	ldr	r3, [pc, #68]	; (800d9e4 <tcp_timewait_input+0xe4>)
 800d9a0:	881b      	ldrh	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00d      	beq.n	800d9c2 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	8b5b      	ldrh	r3, [r3, #26]
 800d9aa:	f043 0302 	orr.w	r3, r3, #2
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f002 fcfd 	bl	80103b4 <tcp_output>
  }
  return;
 800d9ba:	bf00      	nop
 800d9bc:	e001      	b.n	800d9c2 <tcp_timewait_input+0xc2>
    return;
 800d9be:	bf00      	nop
 800d9c0:	e000      	b.n	800d9c4 <tcp_timewait_input+0xc4>
  return;
 800d9c2:	bf00      	nop
}
 800d9c4:	3708      	adds	r7, #8
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	20004278 	.word	0x20004278
 800d9d0:	08017d9c 	.word	0x08017d9c
 800d9d4:	08017fb4 	.word	0x08017fb4
 800d9d8:	08017de8 	.word	0x08017de8
 800d9dc:	2000426c 	.word	0x2000426c
 800d9e0:	20004270 	.word	0x20004270
 800d9e4:	20004276 	.word	0x20004276
 800d9e8:	2000425c 	.word	0x2000425c
 800d9ec:	20007568 	.word	0x20007568
 800d9f0:	2000756c 	.word	0x2000756c
 800d9f4:	2000e630 	.word	0x2000e630

0800d9f8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d9f8:	b590      	push	{r4, r7, lr}
 800d9fa:	b08d      	sub	sp, #52	; 0x34
 800d9fc:	af04      	add	r7, sp, #16
 800d9fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800da00:	2300      	movs	r3, #0
 800da02:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800da04:	2300      	movs	r3, #0
 800da06:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <tcp_process+0x24>
 800da0e:	4ba5      	ldr	r3, [pc, #660]	; (800dca4 <tcp_process+0x2ac>)
 800da10:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800da14:	49a4      	ldr	r1, [pc, #656]	; (800dca8 <tcp_process+0x2b0>)
 800da16:	48a5      	ldr	r0, [pc, #660]	; (800dcac <tcp_process+0x2b4>)
 800da18:	f007 f992 	bl	8014d40 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800da1c:	4ba4      	ldr	r3, [pc, #656]	; (800dcb0 <tcp_process+0x2b8>)
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	f003 0304 	and.w	r3, r3, #4
 800da24:	2b00      	cmp	r3, #0
 800da26:	d04e      	beq.n	800dac6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	7d1b      	ldrb	r3, [r3, #20]
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	d108      	bne.n	800da42 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da34:	4b9f      	ldr	r3, [pc, #636]	; (800dcb4 <tcp_process+0x2bc>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d123      	bne.n	800da84 <tcp_process+0x8c>
        acceptable = 1;
 800da3c:	2301      	movs	r3, #1
 800da3e:	76fb      	strb	r3, [r7, #27]
 800da40:	e020      	b.n	800da84 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da46:	4b9c      	ldr	r3, [pc, #624]	; (800dcb8 <tcp_process+0x2c0>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d102      	bne.n	800da54 <tcp_process+0x5c>
        acceptable = 1;
 800da4e:	2301      	movs	r3, #1
 800da50:	76fb      	strb	r3, [r7, #27]
 800da52:	e017      	b.n	800da84 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800da54:	4b98      	ldr	r3, [pc, #608]	; (800dcb8 <tcp_process+0x2c0>)
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5c:	1ad3      	subs	r3, r2, r3
 800da5e:	2b00      	cmp	r3, #0
 800da60:	db10      	blt.n	800da84 <tcp_process+0x8c>
 800da62:	4b95      	ldr	r3, [pc, #596]	; (800dcb8 <tcp_process+0x2c0>)
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da6a:	6879      	ldr	r1, [r7, #4]
 800da6c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da6e:	440b      	add	r3, r1
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	2b00      	cmp	r3, #0
 800da74:	dc06      	bgt.n	800da84 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	8b5b      	ldrh	r3, [r3, #26]
 800da7a:	f043 0302 	orr.w	r3, r3, #2
 800da7e:	b29a      	uxth	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800da84:	7efb      	ldrb	r3, [r7, #27]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d01b      	beq.n	800dac2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	7d1b      	ldrb	r3, [r3, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d106      	bne.n	800daa0 <tcp_process+0xa8>
 800da92:	4b84      	ldr	r3, [pc, #528]	; (800dca4 <tcp_process+0x2ac>)
 800da94:	f44f 724e 	mov.w	r2, #824	; 0x338
 800da98:	4988      	ldr	r1, [pc, #544]	; (800dcbc <tcp_process+0x2c4>)
 800da9a:	4884      	ldr	r0, [pc, #528]	; (800dcac <tcp_process+0x2b4>)
 800da9c:	f007 f950 	bl	8014d40 <iprintf>
      recv_flags |= TF_RESET;
 800daa0:	4b87      	ldr	r3, [pc, #540]	; (800dcc0 <tcp_process+0x2c8>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	f043 0308 	orr.w	r3, r3, #8
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	4b85      	ldr	r3, [pc, #532]	; (800dcc0 <tcp_process+0x2c8>)
 800daac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	8b5b      	ldrh	r3, [r3, #26]
 800dab2:	f023 0301 	bic.w	r3, r3, #1
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dabc:	f06f 030d 	mvn.w	r3, #13
 800dac0:	e37a      	b.n	800e1b8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dac2:	2300      	movs	r3, #0
 800dac4:	e378      	b.n	800e1b8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dac6:	4b7a      	ldr	r3, [pc, #488]	; (800dcb0 <tcp_process+0x2b8>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	f003 0302 	and.w	r3, r3, #2
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d010      	beq.n	800daf4 <tcp_process+0xfc>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	7d1b      	ldrb	r3, [r3, #20]
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	d00c      	beq.n	800daf4 <tcp_process+0xfc>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	7d1b      	ldrb	r3, [r3, #20]
 800dade:	2b03      	cmp	r3, #3
 800dae0:	d008      	beq.n	800daf4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	8b5b      	ldrh	r3, [r3, #26]
 800dae6:	f043 0302 	orr.w	r3, r3, #2
 800daea:	b29a      	uxth	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800daf0:	2300      	movs	r3, #0
 800daf2:	e361      	b.n	800e1b8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	8b5b      	ldrh	r3, [r3, #26]
 800daf8:	f003 0310 	and.w	r3, r3, #16
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d103      	bne.n	800db08 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800db00:	4b70      	ldr	r3, [pc, #448]	; (800dcc4 <tcp_process+0x2cc>)
 800db02:	681a      	ldr	r2, [r3, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f001 fc2d 	bl	800f378 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	7d1b      	ldrb	r3, [r3, #20]
 800db22:	3b02      	subs	r3, #2
 800db24:	2b07      	cmp	r3, #7
 800db26:	f200 8337 	bhi.w	800e198 <tcp_process+0x7a0>
 800db2a:	a201      	add	r2, pc, #4	; (adr r2, 800db30 <tcp_process+0x138>)
 800db2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db30:	0800db51 	.word	0x0800db51
 800db34:	0800dd81 	.word	0x0800dd81
 800db38:	0800def9 	.word	0x0800def9
 800db3c:	0800df23 	.word	0x0800df23
 800db40:	0800e047 	.word	0x0800e047
 800db44:	0800def9 	.word	0x0800def9
 800db48:	0800e0d3 	.word	0x0800e0d3
 800db4c:	0800e163 	.word	0x0800e163
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800db50:	4b57      	ldr	r3, [pc, #348]	; (800dcb0 <tcp_process+0x2b8>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	f003 0310 	and.w	r3, r3, #16
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f000 80e4 	beq.w	800dd26 <tcp_process+0x32e>
 800db5e:	4b54      	ldr	r3, [pc, #336]	; (800dcb0 <tcp_process+0x2b8>)
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	f003 0302 	and.w	r3, r3, #2
 800db66:	2b00      	cmp	r3, #0
 800db68:	f000 80dd 	beq.w	800dd26 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db70:	1c5a      	adds	r2, r3, #1
 800db72:	4b50      	ldr	r3, [pc, #320]	; (800dcb4 <tcp_process+0x2bc>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	f040 80d5 	bne.w	800dd26 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800db7c:	4b4e      	ldr	r3, [pc, #312]	; (800dcb8 <tcp_process+0x2c0>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	1c5a      	adds	r2, r3, #1
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800db8e:	4b49      	ldr	r3, [pc, #292]	; (800dcb4 <tcp_process+0x2bc>)
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800db96:	4b4c      	ldr	r3, [pc, #304]	; (800dcc8 <tcp_process+0x2d0>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	89db      	ldrh	r3, [r3, #14]
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dbb0:	4b41      	ldr	r3, [pc, #260]	; (800dcb8 <tcp_process+0x2c0>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	1e5a      	subs	r2, r3, #1
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2204      	movs	r2, #4
 800dbbe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	3304      	adds	r3, #4
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f005 fb4b 	bl	8013264 <ip4_route>
 800dbce:	4601      	mov	r1, r0
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	461a      	mov	r2, r3
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	f7ff f88e 	bl	800ccf8 <tcp_eff_send_mss_netif>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	461a      	mov	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbe8:	009a      	lsls	r2, r3, #2
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbee:	005b      	lsls	r3, r3, #1
 800dbf0:	f241 111c 	movw	r1, #4380	; 0x111c
 800dbf4:	428b      	cmp	r3, r1
 800dbf6:	bf38      	it	cc
 800dbf8:	460b      	movcc	r3, r1
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d204      	bcs.n	800dc08 <tcp_process+0x210>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	e00d      	b.n	800dc24 <tcp_process+0x22c>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	f241 121c 	movw	r2, #4380	; 0x111c
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d904      	bls.n	800dc20 <tcp_process+0x228>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc1a:	005b      	lsls	r3, r3, #1
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	e001      	b.n	800dc24 <tcp_process+0x22c>
 800dc20:	f241 131c 	movw	r3, #4380	; 0x111c
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d106      	bne.n	800dc42 <tcp_process+0x24a>
 800dc34:	4b1b      	ldr	r3, [pc, #108]	; (800dca4 <tcp_process+0x2ac>)
 800dc36:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800dc3a:	4924      	ldr	r1, [pc, #144]	; (800dccc <tcp_process+0x2d4>)
 800dc3c:	481b      	ldr	r0, [pc, #108]	; (800dcac <tcp_process+0x2b4>)
 800dc3e:	f007 f87f 	bl	8014d40 <iprintf>
        --pcb->snd_queuelen;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc56:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d111      	bne.n	800dc82 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc62:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d106      	bne.n	800dc78 <tcp_process+0x280>
 800dc6a:	4b0e      	ldr	r3, [pc, #56]	; (800dca4 <tcp_process+0x2ac>)
 800dc6c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dc70:	4917      	ldr	r1, [pc, #92]	; (800dcd0 <tcp_process+0x2d8>)
 800dc72:	480e      	ldr	r0, [pc, #56]	; (800dcac <tcp_process+0x2b4>)
 800dc74:	f007 f864 	bl	8014d40 <iprintf>
          pcb->unsent = rseg->next;
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	66da      	str	r2, [r3, #108]	; 0x6c
 800dc80:	e003      	b.n	800dc8a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800dc82:	69fb      	ldr	r3, [r7, #28]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dc8a:	69f8      	ldr	r0, [r7, #28]
 800dc8c:	f7fe fc70 	bl	800c570 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d11d      	bne.n	800dcd4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc9e:	861a      	strh	r2, [r3, #48]	; 0x30
 800dca0:	e01f      	b.n	800dce2 <tcp_process+0x2ea>
 800dca2:	bf00      	nop
 800dca4:	08017d9c 	.word	0x08017d9c
 800dca8:	08017fd4 	.word	0x08017fd4
 800dcac:	08017de8 	.word	0x08017de8
 800dcb0:	20004278 	.word	0x20004278
 800dcb4:	20004270 	.word	0x20004270
 800dcb8:	2000426c 	.word	0x2000426c
 800dcbc:	08017ff0 	.word	0x08017ff0
 800dcc0:	20004279 	.word	0x20004279
 800dcc4:	2000e630 	.word	0x2000e630
 800dcc8:	2000425c 	.word	0x2000425c
 800dccc:	08018010 	.word	0x08018010
 800dcd0:	08018028 	.word	0x08018028
        } else {
          pcb->rtime = 0;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00a      	beq.n	800dd02 <tcp_process+0x30a>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	6910      	ldr	r0, [r2, #16]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	6879      	ldr	r1, [r7, #4]
 800dcfa:	4798      	blx	r3
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	76bb      	strb	r3, [r7, #26]
 800dd00:	e001      	b.n	800dd06 <tcp_process+0x30e>
 800dd02:	2300      	movs	r3, #0
 800dd04:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800dd06:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dd0a:	f113 0f0d 	cmn.w	r3, #13
 800dd0e:	d102      	bne.n	800dd16 <tcp_process+0x31e>
          return ERR_ABRT;
 800dd10:	f06f 030c 	mvn.w	r3, #12
 800dd14:	e250      	b.n	800e1b8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	8b5b      	ldrh	r3, [r3, #26]
 800dd1a:	f043 0302 	orr.w	r3, r3, #2
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800dd24:	e23a      	b.n	800e19c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800dd26:	4b9d      	ldr	r3, [pc, #628]	; (800df9c <tcp_process+0x5a4>)
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	f003 0310 	and.w	r3, r3, #16
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	f000 8234 	beq.w	800e19c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd34:	4b9a      	ldr	r3, [pc, #616]	; (800dfa0 <tcp_process+0x5a8>)
 800dd36:	6819      	ldr	r1, [r3, #0]
 800dd38:	4b9a      	ldr	r3, [pc, #616]	; (800dfa4 <tcp_process+0x5ac>)
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	4b9a      	ldr	r3, [pc, #616]	; (800dfa8 <tcp_process+0x5b0>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd44:	4b99      	ldr	r3, [pc, #612]	; (800dfac <tcp_process+0x5b4>)
 800dd46:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd48:	885b      	ldrh	r3, [r3, #2]
 800dd4a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd4c:	4a97      	ldr	r2, [pc, #604]	; (800dfac <tcp_process+0x5b4>)
 800dd4e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd50:	8812      	ldrh	r2, [r2, #0]
 800dd52:	b292      	uxth	r2, r2
 800dd54:	9202      	str	r2, [sp, #8]
 800dd56:	9301      	str	r3, [sp, #4]
 800dd58:	4b95      	ldr	r3, [pc, #596]	; (800dfb0 <tcp_process+0x5b8>)
 800dd5a:	9300      	str	r3, [sp, #0]
 800dd5c:	4b95      	ldr	r3, [pc, #596]	; (800dfb4 <tcp_process+0x5bc>)
 800dd5e:	4602      	mov	r2, r0
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f003 f8eb 	bl	8010f3c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd6c:	2b05      	cmp	r3, #5
 800dd6e:	f200 8215 	bhi.w	800e19c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f002 feab 	bl	8010ad4 <tcp_rexmit_rto>
      break;
 800dd7e:	e20d      	b.n	800e19c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800dd80:	4b86      	ldr	r3, [pc, #536]	; (800df9c <tcp_process+0x5a4>)
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	f003 0310 	and.w	r3, r3, #16
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 80a1 	beq.w	800ded0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dd8e:	4b84      	ldr	r3, [pc, #528]	; (800dfa0 <tcp_process+0x5a8>)
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	db7e      	blt.n	800de9c <tcp_process+0x4a4>
 800dd9e:	4b80      	ldr	r3, [pc, #512]	; (800dfa0 <tcp_process+0x5a8>)
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dda6:	1ad3      	subs	r3, r2, r3
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	dc77      	bgt.n	800de9c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2204      	movs	r2, #4
 800ddb0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d102      	bne.n	800ddc0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ddba:	23fa      	movs	r3, #250	; 0xfa
 800ddbc:	76bb      	strb	r3, [r7, #26]
 800ddbe:	e01d      	b.n	800ddfc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d106      	bne.n	800ddd8 <tcp_process+0x3e0>
 800ddca:	4b7b      	ldr	r3, [pc, #492]	; (800dfb8 <tcp_process+0x5c0>)
 800ddcc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ddd0:	497a      	ldr	r1, [pc, #488]	; (800dfbc <tcp_process+0x5c4>)
 800ddd2:	487b      	ldr	r0, [pc, #492]	; (800dfc0 <tcp_process+0x5c8>)
 800ddd4:	f006 ffb4 	bl	8014d40 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dddc:	699b      	ldr	r3, [r3, #24]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00a      	beq.n	800ddf8 <tcp_process+0x400>
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dde6:	699b      	ldr	r3, [r3, #24]
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	6910      	ldr	r0, [r2, #16]
 800ddec:	2200      	movs	r2, #0
 800ddee:	6879      	ldr	r1, [r7, #4]
 800ddf0:	4798      	blx	r3
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	76bb      	strb	r3, [r7, #26]
 800ddf6:	e001      	b.n	800ddfc <tcp_process+0x404>
 800ddf8:	23f0      	movs	r3, #240	; 0xf0
 800ddfa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ddfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00a      	beq.n	800de1a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800de04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de08:	f113 0f0d 	cmn.w	r3, #13
 800de0c:	d002      	beq.n	800de14 <tcp_process+0x41c>
              tcp_abort(pcb);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7fd fd68 	bl	800b8e4 <tcp_abort>
            }
            return ERR_ABRT;
 800de14:	f06f 030c 	mvn.w	r3, #12
 800de18:	e1ce      	b.n	800e1b8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 fae0 	bl	800e3e0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800de20:	4b68      	ldr	r3, [pc, #416]	; (800dfc4 <tcp_process+0x5cc>)
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d005      	beq.n	800de34 <tcp_process+0x43c>
            recv_acked--;
 800de28:	4b66      	ldr	r3, [pc, #408]	; (800dfc4 <tcp_process+0x5cc>)
 800de2a:	881b      	ldrh	r3, [r3, #0]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	b29a      	uxth	r2, r3
 800de30:	4b64      	ldr	r3, [pc, #400]	; (800dfc4 <tcp_process+0x5cc>)
 800de32:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de38:	009a      	lsls	r2, r3, #2
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de3e:	005b      	lsls	r3, r3, #1
 800de40:	f241 111c 	movw	r1, #4380	; 0x111c
 800de44:	428b      	cmp	r3, r1
 800de46:	bf38      	it	cc
 800de48:	460b      	movcc	r3, r1
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d204      	bcs.n	800de58 <tcp_process+0x460>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	b29b      	uxth	r3, r3
 800de56:	e00d      	b.n	800de74 <tcp_process+0x47c>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de5c:	005b      	lsls	r3, r3, #1
 800de5e:	f241 121c 	movw	r2, #4380	; 0x111c
 800de62:	4293      	cmp	r3, r2
 800de64:	d904      	bls.n	800de70 <tcp_process+0x478>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de6a:	005b      	lsls	r3, r3, #1
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	e001      	b.n	800de74 <tcp_process+0x47c>
 800de70:	f241 131c 	movw	r3, #4380	; 0x111c
 800de74:	687a      	ldr	r2, [r7, #4]
 800de76:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800de7a:	4b53      	ldr	r3, [pc, #332]	; (800dfc8 <tcp_process+0x5d0>)
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	f003 0320 	and.w	r3, r3, #32
 800de82:	2b00      	cmp	r3, #0
 800de84:	d037      	beq.n	800def6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	8b5b      	ldrh	r3, [r3, #26]
 800de8a:	f043 0302 	orr.w	r3, r3, #2
 800de8e:	b29a      	uxth	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2207      	movs	r2, #7
 800de98:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800de9a:	e02c      	b.n	800def6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de9c:	4b40      	ldr	r3, [pc, #256]	; (800dfa0 <tcp_process+0x5a8>)
 800de9e:	6819      	ldr	r1, [r3, #0]
 800dea0:	4b40      	ldr	r3, [pc, #256]	; (800dfa4 <tcp_process+0x5ac>)
 800dea2:	881b      	ldrh	r3, [r3, #0]
 800dea4:	461a      	mov	r2, r3
 800dea6:	4b40      	ldr	r3, [pc, #256]	; (800dfa8 <tcp_process+0x5b0>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800deac:	4b3f      	ldr	r3, [pc, #252]	; (800dfac <tcp_process+0x5b4>)
 800deae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800deb0:	885b      	ldrh	r3, [r3, #2]
 800deb2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800deb4:	4a3d      	ldr	r2, [pc, #244]	; (800dfac <tcp_process+0x5b4>)
 800deb6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800deb8:	8812      	ldrh	r2, [r2, #0]
 800deba:	b292      	uxth	r2, r2
 800debc:	9202      	str	r2, [sp, #8]
 800debe:	9301      	str	r3, [sp, #4]
 800dec0:	4b3b      	ldr	r3, [pc, #236]	; (800dfb0 <tcp_process+0x5b8>)
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	4b3b      	ldr	r3, [pc, #236]	; (800dfb4 <tcp_process+0x5bc>)
 800dec6:	4602      	mov	r2, r0
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f003 f837 	bl	8010f3c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800dece:	e167      	b.n	800e1a0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ded0:	4b32      	ldr	r3, [pc, #200]	; (800df9c <tcp_process+0x5a4>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	f003 0302 	and.w	r3, r3, #2
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f000 8161 	beq.w	800e1a0 <tcp_process+0x7a8>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dee2:	1e5a      	subs	r2, r3, #1
 800dee4:	4b30      	ldr	r3, [pc, #192]	; (800dfa8 <tcp_process+0x5b0>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	429a      	cmp	r2, r3
 800deea:	f040 8159 	bne.w	800e1a0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f002 fe12 	bl	8010b18 <tcp_rexmit>
      break;
 800def4:	e154      	b.n	800e1a0 <tcp_process+0x7a8>
 800def6:	e153      	b.n	800e1a0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fa71 	bl	800e3e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800defe:	4b32      	ldr	r3, [pc, #200]	; (800dfc8 <tcp_process+0x5d0>)
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	f003 0320 	and.w	r3, r3, #32
 800df06:	2b00      	cmp	r3, #0
 800df08:	f000 814c 	beq.w	800e1a4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	8b5b      	ldrh	r3, [r3, #26]
 800df10:	f043 0302 	orr.w	r3, r3, #2
 800df14:	b29a      	uxth	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2207      	movs	r2, #7
 800df1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800df20:	e140      	b.n	800e1a4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 fa5c 	bl	800e3e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800df28:	4b27      	ldr	r3, [pc, #156]	; (800dfc8 <tcp_process+0x5d0>)
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	f003 0320 	and.w	r3, r3, #32
 800df30:	2b00      	cmp	r3, #0
 800df32:	d071      	beq.n	800e018 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df34:	4b19      	ldr	r3, [pc, #100]	; (800df9c <tcp_process+0x5a4>)
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	f003 0310 	and.w	r3, r3, #16
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d060      	beq.n	800e002 <tcp_process+0x60a>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df44:	4b16      	ldr	r3, [pc, #88]	; (800dfa0 <tcp_process+0x5a8>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d15a      	bne.n	800e002 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df50:	2b00      	cmp	r3, #0
 800df52:	d156      	bne.n	800e002 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	8b5b      	ldrh	r3, [r3, #26]
 800df58:	f043 0302 	orr.w	r3, r3, #2
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7fe fdbe 	bl	800cae4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800df68:	4b18      	ldr	r3, [pc, #96]	; (800dfcc <tcp_process+0x5d4>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	687a      	ldr	r2, [r7, #4]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d105      	bne.n	800df7e <tcp_process+0x586>
 800df72:	4b16      	ldr	r3, [pc, #88]	; (800dfcc <tcp_process+0x5d4>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	4a14      	ldr	r2, [pc, #80]	; (800dfcc <tcp_process+0x5d4>)
 800df7a:	6013      	str	r3, [r2, #0]
 800df7c:	e02e      	b.n	800dfdc <tcp_process+0x5e4>
 800df7e:	4b13      	ldr	r3, [pc, #76]	; (800dfcc <tcp_process+0x5d4>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	617b      	str	r3, [r7, #20]
 800df84:	e027      	b.n	800dfd6 <tcp_process+0x5de>
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d11f      	bne.n	800dfd0 <tcp_process+0x5d8>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	68da      	ldr	r2, [r3, #12]
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	60da      	str	r2, [r3, #12]
 800df98:	e020      	b.n	800dfdc <tcp_process+0x5e4>
 800df9a:	bf00      	nop
 800df9c:	20004278 	.word	0x20004278
 800dfa0:	20004270 	.word	0x20004270
 800dfa4:	20004276 	.word	0x20004276
 800dfa8:	2000426c 	.word	0x2000426c
 800dfac:	2000425c 	.word	0x2000425c
 800dfb0:	20007568 	.word	0x20007568
 800dfb4:	2000756c 	.word	0x2000756c
 800dfb8:	08017d9c 	.word	0x08017d9c
 800dfbc:	0801803c 	.word	0x0801803c
 800dfc0:	08017de8 	.word	0x08017de8
 800dfc4:	20004274 	.word	0x20004274
 800dfc8:	20004279 	.word	0x20004279
 800dfcc:	2000e62c 	.word	0x2000e62c
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	617b      	str	r3, [r7, #20]
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d1d4      	bne.n	800df86 <tcp_process+0x58e>
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	60da      	str	r2, [r3, #12]
 800dfe2:	4b77      	ldr	r3, [pc, #476]	; (800e1c0 <tcp_process+0x7c8>)
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	220a      	movs	r2, #10
 800dfec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dfee:	4b75      	ldr	r3, [pc, #468]	; (800e1c4 <tcp_process+0x7cc>)
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	60da      	str	r2, [r3, #12]
 800dff6:	4a73      	ldr	r2, [pc, #460]	; (800e1c4 <tcp_process+0x7cc>)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6013      	str	r3, [r2, #0]
 800dffc:	f003 f960 	bl	80112c0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e000:	e0d2      	b.n	800e1a8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	8b5b      	ldrh	r3, [r3, #26]
 800e006:	f043 0302 	orr.w	r3, r3, #2
 800e00a:	b29a      	uxth	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2208      	movs	r2, #8
 800e014:	751a      	strb	r2, [r3, #20]
      break;
 800e016:	e0c7      	b.n	800e1a8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e018:	4b6b      	ldr	r3, [pc, #428]	; (800e1c8 <tcp_process+0x7d0>)
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	f003 0310 	and.w	r3, r3, #16
 800e020:	2b00      	cmp	r3, #0
 800e022:	f000 80c1 	beq.w	800e1a8 <tcp_process+0x7b0>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e02a:	4b68      	ldr	r3, [pc, #416]	; (800e1cc <tcp_process+0x7d4>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	429a      	cmp	r2, r3
 800e030:	f040 80ba 	bne.w	800e1a8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f040 80b5 	bne.w	800e1a8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2206      	movs	r2, #6
 800e042:	751a      	strb	r2, [r3, #20]
      break;
 800e044:	e0b0      	b.n	800e1a8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 f9ca 	bl	800e3e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e04c:	4b60      	ldr	r3, [pc, #384]	; (800e1d0 <tcp_process+0x7d8>)
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	f003 0320 	and.w	r3, r3, #32
 800e054:	2b00      	cmp	r3, #0
 800e056:	f000 80a9 	beq.w	800e1ac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	8b5b      	ldrh	r3, [r3, #26]
 800e05e:	f043 0302 	orr.w	r3, r3, #2
 800e062:	b29a      	uxth	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7fe fd3b 	bl	800cae4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e06e:	4b59      	ldr	r3, [pc, #356]	; (800e1d4 <tcp_process+0x7dc>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	429a      	cmp	r2, r3
 800e076:	d105      	bne.n	800e084 <tcp_process+0x68c>
 800e078:	4b56      	ldr	r3, [pc, #344]	; (800e1d4 <tcp_process+0x7dc>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	4a55      	ldr	r2, [pc, #340]	; (800e1d4 <tcp_process+0x7dc>)
 800e080:	6013      	str	r3, [r2, #0]
 800e082:	e013      	b.n	800e0ac <tcp_process+0x6b4>
 800e084:	4b53      	ldr	r3, [pc, #332]	; (800e1d4 <tcp_process+0x7dc>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	613b      	str	r3, [r7, #16]
 800e08a:	e00c      	b.n	800e0a6 <tcp_process+0x6ae>
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	429a      	cmp	r2, r3
 800e094:	d104      	bne.n	800e0a0 <tcp_process+0x6a8>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	68da      	ldr	r2, [r3, #12]
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	60da      	str	r2, [r3, #12]
 800e09e:	e005      	b.n	800e0ac <tcp_process+0x6b4>
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	613b      	str	r3, [r7, #16]
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1ef      	bne.n	800e08c <tcp_process+0x694>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	60da      	str	r2, [r3, #12]
 800e0b2:	4b43      	ldr	r3, [pc, #268]	; (800e1c0 <tcp_process+0x7c8>)
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	220a      	movs	r2, #10
 800e0bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e0be:	4b41      	ldr	r3, [pc, #260]	; (800e1c4 <tcp_process+0x7cc>)
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	60da      	str	r2, [r3, #12]
 800e0c6:	4a3f      	ldr	r2, [pc, #252]	; (800e1c4 <tcp_process+0x7cc>)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	f003 f8f8 	bl	80112c0 <tcp_timer_needed>
      }
      break;
 800e0d0:	e06c      	b.n	800e1ac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f984 	bl	800e3e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e0d8:	4b3b      	ldr	r3, [pc, #236]	; (800e1c8 <tcp_process+0x7d0>)
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	f003 0310 	and.w	r3, r3, #16
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d065      	beq.n	800e1b0 <tcp_process+0x7b8>
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0e8:	4b38      	ldr	r3, [pc, #224]	; (800e1cc <tcp_process+0x7d4>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d15f      	bne.n	800e1b0 <tcp_process+0x7b8>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d15b      	bne.n	800e1b0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7fe fcf3 	bl	800cae4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e0fe:	4b35      	ldr	r3, [pc, #212]	; (800e1d4 <tcp_process+0x7dc>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	429a      	cmp	r2, r3
 800e106:	d105      	bne.n	800e114 <tcp_process+0x71c>
 800e108:	4b32      	ldr	r3, [pc, #200]	; (800e1d4 <tcp_process+0x7dc>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68db      	ldr	r3, [r3, #12]
 800e10e:	4a31      	ldr	r2, [pc, #196]	; (800e1d4 <tcp_process+0x7dc>)
 800e110:	6013      	str	r3, [r2, #0]
 800e112:	e013      	b.n	800e13c <tcp_process+0x744>
 800e114:	4b2f      	ldr	r3, [pc, #188]	; (800e1d4 <tcp_process+0x7dc>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	60fb      	str	r3, [r7, #12]
 800e11a:	e00c      	b.n	800e136 <tcp_process+0x73e>
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	429a      	cmp	r2, r3
 800e124:	d104      	bne.n	800e130 <tcp_process+0x738>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	68da      	ldr	r2, [r3, #12]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	60da      	str	r2, [r3, #12]
 800e12e:	e005      	b.n	800e13c <tcp_process+0x744>
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	60fb      	str	r3, [r7, #12]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d1ef      	bne.n	800e11c <tcp_process+0x724>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	60da      	str	r2, [r3, #12]
 800e142:	4b1f      	ldr	r3, [pc, #124]	; (800e1c0 <tcp_process+0x7c8>)
 800e144:	2201      	movs	r2, #1
 800e146:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	220a      	movs	r2, #10
 800e14c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e14e:	4b1d      	ldr	r3, [pc, #116]	; (800e1c4 <tcp_process+0x7cc>)
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60da      	str	r2, [r3, #12]
 800e156:	4a1b      	ldr	r2, [pc, #108]	; (800e1c4 <tcp_process+0x7cc>)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6013      	str	r3, [r2, #0]
 800e15c:	f003 f8b0 	bl	80112c0 <tcp_timer_needed>
      }
      break;
 800e160:	e026      	b.n	800e1b0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f000 f93c 	bl	800e3e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e168:	4b17      	ldr	r3, [pc, #92]	; (800e1c8 <tcp_process+0x7d0>)
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	f003 0310 	and.w	r3, r3, #16
 800e170:	2b00      	cmp	r3, #0
 800e172:	d01f      	beq.n	800e1b4 <tcp_process+0x7bc>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e178:	4b14      	ldr	r3, [pc, #80]	; (800e1cc <tcp_process+0x7d4>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d119      	bne.n	800e1b4 <tcp_process+0x7bc>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e184:	2b00      	cmp	r3, #0
 800e186:	d115      	bne.n	800e1b4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e188:	4b11      	ldr	r3, [pc, #68]	; (800e1d0 <tcp_process+0x7d8>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	f043 0310 	orr.w	r3, r3, #16
 800e190:	b2da      	uxtb	r2, r3
 800e192:	4b0f      	ldr	r3, [pc, #60]	; (800e1d0 <tcp_process+0x7d8>)
 800e194:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e196:	e00d      	b.n	800e1b4 <tcp_process+0x7bc>
    default:
      break;
 800e198:	bf00      	nop
 800e19a:	e00c      	b.n	800e1b6 <tcp_process+0x7be>
      break;
 800e19c:	bf00      	nop
 800e19e:	e00a      	b.n	800e1b6 <tcp_process+0x7be>
      break;
 800e1a0:	bf00      	nop
 800e1a2:	e008      	b.n	800e1b6 <tcp_process+0x7be>
      break;
 800e1a4:	bf00      	nop
 800e1a6:	e006      	b.n	800e1b6 <tcp_process+0x7be>
      break;
 800e1a8:	bf00      	nop
 800e1aa:	e004      	b.n	800e1b6 <tcp_process+0x7be>
      break;
 800e1ac:	bf00      	nop
 800e1ae:	e002      	b.n	800e1b6 <tcp_process+0x7be>
      break;
 800e1b0:	bf00      	nop
 800e1b2:	e000      	b.n	800e1b6 <tcp_process+0x7be>
      break;
 800e1b4:	bf00      	nop
  }
  return ERR_OK;
 800e1b6:	2300      	movs	r3, #0
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3724      	adds	r7, #36	; 0x24
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd90      	pop	{r4, r7, pc}
 800e1c0:	2000e628 	.word	0x2000e628
 800e1c4:	2000e63c 	.word	0x2000e63c
 800e1c8:	20004278 	.word	0x20004278
 800e1cc:	20004270 	.word	0x20004270
 800e1d0:	20004279 	.word	0x20004279
 800e1d4:	2000e62c 	.word	0x2000e62c

0800e1d8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e1d8:	b590      	push	{r4, r7, lr}
 800e1da:	b085      	sub	sp, #20
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d106      	bne.n	800e1f6 <tcp_oos_insert_segment+0x1e>
 800e1e8:	4b3b      	ldr	r3, [pc, #236]	; (800e2d8 <tcp_oos_insert_segment+0x100>)
 800e1ea:	f240 421f 	movw	r2, #1055	; 0x41f
 800e1ee:	493b      	ldr	r1, [pc, #236]	; (800e2dc <tcp_oos_insert_segment+0x104>)
 800e1f0:	483b      	ldr	r0, [pc, #236]	; (800e2e0 <tcp_oos_insert_segment+0x108>)
 800e1f2:	f006 fda5 	bl	8014d40 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	68db      	ldr	r3, [r3, #12]
 800e1fa:	899b      	ldrh	r3, [r3, #12]
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7fb f9d2 	bl	80095a8 <lwip_htons>
 800e204:	4603      	mov	r3, r0
 800e206:	b2db      	uxtb	r3, r3
 800e208:	f003 0301 	and.w	r3, r3, #1
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d028      	beq.n	800e262 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e210:	6838      	ldr	r0, [r7, #0]
 800e212:	f7fe f999 	bl	800c548 <tcp_segs_free>
    next = NULL;
 800e216:	2300      	movs	r3, #0
 800e218:	603b      	str	r3, [r7, #0]
 800e21a:	e056      	b.n	800e2ca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	899b      	ldrh	r3, [r3, #12]
 800e222:	b29b      	uxth	r3, r3
 800e224:	4618      	mov	r0, r3
 800e226:	f7fb f9bf 	bl	80095a8 <lwip_htons>
 800e22a:	4603      	mov	r3, r0
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	f003 0301 	and.w	r3, r3, #1
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00d      	beq.n	800e252 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	899b      	ldrh	r3, [r3, #12]
 800e23c:	b29c      	uxth	r4, r3
 800e23e:	2001      	movs	r0, #1
 800e240:	f7fb f9b2 	bl	80095a8 <lwip_htons>
 800e244:	4603      	mov	r3, r0
 800e246:	461a      	mov	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	4322      	orrs	r2, r4
 800e24e:	b292      	uxth	r2, r2
 800e250:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f7fe f987 	bl	800c570 <tcp_seg_free>
    while (next &&
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00e      	beq.n	800e286 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	891b      	ldrh	r3, [r3, #8]
 800e26c:	461a      	mov	r2, r3
 800e26e:	4b1d      	ldr	r3, [pc, #116]	; (800e2e4 <tcp_oos_insert_segment+0x10c>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	441a      	add	r2, r3
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	8909      	ldrh	r1, [r1, #8]
 800e27e:	440b      	add	r3, r1
 800e280:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e282:	2b00      	cmp	r3, #0
 800e284:	daca      	bge.n	800e21c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d01e      	beq.n	800e2ca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	891b      	ldrh	r3, [r3, #8]
 800e290:	461a      	mov	r2, r3
 800e292:	4b14      	ldr	r3, [pc, #80]	; (800e2e4 <tcp_oos_insert_segment+0x10c>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	441a      	add	r2, r3
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	dd12      	ble.n	800e2ca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	4b0d      	ldr	r3, [pc, #52]	; (800e2e4 <tcp_oos_insert_segment+0x10c>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	b29a      	uxth	r2, r3
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	685a      	ldr	r2, [r3, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	891b      	ldrh	r3, [r3, #8]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	f7fc fb91 	bl	800a9ec <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	683a      	ldr	r2, [r7, #0]
 800e2ce:	601a      	str	r2, [r3, #0]
}
 800e2d0:	bf00      	nop
 800e2d2:	3714      	adds	r7, #20
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd90      	pop	{r4, r7, pc}
 800e2d8:	08017d9c 	.word	0x08017d9c
 800e2dc:	0801805c 	.word	0x0801805c
 800e2e0:	08017de8 	.word	0x08017de8
 800e2e4:	2000426c 	.word	0x2000426c

0800e2e8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e2e8:	b5b0      	push	{r4, r5, r7, lr}
 800e2ea:	b086      	sub	sp, #24
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
 800e2f4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e2f6:	e03e      	b.n	800e376 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	4618      	mov	r0, r3
 800e308:	f7fc fd84 	bl	800ae14 <pbuf_clen>
 800e30c:	4603      	mov	r3, r0
 800e30e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e316:	8a7a      	ldrh	r2, [r7, #18]
 800e318:	429a      	cmp	r2, r3
 800e31a:	d906      	bls.n	800e32a <tcp_free_acked_segments+0x42>
 800e31c:	4b2a      	ldr	r3, [pc, #168]	; (800e3c8 <tcp_free_acked_segments+0xe0>)
 800e31e:	f240 4257 	movw	r2, #1111	; 0x457
 800e322:	492a      	ldr	r1, [pc, #168]	; (800e3cc <tcp_free_acked_segments+0xe4>)
 800e324:	482a      	ldr	r0, [pc, #168]	; (800e3d0 <tcp_free_acked_segments+0xe8>)
 800e326:	f006 fd0b 	bl	8014d40 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e330:	8a7b      	ldrh	r3, [r7, #18]
 800e332:	1ad3      	subs	r3, r2, r3
 800e334:	b29a      	uxth	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	891a      	ldrh	r2, [r3, #8]
 800e340:	4b24      	ldr	r3, [pc, #144]	; (800e3d4 <tcp_free_acked_segments+0xec>)
 800e342:	881b      	ldrh	r3, [r3, #0]
 800e344:	4413      	add	r3, r2
 800e346:	b29a      	uxth	r2, r3
 800e348:	4b22      	ldr	r3, [pc, #136]	; (800e3d4 <tcp_free_acked_segments+0xec>)
 800e34a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e34c:	6978      	ldr	r0, [r7, #20]
 800e34e:	f7fe f90f 	bl	800c570 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00c      	beq.n	800e376 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d109      	bne.n	800e376 <tcp_free_acked_segments+0x8e>
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d106      	bne.n	800e376 <tcp_free_acked_segments+0x8e>
 800e368:	4b17      	ldr	r3, [pc, #92]	; (800e3c8 <tcp_free_acked_segments+0xe0>)
 800e36a:	f240 4262 	movw	r2, #1122	; 0x462
 800e36e:	491a      	ldr	r1, [pc, #104]	; (800e3d8 <tcp_free_acked_segments+0xf0>)
 800e370:	4817      	ldr	r0, [pc, #92]	; (800e3d0 <tcp_free_acked_segments+0xe8>)
 800e372:	f006 fce5 	bl	8014d40 <iprintf>
  while (seg_list != NULL &&
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d020      	beq.n	800e3be <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	685b      	ldr	r3, [r3, #4]
 800e382:	4618      	mov	r0, r3
 800e384:	f7fb f925 	bl	80095d2 <lwip_htonl>
 800e388:	4604      	mov	r4, r0
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	891b      	ldrh	r3, [r3, #8]
 800e38e:	461d      	mov	r5, r3
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	899b      	ldrh	r3, [r3, #12]
 800e396:	b29b      	uxth	r3, r3
 800e398:	4618      	mov	r0, r3
 800e39a:	f7fb f905 	bl	80095a8 <lwip_htons>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	f003 0303 	and.w	r3, r3, #3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <tcp_free_acked_segments+0xc6>
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e000      	b.n	800e3b0 <tcp_free_acked_segments+0xc8>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	442b      	add	r3, r5
 800e3b2:	18e2      	adds	r2, r4, r3
 800e3b4:	4b09      	ldr	r3, [pc, #36]	; (800e3dc <tcp_free_acked_segments+0xf4>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	dd9c      	ble.n	800e2f8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e3be:	68bb      	ldr	r3, [r7, #8]
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	3718      	adds	r7, #24
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bdb0      	pop	{r4, r5, r7, pc}
 800e3c8:	08017d9c 	.word	0x08017d9c
 800e3cc:	08018084 	.word	0x08018084
 800e3d0:	08017de8 	.word	0x08017de8
 800e3d4:	20004274 	.word	0x20004274
 800e3d8:	080180ac 	.word	0x080180ac
 800e3dc:	20004270 	.word	0x20004270

0800e3e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e3e0:	b5b0      	push	{r4, r5, r7, lr}
 800e3e2:	b094      	sub	sp, #80	; 0x50
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d106      	bne.n	800e400 <tcp_receive+0x20>
 800e3f2:	4ba6      	ldr	r3, [pc, #664]	; (800e68c <tcp_receive+0x2ac>)
 800e3f4:	f240 427b 	movw	r2, #1147	; 0x47b
 800e3f8:	49a5      	ldr	r1, [pc, #660]	; (800e690 <tcp_receive+0x2b0>)
 800e3fa:	48a6      	ldr	r0, [pc, #664]	; (800e694 <tcp_receive+0x2b4>)
 800e3fc:	f006 fca0 	bl	8014d40 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	7d1b      	ldrb	r3, [r3, #20]
 800e404:	2b03      	cmp	r3, #3
 800e406:	d806      	bhi.n	800e416 <tcp_receive+0x36>
 800e408:	4ba0      	ldr	r3, [pc, #640]	; (800e68c <tcp_receive+0x2ac>)
 800e40a:	f240 427c 	movw	r2, #1148	; 0x47c
 800e40e:	49a2      	ldr	r1, [pc, #648]	; (800e698 <tcp_receive+0x2b8>)
 800e410:	48a0      	ldr	r0, [pc, #640]	; (800e694 <tcp_receive+0x2b4>)
 800e412:	f006 fc95 	bl	8014d40 <iprintf>

  if (flags & TCP_ACK) {
 800e416:	4ba1      	ldr	r3, [pc, #644]	; (800e69c <tcp_receive+0x2bc>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	f003 0310 	and.w	r3, r3, #16
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f000 8263 	beq.w	800e8ea <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e42a:	461a      	mov	r2, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e430:	4413      	add	r3, r2
 800e432:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e438:	4b99      	ldr	r3, [pc, #612]	; (800e6a0 <tcp_receive+0x2c0>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	2b00      	cmp	r3, #0
 800e440:	db1b      	blt.n	800e47a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e446:	4b96      	ldr	r3, [pc, #600]	; (800e6a0 <tcp_receive+0x2c0>)
 800e448:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d106      	bne.n	800e45c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e452:	4b94      	ldr	r3, [pc, #592]	; (800e6a4 <tcp_receive+0x2c4>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	2b00      	cmp	r3, #0
 800e45a:	db0e      	blt.n	800e47a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e460:	4b90      	ldr	r3, [pc, #576]	; (800e6a4 <tcp_receive+0x2c4>)
 800e462:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e464:	429a      	cmp	r2, r3
 800e466:	d125      	bne.n	800e4b4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e468:	4b8f      	ldr	r3, [pc, #572]	; (800e6a8 <tcp_receive+0x2c8>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	89db      	ldrh	r3, [r3, #14]
 800e46e:	b29a      	uxth	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e476:	429a      	cmp	r2, r3
 800e478:	d91c      	bls.n	800e4b4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e47a:	4b8b      	ldr	r3, [pc, #556]	; (800e6a8 <tcp_receive+0x2c8>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	89db      	ldrh	r3, [r3, #14]
 800e480:	b29a      	uxth	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e494:	429a      	cmp	r2, r3
 800e496:	d205      	bcs.n	800e4a4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e4a4:	4b7e      	ldr	r3, [pc, #504]	; (800e6a0 <tcp_receive+0x2c0>)
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e4ac:	4b7d      	ldr	r3, [pc, #500]	; (800e6a4 <tcp_receive+0x2c4>)
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e4b4:	4b7b      	ldr	r3, [pc, #492]	; (800e6a4 <tcp_receive+0x2c4>)
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	dc58      	bgt.n	800e574 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e4c2:	4b7a      	ldr	r3, [pc, #488]	; (800e6ac <tcp_receive+0x2cc>)
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d14b      	bne.n	800e562 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e4d4:	4413      	add	r3, r2
 800e4d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d142      	bne.n	800e562 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	db3d      	blt.n	800e562 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4ea:	4b6e      	ldr	r3, [pc, #440]	; (800e6a4 <tcp_receive+0x2c4>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d137      	bne.n	800e562 <tcp_receive+0x182>
              found_dupack = 1;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4fc:	2bff      	cmp	r3, #255	; 0xff
 800e4fe:	d007      	beq.n	800e510 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e506:	3301      	adds	r3, #1
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e516:	2b03      	cmp	r3, #3
 800e518:	d91b      	bls.n	800e552 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e524:	4413      	add	r3, r2
 800e526:	b29a      	uxth	r2, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e52e:	429a      	cmp	r2, r3
 800e530:	d30a      	bcc.n	800e548 <tcp_receive+0x168>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e53c:	4413      	add	r3, r2
 800e53e:	b29a      	uxth	r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e546:	e004      	b.n	800e552 <tcp_receive+0x172>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e54e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e558:	2b02      	cmp	r3, #2
 800e55a:	d902      	bls.n	800e562 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f002 fb47 	bl	8010bf0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e564:	2b00      	cmp	r3, #0
 800e566:	f040 8160 	bne.w	800e82a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2200      	movs	r2, #0
 800e56e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e572:	e15a      	b.n	800e82a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e574:	4b4b      	ldr	r3, [pc, #300]	; (800e6a4 <tcp_receive+0x2c4>)
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e57c:	1ad3      	subs	r3, r2, r3
 800e57e:	3b01      	subs	r3, #1
 800e580:	2b00      	cmp	r3, #0
 800e582:	f2c0 814d 	blt.w	800e820 <tcp_receive+0x440>
 800e586:	4b47      	ldr	r3, [pc, #284]	; (800e6a4 <tcp_receive+0x2c4>)
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	2b00      	cmp	r3, #0
 800e592:	f300 8145 	bgt.w	800e820 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	8b5b      	ldrh	r3, [r3, #26]
 800e59a:	f003 0304 	and.w	r3, r3, #4
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d010      	beq.n	800e5c4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	8b5b      	ldrh	r3, [r3, #26]
 800e5a6:	f023 0304 	bic.w	r3, r3, #4
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5d2:	10db      	asrs	r3, r3, #3
 800e5d4:	b21b      	sxth	r3, r3
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	4413      	add	r3, r2
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	b21a      	sxth	r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e5ec:	4b2d      	ldr	r3, [pc, #180]	; (800e6a4 <tcp_receive+0x2c4>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	1ad3      	subs	r3, r2, r3
 800e5fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e604:	4b27      	ldr	r3, [pc, #156]	; (800e6a4 <tcp_receive+0x2c4>)
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	7d1b      	ldrb	r3, [r3, #20]
 800e610:	2b03      	cmp	r3, #3
 800e612:	f240 8096 	bls.w	800e742 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e622:	429a      	cmp	r2, r3
 800e624:	d244      	bcs.n	800e6b0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	8b5b      	ldrh	r3, [r3, #26]
 800e62a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <tcp_receive+0x256>
 800e632:	2301      	movs	r3, #1
 800e634:	e000      	b.n	800e638 <tcp_receive+0x258>
 800e636:	2302      	movs	r3, #2
 800e638:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e63c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e640:	b29a      	uxth	r2, r3
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e646:	fb12 f303 	smulbb	r3, r2, r3
 800e64a:	b29b      	uxth	r3, r3
 800e64c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e64e:	4293      	cmp	r3, r2
 800e650:	bf28      	it	cs
 800e652:	4613      	movcs	r3, r2
 800e654:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e65c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e65e:	4413      	add	r3, r2
 800e660:	b29a      	uxth	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e668:	429a      	cmp	r2, r3
 800e66a:	d309      	bcc.n	800e680 <tcp_receive+0x2a0>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e672:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e674:	4413      	add	r3, r2
 800e676:	b29a      	uxth	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e67e:	e060      	b.n	800e742 <tcp_receive+0x362>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e686:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e68a:	e05a      	b.n	800e742 <tcp_receive+0x362>
 800e68c:	08017d9c 	.word	0x08017d9c
 800e690:	080180cc 	.word	0x080180cc
 800e694:	08017de8 	.word	0x08017de8
 800e698:	080180e8 	.word	0x080180e8
 800e69c:	20004278 	.word	0x20004278
 800e6a0:	2000426c 	.word	0x2000426c
 800e6a4:	20004270 	.word	0x20004270
 800e6a8:	2000425c 	.word	0x2000425c
 800e6ac:	20004276 	.word	0x20004276
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6b8:	4413      	add	r3, r2
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d309      	bcc.n	800e6da <tcp_receive+0x2fa>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6ce:	4413      	add	r3, r2
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6d8:	e004      	b.n	800e6e4 <tcp_receive+0x304>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d326      	bcc.n	800e742 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	b29a      	uxth	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e714:	4413      	add	r3, r2
 800e716:	b29a      	uxth	r2, r3
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e71e:	429a      	cmp	r2, r3
 800e720:	d30a      	bcc.n	800e738 <tcp_receive+0x358>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e72c:	4413      	add	r3, r2
 800e72e:	b29a      	uxth	r2, r3
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e736:	e004      	b.n	800e742 <tcp_receive+0x362>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e73e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e74a:	4a98      	ldr	r2, [pc, #608]	; (800e9ac <tcp_receive+0x5cc>)
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7ff fdcb 	bl	800e2e8 <tcp_free_acked_segments>
 800e752:	4602      	mov	r2, r0
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e760:	4a93      	ldr	r2, [pc, #588]	; (800e9b0 <tcp_receive+0x5d0>)
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7ff fdc0 	bl	800e2e8 <tcp_free_acked_segments>
 800e768:	4602      	mov	r2, r0
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e772:	2b00      	cmp	r3, #0
 800e774:	d104      	bne.n	800e780 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e77c:	861a      	strh	r2, [r3, #48]	; 0x30
 800e77e:	e002      	b.n	800e786 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2200      	movs	r2, #0
 800e784:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2200      	movs	r2, #0
 800e78a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e790:	2b00      	cmp	r3, #0
 800e792:	d103      	bne.n	800e79c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2200      	movs	r2, #0
 800e798:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e7a2:	4b84      	ldr	r3, [pc, #528]	; (800e9b4 <tcp_receive+0x5d4>)
 800e7a4:	881b      	ldrh	r3, [r3, #0]
 800e7a6:	4413      	add	r3, r2
 800e7a8:	b29a      	uxth	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	8b5b      	ldrh	r3, [r3, #26]
 800e7b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d035      	beq.n	800e828 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d118      	bne.n	800e7f6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00c      	beq.n	800e7e6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fa fefa 	bl	80095d2 <lwip_htonl>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	dc20      	bgt.n	800e828 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	8b5b      	ldrh	r3, [r3, #26]
 800e7ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e7ee:	b29a      	uxth	r2, r3
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e7f4:	e018      	b.n	800e828 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	4618      	mov	r0, r3
 800e804:	f7fa fee5 	bl	80095d2 <lwip_htonl>
 800e808:	4603      	mov	r3, r0
 800e80a:	1ae3      	subs	r3, r4, r3
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	dc0b      	bgt.n	800e828 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	8b5b      	ldrh	r3, [r3, #26]
 800e814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e818:	b29a      	uxth	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e81e:	e003      	b.n	800e828 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f002 fbdd 	bl	8010fe0 <tcp_send_empty_ack>
 800e826:	e000      	b.n	800e82a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e828:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d05b      	beq.n	800e8ea <tcp_receive+0x50a>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e836:	4b60      	ldr	r3, [pc, #384]	; (800e9b8 <tcp_receive+0x5d8>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	da54      	bge.n	800e8ea <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e840:	4b5e      	ldr	r3, [pc, #376]	; (800e9bc <tcp_receive+0x5dc>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	b29a      	uxth	r2, r3
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	1ad3      	subs	r3, r2, r3
 800e84e:	b29b      	uxth	r3, r3
 800e850:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e854:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e85e:	10db      	asrs	r3, r3, #3
 800e860:	b21b      	sxth	r3, r3
 800e862:	b29b      	uxth	r3, r3
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	b29b      	uxth	r3, r3
 800e868:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e872:	b29a      	uxth	r2, r3
 800e874:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e878:	4413      	add	r3, r2
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	b21a      	sxth	r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e882:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e886:	2b00      	cmp	r3, #0
 800e888:	da05      	bge.n	800e896 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800e88a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e88e:	425b      	negs	r3, r3
 800e890:	b29b      	uxth	r3, r3
 800e892:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e896:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e8a0:	109b      	asrs	r3, r3, #2
 800e8a2:	b21b      	sxth	r3, r3
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e8b4:	b29a      	uxth	r2, r3
 800e8b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e8ba:	4413      	add	r3, r2
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	b21a      	sxth	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e8ca:	10db      	asrs	r3, r3, #3
 800e8cc:	b21b      	sxth	r3, r3
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	4413      	add	r3, r2
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	b21a      	sxth	r2, r3
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e8ea:	4b35      	ldr	r3, [pc, #212]	; (800e9c0 <tcp_receive+0x5e0>)
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f000 84e1 	beq.w	800f2b6 <tcp_receive+0xed6>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	7d1b      	ldrb	r3, [r3, #20]
 800e8f8:	2b06      	cmp	r3, #6
 800e8fa:	f200 84dc 	bhi.w	800f2b6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e902:	4b30      	ldr	r3, [pc, #192]	; (800e9c4 <tcp_receive+0x5e4>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	1ad3      	subs	r3, r2, r3
 800e908:	3b01      	subs	r3, #1
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	f2c0 808e 	blt.w	800ea2c <tcp_receive+0x64c>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e914:	4b2a      	ldr	r3, [pc, #168]	; (800e9c0 <tcp_receive+0x5e0>)
 800e916:	881b      	ldrh	r3, [r3, #0]
 800e918:	4619      	mov	r1, r3
 800e91a:	4b2a      	ldr	r3, [pc, #168]	; (800e9c4 <tcp_receive+0x5e4>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	440b      	add	r3, r1
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	3301      	adds	r3, #1
 800e924:	2b00      	cmp	r3, #0
 800e926:	f300 8081 	bgt.w	800ea2c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e92a:	4b27      	ldr	r3, [pc, #156]	; (800e9c8 <tcp_receive+0x5e8>)
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e934:	4b23      	ldr	r3, [pc, #140]	; (800e9c4 <tcp_receive+0x5e4>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e93c:	4b22      	ldr	r3, [pc, #136]	; (800e9c8 <tcp_receive+0x5e8>)
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d106      	bne.n	800e952 <tcp_receive+0x572>
 800e944:	4b21      	ldr	r3, [pc, #132]	; (800e9cc <tcp_receive+0x5ec>)
 800e946:	f240 5294 	movw	r2, #1428	; 0x594
 800e94a:	4921      	ldr	r1, [pc, #132]	; (800e9d0 <tcp_receive+0x5f0>)
 800e94c:	4821      	ldr	r0, [pc, #132]	; (800e9d4 <tcp_receive+0x5f4>)
 800e94e:	f006 f9f7 	bl	8014d40 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e954:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e958:	4293      	cmp	r3, r2
 800e95a:	d906      	bls.n	800e96a <tcp_receive+0x58a>
 800e95c:	4b1b      	ldr	r3, [pc, #108]	; (800e9cc <tcp_receive+0x5ec>)
 800e95e:	f240 5295 	movw	r2, #1429	; 0x595
 800e962:	491d      	ldr	r1, [pc, #116]	; (800e9d8 <tcp_receive+0x5f8>)
 800e964:	481b      	ldr	r0, [pc, #108]	; (800e9d4 <tcp_receive+0x5f4>)
 800e966:	f006 f9eb 	bl	8014d40 <iprintf>
      off = (u16_t)off32;
 800e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e970:	4b15      	ldr	r3, [pc, #84]	; (800e9c8 <tcp_receive+0x5e8>)
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	891b      	ldrh	r3, [r3, #8]
 800e976:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d906      	bls.n	800e98c <tcp_receive+0x5ac>
 800e97e:	4b13      	ldr	r3, [pc, #76]	; (800e9cc <tcp_receive+0x5ec>)
 800e980:	f240 5297 	movw	r2, #1431	; 0x597
 800e984:	4915      	ldr	r1, [pc, #84]	; (800e9dc <tcp_receive+0x5fc>)
 800e986:	4813      	ldr	r0, [pc, #76]	; (800e9d4 <tcp_receive+0x5f4>)
 800e988:	f006 f9da 	bl	8014d40 <iprintf>
      inseg.len -= off;
 800e98c:	4b0e      	ldr	r3, [pc, #56]	; (800e9c8 <tcp_receive+0x5e8>)
 800e98e:	891a      	ldrh	r2, [r3, #8]
 800e990:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e994:	1ad3      	subs	r3, r2, r3
 800e996:	b29a      	uxth	r2, r3
 800e998:	4b0b      	ldr	r3, [pc, #44]	; (800e9c8 <tcp_receive+0x5e8>)
 800e99a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e99c:	4b0a      	ldr	r3, [pc, #40]	; (800e9c8 <tcp_receive+0x5e8>)
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	891a      	ldrh	r2, [r3, #8]
 800e9a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e9aa:	e029      	b.n	800ea00 <tcp_receive+0x620>
 800e9ac:	08018104 	.word	0x08018104
 800e9b0:	0801810c 	.word	0x0801810c
 800e9b4:	20004274 	.word	0x20004274
 800e9b8:	20004270 	.word	0x20004270
 800e9bc:	2000e630 	.word	0x2000e630
 800e9c0:	20004276 	.word	0x20004276
 800e9c4:	2000426c 	.word	0x2000426c
 800e9c8:	2000424c 	.word	0x2000424c
 800e9cc:	08017d9c 	.word	0x08017d9c
 800e9d0:	08018114 	.word	0x08018114
 800e9d4:	08017de8 	.word	0x08017de8
 800e9d8:	08018124 	.word	0x08018124
 800e9dc:	08018134 	.word	0x08018134
        off -= p->len;
 800e9e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9e2:	895b      	ldrh	r3, [r3, #10]
 800e9e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e9e8:	1ad3      	subs	r3, r2, r3
 800e9ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e9ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e9f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ea00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea02:	895b      	ldrh	r3, [r3, #10]
 800ea04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d8e9      	bhi.n	800e9e0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ea0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea10:	4619      	mov	r1, r3
 800ea12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ea14:	f7fc f8ea 	bl	800abec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea1c:	4a91      	ldr	r2, [pc, #580]	; (800ec64 <tcp_receive+0x884>)
 800ea1e:	6013      	str	r3, [r2, #0]
 800ea20:	4b91      	ldr	r3, [pc, #580]	; (800ec68 <tcp_receive+0x888>)
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	4a8f      	ldr	r2, [pc, #572]	; (800ec64 <tcp_receive+0x884>)
 800ea26:	6812      	ldr	r2, [r2, #0]
 800ea28:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ea2a:	e00d      	b.n	800ea48 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ea2c:	4b8d      	ldr	r3, [pc, #564]	; (800ec64 <tcp_receive+0x884>)
 800ea2e:	681a      	ldr	r2, [r3, #0]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	da06      	bge.n	800ea48 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	8b5b      	ldrh	r3, [r3, #26]
 800ea3e:	f043 0302 	orr.w	r3, r3, #2
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea48:	4b86      	ldr	r3, [pc, #536]	; (800ec64 <tcp_receive+0x884>)
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea50:	1ad3      	subs	r3, r2, r3
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f2c0 842a 	blt.w	800f2ac <tcp_receive+0xecc>
 800ea58:	4b82      	ldr	r3, [pc, #520]	; (800ec64 <tcp_receive+0x884>)
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea60:	6879      	ldr	r1, [r7, #4]
 800ea62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea64:	440b      	add	r3, r1
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	3301      	adds	r3, #1
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f300 841e 	bgt.w	800f2ac <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea74:	4b7b      	ldr	r3, [pc, #492]	; (800ec64 <tcp_receive+0x884>)
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	429a      	cmp	r2, r3
 800ea7a:	f040 829a 	bne.w	800efb2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ea7e:	4b7a      	ldr	r3, [pc, #488]	; (800ec68 <tcp_receive+0x888>)
 800ea80:	891c      	ldrh	r4, [r3, #8]
 800ea82:	4b79      	ldr	r3, [pc, #484]	; (800ec68 <tcp_receive+0x888>)
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	899b      	ldrh	r3, [r3, #12]
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fa fd8c 	bl	80095a8 <lwip_htons>
 800ea90:	4603      	mov	r3, r0
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	f003 0303 	and.w	r3, r3, #3
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <tcp_receive+0x6c0>
 800ea9c:	2301      	movs	r3, #1
 800ea9e:	e000      	b.n	800eaa2 <tcp_receive+0x6c2>
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	4423      	add	r3, r4
 800eaa4:	b29a      	uxth	r2, r3
 800eaa6:	4b71      	ldr	r3, [pc, #452]	; (800ec6c <tcp_receive+0x88c>)
 800eaa8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eaae:	4b6f      	ldr	r3, [pc, #444]	; (800ec6c <tcp_receive+0x88c>)
 800eab0:	881b      	ldrh	r3, [r3, #0]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d275      	bcs.n	800eba2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eab6:	4b6c      	ldr	r3, [pc, #432]	; (800ec68 <tcp_receive+0x888>)
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	899b      	ldrh	r3, [r3, #12]
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fa fd72 	bl	80095a8 <lwip_htons>
 800eac4:	4603      	mov	r3, r0
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	f003 0301 	and.w	r3, r3, #1
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d01f      	beq.n	800eb10 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ead0:	4b65      	ldr	r3, [pc, #404]	; (800ec68 <tcp_receive+0x888>)
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	899b      	ldrh	r3, [r3, #12]
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	b21b      	sxth	r3, r3
 800eada:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eade:	b21c      	sxth	r4, r3
 800eae0:	4b61      	ldr	r3, [pc, #388]	; (800ec68 <tcp_receive+0x888>)
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	899b      	ldrh	r3, [r3, #12]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fa fd5d 	bl	80095a8 <lwip_htons>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fa fd54 	bl	80095a8 <lwip_htons>
 800eb00:	4603      	mov	r3, r0
 800eb02:	b21b      	sxth	r3, r3
 800eb04:	4323      	orrs	r3, r4
 800eb06:	b21a      	sxth	r2, r3
 800eb08:	4b57      	ldr	r3, [pc, #348]	; (800ec68 <tcp_receive+0x888>)
 800eb0a:	68db      	ldr	r3, [r3, #12]
 800eb0c:	b292      	uxth	r2, r2
 800eb0e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb14:	4b54      	ldr	r3, [pc, #336]	; (800ec68 <tcp_receive+0x888>)
 800eb16:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eb18:	4b53      	ldr	r3, [pc, #332]	; (800ec68 <tcp_receive+0x888>)
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	899b      	ldrh	r3, [r3, #12]
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7fa fd41 	bl	80095a8 <lwip_htons>
 800eb26:	4603      	mov	r3, r0
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	f003 0302 	and.w	r3, r3, #2
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d005      	beq.n	800eb3e <tcp_receive+0x75e>
            inseg.len -= 1;
 800eb32:	4b4d      	ldr	r3, [pc, #308]	; (800ec68 <tcp_receive+0x888>)
 800eb34:	891b      	ldrh	r3, [r3, #8]
 800eb36:	3b01      	subs	r3, #1
 800eb38:	b29a      	uxth	r2, r3
 800eb3a:	4b4b      	ldr	r3, [pc, #300]	; (800ec68 <tcp_receive+0x888>)
 800eb3c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800eb3e:	4b4a      	ldr	r3, [pc, #296]	; (800ec68 <tcp_receive+0x888>)
 800eb40:	685a      	ldr	r2, [r3, #4]
 800eb42:	4b49      	ldr	r3, [pc, #292]	; (800ec68 <tcp_receive+0x888>)
 800eb44:	891b      	ldrh	r3, [r3, #8]
 800eb46:	4619      	mov	r1, r3
 800eb48:	4610      	mov	r0, r2
 800eb4a:	f7fb ff4f 	bl	800a9ec <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800eb4e:	4b46      	ldr	r3, [pc, #280]	; (800ec68 <tcp_receive+0x888>)
 800eb50:	891c      	ldrh	r4, [r3, #8]
 800eb52:	4b45      	ldr	r3, [pc, #276]	; (800ec68 <tcp_receive+0x888>)
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	899b      	ldrh	r3, [r3, #12]
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fa fd24 	bl	80095a8 <lwip_htons>
 800eb60:	4603      	mov	r3, r0
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	f003 0303 	and.w	r3, r3, #3
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d001      	beq.n	800eb70 <tcp_receive+0x790>
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e000      	b.n	800eb72 <tcp_receive+0x792>
 800eb70:	2300      	movs	r3, #0
 800eb72:	4423      	add	r3, r4
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	4b3d      	ldr	r3, [pc, #244]	; (800ec6c <tcp_receive+0x88c>)
 800eb78:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eb7a:	4b3c      	ldr	r3, [pc, #240]	; (800ec6c <tcp_receive+0x88c>)
 800eb7c:	881b      	ldrh	r3, [r3, #0]
 800eb7e:	461a      	mov	r2, r3
 800eb80:	4b38      	ldr	r3, [pc, #224]	; (800ec64 <tcp_receive+0x884>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	441a      	add	r2, r3
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8a:	6879      	ldr	r1, [r7, #4]
 800eb8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb8e:	440b      	add	r3, r1
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d006      	beq.n	800eba2 <tcp_receive+0x7c2>
 800eb94:	4b36      	ldr	r3, [pc, #216]	; (800ec70 <tcp_receive+0x890>)
 800eb96:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800eb9a:	4936      	ldr	r1, [pc, #216]	; (800ec74 <tcp_receive+0x894>)
 800eb9c:	4836      	ldr	r0, [pc, #216]	; (800ec78 <tcp_receive+0x898>)
 800eb9e:	f006 f8cf 	bl	8014d40 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	f000 80e7 	beq.w	800ed7a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ebac:	4b2e      	ldr	r3, [pc, #184]	; (800ec68 <tcp_receive+0x888>)
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	899b      	ldrh	r3, [r3, #12]
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fa fcf7 	bl	80095a8 <lwip_htons>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	f003 0301 	and.w	r3, r3, #1
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d010      	beq.n	800ebe8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ebc6:	e00a      	b.n	800ebde <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebcc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	f7fd fcc9 	bl	800c570 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1f0      	bne.n	800ebc8 <tcp_receive+0x7e8>
 800ebe6:	e0c8      	b.n	800ed7a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ebee:	e052      	b.n	800ec96 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ebf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf2:	68db      	ldr	r3, [r3, #12]
 800ebf4:	899b      	ldrh	r3, [r3, #12]
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fa fcd5 	bl	80095a8 <lwip_htons>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	f003 0301 	and.w	r3, r3, #1
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d03d      	beq.n	800ec86 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ec0a:	4b17      	ldr	r3, [pc, #92]	; (800ec68 <tcp_receive+0x888>)
 800ec0c:	68db      	ldr	r3, [r3, #12]
 800ec0e:	899b      	ldrh	r3, [r3, #12]
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fa fcc8 	bl	80095a8 <lwip_htons>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d130      	bne.n	800ec86 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ec24:	4b10      	ldr	r3, [pc, #64]	; (800ec68 <tcp_receive+0x888>)
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	899b      	ldrh	r3, [r3, #12]
 800ec2a:	b29c      	uxth	r4, r3
 800ec2c:	2001      	movs	r0, #1
 800ec2e:	f7fa fcbb 	bl	80095a8 <lwip_htons>
 800ec32:	4603      	mov	r3, r0
 800ec34:	461a      	mov	r2, r3
 800ec36:	4b0c      	ldr	r3, [pc, #48]	; (800ec68 <tcp_receive+0x888>)
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	4322      	orrs	r2, r4
 800ec3c:	b292      	uxth	r2, r2
 800ec3e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ec40:	4b09      	ldr	r3, [pc, #36]	; (800ec68 <tcp_receive+0x888>)
 800ec42:	891c      	ldrh	r4, [r3, #8]
 800ec44:	4b08      	ldr	r3, [pc, #32]	; (800ec68 <tcp_receive+0x888>)
 800ec46:	68db      	ldr	r3, [r3, #12]
 800ec48:	899b      	ldrh	r3, [r3, #12]
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fa fcab 	bl	80095a8 <lwip_htons>
 800ec52:	4603      	mov	r3, r0
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	f003 0303 	and.w	r3, r3, #3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00e      	beq.n	800ec7c <tcp_receive+0x89c>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e00d      	b.n	800ec7e <tcp_receive+0x89e>
 800ec62:	bf00      	nop
 800ec64:	2000426c 	.word	0x2000426c
 800ec68:	2000424c 	.word	0x2000424c
 800ec6c:	20004276 	.word	0x20004276
 800ec70:	08017d9c 	.word	0x08017d9c
 800ec74:	08018144 	.word	0x08018144
 800ec78:	08017de8 	.word	0x08017de8
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4423      	add	r3, r4
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	4b98      	ldr	r3, [pc, #608]	; (800eee4 <tcp_receive+0xb04>)
 800ec84:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ec86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec88:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ec8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ec90:	6938      	ldr	r0, [r7, #16]
 800ec92:	f7fd fc6d 	bl	800c570 <tcp_seg_free>
            while (next &&
 800ec96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d00e      	beq.n	800ecba <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ec9c:	4b91      	ldr	r3, [pc, #580]	; (800eee4 <tcp_receive+0xb04>)
 800ec9e:	881b      	ldrh	r3, [r3, #0]
 800eca0:	461a      	mov	r2, r3
 800eca2:	4b91      	ldr	r3, [pc, #580]	; (800eee8 <tcp_receive+0xb08>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	441a      	add	r2, r3
 800eca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ecb0:	8909      	ldrh	r1, [r1, #8]
 800ecb2:	440b      	add	r3, r1
 800ecb4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	da9a      	bge.n	800ebf0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ecba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d059      	beq.n	800ed74 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ecc0:	4b88      	ldr	r3, [pc, #544]	; (800eee4 <tcp_receive+0xb04>)
 800ecc2:	881b      	ldrh	r3, [r3, #0]
 800ecc4:	461a      	mov	r2, r3
 800ecc6:	4b88      	ldr	r3, [pc, #544]	; (800eee8 <tcp_receive+0xb08>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	441a      	add	r2, r3
 800eccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	dd4d      	ble.n	800ed74 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ecd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	685b      	ldr	r3, [r3, #4]
 800ecde:	b29a      	uxth	r2, r3
 800ece0:	4b81      	ldr	r3, [pc, #516]	; (800eee8 <tcp_receive+0xb08>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	4b80      	ldr	r3, [pc, #512]	; (800eeec <tcp_receive+0xb0c>)
 800ecec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ecee:	4b7f      	ldr	r3, [pc, #508]	; (800eeec <tcp_receive+0xb0c>)
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	899b      	ldrh	r3, [r3, #12]
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fa fc56 	bl	80095a8 <lwip_htons>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	f003 0302 	and.w	r3, r3, #2
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d005      	beq.n	800ed14 <tcp_receive+0x934>
                inseg.len -= 1;
 800ed08:	4b78      	ldr	r3, [pc, #480]	; (800eeec <tcp_receive+0xb0c>)
 800ed0a:	891b      	ldrh	r3, [r3, #8]
 800ed0c:	3b01      	subs	r3, #1
 800ed0e:	b29a      	uxth	r2, r3
 800ed10:	4b76      	ldr	r3, [pc, #472]	; (800eeec <tcp_receive+0xb0c>)
 800ed12:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ed14:	4b75      	ldr	r3, [pc, #468]	; (800eeec <tcp_receive+0xb0c>)
 800ed16:	685a      	ldr	r2, [r3, #4]
 800ed18:	4b74      	ldr	r3, [pc, #464]	; (800eeec <tcp_receive+0xb0c>)
 800ed1a:	891b      	ldrh	r3, [r3, #8]
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	4610      	mov	r0, r2
 800ed20:	f7fb fe64 	bl	800a9ec <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ed24:	4b71      	ldr	r3, [pc, #452]	; (800eeec <tcp_receive+0xb0c>)
 800ed26:	891c      	ldrh	r4, [r3, #8]
 800ed28:	4b70      	ldr	r3, [pc, #448]	; (800eeec <tcp_receive+0xb0c>)
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	899b      	ldrh	r3, [r3, #12]
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7fa fc39 	bl	80095a8 <lwip_htons>
 800ed36:	4603      	mov	r3, r0
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	f003 0303 	and.w	r3, r3, #3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <tcp_receive+0x966>
 800ed42:	2301      	movs	r3, #1
 800ed44:	e000      	b.n	800ed48 <tcp_receive+0x968>
 800ed46:	2300      	movs	r3, #0
 800ed48:	4423      	add	r3, r4
 800ed4a:	b29a      	uxth	r2, r3
 800ed4c:	4b65      	ldr	r3, [pc, #404]	; (800eee4 <tcp_receive+0xb04>)
 800ed4e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ed50:	4b64      	ldr	r3, [pc, #400]	; (800eee4 <tcp_receive+0xb04>)
 800ed52:	881b      	ldrh	r3, [r3, #0]
 800ed54:	461a      	mov	r2, r3
 800ed56:	4b64      	ldr	r3, [pc, #400]	; (800eee8 <tcp_receive+0xb08>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	441a      	add	r2, r3
 800ed5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d006      	beq.n	800ed74 <tcp_receive+0x994>
 800ed66:	4b62      	ldr	r3, [pc, #392]	; (800eef0 <tcp_receive+0xb10>)
 800ed68:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800ed6c:	4961      	ldr	r1, [pc, #388]	; (800eef4 <tcp_receive+0xb14>)
 800ed6e:	4862      	ldr	r0, [pc, #392]	; (800eef8 <tcp_receive+0xb18>)
 800ed70:	f005 ffe6 	bl	8014d40 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed78:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ed7a:	4b5a      	ldr	r3, [pc, #360]	; (800eee4 <tcp_receive+0xb04>)
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	461a      	mov	r2, r3
 800ed80:	4b59      	ldr	r3, [pc, #356]	; (800eee8 <tcp_receive+0xb08>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	441a      	add	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed8e:	4b55      	ldr	r3, [pc, #340]	; (800eee4 <tcp_receive+0xb04>)
 800ed90:	881b      	ldrh	r3, [r3, #0]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d206      	bcs.n	800eda4 <tcp_receive+0x9c4>
 800ed96:	4b56      	ldr	r3, [pc, #344]	; (800eef0 <tcp_receive+0xb10>)
 800ed98:	f240 6207 	movw	r2, #1543	; 0x607
 800ed9c:	4957      	ldr	r1, [pc, #348]	; (800eefc <tcp_receive+0xb1c>)
 800ed9e:	4856      	ldr	r0, [pc, #344]	; (800eef8 <tcp_receive+0xb18>)
 800eda0:	f005 ffce 	bl	8014d40 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eda8:	4b4e      	ldr	r3, [pc, #312]	; (800eee4 <tcp_receive+0xb04>)
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	b29a      	uxth	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f7fc fda1 	bl	800b8fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800edba:	4b4c      	ldr	r3, [pc, #304]	; (800eeec <tcp_receive+0xb0c>)
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	891b      	ldrh	r3, [r3, #8]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d006      	beq.n	800edd2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800edc4:	4b49      	ldr	r3, [pc, #292]	; (800eeec <tcp_receive+0xb0c>)
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	4a4d      	ldr	r2, [pc, #308]	; (800ef00 <tcp_receive+0xb20>)
 800edca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800edcc:	4b47      	ldr	r3, [pc, #284]	; (800eeec <tcp_receive+0xb0c>)
 800edce:	2200      	movs	r2, #0
 800edd0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800edd2:	4b46      	ldr	r3, [pc, #280]	; (800eeec <tcp_receive+0xb0c>)
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	899b      	ldrh	r3, [r3, #12]
 800edd8:	b29b      	uxth	r3, r3
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fa fbe4 	bl	80095a8 <lwip_htons>
 800ede0:	4603      	mov	r3, r0
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	f003 0301 	and.w	r3, r3, #1
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 80b8 	beq.w	800ef5e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800edee:	4b45      	ldr	r3, [pc, #276]	; (800ef04 <tcp_receive+0xb24>)
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	f043 0320 	orr.w	r3, r3, #32
 800edf6:	b2da      	uxtb	r2, r3
 800edf8:	4b42      	ldr	r3, [pc, #264]	; (800ef04 <tcp_receive+0xb24>)
 800edfa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800edfc:	e0af      	b.n	800ef5e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee02:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	4a36      	ldr	r2, [pc, #216]	; (800eee8 <tcp_receive+0xb08>)
 800ee0e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	891b      	ldrh	r3, [r3, #8]
 800ee14:	461c      	mov	r4, r3
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	899b      	ldrh	r3, [r3, #12]
 800ee1c:	b29b      	uxth	r3, r3
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fa fbc2 	bl	80095a8 <lwip_htons>
 800ee24:	4603      	mov	r3, r0
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	f003 0303 	and.w	r3, r3, #3
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d001      	beq.n	800ee34 <tcp_receive+0xa54>
 800ee30:	2301      	movs	r3, #1
 800ee32:	e000      	b.n	800ee36 <tcp_receive+0xa56>
 800ee34:	2300      	movs	r3, #0
 800ee36:	191a      	adds	r2, r3, r4
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee3c:	441a      	add	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee46:	461c      	mov	r4, r3
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	891b      	ldrh	r3, [r3, #8]
 800ee4c:	461d      	mov	r5, r3
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	899b      	ldrh	r3, [r3, #12]
 800ee54:	b29b      	uxth	r3, r3
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7fa fba6 	bl	80095a8 <lwip_htons>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	f003 0303 	and.w	r3, r3, #3
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d001      	beq.n	800ee6c <tcp_receive+0xa8c>
 800ee68:	2301      	movs	r3, #1
 800ee6a:	e000      	b.n	800ee6e <tcp_receive+0xa8e>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	442b      	add	r3, r5
 800ee70:	429c      	cmp	r4, r3
 800ee72:	d206      	bcs.n	800ee82 <tcp_receive+0xaa2>
 800ee74:	4b1e      	ldr	r3, [pc, #120]	; (800eef0 <tcp_receive+0xb10>)
 800ee76:	f240 622c 	movw	r2, #1580	; 0x62c
 800ee7a:	4923      	ldr	r1, [pc, #140]	; (800ef08 <tcp_receive+0xb28>)
 800ee7c:	481e      	ldr	r0, [pc, #120]	; (800eef8 <tcp_receive+0xb18>)
 800ee7e:	f005 ff5f 	bl	8014d40 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	891b      	ldrh	r3, [r3, #8]
 800ee86:	461c      	mov	r4, r3
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	899b      	ldrh	r3, [r3, #12]
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fa fb89 	bl	80095a8 <lwip_htons>
 800ee96:	4603      	mov	r3, r0
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	f003 0303 	and.w	r3, r3, #3
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d001      	beq.n	800eea6 <tcp_receive+0xac6>
 800eea2:	2301      	movs	r3, #1
 800eea4:	e000      	b.n	800eea8 <tcp_receive+0xac8>
 800eea6:	2300      	movs	r3, #0
 800eea8:	1919      	adds	r1, r3, r4
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eeae:	b28b      	uxth	r3, r1
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	b29a      	uxth	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7fc fd1f 	bl	800b8fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	891b      	ldrh	r3, [r3, #8]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d028      	beq.n	800ef1a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800eec8:	4b0d      	ldr	r3, [pc, #52]	; (800ef00 <tcp_receive+0xb20>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d01d      	beq.n	800ef0c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800eed0:	4b0b      	ldr	r3, [pc, #44]	; (800ef00 <tcp_receive+0xb20>)
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	4619      	mov	r1, r3
 800eeda:	4610      	mov	r0, r2
 800eedc:	f7fb ffda 	bl	800ae94 <pbuf_cat>
 800eee0:	e018      	b.n	800ef14 <tcp_receive+0xb34>
 800eee2:	bf00      	nop
 800eee4:	20004276 	.word	0x20004276
 800eee8:	2000426c 	.word	0x2000426c
 800eeec:	2000424c 	.word	0x2000424c
 800eef0:	08017d9c 	.word	0x08017d9c
 800eef4:	0801817c 	.word	0x0801817c
 800eef8:	08017de8 	.word	0x08017de8
 800eefc:	080181b8 	.word	0x080181b8
 800ef00:	2000427c 	.word	0x2000427c
 800ef04:	20004279 	.word	0x20004279
 800ef08:	080181d8 	.word	0x080181d8
            } else {
              recv_data = cseg->p;
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	4a70      	ldr	r2, [pc, #448]	; (800f0d4 <tcp_receive+0xcf4>)
 800ef12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	2200      	movs	r2, #0
 800ef18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	899b      	ldrh	r3, [r3, #12]
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fa fb40 	bl	80095a8 <lwip_htons>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	f003 0301 	and.w	r3, r3, #1
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00d      	beq.n	800ef50 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ef34:	4b68      	ldr	r3, [pc, #416]	; (800f0d8 <tcp_receive+0xcf8>)
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	f043 0320 	orr.w	r3, r3, #32
 800ef3c:	b2da      	uxtb	r2, r3
 800ef3e:	4b66      	ldr	r3, [pc, #408]	; (800f0d8 <tcp_receive+0xcf8>)
 800ef40:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	7d1b      	ldrb	r3, [r3, #20]
 800ef46:	2b04      	cmp	r3, #4
 800ef48:	d102      	bne.n	800ef50 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2207      	movs	r2, #7
 800ef4e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ef58:	68b8      	ldr	r0, [r7, #8]
 800ef5a:	f7fd fb09 	bl	800c570 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d008      	beq.n	800ef78 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	685a      	ldr	r2, [r3, #4]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ef72:	429a      	cmp	r2, r3
 800ef74:	f43f af43 	beq.w	800edfe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	8b5b      	ldrh	r3, [r3, #26]
 800ef7c:	f003 0301 	and.w	r3, r3, #1
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00e      	beq.n	800efa2 <tcp_receive+0xbc2>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	8b5b      	ldrh	r3, [r3, #26]
 800ef88:	f023 0301 	bic.w	r3, r3, #1
 800ef8c:	b29a      	uxth	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	835a      	strh	r2, [r3, #26]
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	8b5b      	ldrh	r3, [r3, #26]
 800ef96:	f043 0302 	orr.w	r3, r3, #2
 800ef9a:	b29a      	uxth	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800efa0:	e188      	b.n	800f2b4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	8b5b      	ldrh	r3, [r3, #26]
 800efa6:	f043 0301 	orr.w	r3, r3, #1
 800efaa:	b29a      	uxth	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800efb0:	e180      	b.n	800f2b4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d106      	bne.n	800efc8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800efba:	4848      	ldr	r0, [pc, #288]	; (800f0dc <tcp_receive+0xcfc>)
 800efbc:	f7fd faf0 	bl	800c5a0 <tcp_seg_copy>
 800efc0:	4602      	mov	r2, r0
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	675a      	str	r2, [r3, #116]	; 0x74
 800efc6:	e16d      	b.n	800f2a4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800efc8:	2300      	movs	r3, #0
 800efca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efd0:	63bb      	str	r3, [r7, #56]	; 0x38
 800efd2:	e157      	b.n	800f284 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	685a      	ldr	r2, [r3, #4]
 800efda:	4b41      	ldr	r3, [pc, #260]	; (800f0e0 <tcp_receive+0xd00>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d11d      	bne.n	800f01e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800efe2:	4b3e      	ldr	r3, [pc, #248]	; (800f0dc <tcp_receive+0xcfc>)
 800efe4:	891a      	ldrh	r2, [r3, #8]
 800efe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe8:	891b      	ldrh	r3, [r3, #8]
 800efea:	429a      	cmp	r2, r3
 800efec:	f240 814f 	bls.w	800f28e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800eff0:	483a      	ldr	r0, [pc, #232]	; (800f0dc <tcp_receive+0xcfc>)
 800eff2:	f7fd fad5 	bl	800c5a0 <tcp_seg_copy>
 800eff6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800eff8:	697b      	ldr	r3, [r7, #20]
 800effa:	2b00      	cmp	r3, #0
 800effc:	f000 8149 	beq.w	800f292 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f002:	2b00      	cmp	r3, #0
 800f004:	d003      	beq.n	800f00e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f008:	697a      	ldr	r2, [r7, #20]
 800f00a:	601a      	str	r2, [r3, #0]
 800f00c:	e002      	b.n	800f014 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	697a      	ldr	r2, [r7, #20]
 800f012:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f014:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f016:	6978      	ldr	r0, [r7, #20]
 800f018:	f7ff f8de 	bl	800e1d8 <tcp_oos_insert_segment>
                }
                break;
 800f01c:	e139      	b.n	800f292 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f020:	2b00      	cmp	r3, #0
 800f022:	d117      	bne.n	800f054 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f024:	4b2e      	ldr	r3, [pc, #184]	; (800f0e0 <tcp_receive+0xd00>)
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	1ad3      	subs	r3, r2, r3
 800f030:	2b00      	cmp	r3, #0
 800f032:	da57      	bge.n	800f0e4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f034:	4829      	ldr	r0, [pc, #164]	; (800f0dc <tcp_receive+0xcfc>)
 800f036:	f7fd fab3 	bl	800c5a0 <tcp_seg_copy>
 800f03a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f03c:	69bb      	ldr	r3, [r7, #24]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	f000 8129 	beq.w	800f296 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	69ba      	ldr	r2, [r7, #24]
 800f048:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f04a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f04c:	69b8      	ldr	r0, [r7, #24]
 800f04e:	f7ff f8c3 	bl	800e1d8 <tcp_oos_insert_segment>
                  }
                  break;
 800f052:	e120      	b.n	800f296 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f054:	4b22      	ldr	r3, [pc, #136]	; (800f0e0 <tcp_receive+0xd00>)
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f05a:	68db      	ldr	r3, [r3, #12]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	1ad3      	subs	r3, r2, r3
 800f060:	3b01      	subs	r3, #1
 800f062:	2b00      	cmp	r3, #0
 800f064:	db3e      	blt.n	800f0e4 <tcp_receive+0xd04>
 800f066:	4b1e      	ldr	r3, [pc, #120]	; (800f0e0 <tcp_receive+0xd00>)
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	1ad3      	subs	r3, r2, r3
 800f072:	3301      	adds	r3, #1
 800f074:	2b00      	cmp	r3, #0
 800f076:	dc35      	bgt.n	800f0e4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f078:	4818      	ldr	r0, [pc, #96]	; (800f0dc <tcp_receive+0xcfc>)
 800f07a:	f7fd fa91 	bl	800c5a0 <tcp_seg_copy>
 800f07e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f080:	69fb      	ldr	r3, [r7, #28]
 800f082:	2b00      	cmp	r3, #0
 800f084:	f000 8109 	beq.w	800f29a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f090:	8912      	ldrh	r2, [r2, #8]
 800f092:	441a      	add	r2, r3
 800f094:	4b12      	ldr	r3, [pc, #72]	; (800f0e0 <tcp_receive+0xd00>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	dd12      	ble.n	800f0c4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f09e:	4b10      	ldr	r3, [pc, #64]	; (800f0e0 <tcp_receive+0xd00>)
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	1ad3      	subs	r3, r2, r3
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b6:	685a      	ldr	r2, [r3, #4]
 800f0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ba:	891b      	ldrh	r3, [r3, #8]
 800f0bc:	4619      	mov	r1, r3
 800f0be:	4610      	mov	r0, r2
 800f0c0:	f7fb fc94 	bl	800a9ec <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0c6:	69fa      	ldr	r2, [r7, #28]
 800f0c8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f0ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0cc:	69f8      	ldr	r0, [r7, #28]
 800f0ce:	f7ff f883 	bl	800e1d8 <tcp_oos_insert_segment>
                  }
                  break;
 800f0d2:	e0e2      	b.n	800f29a <tcp_receive+0xeba>
 800f0d4:	2000427c 	.word	0x2000427c
 800f0d8:	20004279 	.word	0x20004279
 800f0dc:	2000424c 	.word	0x2000424c
 800f0e0:	2000426c 	.word	0x2000426c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f040 80c6 	bne.w	800f27e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f0f2:	4b80      	ldr	r3, [pc, #512]	; (800f2f4 <tcp_receive+0xf14>)
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	f340 80bd 	ble.w	800f27e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	899b      	ldrh	r3, [r3, #12]
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	4618      	mov	r0, r3
 800f10e:	f7fa fa4b 	bl	80095a8 <lwip_htons>
 800f112:	4603      	mov	r3, r0
 800f114:	b2db      	uxtb	r3, r3
 800f116:	f003 0301 	and.w	r3, r3, #1
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	f040 80bf 	bne.w	800f29e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f120:	4875      	ldr	r0, [pc, #468]	; (800f2f8 <tcp_receive+0xf18>)
 800f122:	f7fd fa3d 	bl	800c5a0 <tcp_seg_copy>
 800f126:	4602      	mov	r2, r0
 800f128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	f000 80b6 	beq.w	800f2a2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f13e:	8912      	ldrh	r2, [r2, #8]
 800f140:	441a      	add	r2, r3
 800f142:	4b6c      	ldr	r3, [pc, #432]	; (800f2f4 <tcp_receive+0xf14>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	1ad3      	subs	r3, r2, r3
 800f148:	2b00      	cmp	r3, #0
 800f14a:	dd12      	ble.n	800f172 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f14c:	4b69      	ldr	r3, [pc, #420]	; (800f2f4 <tcp_receive+0xf14>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	b29a      	uxth	r2, r3
 800f152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f160:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f164:	685a      	ldr	r2, [r3, #4]
 800f166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f168:	891b      	ldrh	r3, [r3, #8]
 800f16a:	4619      	mov	r1, r3
 800f16c:	4610      	mov	r0, r2
 800f16e:	f7fb fc3d 	bl	800a9ec <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f172:	4b62      	ldr	r3, [pc, #392]	; (800f2fc <tcp_receive+0xf1c>)
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	461a      	mov	r2, r3
 800f178:	4b5e      	ldr	r3, [pc, #376]	; (800f2f4 <tcp_receive+0xf14>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	441a      	add	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f182:	6879      	ldr	r1, [r7, #4]
 800f184:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f186:	440b      	add	r3, r1
 800f188:	1ad3      	subs	r3, r2, r3
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	f340 8089 	ble.w	800f2a2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	899b      	ldrh	r3, [r3, #12]
 800f198:	b29b      	uxth	r3, r3
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fa fa04 	bl	80095a8 <lwip_htons>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	f003 0301 	and.w	r3, r3, #1
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d022      	beq.n	800f1f2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	899b      	ldrh	r3, [r3, #12]
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	b21b      	sxth	r3, r3
 800f1b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f1bc:	b21c      	sxth	r4, r3
 800f1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	68db      	ldr	r3, [r3, #12]
 800f1c4:	899b      	ldrh	r3, [r3, #12]
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7fa f9ed 	bl	80095a8 <lwip_htons>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fa f9e4 	bl	80095a8 <lwip_htons>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	b21b      	sxth	r3, r3
 800f1e4:	4323      	orrs	r3, r4
 800f1e6:	b21a      	sxth	r2, r3
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	b292      	uxth	r2, r2
 800f1f0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f6:	b29a      	uxth	r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1fc:	4413      	add	r3, r2
 800f1fe:	b299      	uxth	r1, r3
 800f200:	4b3c      	ldr	r3, [pc, #240]	; (800f2f4 <tcp_receive+0xf14>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	b29a      	uxth	r2, r3
 800f206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	1a8a      	subs	r2, r1, r2
 800f20c:	b292      	uxth	r2, r2
 800f20e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	685a      	ldr	r2, [r3, #4]
 800f216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	891b      	ldrh	r3, [r3, #8]
 800f21c:	4619      	mov	r1, r3
 800f21e:	4610      	mov	r0, r2
 800f220:	f7fb fbe4 	bl	800a9ec <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	891c      	ldrh	r4, [r3, #8]
 800f22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	899b      	ldrh	r3, [r3, #12]
 800f232:	b29b      	uxth	r3, r3
 800f234:	4618      	mov	r0, r3
 800f236:	f7fa f9b7 	bl	80095a8 <lwip_htons>
 800f23a:	4603      	mov	r3, r0
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	f003 0303 	and.w	r3, r3, #3
 800f242:	2b00      	cmp	r3, #0
 800f244:	d001      	beq.n	800f24a <tcp_receive+0xe6a>
 800f246:	2301      	movs	r3, #1
 800f248:	e000      	b.n	800f24c <tcp_receive+0xe6c>
 800f24a:	2300      	movs	r3, #0
 800f24c:	4423      	add	r3, r4
 800f24e:	b29a      	uxth	r2, r3
 800f250:	4b2a      	ldr	r3, [pc, #168]	; (800f2fc <tcp_receive+0xf1c>)
 800f252:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f254:	4b29      	ldr	r3, [pc, #164]	; (800f2fc <tcp_receive+0xf1c>)
 800f256:	881b      	ldrh	r3, [r3, #0]
 800f258:	461a      	mov	r2, r3
 800f25a:	4b26      	ldr	r3, [pc, #152]	; (800f2f4 <tcp_receive+0xf14>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	441a      	add	r2, r3
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f264:	6879      	ldr	r1, [r7, #4]
 800f266:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f268:	440b      	add	r3, r1
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d019      	beq.n	800f2a2 <tcp_receive+0xec2>
 800f26e:	4b24      	ldr	r3, [pc, #144]	; (800f300 <tcp_receive+0xf20>)
 800f270:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f274:	4923      	ldr	r1, [pc, #140]	; (800f304 <tcp_receive+0xf24>)
 800f276:	4824      	ldr	r0, [pc, #144]	; (800f308 <tcp_receive+0xf28>)
 800f278:	f005 fd62 	bl	8014d40 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f27c:	e011      	b.n	800f2a2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	63bb      	str	r3, [r7, #56]	; 0x38
 800f284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f286:	2b00      	cmp	r3, #0
 800f288:	f47f aea4 	bne.w	800efd4 <tcp_receive+0xbf4>
 800f28c:	e00a      	b.n	800f2a4 <tcp_receive+0xec4>
                break;
 800f28e:	bf00      	nop
 800f290:	e008      	b.n	800f2a4 <tcp_receive+0xec4>
                break;
 800f292:	bf00      	nop
 800f294:	e006      	b.n	800f2a4 <tcp_receive+0xec4>
                  break;
 800f296:	bf00      	nop
 800f298:	e004      	b.n	800f2a4 <tcp_receive+0xec4>
                  break;
 800f29a:	bf00      	nop
 800f29c:	e002      	b.n	800f2a4 <tcp_receive+0xec4>
                  break;
 800f29e:	bf00      	nop
 800f2a0:	e000      	b.n	800f2a4 <tcp_receive+0xec4>
                break;
 800f2a2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f001 fe9b 	bl	8010fe0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f2aa:	e003      	b.n	800f2b4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f001 fe97 	bl	8010fe0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f2b2:	e01a      	b.n	800f2ea <tcp_receive+0xf0a>
 800f2b4:	e019      	b.n	800f2ea <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f2b6:	4b0f      	ldr	r3, [pc, #60]	; (800f2f4 <tcp_receive+0xf14>)
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	db0a      	blt.n	800f2da <tcp_receive+0xefa>
 800f2c4:	4b0b      	ldr	r3, [pc, #44]	; (800f2f4 <tcp_receive+0xf14>)
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2cc:	6879      	ldr	r1, [r7, #4]
 800f2ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f2d0:	440b      	add	r3, r1
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	dd07      	ble.n	800f2ea <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	8b5b      	ldrh	r3, [r3, #26]
 800f2de:	f043 0302 	orr.w	r3, r3, #2
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f2e8:	e7ff      	b.n	800f2ea <tcp_receive+0xf0a>
 800f2ea:	bf00      	nop
 800f2ec:	3750      	adds	r7, #80	; 0x50
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	2000426c 	.word	0x2000426c
 800f2f8:	2000424c 	.word	0x2000424c
 800f2fc:	20004276 	.word	0x20004276
 800f300:	08017d9c 	.word	0x08017d9c
 800f304:	08018144 	.word	0x08018144
 800f308:	08017de8 	.word	0x08017de8

0800f30c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f312:	4b15      	ldr	r3, [pc, #84]	; (800f368 <tcp_get_next_optbyte+0x5c>)
 800f314:	881b      	ldrh	r3, [r3, #0]
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	b291      	uxth	r1, r2
 800f31a:	4a13      	ldr	r2, [pc, #76]	; (800f368 <tcp_get_next_optbyte+0x5c>)
 800f31c:	8011      	strh	r1, [r2, #0]
 800f31e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f320:	4b12      	ldr	r3, [pc, #72]	; (800f36c <tcp_get_next_optbyte+0x60>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d004      	beq.n	800f332 <tcp_get_next_optbyte+0x26>
 800f328:	4b11      	ldr	r3, [pc, #68]	; (800f370 <tcp_get_next_optbyte+0x64>)
 800f32a:	881b      	ldrh	r3, [r3, #0]
 800f32c:	88fa      	ldrh	r2, [r7, #6]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d208      	bcs.n	800f344 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f332:	4b10      	ldr	r3, [pc, #64]	; (800f374 <tcp_get_next_optbyte+0x68>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	3314      	adds	r3, #20
 800f338:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f33a:	88fb      	ldrh	r3, [r7, #6]
 800f33c:	683a      	ldr	r2, [r7, #0]
 800f33e:	4413      	add	r3, r2
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	e00b      	b.n	800f35c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f344:	88fb      	ldrh	r3, [r7, #6]
 800f346:	b2da      	uxtb	r2, r3
 800f348:	4b09      	ldr	r3, [pc, #36]	; (800f370 <tcp_get_next_optbyte+0x64>)
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f352:	4b06      	ldr	r3, [pc, #24]	; (800f36c <tcp_get_next_optbyte+0x60>)
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	797b      	ldrb	r3, [r7, #5]
 800f358:	4413      	add	r3, r2
 800f35a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr
 800f368:	20004268 	.word	0x20004268
 800f36c:	20004264 	.word	0x20004264
 800f370:	20004262 	.word	0x20004262
 800f374:	2000425c 	.word	0x2000425c

0800f378 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d106      	bne.n	800f394 <tcp_parseopt+0x1c>
 800f386:	4b31      	ldr	r3, [pc, #196]	; (800f44c <tcp_parseopt+0xd4>)
 800f388:	f240 727d 	movw	r2, #1917	; 0x77d
 800f38c:	4930      	ldr	r1, [pc, #192]	; (800f450 <tcp_parseopt+0xd8>)
 800f38e:	4831      	ldr	r0, [pc, #196]	; (800f454 <tcp_parseopt+0xdc>)
 800f390:	f005 fcd6 	bl	8014d40 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f394:	4b30      	ldr	r3, [pc, #192]	; (800f458 <tcp_parseopt+0xe0>)
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d053      	beq.n	800f444 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f39c:	4b2f      	ldr	r3, [pc, #188]	; (800f45c <tcp_parseopt+0xe4>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	801a      	strh	r2, [r3, #0]
 800f3a2:	e043      	b.n	800f42c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800f3a4:	f7ff ffb2 	bl	800f30c <tcp_get_next_optbyte>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f3ac:	7bfb      	ldrb	r3, [r7, #15]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	d03c      	beq.n	800f42c <tcp_parseopt+0xb4>
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	d002      	beq.n	800f3bc <tcp_parseopt+0x44>
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d03f      	beq.n	800f43a <tcp_parseopt+0xc2>
 800f3ba:	e026      	b.n	800f40a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f3bc:	f7ff ffa6 	bl	800f30c <tcp_get_next_optbyte>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b04      	cmp	r3, #4
 800f3c4:	d13b      	bne.n	800f43e <tcp_parseopt+0xc6>
 800f3c6:	4b25      	ldr	r3, [pc, #148]	; (800f45c <tcp_parseopt+0xe4>)
 800f3c8:	881b      	ldrh	r3, [r3, #0]
 800f3ca:	3302      	adds	r3, #2
 800f3cc:	4a22      	ldr	r2, [pc, #136]	; (800f458 <tcp_parseopt+0xe0>)
 800f3ce:	8812      	ldrh	r2, [r2, #0]
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	dc34      	bgt.n	800f43e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f3d4:	f7ff ff9a 	bl	800f30c <tcp_get_next_optbyte>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	021b      	lsls	r3, r3, #8
 800f3de:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f3e0:	f7ff ff94 	bl	800f30c <tcp_get_next_optbyte>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	b29a      	uxth	r2, r3
 800f3e8:	89bb      	ldrh	r3, [r7, #12]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f3ee:	89bb      	ldrh	r3, [r7, #12]
 800f3f0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f3f4:	d804      	bhi.n	800f400 <tcp_parseopt+0x88>
 800f3f6:	89bb      	ldrh	r3, [r7, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d001      	beq.n	800f400 <tcp_parseopt+0x88>
 800f3fc:	89ba      	ldrh	r2, [r7, #12]
 800f3fe:	e001      	b.n	800f404 <tcp_parseopt+0x8c>
 800f400:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f408:	e010      	b.n	800f42c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f40a:	f7ff ff7f 	bl	800f30c <tcp_get_next_optbyte>
 800f40e:	4603      	mov	r3, r0
 800f410:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f412:	7afb      	ldrb	r3, [r7, #11]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d914      	bls.n	800f442 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f418:	7afb      	ldrb	r3, [r7, #11]
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	4b0f      	ldr	r3, [pc, #60]	; (800f45c <tcp_parseopt+0xe4>)
 800f41e:	881b      	ldrh	r3, [r3, #0]
 800f420:	4413      	add	r3, r2
 800f422:	b29b      	uxth	r3, r3
 800f424:	3b02      	subs	r3, #2
 800f426:	b29a      	uxth	r2, r3
 800f428:	4b0c      	ldr	r3, [pc, #48]	; (800f45c <tcp_parseopt+0xe4>)
 800f42a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f42c:	4b0b      	ldr	r3, [pc, #44]	; (800f45c <tcp_parseopt+0xe4>)
 800f42e:	881a      	ldrh	r2, [r3, #0]
 800f430:	4b09      	ldr	r3, [pc, #36]	; (800f458 <tcp_parseopt+0xe0>)
 800f432:	881b      	ldrh	r3, [r3, #0]
 800f434:	429a      	cmp	r2, r3
 800f436:	d3b5      	bcc.n	800f3a4 <tcp_parseopt+0x2c>
 800f438:	e004      	b.n	800f444 <tcp_parseopt+0xcc>
          return;
 800f43a:	bf00      	nop
 800f43c:	e002      	b.n	800f444 <tcp_parseopt+0xcc>
            return;
 800f43e:	bf00      	nop
 800f440:	e000      	b.n	800f444 <tcp_parseopt+0xcc>
            return;
 800f442:	bf00      	nop
      }
    }
  }
}
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	08017d9c 	.word	0x08017d9c
 800f450:	08018200 	.word	0x08018200
 800f454:	08017de8 	.word	0x08017de8
 800f458:	20004260 	.word	0x20004260
 800f45c:	20004268 	.word	0x20004268

0800f460 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f460:	b480      	push	{r7}
 800f462:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f464:	4b05      	ldr	r3, [pc, #20]	; (800f47c <tcp_trigger_input_pcb_close+0x1c>)
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	f043 0310 	orr.w	r3, r3, #16
 800f46c:	b2da      	uxtb	r2, r3
 800f46e:	4b03      	ldr	r3, [pc, #12]	; (800f47c <tcp_trigger_input_pcb_close+0x1c>)
 800f470:	701a      	strb	r2, [r3, #0]
}
 800f472:	bf00      	nop
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr
 800f47c:	20004279 	.word	0x20004279

0800f480 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d00a      	beq.n	800f4a8 <tcp_route+0x28>
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	7a1b      	ldrb	r3, [r3, #8]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d006      	beq.n	800f4a8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	7a1b      	ldrb	r3, [r3, #8]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fb f8a0 	bl	800a5e4 <netif_get_by_index>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	e003      	b.n	800f4b0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f003 fedb 	bl	8013264 <ip4_route>
 800f4ae:	4603      	mov	r3, r0
  }
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3710      	adds	r7, #16
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f4b8:	b590      	push	{r4, r7, lr}
 800f4ba:	b087      	sub	sp, #28
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	603b      	str	r3, [r7, #0]
 800f4c4:	4613      	mov	r3, r2
 800f4c6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d105      	bne.n	800f4da <tcp_create_segment+0x22>
 800f4ce:	4b44      	ldr	r3, [pc, #272]	; (800f5e0 <tcp_create_segment+0x128>)
 800f4d0:	22a3      	movs	r2, #163	; 0xa3
 800f4d2:	4944      	ldr	r1, [pc, #272]	; (800f5e4 <tcp_create_segment+0x12c>)
 800f4d4:	4844      	ldr	r0, [pc, #272]	; (800f5e8 <tcp_create_segment+0x130>)
 800f4d6:	f005 fc33 	bl	8014d40 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d105      	bne.n	800f4ec <tcp_create_segment+0x34>
 800f4e0:	4b3f      	ldr	r3, [pc, #252]	; (800f5e0 <tcp_create_segment+0x128>)
 800f4e2:	22a4      	movs	r2, #164	; 0xa4
 800f4e4:	4941      	ldr	r1, [pc, #260]	; (800f5ec <tcp_create_segment+0x134>)
 800f4e6:	4840      	ldr	r0, [pc, #256]	; (800f5e8 <tcp_create_segment+0x130>)
 800f4e8:	f005 fc2a 	bl	8014d40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f4ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	f003 0304 	and.w	r3, r3, #4
 800f4f8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f4fa:	2003      	movs	r0, #3
 800f4fc:	f7fa fd0a 	bl	8009f14 <memp_malloc>
 800f500:	6138      	str	r0, [r7, #16]
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d104      	bne.n	800f512 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f508:	68b8      	ldr	r0, [r7, #8]
 800f50a:	f7fb fbf5 	bl	800acf8 <pbuf_free>
    return NULL;
 800f50e:	2300      	movs	r3, #0
 800f510:	e061      	b.n	800f5d6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f518:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	2200      	movs	r2, #0
 800f51e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	68ba      	ldr	r2, [r7, #8]
 800f524:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	891a      	ldrh	r2, [r3, #8]
 800f52a:	7dfb      	ldrb	r3, [r7, #23]
 800f52c:	b29b      	uxth	r3, r3
 800f52e:	429a      	cmp	r2, r3
 800f530:	d205      	bcs.n	800f53e <tcp_create_segment+0x86>
 800f532:	4b2b      	ldr	r3, [pc, #172]	; (800f5e0 <tcp_create_segment+0x128>)
 800f534:	22b0      	movs	r2, #176	; 0xb0
 800f536:	492e      	ldr	r1, [pc, #184]	; (800f5f0 <tcp_create_segment+0x138>)
 800f538:	482b      	ldr	r0, [pc, #172]	; (800f5e8 <tcp_create_segment+0x130>)
 800f53a:	f005 fc01 	bl	8014d40 <iprintf>
  seg->len = p->tot_len - optlen;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	891a      	ldrh	r2, [r3, #8]
 800f542:	7dfb      	ldrb	r3, [r7, #23]
 800f544:	b29b      	uxth	r3, r3
 800f546:	1ad3      	subs	r3, r2, r3
 800f548:	b29a      	uxth	r2, r3
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f54e:	2114      	movs	r1, #20
 800f550:	68b8      	ldr	r0, [r7, #8]
 800f552:	f7fb fb3b 	bl	800abcc <pbuf_add_header>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d004      	beq.n	800f566 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f55c:	6938      	ldr	r0, [r7, #16]
 800f55e:	f7fd f807 	bl	800c570 <tcp_seg_free>
    return NULL;
 800f562:	2300      	movs	r3, #0
 800f564:	e037      	b.n	800f5d6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	685a      	ldr	r2, [r3, #4]
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	8ada      	ldrh	r2, [r3, #22]
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	68dc      	ldr	r4, [r3, #12]
 800f578:	4610      	mov	r0, r2
 800f57a:	f7fa f815 	bl	80095a8 <lwip_htons>
 800f57e:	4603      	mov	r3, r0
 800f580:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	8b1a      	ldrh	r2, [r3, #24]
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	68dc      	ldr	r4, [r3, #12]
 800f58a:	4610      	mov	r0, r2
 800f58c:	f7fa f80c 	bl	80095a8 <lwip_htons>
 800f590:	4603      	mov	r3, r0
 800f592:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	68dc      	ldr	r4, [r3, #12]
 800f598:	6838      	ldr	r0, [r7, #0]
 800f59a:	f7fa f81a 	bl	80095d2 <lwip_htonl>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f5a2:	7dfb      	ldrb	r3, [r7, #23]
 800f5a4:	089b      	lsrs	r3, r3, #2
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	3305      	adds	r3, #5
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	031b      	lsls	r3, r3, #12
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	79fb      	ldrb	r3, [r7, #7]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	b29a      	uxth	r2, r3
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	68dc      	ldr	r4, [r3, #12]
 800f5be:	4610      	mov	r0, r2
 800f5c0:	f7f9 fff2 	bl	80095a8 <lwip_htons>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	749a      	strb	r2, [r3, #18]
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	74da      	strb	r2, [r3, #19]
  return seg;
 800f5d4:	693b      	ldr	r3, [r7, #16]
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	371c      	adds	r7, #28
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd90      	pop	{r4, r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	0801821c 	.word	0x0801821c
 800f5e4:	08018250 	.word	0x08018250
 800f5e8:	08018270 	.word	0x08018270
 800f5ec:	08018298 	.word	0x08018298
 800f5f0:	080182bc 	.word	0x080182bc

0800f5f4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	607b      	str	r3, [r7, #4]
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	73fb      	strb	r3, [r7, #15]
 800f600:	460b      	mov	r3, r1
 800f602:	81bb      	strh	r3, [r7, #12]
 800f604:	4613      	mov	r3, r2
 800f606:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800f608:	89bb      	ldrh	r3, [r7, #12]
 800f60a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d105      	bne.n	800f61e <tcp_pbuf_prealloc+0x2a>
 800f612:	4b30      	ldr	r3, [pc, #192]	; (800f6d4 <tcp_pbuf_prealloc+0xe0>)
 800f614:	22e8      	movs	r2, #232	; 0xe8
 800f616:	4930      	ldr	r1, [pc, #192]	; (800f6d8 <tcp_pbuf_prealloc+0xe4>)
 800f618:	4830      	ldr	r0, [pc, #192]	; (800f6dc <tcp_pbuf_prealloc+0xe8>)
 800f61a:	f005 fb91 	bl	8014d40 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800f61e:	6a3b      	ldr	r3, [r7, #32]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d105      	bne.n	800f630 <tcp_pbuf_prealloc+0x3c>
 800f624:	4b2b      	ldr	r3, [pc, #172]	; (800f6d4 <tcp_pbuf_prealloc+0xe0>)
 800f626:	22e9      	movs	r2, #233	; 0xe9
 800f628:	492d      	ldr	r1, [pc, #180]	; (800f6e0 <tcp_pbuf_prealloc+0xec>)
 800f62a:	482c      	ldr	r0, [pc, #176]	; (800f6dc <tcp_pbuf_prealloc+0xe8>)
 800f62c:	f005 fb88 	bl	8014d40 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f630:	89ba      	ldrh	r2, [r7, #12]
 800f632:	897b      	ldrh	r3, [r7, #10]
 800f634:	429a      	cmp	r2, r3
 800f636:	d221      	bcs.n	800f67c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f63c:	f003 0302 	and.w	r3, r3, #2
 800f640:	2b00      	cmp	r3, #0
 800f642:	d111      	bne.n	800f668 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800f644:	6a3b      	ldr	r3, [r7, #32]
 800f646:	8b5b      	ldrh	r3, [r3, #26]
 800f648:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d115      	bne.n	800f67c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800f650:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f654:	2b00      	cmp	r3, #0
 800f656:	d007      	beq.n	800f668 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800f658:	6a3b      	ldr	r3, [r7, #32]
 800f65a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d103      	bne.n	800f668 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800f660:	6a3b      	ldr	r3, [r7, #32]
 800f662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800f664:	2b00      	cmp	r3, #0
 800f666:	d009      	beq.n	800f67c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f668:	89bb      	ldrh	r3, [r7, #12]
 800f66a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f66e:	f023 0203 	bic.w	r2, r3, #3
 800f672:	897b      	ldrh	r3, [r7, #10]
 800f674:	4293      	cmp	r3, r2
 800f676:	bf28      	it	cs
 800f678:	4613      	movcs	r3, r2
 800f67a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f67c:	8af9      	ldrh	r1, [r7, #22]
 800f67e:	7bfb      	ldrb	r3, [r7, #15]
 800f680:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f684:	4618      	mov	r0, r3
 800f686:	f7fb f857 	bl	800a738 <pbuf_alloc>
 800f68a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d101      	bne.n	800f696 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800f692:	2300      	movs	r3, #0
 800f694:	e019      	b.n	800f6ca <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d006      	beq.n	800f6ac <tcp_pbuf_prealloc+0xb8>
 800f69e:	4b0d      	ldr	r3, [pc, #52]	; (800f6d4 <tcp_pbuf_prealloc+0xe0>)
 800f6a0:	f240 120b 	movw	r2, #267	; 0x10b
 800f6a4:	490f      	ldr	r1, [pc, #60]	; (800f6e4 <tcp_pbuf_prealloc+0xf0>)
 800f6a6:	480d      	ldr	r0, [pc, #52]	; (800f6dc <tcp_pbuf_prealloc+0xe8>)
 800f6a8:	f005 fb4a 	bl	8014d40 <iprintf>
  *oversize = p->len - length;
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	895a      	ldrh	r2, [r3, #10]
 800f6b0:	89bb      	ldrh	r3, [r7, #12]
 800f6b2:	1ad3      	subs	r3, r2, r3
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	89ba      	ldrh	r2, [r7, #12]
 800f6be:	811a      	strh	r2, [r3, #8]
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	891a      	ldrh	r2, [r3, #8]
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	815a      	strh	r2, [r3, #10]
  return p;
 800f6c8:	693b      	ldr	r3, [r7, #16]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3718      	adds	r7, #24
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
 800f6d2:	bf00      	nop
 800f6d4:	0801821c 	.word	0x0801821c
 800f6d8:	080182d4 	.word	0x080182d4
 800f6dc:	08018270 	.word	0x08018270
 800f6e0:	080182f8 	.word	0x080182f8
 800f6e4:	08018318 	.word	0x08018318

0800f6e8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d106      	bne.n	800f708 <tcp_write_checks+0x20>
 800f6fa:	4b33      	ldr	r3, [pc, #204]	; (800f7c8 <tcp_write_checks+0xe0>)
 800f6fc:	f240 1233 	movw	r2, #307	; 0x133
 800f700:	4932      	ldr	r1, [pc, #200]	; (800f7cc <tcp_write_checks+0xe4>)
 800f702:	4833      	ldr	r0, [pc, #204]	; (800f7d0 <tcp_write_checks+0xe8>)
 800f704:	f005 fb1c 	bl	8014d40 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	7d1b      	ldrb	r3, [r3, #20]
 800f70c:	2b04      	cmp	r3, #4
 800f70e:	d00e      	beq.n	800f72e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800f714:	2b07      	cmp	r3, #7
 800f716:	d00a      	beq.n	800f72e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f71c:	2b02      	cmp	r3, #2
 800f71e:	d006      	beq.n	800f72e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800f724:	2b03      	cmp	r3, #3
 800f726:	d002      	beq.n	800f72e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800f728:	f06f 030a 	mvn.w	r3, #10
 800f72c:	e048      	b.n	800f7c0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800f72e:	887b      	ldrh	r3, [r7, #2]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d101      	bne.n	800f738 <tcp_write_checks+0x50>
    return ERR_OK;
 800f734:	2300      	movs	r3, #0
 800f736:	e043      	b.n	800f7c0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f73e:	887a      	ldrh	r2, [r7, #2]
 800f740:	429a      	cmp	r2, r3
 800f742:	d909      	bls.n	800f758 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	8b5b      	ldrh	r3, [r3, #26]
 800f748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f752:	f04f 33ff 	mov.w	r3, #4294967295
 800f756:	e033      	b.n	800f7c0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f75e:	2b08      	cmp	r3, #8
 800f760:	d909      	bls.n	800f776 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	8b5b      	ldrh	r3, [r3, #26]
 800f766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800f770:	f04f 33ff 	mov.w	r3, #4294967295
 800f774:	e024      	b.n	800f7c0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00f      	beq.n	800f7a0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f784:	2b00      	cmp	r3, #0
 800f786:	d11a      	bne.n	800f7be <tcp_write_checks+0xd6>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d116      	bne.n	800f7be <tcp_write_checks+0xd6>
 800f790:	4b0d      	ldr	r3, [pc, #52]	; (800f7c8 <tcp_write_checks+0xe0>)
 800f792:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800f796:	490f      	ldr	r1, [pc, #60]	; (800f7d4 <tcp_write_checks+0xec>)
 800f798:	480d      	ldr	r0, [pc, #52]	; (800f7d0 <tcp_write_checks+0xe8>)
 800f79a:	f005 fad1 	bl	8014d40 <iprintf>
 800f79e:	e00e      	b.n	800f7be <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d103      	bne.n	800f7b0 <tcp_write_checks+0xc8>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d006      	beq.n	800f7be <tcp_write_checks+0xd6>
 800f7b0:	4b05      	ldr	r3, [pc, #20]	; (800f7c8 <tcp_write_checks+0xe0>)
 800f7b2:	f240 1259 	movw	r2, #345	; 0x159
 800f7b6:	4908      	ldr	r1, [pc, #32]	; (800f7d8 <tcp_write_checks+0xf0>)
 800f7b8:	4805      	ldr	r0, [pc, #20]	; (800f7d0 <tcp_write_checks+0xe8>)
 800f7ba:	f005 fac1 	bl	8014d40 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800f7be:	2300      	movs	r3, #0
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3708      	adds	r7, #8
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	0801821c 	.word	0x0801821c
 800f7cc:	0801832c 	.word	0x0801832c
 800f7d0:	08018270 	.word	0x08018270
 800f7d4:	0801834c 	.word	0x0801834c
 800f7d8:	08018388 	.word	0x08018388

0800f7dc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800f7dc:	b590      	push	{r4, r7, lr}
 800f7de:	b09b      	sub	sp, #108	; 0x6c
 800f7e0:	af04      	add	r7, sp, #16
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	80fb      	strh	r3, [r7, #6]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	653b      	str	r3, [r7, #80]	; 0x50
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7fe:	2300      	movs	r3, #0
 800f800:	64bb      	str	r3, [r7, #72]	; 0x48
 800f802:	2300      	movs	r3, #0
 800f804:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800f806:	2300      	movs	r3, #0
 800f808:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800f80c:	2300      	movs	r3, #0
 800f80e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800f816:	2300      	movs	r3, #0
 800f818:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d109      	bne.n	800f838 <tcp_write+0x5c>
 800f824:	4ba5      	ldr	r3, [pc, #660]	; (800fabc <tcp_write+0x2e0>)
 800f826:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800f82a:	49a5      	ldr	r1, [pc, #660]	; (800fac0 <tcp_write+0x2e4>)
 800f82c:	48a5      	ldr	r0, [pc, #660]	; (800fac4 <tcp_write+0x2e8>)
 800f82e:	f005 fa87 	bl	8014d40 <iprintf>
 800f832:	f06f 030f 	mvn.w	r3, #15
 800f836:	e32c      	b.n	800fe92 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f83e:	085b      	lsrs	r3, r3, #1
 800f840:	b29a      	uxth	r2, r3
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f846:	4293      	cmp	r3, r2
 800f848:	bf28      	it	cs
 800f84a:	4613      	movcs	r3, r2
 800f84c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800f84e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f850:	2b00      	cmp	r3, #0
 800f852:	d102      	bne.n	800f85a <tcp_write+0x7e>
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f858:	e000      	b.n	800f85c <tcp_write+0x80>
 800f85a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f85c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d109      	bne.n	800f878 <tcp_write+0x9c>
 800f864:	4b95      	ldr	r3, [pc, #596]	; (800fabc <tcp_write+0x2e0>)
 800f866:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800f86a:	4997      	ldr	r1, [pc, #604]	; (800fac8 <tcp_write+0x2ec>)
 800f86c:	4895      	ldr	r0, [pc, #596]	; (800fac4 <tcp_write+0x2e8>)
 800f86e:	f005 fa67 	bl	8014d40 <iprintf>
 800f872:	f06f 030f 	mvn.w	r3, #15
 800f876:	e30c      	b.n	800fe92 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800f878:	88fb      	ldrh	r3, [r7, #6]
 800f87a:	4619      	mov	r1, r3
 800f87c:	68f8      	ldr	r0, [r7, #12]
 800f87e:	f7ff ff33 	bl	800f6e8 <tcp_write_checks>
 800f882:	4603      	mov	r3, r0
 800f884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800f888:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d002      	beq.n	800f896 <tcp_write+0xba>
    return err;
 800f890:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800f894:	e2fd      	b.n	800fe92 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f89c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f000 80f7 	beq.w	800fa9e <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8b4:	653b      	str	r3, [r7, #80]	; 0x50
 800f8b6:	e002      	b.n	800f8be <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800f8b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d1f8      	bne.n	800f8b8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800f8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8c8:	7a9b      	ldrb	r3, [r3, #10]
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	f003 0304 	and.w	r3, r3, #4
 800f8d2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800f8d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8d8:	891b      	ldrh	r3, [r3, #8]
 800f8da:	4619      	mov	r1, r3
 800f8dc:	8c3b      	ldrh	r3, [r7, #32]
 800f8de:	440b      	add	r3, r1
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	da06      	bge.n	800f8f2 <tcp_write+0x116>
 800f8e4:	4b75      	ldr	r3, [pc, #468]	; (800fabc <tcp_write+0x2e0>)
 800f8e6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f8ea:	4978      	ldr	r1, [pc, #480]	; (800facc <tcp_write+0x2f0>)
 800f8ec:	4875      	ldr	r0, [pc, #468]	; (800fac4 <tcp_write+0x2e8>)
 800f8ee:	f005 fa27 	bl	8014d40 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800f8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f4:	891a      	ldrh	r2, [r3, #8]
 800f8f6:	8c3b      	ldrh	r3, [r7, #32]
 800f8f8:	4413      	add	r3, r2
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8fe:	1ad3      	subs	r3, r2, r3
 800f900:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f908:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800f90a:	8a7b      	ldrh	r3, [r7, #18]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d027      	beq.n	800f960 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800f910:	8a7b      	ldrh	r3, [r7, #18]
 800f912:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f914:	429a      	cmp	r2, r3
 800f916:	d206      	bcs.n	800f926 <tcp_write+0x14a>
 800f918:	4b68      	ldr	r3, [pc, #416]	; (800fabc <tcp_write+0x2e0>)
 800f91a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800f91e:	496c      	ldr	r1, [pc, #432]	; (800fad0 <tcp_write+0x2f4>)
 800f920:	4868      	ldr	r0, [pc, #416]	; (800fac4 <tcp_write+0x2e8>)
 800f922:	f005 fa0d 	bl	8014d40 <iprintf>
      seg = last_unsent;
 800f926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f928:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800f92a:	8a7b      	ldrh	r3, [r7, #18]
 800f92c:	88fa      	ldrh	r2, [r7, #6]
 800f92e:	429a      	cmp	r2, r3
 800f930:	d901      	bls.n	800f936 <tcp_write+0x15a>
 800f932:	8a7b      	ldrh	r3, [r7, #18]
 800f934:	e000      	b.n	800f938 <tcp_write+0x15c>
 800f936:	88fb      	ldrh	r3, [r7, #6]
 800f938:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f93a:	4293      	cmp	r3, r2
 800f93c:	bfa8      	it	ge
 800f93e:	4613      	movge	r3, r2
 800f940:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800f942:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f946:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f948:	4413      	add	r3, r2
 800f94a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800f94e:	8a7a      	ldrh	r2, [r7, #18]
 800f950:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	b29b      	uxth	r3, r3
 800f956:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800f958:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f95a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f95c:	1ad3      	subs	r3, r2, r3
 800f95e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800f960:	8a7b      	ldrh	r3, [r7, #18]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00b      	beq.n	800f97e <tcp_write+0x1a2>
 800f966:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f96a:	88fb      	ldrh	r3, [r7, #6]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d006      	beq.n	800f97e <tcp_write+0x1a2>
 800f970:	4b52      	ldr	r3, [pc, #328]	; (800fabc <tcp_write+0x2e0>)
 800f972:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f976:	4957      	ldr	r1, [pc, #348]	; (800fad4 <tcp_write+0x2f8>)
 800f978:	4852      	ldr	r0, [pc, #328]	; (800fac4 <tcp_write+0x2e8>)
 800f97a:	f005 f9e1 	bl	8014d40 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800f97e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f982:	88fb      	ldrh	r3, [r7, #6]
 800f984:	429a      	cmp	r2, r3
 800f986:	f080 8168 	bcs.w	800fc5a <tcp_write+0x47e>
 800f98a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f000 8164 	beq.w	800fc5a <tcp_write+0x47e>
 800f992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f994:	891b      	ldrh	r3, [r3, #8]
 800f996:	2b00      	cmp	r3, #0
 800f998:	f000 815f 	beq.w	800fc5a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800f99c:	88fa      	ldrh	r2, [r7, #6]
 800f99e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9a2:	1ad2      	subs	r2, r2, r3
 800f9a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	bfa8      	it	ge
 800f9aa:	4613      	movge	r3, r2
 800f9ac:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800f9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9b0:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800f9b2:	797b      	ldrb	r3, [r7, #5]
 800f9b4:	f003 0301 	and.w	r3, r3, #1
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d027      	beq.n	800fa0c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800f9bc:	f107 0012 	add.w	r0, r7, #18
 800f9c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f9c2:	8bf9      	ldrh	r1, [r7, #30]
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	9302      	str	r3, [sp, #8]
 800f9c8:	797b      	ldrb	r3, [r7, #5]
 800f9ca:	9301      	str	r3, [sp, #4]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	f7ff fe0e 	bl	800f5f4 <tcp_pbuf_prealloc>
 800f9d8:	6578      	str	r0, [r7, #84]	; 0x54
 800f9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	f000 8226 	beq.w	800fe2e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800f9e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9e4:	6858      	ldr	r0, [r3, #4]
 800f9e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f9ea:	68ba      	ldr	r2, [r7, #8]
 800f9ec:	4413      	add	r3, r2
 800f9ee:	8bfa      	ldrh	r2, [r7, #30]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	f005 f992 	bl	8014d1a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800f9f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f9f8:	f7fb fa0c 	bl	800ae14 <pbuf_clen>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	461a      	mov	r2, r3
 800fa00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fa04:	4413      	add	r3, r2
 800fa06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fa0a:	e041      	b.n	800fa90 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800fa0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	637b      	str	r3, [r7, #52]	; 0x34
 800fa12:	e002      	b.n	800fa1a <tcp_write+0x23e>
 800fa14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	637b      	str	r3, [r7, #52]	; 0x34
 800fa1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d1f8      	bne.n	800fa14 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fa22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa24:	7b1b      	ldrb	r3, [r3, #12]
 800fa26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d115      	bne.n	800fa5a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800fa2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa34:	8952      	ldrh	r2, [r2, #10]
 800fa36:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d10d      	bne.n	800fa5a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800fa3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d006      	beq.n	800fa54 <tcp_write+0x278>
 800fa46:	4b1d      	ldr	r3, [pc, #116]	; (800fabc <tcp_write+0x2e0>)
 800fa48:	f240 2231 	movw	r2, #561	; 0x231
 800fa4c:	4922      	ldr	r1, [pc, #136]	; (800fad8 <tcp_write+0x2fc>)
 800fa4e:	481d      	ldr	r0, [pc, #116]	; (800fac4 <tcp_write+0x2e8>)
 800fa50:	f005 f976 	bl	8014d40 <iprintf>
          extendlen = seglen;
 800fa54:	8bfb      	ldrh	r3, [r7, #30]
 800fa56:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fa58:	e01a      	b.n	800fa90 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800fa5a:	8bfb      	ldrh	r3, [r7, #30]
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	4619      	mov	r1, r3
 800fa60:	2000      	movs	r0, #0
 800fa62:	f7fa fe69 	bl	800a738 <pbuf_alloc>
 800fa66:	6578      	str	r0, [r7, #84]	; 0x54
 800fa68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	f000 81e1 	beq.w	800fe32 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800fa70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa74:	68ba      	ldr	r2, [r7, #8]
 800fa76:	441a      	add	r2, r3
 800fa78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa7a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800fa7c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fa7e:	f7fb f9c9 	bl	800ae14 <pbuf_clen>
 800fa82:	4603      	mov	r3, r0
 800fa84:	461a      	mov	r2, r3
 800fa86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fa8a:	4413      	add	r3, r2
 800fa8c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800fa90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa94:	8bfb      	ldrh	r3, [r7, #30]
 800fa96:	4413      	add	r3, r2
 800fa98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800fa9c:	e0dd      	b.n	800fc5a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f000 80d8 	beq.w	800fc5a <tcp_write+0x47e>
 800faaa:	4b04      	ldr	r3, [pc, #16]	; (800fabc <tcp_write+0x2e0>)
 800faac:	f240 224b 	movw	r2, #587	; 0x24b
 800fab0:	490a      	ldr	r1, [pc, #40]	; (800fadc <tcp_write+0x300>)
 800fab2:	4804      	ldr	r0, [pc, #16]	; (800fac4 <tcp_write+0x2e8>)
 800fab4:	f005 f944 	bl	8014d40 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800fab8:	e0cf      	b.n	800fc5a <tcp_write+0x47e>
 800faba:	bf00      	nop
 800fabc:	0801821c 	.word	0x0801821c
 800fac0:	080183bc 	.word	0x080183bc
 800fac4:	08018270 	.word	0x08018270
 800fac8:	080183d4 	.word	0x080183d4
 800facc:	08018408 	.word	0x08018408
 800fad0:	08018420 	.word	0x08018420
 800fad4:	08018440 	.word	0x08018440
 800fad8:	08018460 	.word	0x08018460
 800fadc:	0801848c 	.word	0x0801848c
    struct pbuf *p;
    u16_t left = len - pos;
 800fae0:	88fa      	ldrh	r2, [r7, #6]
 800fae2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fae6:	1ad3      	subs	r3, r2, r3
 800fae8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800faea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800faee:	b29b      	uxth	r3, r3
 800faf0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800faf2:	1ad3      	subs	r3, r2, r3
 800faf4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800faf6:	8b7a      	ldrh	r2, [r7, #26]
 800faf8:	8bbb      	ldrh	r3, [r7, #28]
 800fafa:	4293      	cmp	r3, r2
 800fafc:	bf28      	it	cs
 800fafe:	4613      	movcs	r3, r2
 800fb00:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fb02:	797b      	ldrb	r3, [r7, #5]
 800fb04:	f003 0301 	and.w	r3, r3, #1
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d036      	beq.n	800fb7a <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800fb0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	8b3b      	ldrh	r3, [r7, #24]
 800fb14:	4413      	add	r3, r2
 800fb16:	b299      	uxth	r1, r3
 800fb18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	bf0c      	ite	eq
 800fb1e:	2301      	moveq	r3, #1
 800fb20:	2300      	movne	r3, #0
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	f107 0012 	add.w	r0, r7, #18
 800fb28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb2a:	9302      	str	r3, [sp, #8]
 800fb2c:	797b      	ldrb	r3, [r7, #5]
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	4603      	mov	r3, r0
 800fb36:	2036      	movs	r0, #54	; 0x36
 800fb38:	f7ff fd5c 	bl	800f5f4 <tcp_pbuf_prealloc>
 800fb3c:	6338      	str	r0, [r7, #48]	; 0x30
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	f000 8178 	beq.w	800fe36 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	895b      	ldrh	r3, [r3, #10]
 800fb4a:	8b3a      	ldrh	r2, [r7, #24]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d906      	bls.n	800fb5e <tcp_write+0x382>
 800fb50:	4b8c      	ldr	r3, [pc, #560]	; (800fd84 <tcp_write+0x5a8>)
 800fb52:	f240 2267 	movw	r2, #615	; 0x267
 800fb56:	498c      	ldr	r1, [pc, #560]	; (800fd88 <tcp_write+0x5ac>)
 800fb58:	488c      	ldr	r0, [pc, #560]	; (800fd8c <tcp_write+0x5b0>)
 800fb5a:	f005 f8f1 	bl	8014d40 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb60:	685a      	ldr	r2, [r3, #4]
 800fb62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fb66:	18d0      	adds	r0, r2, r3
 800fb68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	4413      	add	r3, r2
 800fb70:	8b3a      	ldrh	r2, [r7, #24]
 800fb72:	4619      	mov	r1, r3
 800fb74:	f005 f8d1 	bl	8014d1a <memcpy>
 800fb78:	e02f      	b.n	800fbda <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800fb7a:	8a7b      	ldrh	r3, [r7, #18]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d006      	beq.n	800fb8e <tcp_write+0x3b2>
 800fb80:	4b80      	ldr	r3, [pc, #512]	; (800fd84 <tcp_write+0x5a8>)
 800fb82:	f240 2271 	movw	r2, #625	; 0x271
 800fb86:	4982      	ldr	r1, [pc, #520]	; (800fd90 <tcp_write+0x5b4>)
 800fb88:	4880      	ldr	r0, [pc, #512]	; (800fd8c <tcp_write+0x5b0>)
 800fb8a:	f005 f8d9 	bl	8014d40 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800fb8e:	8b3b      	ldrh	r3, [r7, #24]
 800fb90:	2201      	movs	r2, #1
 800fb92:	4619      	mov	r1, r3
 800fb94:	2036      	movs	r0, #54	; 0x36
 800fb96:	f7fa fdcf 	bl	800a738 <pbuf_alloc>
 800fb9a:	6178      	str	r0, [r7, #20]
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	f000 814b 	beq.w	800fe3a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800fba4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fba8:	68ba      	ldr	r2, [r7, #8]
 800fbaa:	441a      	add	r2, r3
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fbb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fbba:	4619      	mov	r1, r3
 800fbbc:	2036      	movs	r0, #54	; 0x36
 800fbbe:	f7fa fdbb 	bl	800a738 <pbuf_alloc>
 800fbc2:	6338      	str	r0, [r7, #48]	; 0x30
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d103      	bne.n	800fbd2 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800fbca:	6978      	ldr	r0, [r7, #20]
 800fbcc:	f7fb f894 	bl	800acf8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800fbd0:	e136      	b.n	800fe40 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800fbd2:	6979      	ldr	r1, [r7, #20]
 800fbd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbd6:	f7fb f95d 	bl	800ae94 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800fbda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbdc:	f7fb f91a 	bl	800ae14 <pbuf_clen>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fbe8:	4413      	add	r3, r2
 800fbea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800fbee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fbf2:	2b09      	cmp	r3, #9
 800fbf4:	d903      	bls.n	800fbfe <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800fbf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbf8:	f7fb f87e 	bl	800acf8 <pbuf_free>
      goto memerr;
 800fbfc:	e120      	b.n	800fe40 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc06:	441a      	add	r2, r3
 800fc08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc0c:	9300      	str	r3, [sp, #0]
 800fc0e:	4613      	mov	r3, r2
 800fc10:	2200      	movs	r2, #0
 800fc12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f7ff fc4f 	bl	800f4b8 <tcp_create_segment>
 800fc1a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fc1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	f000 810d 	beq.w	800fe3e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800fc24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d102      	bne.n	800fc30 <tcp_write+0x454>
      queue = seg;
 800fc2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc2c:	647b      	str	r3, [r7, #68]	; 0x44
 800fc2e:	e00c      	b.n	800fc4a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800fc30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d106      	bne.n	800fc44 <tcp_write+0x468>
 800fc36:	4b53      	ldr	r3, [pc, #332]	; (800fd84 <tcp_write+0x5a8>)
 800fc38:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fc3c:	4955      	ldr	r1, [pc, #340]	; (800fd94 <tcp_write+0x5b8>)
 800fc3e:	4853      	ldr	r0, [pc, #332]	; (800fd8c <tcp_write+0x5b0>)
 800fc40:	f005 f87e 	bl	8014d40 <iprintf>
      prev_seg->next = seg;
 800fc44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc48:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800fc4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc4c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800fc4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc52:	8b3b      	ldrh	r3, [r7, #24]
 800fc54:	4413      	add	r3, r2
 800fc56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800fc5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc5e:	88fb      	ldrh	r3, [r7, #6]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	f4ff af3d 	bcc.w	800fae0 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800fc66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d02c      	beq.n	800fcc6 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800fc6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fc72:	e01e      	b.n	800fcb2 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800fc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc76:	891a      	ldrh	r2, [r3, #8]
 800fc78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc7a:	4413      	add	r3, r2
 800fc7c:	b29a      	uxth	r2, r3
 800fc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc80:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800fc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d110      	bne.n	800fcac <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800fc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc90:	8952      	ldrh	r2, [r2, #10]
 800fc92:	4413      	add	r3, r2
 800fc94:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800fc96:	68b9      	ldr	r1, [r7, #8]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f005 f83e 	bl	8014d1a <memcpy>
        p->len += oversize_used;
 800fc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca0:	895a      	ldrh	r2, [r3, #10]
 800fca2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fca4:	4413      	add	r3, r2
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcaa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800fcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1dd      	bne.n	800fc74 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800fcb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcba:	891a      	ldrh	r2, [r3, #8]
 800fcbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fcbe:	4413      	add	r3, r2
 800fcc0:	b29a      	uxth	r2, r3
 800fcc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcc4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800fcc6:	8a7a      	ldrh	r2, [r7, #18]
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800fcce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d018      	beq.n	800fd06 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800fcd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d106      	bne.n	800fce8 <tcp_write+0x50c>
 800fcda:	4b2a      	ldr	r3, [pc, #168]	; (800fd84 <tcp_write+0x5a8>)
 800fcdc:	f240 22e1 	movw	r2, #737	; 0x2e1
 800fce0:	492d      	ldr	r1, [pc, #180]	; (800fd98 <tcp_write+0x5bc>)
 800fce2:	482a      	ldr	r0, [pc, #168]	; (800fd8c <tcp_write+0x5b0>)
 800fce4:	f005 f82c 	bl	8014d40 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800fce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcea:	685b      	ldr	r3, [r3, #4]
 800fcec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fb f8d0 	bl	800ae94 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800fcf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcf6:	891a      	ldrh	r2, [r3, #8]
 800fcf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcfa:	891b      	ldrh	r3, [r3, #8]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd02:	811a      	strh	r2, [r3, #8]
 800fd04:	e037      	b.n	800fd76 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800fd06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d034      	beq.n	800fd76 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800fd0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <tcp_write+0x53e>
 800fd12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d106      	bne.n	800fd28 <tcp_write+0x54c>
 800fd1a:	4b1a      	ldr	r3, [pc, #104]	; (800fd84 <tcp_write+0x5a8>)
 800fd1c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fd20:	491e      	ldr	r1, [pc, #120]	; (800fd9c <tcp_write+0x5c0>)
 800fd22:	481a      	ldr	r0, [pc, #104]	; (800fd8c <tcp_write+0x5b0>)
 800fd24:	f005 f80c 	bl	8014d40 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fd28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd2e:	e009      	b.n	800fd44 <tcp_write+0x568>
      p->tot_len += extendlen;
 800fd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd32:	891a      	ldrh	r2, [r3, #8]
 800fd34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd36:	4413      	add	r3, r2
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd3c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800fd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d1f1      	bne.n	800fd30 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800fd4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4e:	891a      	ldrh	r2, [r3, #8]
 800fd50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd52:	4413      	add	r3, r2
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd58:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800fd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5c:	895a      	ldrh	r2, [r3, #10]
 800fd5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd60:	4413      	add	r3, r2
 800fd62:	b29a      	uxth	r2, r3
 800fd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd66:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800fd68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd6a:	891a      	ldrh	r2, [r3, #8]
 800fd6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fd6e:	4413      	add	r3, r2
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd74:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800fd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d111      	bne.n	800fda0 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd80:	66da      	str	r2, [r3, #108]	; 0x6c
 800fd82:	e010      	b.n	800fda6 <tcp_write+0x5ca>
 800fd84:	0801821c 	.word	0x0801821c
 800fd88:	080184bc 	.word	0x080184bc
 800fd8c:	08018270 	.word	0x08018270
 800fd90:	080184fc 	.word	0x080184fc
 800fd94:	0801850c 	.word	0x0801850c
 800fd98:	08018520 	.word	0x08018520
 800fd9c:	08018558 	.word	0x08018558
  } else {
    last_unsent->next = queue;
 800fda0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fda2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fda4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fdaa:	88fb      	ldrh	r3, [r7, #6]
 800fdac:	441a      	add	r2, r3
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fdb8:	88fb      	ldrh	r3, [r7, #6]
 800fdba:	1ad3      	subs	r3, r2, r3
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800fdca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d00e      	beq.n	800fdf6 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d10a      	bne.n	800fdf6 <tcp_write+0x61a>
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d106      	bne.n	800fdf6 <tcp_write+0x61a>
 800fde8:	4b2c      	ldr	r3, [pc, #176]	; (800fe9c <tcp_write+0x6c0>)
 800fdea:	f240 3213 	movw	r2, #787	; 0x313
 800fdee:	492c      	ldr	r1, [pc, #176]	; (800fea0 <tcp_write+0x6c4>)
 800fdf0:	482c      	ldr	r0, [pc, #176]	; (800fea4 <tcp_write+0x6c8>)
 800fdf2:	f004 ffa5 	bl	8014d40 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800fdf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d016      	beq.n	800fe2a <tcp_write+0x64e>
 800fdfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d012      	beq.n	800fe2a <tcp_write+0x64e>
 800fe04:	797b      	ldrb	r3, [r7, #5]
 800fe06:	f003 0302 	and.w	r3, r3, #2
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d10d      	bne.n	800fe2a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800fe0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	899b      	ldrh	r3, [r3, #12]
 800fe14:	b29c      	uxth	r4, r3
 800fe16:	2008      	movs	r0, #8
 800fe18:	f7f9 fbc6 	bl	80095a8 <lwip_htons>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	461a      	mov	r2, r3
 800fe20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	4322      	orrs	r2, r4
 800fe26:	b292      	uxth	r2, r2
 800fe28:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	e031      	b.n	800fe92 <tcp_write+0x6b6>
          goto memerr;
 800fe2e:	bf00      	nop
 800fe30:	e006      	b.n	800fe40 <tcp_write+0x664>
            goto memerr;
 800fe32:	bf00      	nop
 800fe34:	e004      	b.n	800fe40 <tcp_write+0x664>
        goto memerr;
 800fe36:	bf00      	nop
 800fe38:	e002      	b.n	800fe40 <tcp_write+0x664>
        goto memerr;
 800fe3a:	bf00      	nop
 800fe3c:	e000      	b.n	800fe40 <tcp_write+0x664>
      goto memerr;
 800fe3e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	8b5b      	ldrh	r3, [r3, #26]
 800fe44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800fe4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <tcp_write+0x67e>
    pbuf_free(concat_p);
 800fe54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fe56:	f7fa ff4f 	bl	800acf8 <pbuf_free>
  }
  if (queue != NULL) {
 800fe5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d002      	beq.n	800fe66 <tcp_write+0x68a>
    tcp_segs_free(queue);
 800fe60:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fe62:	f7fc fb71 	bl	800c548 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00e      	beq.n	800fe8e <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d10a      	bne.n	800fe8e <tcp_write+0x6b2>
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d106      	bne.n	800fe8e <tcp_write+0x6b2>
 800fe80:	4b06      	ldr	r3, [pc, #24]	; (800fe9c <tcp_write+0x6c0>)
 800fe82:	f44f 724a 	mov.w	r2, #808	; 0x328
 800fe86:	4906      	ldr	r1, [pc, #24]	; (800fea0 <tcp_write+0x6c4>)
 800fe88:	4806      	ldr	r0, [pc, #24]	; (800fea4 <tcp_write+0x6c8>)
 800fe8a:	f004 ff59 	bl	8014d40 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800fe8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	375c      	adds	r7, #92	; 0x5c
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd90      	pop	{r4, r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	0801821c 	.word	0x0801821c
 800fea0:	08018590 	.word	0x08018590
 800fea4:	08018270 	.word	0x08018270

0800fea8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fea8:	b590      	push	{r4, r7, lr}
 800feaa:	b08b      	sub	sp, #44	; 0x2c
 800feac:	af02      	add	r7, sp, #8
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	460b      	mov	r3, r1
 800feb2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800feb4:	2300      	movs	r3, #0
 800feb6:	61fb      	str	r3, [r7, #28]
 800feb8:	2300      	movs	r3, #0
 800feba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800febc:	2300      	movs	r3, #0
 800febe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d106      	bne.n	800fed4 <tcp_split_unsent_seg+0x2c>
 800fec6:	4b95      	ldr	r3, [pc, #596]	; (801011c <tcp_split_unsent_seg+0x274>)
 800fec8:	f240 324b 	movw	r2, #843	; 0x34b
 800fecc:	4994      	ldr	r1, [pc, #592]	; (8010120 <tcp_split_unsent_seg+0x278>)
 800fece:	4895      	ldr	r0, [pc, #596]	; (8010124 <tcp_split_unsent_seg+0x27c>)
 800fed0:	f004 ff36 	bl	8014d40 <iprintf>

  useg = pcb->unsent;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fed8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d102      	bne.n	800fee6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fee0:	f04f 33ff 	mov.w	r3, #4294967295
 800fee4:	e116      	b.n	8010114 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fee6:	887b      	ldrh	r3, [r7, #2]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d109      	bne.n	800ff00 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800feec:	4b8b      	ldr	r3, [pc, #556]	; (801011c <tcp_split_unsent_seg+0x274>)
 800feee:	f240 3253 	movw	r2, #851	; 0x353
 800fef2:	498d      	ldr	r1, [pc, #564]	; (8010128 <tcp_split_unsent_seg+0x280>)
 800fef4:	488b      	ldr	r0, [pc, #556]	; (8010124 <tcp_split_unsent_seg+0x27c>)
 800fef6:	f004 ff23 	bl	8014d40 <iprintf>
    return ERR_VAL;
 800fefa:	f06f 0305 	mvn.w	r3, #5
 800fefe:	e109      	b.n	8010114 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	891b      	ldrh	r3, [r3, #8]
 800ff04:	887a      	ldrh	r2, [r7, #2]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d301      	bcc.n	800ff0e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	e102      	b.n	8010114 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff12:	887a      	ldrh	r2, [r7, #2]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d906      	bls.n	800ff26 <tcp_split_unsent_seg+0x7e>
 800ff18:	4b80      	ldr	r3, [pc, #512]	; (801011c <tcp_split_unsent_seg+0x274>)
 800ff1a:	f240 325b 	movw	r2, #859	; 0x35b
 800ff1e:	4983      	ldr	r1, [pc, #524]	; (801012c <tcp_split_unsent_seg+0x284>)
 800ff20:	4880      	ldr	r0, [pc, #512]	; (8010124 <tcp_split_unsent_seg+0x27c>)
 800ff22:	f004 ff0d 	bl	8014d40 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	891b      	ldrh	r3, [r3, #8]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d106      	bne.n	800ff3c <tcp_split_unsent_seg+0x94>
 800ff2e:	4b7b      	ldr	r3, [pc, #492]	; (801011c <tcp_split_unsent_seg+0x274>)
 800ff30:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ff34:	497e      	ldr	r1, [pc, #504]	; (8010130 <tcp_split_unsent_seg+0x288>)
 800ff36:	487b      	ldr	r0, [pc, #492]	; (8010124 <tcp_split_unsent_seg+0x27c>)
 800ff38:	f004 ff02 	bl	8014d40 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	7a9b      	ldrb	r3, [r3, #10]
 800ff40:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ff42:	7bfb      	ldrb	r3, [r7, #15]
 800ff44:	009b      	lsls	r3, r3, #2
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	f003 0304 	and.w	r3, r3, #4
 800ff4c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	891a      	ldrh	r2, [r3, #8]
 800ff52:	887b      	ldrh	r3, [r7, #2]
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ff58:	7bbb      	ldrb	r3, [r7, #14]
 800ff5a:	b29a      	uxth	r2, r3
 800ff5c:	89bb      	ldrh	r3, [r7, #12]
 800ff5e:	4413      	add	r3, r2
 800ff60:	b29b      	uxth	r3, r3
 800ff62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff66:	4619      	mov	r1, r3
 800ff68:	2036      	movs	r0, #54	; 0x36
 800ff6a:	f7fa fbe5 	bl	800a738 <pbuf_alloc>
 800ff6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f000 80b7 	beq.w	80100e6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	891a      	ldrh	r2, [r3, #8]
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	891b      	ldrh	r3, [r3, #8]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	b29a      	uxth	r2, r3
 800ff86:	887b      	ldrh	r3, [r7, #2]
 800ff88:	4413      	add	r3, r2
 800ff8a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	6858      	ldr	r0, [r3, #4]
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	7bbb      	ldrb	r3, [r7, #14]
 800ff96:	18d1      	adds	r1, r2, r3
 800ff98:	897b      	ldrh	r3, [r7, #10]
 800ff9a:	89ba      	ldrh	r2, [r7, #12]
 800ff9c:	f7fb f8b2 	bl	800b104 <pbuf_copy_partial>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	89bb      	ldrh	r3, [r7, #12]
 800ffa6:	4293      	cmp	r3, r2
 800ffa8:	f040 809f 	bne.w	80100ea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	899b      	ldrh	r3, [r3, #12]
 800ffb2:	b29b      	uxth	r3, r3
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7f9 faf7 	bl	80095a8 <lwip_htons>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ffc2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800ffc8:	7efb      	ldrb	r3, [r7, #27]
 800ffca:	f003 0308 	and.w	r3, r3, #8
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d007      	beq.n	800ffe2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800ffd2:	7efb      	ldrb	r3, [r7, #27]
 800ffd4:	f023 0308 	bic.w	r3, r3, #8
 800ffd8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800ffda:	7ebb      	ldrb	r3, [r7, #26]
 800ffdc:	f043 0308 	orr.w	r3, r3, #8
 800ffe0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800ffe2:	7efb      	ldrb	r3, [r7, #27]
 800ffe4:	f003 0301 	and.w	r3, r3, #1
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d007      	beq.n	800fffc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ffec:	7efb      	ldrb	r3, [r7, #27]
 800ffee:	f023 0301 	bic.w	r3, r3, #1
 800fff2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fff4:	7ebb      	ldrb	r3, [r7, #26]
 800fff6:	f043 0301 	orr.w	r3, r3, #1
 800fffa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	4618      	mov	r0, r3
 8010004:	f7f9 fae5 	bl	80095d2 <lwip_htonl>
 8010008:	4602      	mov	r2, r0
 801000a:	887b      	ldrh	r3, [r7, #2]
 801000c:	18d1      	adds	r1, r2, r3
 801000e:	7eba      	ldrb	r2, [r7, #26]
 8010010:	7bfb      	ldrb	r3, [r7, #15]
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	460b      	mov	r3, r1
 8010016:	6939      	ldr	r1, [r7, #16]
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f7ff fa4d 	bl	800f4b8 <tcp_create_segment>
 801001e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d063      	beq.n	80100ee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	4618      	mov	r0, r3
 801002c:	f7fa fef2 	bl	800ae14 <pbuf_clen>
 8010030:	4603      	mov	r3, r0
 8010032:	461a      	mov	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801003a:	1a9b      	subs	r3, r3, r2
 801003c:	b29a      	uxth	r2, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	6858      	ldr	r0, [r3, #4]
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	891a      	ldrh	r2, [r3, #8]
 801004e:	89bb      	ldrh	r3, [r7, #12]
 8010050:	1ad3      	subs	r3, r2, r3
 8010052:	b29b      	uxth	r3, r3
 8010054:	4619      	mov	r1, r3
 8010056:	f7fa fcc9 	bl	800a9ec <pbuf_realloc>
  useg->len -= remainder;
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	891a      	ldrh	r2, [r3, #8]
 801005e:	89bb      	ldrh	r3, [r7, #12]
 8010060:	1ad3      	subs	r3, r2, r3
 8010062:	b29a      	uxth	r2, r3
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	899b      	ldrh	r3, [r3, #12]
 801006e:	b29c      	uxth	r4, r3
 8010070:	7efb      	ldrb	r3, [r7, #27]
 8010072:	b29b      	uxth	r3, r3
 8010074:	4618      	mov	r0, r3
 8010076:	f7f9 fa97 	bl	80095a8 <lwip_htons>
 801007a:	4603      	mov	r3, r0
 801007c:	461a      	mov	r2, r3
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	4322      	orrs	r2, r4
 8010084:	b292      	uxth	r2, r2
 8010086:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	f7fa fec1 	bl	800ae14 <pbuf_clen>
 8010092:	4603      	mov	r3, r0
 8010094:	461a      	mov	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801009c:	4413      	add	r3, r2
 801009e:	b29a      	uxth	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fa feb2 	bl	800ae14 <pbuf_clen>
 80100b0:	4603      	mov	r3, r0
 80100b2:	461a      	mov	r2, r3
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100ba:	4413      	add	r3, r2
 80100bc:	b29a      	uxth	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	69fa      	ldr	r2, [r7, #28]
 80100d0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d103      	bne.n	80100e2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2200      	movs	r2, #0
 80100de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80100e2:	2300      	movs	r3, #0
 80100e4:	e016      	b.n	8010114 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80100e6:	bf00      	nop
 80100e8:	e002      	b.n	80100f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80100ea:	bf00      	nop
 80100ec:	e000      	b.n	80100f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80100ee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d006      	beq.n	8010104 <tcp_split_unsent_seg+0x25c>
 80100f6:	4b09      	ldr	r3, [pc, #36]	; (801011c <tcp_split_unsent_seg+0x274>)
 80100f8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80100fc:	490d      	ldr	r1, [pc, #52]	; (8010134 <tcp_split_unsent_seg+0x28c>)
 80100fe:	4809      	ldr	r0, [pc, #36]	; (8010124 <tcp_split_unsent_seg+0x27c>)
 8010100:	f004 fe1e 	bl	8014d40 <iprintf>
  if (p != NULL) {
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d002      	beq.n	8010110 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801010a:	6938      	ldr	r0, [r7, #16]
 801010c:	f7fa fdf4 	bl	800acf8 <pbuf_free>
  }

  return ERR_MEM;
 8010110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010114:	4618      	mov	r0, r3
 8010116:	3724      	adds	r7, #36	; 0x24
 8010118:	46bd      	mov	sp, r7
 801011a:	bd90      	pop	{r4, r7, pc}
 801011c:	0801821c 	.word	0x0801821c
 8010120:	080185b0 	.word	0x080185b0
 8010124:	08018270 	.word	0x08018270
 8010128:	080185d4 	.word	0x080185d4
 801012c:	080185f8 	.word	0x080185f8
 8010130:	08018608 	.word	0x08018608
 8010134:	08018618 	.word	0x08018618

08010138 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010138:	b590      	push	{r4, r7, lr}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d106      	bne.n	8010154 <tcp_send_fin+0x1c>
 8010146:	4b21      	ldr	r3, [pc, #132]	; (80101cc <tcp_send_fin+0x94>)
 8010148:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801014c:	4920      	ldr	r1, [pc, #128]	; (80101d0 <tcp_send_fin+0x98>)
 801014e:	4821      	ldr	r0, [pc, #132]	; (80101d4 <tcp_send_fin+0x9c>)
 8010150:	f004 fdf6 	bl	8014d40 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010158:	2b00      	cmp	r3, #0
 801015a:	d02e      	beq.n	80101ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010160:	60fb      	str	r3, [r7, #12]
 8010162:	e002      	b.n	801016a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1f8      	bne.n	8010164 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	899b      	ldrh	r3, [r3, #12]
 8010178:	b29b      	uxth	r3, r3
 801017a:	4618      	mov	r0, r3
 801017c:	f7f9 fa14 	bl	80095a8 <lwip_htons>
 8010180:	4603      	mov	r3, r0
 8010182:	b2db      	uxtb	r3, r3
 8010184:	f003 0307 	and.w	r3, r3, #7
 8010188:	2b00      	cmp	r3, #0
 801018a:	d116      	bne.n	80101ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	68db      	ldr	r3, [r3, #12]
 8010190:	899b      	ldrh	r3, [r3, #12]
 8010192:	b29c      	uxth	r4, r3
 8010194:	2001      	movs	r0, #1
 8010196:	f7f9 fa07 	bl	80095a8 <lwip_htons>
 801019a:	4603      	mov	r3, r0
 801019c:	461a      	mov	r2, r3
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	4322      	orrs	r2, r4
 80101a4:	b292      	uxth	r2, r2
 80101a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	8b5b      	ldrh	r3, [r3, #26]
 80101ac:	f043 0320 	orr.w	r3, r3, #32
 80101b0:	b29a      	uxth	r2, r3
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80101b6:	2300      	movs	r3, #0
 80101b8:	e004      	b.n	80101c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80101ba:	2101      	movs	r1, #1
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f000 f80b 	bl	80101d8 <tcp_enqueue_flags>
 80101c2:	4603      	mov	r3, r0
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3714      	adds	r7, #20
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd90      	pop	{r4, r7, pc}
 80101cc:	0801821c 	.word	0x0801821c
 80101d0:	08018624 	.word	0x08018624
 80101d4:	08018270 	.word	0x08018270

080101d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08a      	sub	sp, #40	; 0x28
 80101dc:	af02      	add	r7, sp, #8
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	460b      	mov	r3, r1
 80101e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80101e4:	2300      	movs	r3, #0
 80101e6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80101ec:	78fb      	ldrb	r3, [r7, #3]
 80101ee:	f003 0303 	and.w	r3, r3, #3
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d106      	bne.n	8010204 <tcp_enqueue_flags+0x2c>
 80101f6:	4b67      	ldr	r3, [pc, #412]	; (8010394 <tcp_enqueue_flags+0x1bc>)
 80101f8:	f240 4212 	movw	r2, #1042	; 0x412
 80101fc:	4966      	ldr	r1, [pc, #408]	; (8010398 <tcp_enqueue_flags+0x1c0>)
 80101fe:	4867      	ldr	r0, [pc, #412]	; (801039c <tcp_enqueue_flags+0x1c4>)
 8010200:	f004 fd9e 	bl	8014d40 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d106      	bne.n	8010218 <tcp_enqueue_flags+0x40>
 801020a:	4b62      	ldr	r3, [pc, #392]	; (8010394 <tcp_enqueue_flags+0x1bc>)
 801020c:	f240 4213 	movw	r2, #1043	; 0x413
 8010210:	4963      	ldr	r1, [pc, #396]	; (80103a0 <tcp_enqueue_flags+0x1c8>)
 8010212:	4862      	ldr	r0, [pc, #392]	; (801039c <tcp_enqueue_flags+0x1c4>)
 8010214:	f004 fd94 	bl	8014d40 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010218:	78fb      	ldrb	r3, [r7, #3]
 801021a:	f003 0302 	and.w	r3, r3, #2
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010222:	2301      	movs	r3, #1
 8010224:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010226:	7ffb      	ldrb	r3, [r7, #31]
 8010228:	009b      	lsls	r3, r3, #2
 801022a:	b2db      	uxtb	r3, r3
 801022c:	f003 0304 	and.w	r3, r3, #4
 8010230:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010232:	7dfb      	ldrb	r3, [r7, #23]
 8010234:	b29b      	uxth	r3, r3
 8010236:	f44f 7220 	mov.w	r2, #640	; 0x280
 801023a:	4619      	mov	r1, r3
 801023c:	2036      	movs	r0, #54	; 0x36
 801023e:	f7fa fa7b 	bl	800a738 <pbuf_alloc>
 8010242:	6138      	str	r0, [r7, #16]
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d109      	bne.n	801025e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	8b5b      	ldrh	r3, [r3, #26]
 801024e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010252:	b29a      	uxth	r2, r3
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010258:	f04f 33ff 	mov.w	r3, #4294967295
 801025c:	e095      	b.n	801038a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	895a      	ldrh	r2, [r3, #10]
 8010262:	7dfb      	ldrb	r3, [r7, #23]
 8010264:	b29b      	uxth	r3, r3
 8010266:	429a      	cmp	r2, r3
 8010268:	d206      	bcs.n	8010278 <tcp_enqueue_flags+0xa0>
 801026a:	4b4a      	ldr	r3, [pc, #296]	; (8010394 <tcp_enqueue_flags+0x1bc>)
 801026c:	f240 423a 	movw	r2, #1082	; 0x43a
 8010270:	494c      	ldr	r1, [pc, #304]	; (80103a4 <tcp_enqueue_flags+0x1cc>)
 8010272:	484a      	ldr	r0, [pc, #296]	; (801039c <tcp_enqueue_flags+0x1c4>)
 8010274:	f004 fd64 	bl	8014d40 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801027c:	78fa      	ldrb	r2, [r7, #3]
 801027e:	7ffb      	ldrb	r3, [r7, #31]
 8010280:	9300      	str	r3, [sp, #0]
 8010282:	460b      	mov	r3, r1
 8010284:	6939      	ldr	r1, [r7, #16]
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f7ff f916 	bl	800f4b8 <tcp_create_segment>
 801028c:	60f8      	str	r0, [r7, #12]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d109      	bne.n	80102a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	8b5b      	ldrh	r3, [r3, #26]
 8010298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801029c:	b29a      	uxth	r2, r3
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80102a2:	f04f 33ff 	mov.w	r3, #4294967295
 80102a6:	e070      	b.n	801038a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	f003 0303 	and.w	r3, r3, #3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d006      	beq.n	80102c2 <tcp_enqueue_flags+0xea>
 80102b4:	4b37      	ldr	r3, [pc, #220]	; (8010394 <tcp_enqueue_flags+0x1bc>)
 80102b6:	f240 4242 	movw	r2, #1090	; 0x442
 80102ba:	493b      	ldr	r1, [pc, #236]	; (80103a8 <tcp_enqueue_flags+0x1d0>)
 80102bc:	4837      	ldr	r0, [pc, #220]	; (801039c <tcp_enqueue_flags+0x1c4>)
 80102be:	f004 fd3f 	bl	8014d40 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	891b      	ldrh	r3, [r3, #8]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d006      	beq.n	80102d8 <tcp_enqueue_flags+0x100>
 80102ca:	4b32      	ldr	r3, [pc, #200]	; (8010394 <tcp_enqueue_flags+0x1bc>)
 80102cc:	f240 4243 	movw	r2, #1091	; 0x443
 80102d0:	4936      	ldr	r1, [pc, #216]	; (80103ac <tcp_enqueue_flags+0x1d4>)
 80102d2:	4832      	ldr	r0, [pc, #200]	; (801039c <tcp_enqueue_flags+0x1c4>)
 80102d4:	f004 fd34 	bl	8014d40 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d103      	bne.n	80102e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	68fa      	ldr	r2, [r7, #12]
 80102e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80102e6:	e00d      	b.n	8010304 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102ec:	61bb      	str	r3, [r7, #24]
 80102ee:	e002      	b.n	80102f6 <tcp_enqueue_flags+0x11e>
 80102f0:	69bb      	ldr	r3, [r7, #24]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	61bb      	str	r3, [r7, #24]
 80102f6:	69bb      	ldr	r3, [r7, #24]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d1f8      	bne.n	80102f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	68fa      	ldr	r2, [r7, #12]
 8010302:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2200      	movs	r2, #0
 8010308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801030c:	78fb      	ldrb	r3, [r7, #3]
 801030e:	f003 0302 	and.w	r3, r3, #2
 8010312:	2b00      	cmp	r3, #0
 8010314:	d104      	bne.n	8010320 <tcp_enqueue_flags+0x148>
 8010316:	78fb      	ldrb	r3, [r7, #3]
 8010318:	f003 0301 	and.w	r3, r3, #1
 801031c:	2b00      	cmp	r3, #0
 801031e:	d004      	beq.n	801032a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010324:	1c5a      	adds	r2, r3, #1
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801032a:	78fb      	ldrb	r3, [r7, #3]
 801032c:	f003 0301 	and.w	r3, r3, #1
 8010330:	2b00      	cmp	r3, #0
 8010332:	d006      	beq.n	8010342 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	8b5b      	ldrh	r3, [r3, #26]
 8010338:	f043 0320 	orr.w	r3, r3, #32
 801033c:	b29a      	uxth	r2, r3
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	4618      	mov	r0, r3
 8010348:	f7fa fd64 	bl	800ae14 <pbuf_clen>
 801034c:	4603      	mov	r3, r0
 801034e:	461a      	mov	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010356:	4413      	add	r3, r2
 8010358:	b29a      	uxth	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00e      	beq.n	8010388 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10a      	bne.n	8010388 <tcp_enqueue_flags+0x1b0>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010376:	2b00      	cmp	r3, #0
 8010378:	d106      	bne.n	8010388 <tcp_enqueue_flags+0x1b0>
 801037a:	4b06      	ldr	r3, [pc, #24]	; (8010394 <tcp_enqueue_flags+0x1bc>)
 801037c:	f240 4266 	movw	r2, #1126	; 0x466
 8010380:	490b      	ldr	r1, [pc, #44]	; (80103b0 <tcp_enqueue_flags+0x1d8>)
 8010382:	4806      	ldr	r0, [pc, #24]	; (801039c <tcp_enqueue_flags+0x1c4>)
 8010384:	f004 fcdc 	bl	8014d40 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3720      	adds	r7, #32
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	0801821c 	.word	0x0801821c
 8010398:	08018640 	.word	0x08018640
 801039c:	08018270 	.word	0x08018270
 80103a0:	08018698 	.word	0x08018698
 80103a4:	080186b8 	.word	0x080186b8
 80103a8:	080186f4 	.word	0x080186f4
 80103ac:	0801870c 	.word	0x0801870c
 80103b0:	08018738 	.word	0x08018738

080103b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80103b4:	b5b0      	push	{r4, r5, r7, lr}
 80103b6:	b08a      	sub	sp, #40	; 0x28
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d106      	bne.n	80103d0 <tcp_output+0x1c>
 80103c2:	4ba0      	ldr	r3, [pc, #640]	; (8010644 <tcp_output+0x290>)
 80103c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80103c8:	499f      	ldr	r1, [pc, #636]	; (8010648 <tcp_output+0x294>)
 80103ca:	48a0      	ldr	r0, [pc, #640]	; (801064c <tcp_output+0x298>)
 80103cc:	f004 fcb8 	bl	8014d40 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	7d1b      	ldrb	r3, [r3, #20]
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d106      	bne.n	80103e6 <tcp_output+0x32>
 80103d8:	4b9a      	ldr	r3, [pc, #616]	; (8010644 <tcp_output+0x290>)
 80103da:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80103de:	499c      	ldr	r1, [pc, #624]	; (8010650 <tcp_output+0x29c>)
 80103e0:	489a      	ldr	r0, [pc, #616]	; (801064c <tcp_output+0x298>)
 80103e2:	f004 fcad 	bl	8014d40 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80103e6:	4b9b      	ldr	r3, [pc, #620]	; (8010654 <tcp_output+0x2a0>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	687a      	ldr	r2, [r7, #4]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d101      	bne.n	80103f4 <tcp_output+0x40>
    return ERR_OK;
 80103f0:	2300      	movs	r3, #0
 80103f2:	e1d2      	b.n	801079a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010400:	429a      	cmp	r2, r3
 8010402:	d203      	bcs.n	801040c <tcp_output+0x58>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801040a:	e002      	b.n	8010412 <tcp_output+0x5e>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010412:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010418:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801041a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801041c:	2b00      	cmp	r3, #0
 801041e:	d10b      	bne.n	8010438 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	8b5b      	ldrh	r3, [r3, #26]
 8010424:	f003 0302 	and.w	r3, r3, #2
 8010428:	2b00      	cmp	r3, #0
 801042a:	f000 81a9 	beq.w	8010780 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801042e:	6878      	ldr	r0, [r7, #4]
 8010430:	f000 fdd6 	bl	8010fe0 <tcp_send_empty_ack>
 8010434:	4603      	mov	r3, r0
 8010436:	e1b0      	b.n	801079a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010438:	6879      	ldr	r1, [r7, #4]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	3304      	adds	r3, #4
 801043e:	461a      	mov	r2, r3
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f7ff f81d 	bl	800f480 <tcp_route>
 8010446:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d102      	bne.n	8010454 <tcp_output+0xa0>
    return ERR_RTE;
 801044e:	f06f 0303 	mvn.w	r3, #3
 8010452:	e1a2      	b.n	801079a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d003      	beq.n	8010462 <tcp_output+0xae>
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d111      	bne.n	8010486 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d002      	beq.n	801046e <tcp_output+0xba>
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	3304      	adds	r3, #4
 801046c:	e000      	b.n	8010470 <tcp_output+0xbc>
 801046e:	2300      	movs	r3, #0
 8010470:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d102      	bne.n	801047e <tcp_output+0xca>
      return ERR_RTE;
 8010478:	f06f 0303 	mvn.w	r3, #3
 801047c:	e18d      	b.n	801079a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	681a      	ldr	r2, [r3, #0]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	4618      	mov	r0, r3
 801048e:	f7f9 f8a0 	bl	80095d2 <lwip_htonl>
 8010492:	4602      	mov	r2, r0
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010498:	1ad3      	subs	r3, r2, r3
 801049a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801049c:	8912      	ldrh	r2, [r2, #8]
 801049e:	4413      	add	r3, r2
 80104a0:	69ba      	ldr	r2, [r7, #24]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d227      	bcs.n	80104f6 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104ac:	461a      	mov	r2, r3
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d114      	bne.n	80104de <tcp_output+0x12a>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d110      	bne.n	80104de <tcp_output+0x12a>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d10b      	bne.n	80104de <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2200      	movs	r2, #0
 80104da:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	8b5b      	ldrh	r3, [r3, #26]
 80104e2:	f003 0302 	and.w	r3, r3, #2
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f000 814c 	beq.w	8010784 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 fd77 	bl	8010fe0 <tcp_send_empty_ack>
 80104f2:	4603      	mov	r3, r0
 80104f4:	e151      	b.n	801079a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2200      	movs	r2, #0
 80104fa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010502:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	2b00      	cmp	r3, #0
 8010508:	f000 811b 	beq.w	8010742 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801050c:	e002      	b.n	8010514 <tcp_output+0x160>
 801050e:	6a3b      	ldr	r3, [r7, #32]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	623b      	str	r3, [r7, #32]
 8010514:	6a3b      	ldr	r3, [r7, #32]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d1f8      	bne.n	801050e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801051c:	e111      	b.n	8010742 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801051e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010520:	68db      	ldr	r3, [r3, #12]
 8010522:	899b      	ldrh	r3, [r3, #12]
 8010524:	b29b      	uxth	r3, r3
 8010526:	4618      	mov	r0, r3
 8010528:	f7f9 f83e 	bl	80095a8 <lwip_htons>
 801052c:	4603      	mov	r3, r0
 801052e:	b2db      	uxtb	r3, r3
 8010530:	f003 0304 	and.w	r3, r3, #4
 8010534:	2b00      	cmp	r3, #0
 8010536:	d006      	beq.n	8010546 <tcp_output+0x192>
 8010538:	4b42      	ldr	r3, [pc, #264]	; (8010644 <tcp_output+0x290>)
 801053a:	f240 5237 	movw	r2, #1335	; 0x537
 801053e:	4946      	ldr	r1, [pc, #280]	; (8010658 <tcp_output+0x2a4>)
 8010540:	4842      	ldr	r0, [pc, #264]	; (801064c <tcp_output+0x298>)
 8010542:	f004 fbfd 	bl	8014d40 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801054a:	2b00      	cmp	r3, #0
 801054c:	d01f      	beq.n	801058e <tcp_output+0x1da>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	8b5b      	ldrh	r3, [r3, #26]
 8010552:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010556:	2b00      	cmp	r3, #0
 8010558:	d119      	bne.n	801058e <tcp_output+0x1da>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801055e:	2b00      	cmp	r3, #0
 8010560:	d00b      	beq.n	801057a <tcp_output+0x1c6>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d110      	bne.n	801058e <tcp_output+0x1da>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010570:	891a      	ldrh	r2, [r3, #8]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010576:	429a      	cmp	r2, r3
 8010578:	d209      	bcs.n	801058e <tcp_output+0x1da>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010580:	2b00      	cmp	r3, #0
 8010582:	d004      	beq.n	801058e <tcp_output+0x1da>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801058a:	2b08      	cmp	r3, #8
 801058c:	d901      	bls.n	8010592 <tcp_output+0x1de>
 801058e:	2301      	movs	r3, #1
 8010590:	e000      	b.n	8010594 <tcp_output+0x1e0>
 8010592:	2300      	movs	r3, #0
 8010594:	2b00      	cmp	r3, #0
 8010596:	d106      	bne.n	80105a6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	8b5b      	ldrh	r3, [r3, #26]
 801059c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 80e3 	beq.w	801076c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	7d1b      	ldrb	r3, [r3, #20]
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	d00d      	beq.n	80105ca <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80105ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	899b      	ldrh	r3, [r3, #12]
 80105b4:	b29c      	uxth	r4, r3
 80105b6:	2010      	movs	r0, #16
 80105b8:	f7f8 fff6 	bl	80095a8 <lwip_htons>
 80105bc:	4603      	mov	r3, r0
 80105be:	461a      	mov	r2, r3
 80105c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	4322      	orrs	r2, r4
 80105c6:	b292      	uxth	r2, r2
 80105c8:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80105ca:	697a      	ldr	r2, [r7, #20]
 80105cc:	6879      	ldr	r1, [r7, #4]
 80105ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80105d0:	f000 f908 	bl	80107e4 <tcp_output_segment>
 80105d4:	4603      	mov	r3, r0
 80105d6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80105d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d009      	beq.n	80105f4 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	8b5b      	ldrh	r3, [r3, #26]
 80105e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105e8:	b29a      	uxth	r2, r3
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	835a      	strh	r2, [r3, #26]
      return err;
 80105ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105f2:	e0d2      	b.n	801079a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	7d1b      	ldrb	r3, [r3, #20]
 8010600:	2b02      	cmp	r3, #2
 8010602:	d006      	beq.n	8010612 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	8b5b      	ldrh	r3, [r3, #26]
 8010608:	f023 0303 	bic.w	r3, r3, #3
 801060c:	b29a      	uxth	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	4618      	mov	r0, r3
 801061a:	f7f8 ffda 	bl	80095d2 <lwip_htonl>
 801061e:	4604      	mov	r4, r0
 8010620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010622:	891b      	ldrh	r3, [r3, #8]
 8010624:	461d      	mov	r5, r3
 8010626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	899b      	ldrh	r3, [r3, #12]
 801062c:	b29b      	uxth	r3, r3
 801062e:	4618      	mov	r0, r3
 8010630:	f7f8 ffba 	bl	80095a8 <lwip_htons>
 8010634:	4603      	mov	r3, r0
 8010636:	b2db      	uxtb	r3, r3
 8010638:	f003 0303 	and.w	r3, r3, #3
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00d      	beq.n	801065c <tcp_output+0x2a8>
 8010640:	2301      	movs	r3, #1
 8010642:	e00c      	b.n	801065e <tcp_output+0x2aa>
 8010644:	0801821c 	.word	0x0801821c
 8010648:	08018760 	.word	0x08018760
 801064c:	08018270 	.word	0x08018270
 8010650:	08018778 	.word	0x08018778
 8010654:	2000e640 	.word	0x2000e640
 8010658:	080187a0 	.word	0x080187a0
 801065c:	2300      	movs	r3, #0
 801065e:	442b      	add	r3, r5
 8010660:	4423      	add	r3, r4
 8010662:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	1ad3      	subs	r3, r2, r3
 801066c:	2b00      	cmp	r3, #0
 801066e:	da02      	bge.n	8010676 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010678:	891b      	ldrh	r3, [r3, #8]
 801067a:	461c      	mov	r4, r3
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	68db      	ldr	r3, [r3, #12]
 8010680:	899b      	ldrh	r3, [r3, #12]
 8010682:	b29b      	uxth	r3, r3
 8010684:	4618      	mov	r0, r3
 8010686:	f7f8 ff8f 	bl	80095a8 <lwip_htons>
 801068a:	4603      	mov	r3, r0
 801068c:	b2db      	uxtb	r3, r3
 801068e:	f003 0303 	and.w	r3, r3, #3
 8010692:	2b00      	cmp	r3, #0
 8010694:	d001      	beq.n	801069a <tcp_output+0x2e6>
 8010696:	2301      	movs	r3, #1
 8010698:	e000      	b.n	801069c <tcp_output+0x2e8>
 801069a:	2300      	movs	r3, #0
 801069c:	4423      	add	r3, r4
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d049      	beq.n	8010736 <tcp_output+0x382>
      seg->next = NULL;
 80106a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a4:	2200      	movs	r2, #0
 80106a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d105      	bne.n	80106bc <tcp_output+0x308>
        pcb->unacked = seg;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80106b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b8:	623b      	str	r3, [r7, #32]
 80106ba:	e03f      	b.n	801073c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80106bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	685b      	ldr	r3, [r3, #4]
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7f8 ff85 	bl	80095d2 <lwip_htonl>
 80106c8:	4604      	mov	r4, r0
 80106ca:	6a3b      	ldr	r3, [r7, #32]
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7f8 ff7e 	bl	80095d2 <lwip_htonl>
 80106d6:	4603      	mov	r3, r0
 80106d8:	1ae3      	subs	r3, r4, r3
 80106da:	2b00      	cmp	r3, #0
 80106dc:	da24      	bge.n	8010728 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	3370      	adds	r3, #112	; 0x70
 80106e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80106e4:	e002      	b.n	80106ec <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80106ec:	69fb      	ldr	r3, [r7, #28]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d011      	beq.n	8010718 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7f8 ff68 	bl	80095d2 <lwip_htonl>
 8010702:	4604      	mov	r4, r0
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	4618      	mov	r0, r3
 801070c:	f7f8 ff61 	bl	80095d2 <lwip_htonl>
 8010710:	4603      	mov	r3, r0
 8010712:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010714:	2b00      	cmp	r3, #0
 8010716:	dbe6      	blt.n	80106e6 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010720:	69fb      	ldr	r3, [r7, #28]
 8010722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010724:	601a      	str	r2, [r3, #0]
 8010726:	e009      	b.n	801073c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010728:	6a3b      	ldr	r3, [r7, #32]
 801072a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801072c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801072e:	6a3b      	ldr	r3, [r7, #32]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	623b      	str	r3, [r7, #32]
 8010734:	e002      	b.n	801073c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010738:	f7fb ff1a 	bl	800c570 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010740:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010744:	2b00      	cmp	r3, #0
 8010746:	d012      	beq.n	801076e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	4618      	mov	r0, r3
 8010750:	f7f8 ff3f 	bl	80095d2 <lwip_htonl>
 8010754:	4602      	mov	r2, r0
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801075a:	1ad3      	subs	r3, r2, r3
 801075c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801075e:	8912      	ldrh	r2, [r2, #8]
 8010760:	4413      	add	r3, r2
  while (seg != NULL &&
 8010762:	69ba      	ldr	r2, [r7, #24]
 8010764:	429a      	cmp	r2, r3
 8010766:	f4bf aeda 	bcs.w	801051e <tcp_output+0x16a>
 801076a:	e000      	b.n	801076e <tcp_output+0x3ba>
      break;
 801076c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010772:	2b00      	cmp	r3, #0
 8010774:	d108      	bne.n	8010788 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2200      	movs	r2, #0
 801077a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801077e:	e004      	b.n	801078a <tcp_output+0x3d6>
    goto output_done;
 8010780:	bf00      	nop
 8010782:	e002      	b.n	801078a <tcp_output+0x3d6>
    goto output_done;
 8010784:	bf00      	nop
 8010786:	e000      	b.n	801078a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010788:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	8b5b      	ldrh	r3, [r3, #26]
 801078e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010792:	b29a      	uxth	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3728      	adds	r7, #40	; 0x28
 801079e:	46bd      	mov	sp, r7
 80107a0:	bdb0      	pop	{r4, r5, r7, pc}
 80107a2:	bf00      	nop

080107a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d106      	bne.n	80107c0 <tcp_output_segment_busy+0x1c>
 80107b2:	4b09      	ldr	r3, [pc, #36]	; (80107d8 <tcp_output_segment_busy+0x34>)
 80107b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80107b8:	4908      	ldr	r1, [pc, #32]	; (80107dc <tcp_output_segment_busy+0x38>)
 80107ba:	4809      	ldr	r0, [pc, #36]	; (80107e0 <tcp_output_segment_busy+0x3c>)
 80107bc:	f004 fac0 	bl	8014d40 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	7b9b      	ldrb	r3, [r3, #14]
 80107c6:	2b01      	cmp	r3, #1
 80107c8:	d001      	beq.n	80107ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80107ca:	2301      	movs	r3, #1
 80107cc:	e000      	b.n	80107d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80107ce:	2300      	movs	r3, #0
}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}
 80107d8:	0801821c 	.word	0x0801821c
 80107dc:	080187b8 	.word	0x080187b8
 80107e0:	08018270 	.word	0x08018270

080107e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80107e4:	b5b0      	push	{r4, r5, r7, lr}
 80107e6:	b08c      	sub	sp, #48	; 0x30
 80107e8:	af04      	add	r7, sp, #16
 80107ea:	60f8      	str	r0, [r7, #12]
 80107ec:	60b9      	str	r1, [r7, #8]
 80107ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d106      	bne.n	8010804 <tcp_output_segment+0x20>
 80107f6:	4b64      	ldr	r3, [pc, #400]	; (8010988 <tcp_output_segment+0x1a4>)
 80107f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80107fc:	4963      	ldr	r1, [pc, #396]	; (801098c <tcp_output_segment+0x1a8>)
 80107fe:	4864      	ldr	r0, [pc, #400]	; (8010990 <tcp_output_segment+0x1ac>)
 8010800:	f004 fa9e 	bl	8014d40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d106      	bne.n	8010818 <tcp_output_segment+0x34>
 801080a:	4b5f      	ldr	r3, [pc, #380]	; (8010988 <tcp_output_segment+0x1a4>)
 801080c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010810:	4960      	ldr	r1, [pc, #384]	; (8010994 <tcp_output_segment+0x1b0>)
 8010812:	485f      	ldr	r0, [pc, #380]	; (8010990 <tcp_output_segment+0x1ac>)
 8010814:	f004 fa94 	bl	8014d40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d106      	bne.n	801082c <tcp_output_segment+0x48>
 801081e:	4b5a      	ldr	r3, [pc, #360]	; (8010988 <tcp_output_segment+0x1a4>)
 8010820:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010824:	495c      	ldr	r1, [pc, #368]	; (8010998 <tcp_output_segment+0x1b4>)
 8010826:	485a      	ldr	r0, [pc, #360]	; (8010990 <tcp_output_segment+0x1ac>)
 8010828:	f004 fa8a 	bl	8014d40 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f7ff ffb9 	bl	80107a4 <tcp_output_segment_busy>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d001      	beq.n	801083c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	e0a0      	b.n	801097e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	68dc      	ldr	r4, [r3, #12]
 8010844:	4610      	mov	r0, r2
 8010846:	f7f8 fec4 	bl	80095d2 <lwip_htonl>
 801084a:	4603      	mov	r3, r0
 801084c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	68dc      	ldr	r4, [r3, #12]
 8010856:	4610      	mov	r0, r2
 8010858:	f7f8 fea6 	bl	80095a8 <lwip_htons>
 801085c:	4603      	mov	r3, r0
 801085e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010864:	68ba      	ldr	r2, [r7, #8]
 8010866:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010868:	441a      	add	r2, r3
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	3314      	adds	r3, #20
 8010874:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	7a9b      	ldrb	r3, [r3, #10]
 801087a:	f003 0301 	and.w	r3, r3, #1
 801087e:	2b00      	cmp	r3, #0
 8010880:	d015      	beq.n	80108ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	3304      	adds	r3, #4
 8010886:	461a      	mov	r2, r3
 8010888:	6879      	ldr	r1, [r7, #4]
 801088a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801088e:	f7fc fa33 	bl	800ccf8 <tcp_eff_send_mss_netif>
 8010892:	4603      	mov	r3, r0
 8010894:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010896:	8b7b      	ldrh	r3, [r7, #26]
 8010898:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801089c:	4618      	mov	r0, r3
 801089e:	f7f8 fe98 	bl	80095d2 <lwip_htonl>
 80108a2:	4602      	mov	r2, r0
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	3304      	adds	r3, #4
 80108ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	da02      	bge.n	80108be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	2200      	movs	r2, #0
 80108bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d10c      	bne.n	80108e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80108c6:	4b35      	ldr	r3, [pc, #212]	; (801099c <tcp_output_segment+0x1b8>)
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	68db      	ldr	r3, [r3, #12]
 80108d2:	685b      	ldr	r3, [r3, #4]
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7f8 fe7c 	bl	80095d2 <lwip_htonl>
 80108da:	4602      	mov	r2, r0
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	461a      	mov	r2, r3
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	1ad3      	subs	r3, r2, r3
 80108ee:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	8959      	ldrh	r1, [r3, #10]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	685b      	ldr	r3, [r3, #4]
 80108fa:	8b3a      	ldrh	r2, [r7, #24]
 80108fc:	1a8a      	subs	r2, r1, r2
 80108fe:	b292      	uxth	r2, r2
 8010900:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	8919      	ldrh	r1, [r3, #8]
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	8b3a      	ldrh	r2, [r7, #24]
 801090e:	1a8a      	subs	r2, r1, r2
 8010910:	b292      	uxth	r2, r2
 8010912:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	68fa      	ldr	r2, [r7, #12]
 801091a:	68d2      	ldr	r2, [r2, #12]
 801091c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	2200      	movs	r2, #0
 8010924:	741a      	strb	r2, [r3, #16]
 8010926:	2200      	movs	r2, #0
 8010928:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	f103 0214 	add.w	r2, r3, #20
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	7a9b      	ldrb	r3, [r3, #10]
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	f003 0304 	and.w	r3, r3, #4
 801093c:	4413      	add	r3, r2
 801093e:	69fa      	ldr	r2, [r7, #28]
 8010940:	429a      	cmp	r2, r3
 8010942:	d006      	beq.n	8010952 <tcp_output_segment+0x16e>
 8010944:	4b10      	ldr	r3, [pc, #64]	; (8010988 <tcp_output_segment+0x1a4>)
 8010946:	f240 621c 	movw	r2, #1564	; 0x61c
 801094a:	4915      	ldr	r1, [pc, #84]	; (80109a0 <tcp_output_segment+0x1bc>)
 801094c:	4810      	ldr	r0, [pc, #64]	; (8010990 <tcp_output_segment+0x1ac>)
 801094e:	f004 f9f7 	bl	8014d40 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6858      	ldr	r0, [r3, #4]
 8010956:	68b9      	ldr	r1, [r7, #8]
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	1d1c      	adds	r4, r3, #4
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	7add      	ldrb	r5, [r3, #11]
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	7a9b      	ldrb	r3, [r3, #10]
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	9202      	str	r2, [sp, #8]
 8010968:	2206      	movs	r2, #6
 801096a:	9201      	str	r2, [sp, #4]
 801096c:	9300      	str	r3, [sp, #0]
 801096e:	462b      	mov	r3, r5
 8010970:	4622      	mov	r2, r4
 8010972:	f002 fe33 	bl	80135dc <ip4_output_if>
 8010976:	4603      	mov	r3, r0
 8010978:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801097a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3720      	adds	r7, #32
 8010982:	46bd      	mov	sp, r7
 8010984:	bdb0      	pop	{r4, r5, r7, pc}
 8010986:	bf00      	nop
 8010988:	0801821c 	.word	0x0801821c
 801098c:	080187e0 	.word	0x080187e0
 8010990:	08018270 	.word	0x08018270
 8010994:	08018800 	.word	0x08018800
 8010998:	08018820 	.word	0x08018820
 801099c:	2000e630 	.word	0x2000e630
 80109a0:	08018844 	.word	0x08018844

080109a4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80109a4:	b5b0      	push	{r4, r5, r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d106      	bne.n	80109c0 <tcp_rexmit_rto_prepare+0x1c>
 80109b2:	4b31      	ldr	r3, [pc, #196]	; (8010a78 <tcp_rexmit_rto_prepare+0xd4>)
 80109b4:	f240 6263 	movw	r2, #1635	; 0x663
 80109b8:	4930      	ldr	r1, [pc, #192]	; (8010a7c <tcp_rexmit_rto_prepare+0xd8>)
 80109ba:	4831      	ldr	r0, [pc, #196]	; (8010a80 <tcp_rexmit_rto_prepare+0xdc>)
 80109bc:	f004 f9c0 	bl	8014d40 <iprintf>

  if (pcb->unacked == NULL) {
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d102      	bne.n	80109ce <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80109c8:	f06f 0305 	mvn.w	r3, #5
 80109cc:	e050      	b.n	8010a70 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109d2:	60fb      	str	r3, [r7, #12]
 80109d4:	e00b      	b.n	80109ee <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f7ff fee4 	bl	80107a4 <tcp_output_segment_busy>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d002      	beq.n	80109e8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80109e2:	f06f 0305 	mvn.w	r3, #5
 80109e6:	e043      	b.n	8010a70 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	60fb      	str	r3, [r7, #12]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d1ef      	bne.n	80109d6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80109f6:	68f8      	ldr	r0, [r7, #12]
 80109f8:	f7ff fed4 	bl	80107a4 <tcp_output_segment_busy>
 80109fc:	4603      	mov	r3, r0
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d002      	beq.n	8010a08 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010a02:	f06f 0305 	mvn.w	r3, #5
 8010a06:	e033      	b.n	8010a70 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	8b5b      	ldrh	r3, [r3, #26]
 8010a22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7f8 fdcd 	bl	80095d2 <lwip_htonl>
 8010a38:	4604      	mov	r4, r0
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	891b      	ldrh	r3, [r3, #8]
 8010a3e:	461d      	mov	r5, r3
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	899b      	ldrh	r3, [r3, #12]
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7f8 fdad 	bl	80095a8 <lwip_htons>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	f003 0303 	and.w	r3, r3, #3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d001      	beq.n	8010a5e <tcp_rexmit_rto_prepare+0xba>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e000      	b.n	8010a60 <tcp_rexmit_rto_prepare+0xbc>
 8010a5e:	2300      	movs	r3, #0
 8010a60:	442b      	add	r3, r5
 8010a62:	18e2      	adds	r2, r4, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010a6e:	2300      	movs	r3, #0
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3710      	adds	r7, #16
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bdb0      	pop	{r4, r5, r7, pc}
 8010a78:	0801821c 	.word	0x0801821c
 8010a7c:	08018858 	.word	0x08018858
 8010a80:	08018270 	.word	0x08018270

08010a84 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d106      	bne.n	8010aa0 <tcp_rexmit_rto_commit+0x1c>
 8010a92:	4b0d      	ldr	r3, [pc, #52]	; (8010ac8 <tcp_rexmit_rto_commit+0x44>)
 8010a94:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010a98:	490c      	ldr	r1, [pc, #48]	; (8010acc <tcp_rexmit_rto_commit+0x48>)
 8010a9a:	480d      	ldr	r0, [pc, #52]	; (8010ad0 <tcp_rexmit_rto_commit+0x4c>)
 8010a9c:	f004 f950 	bl	8014d40 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010aa6:	2bff      	cmp	r3, #255	; 0xff
 8010aa8:	d007      	beq.n	8010aba <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	b2da      	uxtb	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f7ff fc7a 	bl	80103b4 <tcp_output>
}
 8010ac0:	bf00      	nop
 8010ac2:	3708      	adds	r7, #8
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	0801821c 	.word	0x0801821c
 8010acc:	0801887c 	.word	0x0801887c
 8010ad0:	08018270 	.word	0x08018270

08010ad4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <tcp_rexmit_rto+0x1c>
 8010ae2:	4b0a      	ldr	r3, [pc, #40]	; (8010b0c <tcp_rexmit_rto+0x38>)
 8010ae4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010ae8:	4909      	ldr	r1, [pc, #36]	; (8010b10 <tcp_rexmit_rto+0x3c>)
 8010aea:	480a      	ldr	r0, [pc, #40]	; (8010b14 <tcp_rexmit_rto+0x40>)
 8010aec:	f004 f928 	bl	8014d40 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7ff ff57 	bl	80109a4 <tcp_rexmit_rto_prepare>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d102      	bne.n	8010b02 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f7ff ffc1 	bl	8010a84 <tcp_rexmit_rto_commit>
  }
}
 8010b02:	bf00      	nop
 8010b04:	3708      	adds	r7, #8
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
 8010b0a:	bf00      	nop
 8010b0c:	0801821c 	.word	0x0801821c
 8010b10:	080188a0 	.word	0x080188a0
 8010b14:	08018270 	.word	0x08018270

08010b18 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010b18:	b590      	push	{r4, r7, lr}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d106      	bne.n	8010b34 <tcp_rexmit+0x1c>
 8010b26:	4b2f      	ldr	r3, [pc, #188]	; (8010be4 <tcp_rexmit+0xcc>)
 8010b28:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010b2c:	492e      	ldr	r1, [pc, #184]	; (8010be8 <tcp_rexmit+0xd0>)
 8010b2e:	482f      	ldr	r0, [pc, #188]	; (8010bec <tcp_rexmit+0xd4>)
 8010b30:	f004 f906 	bl	8014d40 <iprintf>

  if (pcb->unacked == NULL) {
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d102      	bne.n	8010b42 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010b3c:	f06f 0305 	mvn.w	r3, #5
 8010b40:	e04c      	b.n	8010bdc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b46:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010b48:	68b8      	ldr	r0, [r7, #8]
 8010b4a:	f7ff fe2b 	bl	80107a4 <tcp_output_segment_busy>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d002      	beq.n	8010b5a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010b54:	f06f 0305 	mvn.w	r3, #5
 8010b58:	e040      	b.n	8010bdc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	681a      	ldr	r2, [r3, #0]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	336c      	adds	r3, #108	; 0x6c
 8010b66:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010b68:	e002      	b.n	8010b70 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d011      	beq.n	8010b9c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7f8 fd26 	bl	80095d2 <lwip_htonl>
 8010b86:	4604      	mov	r4, r0
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	68db      	ldr	r3, [r3, #12]
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7f8 fd1f 	bl	80095d2 <lwip_htonl>
 8010b94:	4603      	mov	r3, r0
 8010b96:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	dbe6      	blt.n	8010b6a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681a      	ldr	r2, [r3, #0]
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	68ba      	ldr	r2, [r7, #8]
 8010ba8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d103      	bne.n	8010bba <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010bc0:	2bff      	cmp	r3, #255	; 0xff
 8010bc2:	d007      	beq.n	8010bd4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010bca:	3301      	adds	r3, #1
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010bda:	2300      	movs	r3, #0
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3714      	adds	r7, #20
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd90      	pop	{r4, r7, pc}
 8010be4:	0801821c 	.word	0x0801821c
 8010be8:	080188bc 	.word	0x080188bc
 8010bec:	08018270 	.word	0x08018270

08010bf0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d106      	bne.n	8010c0c <tcp_rexmit_fast+0x1c>
 8010bfe:	4b2e      	ldr	r3, [pc, #184]	; (8010cb8 <tcp_rexmit_fast+0xc8>)
 8010c00:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010c04:	492d      	ldr	r1, [pc, #180]	; (8010cbc <tcp_rexmit_fast+0xcc>)
 8010c06:	482e      	ldr	r0, [pc, #184]	; (8010cc0 <tcp_rexmit_fast+0xd0>)
 8010c08:	f004 f89a 	bl	8014d40 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d04d      	beq.n	8010cb0 <tcp_rexmit_fast+0xc0>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	8b5b      	ldrh	r3, [r3, #26]
 8010c18:	f003 0304 	and.w	r3, r3, #4
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d147      	bne.n	8010cb0 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f7ff ff79 	bl	8010b18 <tcp_rexmit>
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d141      	bne.n	8010cb0 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c38:	429a      	cmp	r2, r3
 8010c3a:	d207      	bcs.n	8010c4c <tcp_rexmit_fast+0x5c>
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c42:	0fda      	lsrs	r2, r3, #31
 8010c44:	4413      	add	r3, r2
 8010c46:	105b      	asrs	r3, r3, #1
 8010c48:	b29b      	uxth	r3, r3
 8010c4a:	e006      	b.n	8010c5a <tcp_rexmit_fast+0x6a>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c52:	0fda      	lsrs	r2, r3, #31
 8010c54:	4413      	add	r3, r2
 8010c56:	105b      	asrs	r3, r3, #1
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010c66:	461a      	mov	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d206      	bcs.n	8010c80 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c76:	005b      	lsls	r3, r3, #1
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	0049      	lsls	r1, r1, #1
 8010c8e:	440b      	add	r3, r1
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	4413      	add	r3, r2
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	8b5b      	ldrh	r3, [r3, #26]
 8010ca0:	f043 0304 	orr.w	r3, r3, #4
 8010ca4:	b29a      	uxth	r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	2200      	movs	r2, #0
 8010cae:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010cb0:	bf00      	nop
 8010cb2:	3708      	adds	r7, #8
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	0801821c 	.word	0x0801821c
 8010cbc:	080188d4 	.word	0x080188d4
 8010cc0:	08018270 	.word	0x08018270

08010cc4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b086      	sub	sp, #24
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	60f8      	str	r0, [r7, #12]
 8010ccc:	607b      	str	r3, [r7, #4]
 8010cce:	460b      	mov	r3, r1
 8010cd0:	817b      	strh	r3, [r7, #10]
 8010cd2:	4613      	mov	r3, r2
 8010cd4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010cd6:	897a      	ldrh	r2, [r7, #10]
 8010cd8:	893b      	ldrh	r3, [r7, #8]
 8010cda:	4413      	add	r3, r2
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	3314      	adds	r3, #20
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	2022      	movs	r0, #34	; 0x22
 8010cea:	f7f9 fd25 	bl	800a738 <pbuf_alloc>
 8010cee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d04e      	beq.n	8010d94 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	895b      	ldrh	r3, [r3, #10]
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	897b      	ldrh	r3, [r7, #10]
 8010cfe:	3314      	adds	r3, #20
 8010d00:	429a      	cmp	r2, r3
 8010d02:	da06      	bge.n	8010d12 <tcp_output_alloc_header_common+0x4e>
 8010d04:	4b26      	ldr	r3, [pc, #152]	; (8010da0 <tcp_output_alloc_header_common+0xdc>)
 8010d06:	f240 7224 	movw	r2, #1828	; 0x724
 8010d0a:	4926      	ldr	r1, [pc, #152]	; (8010da4 <tcp_output_alloc_header_common+0xe0>)
 8010d0c:	4826      	ldr	r0, [pc, #152]	; (8010da8 <tcp_output_alloc_header_common+0xe4>)
 8010d0e:	f004 f817 	bl	8014d40 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010d18:	8c3b      	ldrh	r3, [r7, #32]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7f8 fc44 	bl	80095a8 <lwip_htons>
 8010d20:	4603      	mov	r3, r0
 8010d22:	461a      	mov	r2, r3
 8010d24:	693b      	ldr	r3, [r7, #16]
 8010d26:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7f8 fc3c 	bl	80095a8 <lwip_htons>
 8010d30:	4603      	mov	r3, r0
 8010d32:	461a      	mov	r2, r3
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010d3e:	68f8      	ldr	r0, [r7, #12]
 8010d40:	f7f8 fc47 	bl	80095d2 <lwip_htonl>
 8010d44:	4602      	mov	r2, r0
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010d4a:	897b      	ldrh	r3, [r7, #10]
 8010d4c:	089b      	lsrs	r3, r3, #2
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	3305      	adds	r3, #5
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	031b      	lsls	r3, r3, #12
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7f8 fc20 	bl	80095a8 <lwip_htons>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	461a      	mov	r2, r3
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010d70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7f8 fc18 	bl	80095a8 <lwip_htons>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	2200      	movs	r2, #0
 8010d84:	741a      	strb	r2, [r3, #16]
 8010d86:	2200      	movs	r2, #0
 8010d88:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	749a      	strb	r2, [r3, #18]
 8010d90:	2200      	movs	r2, #0
 8010d92:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010d94:	697b      	ldr	r3, [r7, #20]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3718      	adds	r7, #24
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	0801821c 	.word	0x0801821c
 8010da4:	080188f4 	.word	0x080188f4
 8010da8:	08018270 	.word	0x08018270

08010dac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010dac:	b5b0      	push	{r4, r5, r7, lr}
 8010dae:	b08a      	sub	sp, #40	; 0x28
 8010db0:	af04      	add	r7, sp, #16
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	607b      	str	r3, [r7, #4]
 8010db6:	460b      	mov	r3, r1
 8010db8:	817b      	strh	r3, [r7, #10]
 8010dba:	4613      	mov	r3, r2
 8010dbc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d106      	bne.n	8010dd2 <tcp_output_alloc_header+0x26>
 8010dc4:	4b15      	ldr	r3, [pc, #84]	; (8010e1c <tcp_output_alloc_header+0x70>)
 8010dc6:	f240 7242 	movw	r2, #1858	; 0x742
 8010dca:	4915      	ldr	r1, [pc, #84]	; (8010e20 <tcp_output_alloc_header+0x74>)
 8010dcc:	4815      	ldr	r0, [pc, #84]	; (8010e24 <tcp_output_alloc_header+0x78>)
 8010dce:	f003 ffb7 	bl	8014d40 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	8adb      	ldrh	r3, [r3, #22]
 8010dda:	68fa      	ldr	r2, [r7, #12]
 8010ddc:	8b12      	ldrh	r2, [r2, #24]
 8010dde:	68f9      	ldr	r1, [r7, #12]
 8010de0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010de2:	893d      	ldrh	r5, [r7, #8]
 8010de4:	897c      	ldrh	r4, [r7, #10]
 8010de6:	9103      	str	r1, [sp, #12]
 8010de8:	2110      	movs	r1, #16
 8010dea:	9102      	str	r1, [sp, #8]
 8010dec:	9201      	str	r2, [sp, #4]
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	462a      	mov	r2, r5
 8010df4:	4621      	mov	r1, r4
 8010df6:	f7ff ff65 	bl	8010cc4 <tcp_output_alloc_header_common>
 8010dfa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d006      	beq.n	8010e10 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e06:	68fa      	ldr	r2, [r7, #12]
 8010e08:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010e0a:	441a      	add	r2, r3
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010e10:	697b      	ldr	r3, [r7, #20]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3718      	adds	r7, #24
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bdb0      	pop	{r4, r5, r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	0801821c 	.word	0x0801821c
 8010e20:	08018924 	.word	0x08018924
 8010e24:	08018270 	.word	0x08018270

08010e28 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b088      	sub	sp, #32
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	4611      	mov	r1, r2
 8010e34:	461a      	mov	r2, r3
 8010e36:	460b      	mov	r3, r1
 8010e38:	71fb      	strb	r3, [r7, #7]
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010e3e:	2300      	movs	r3, #0
 8010e40:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d106      	bne.n	8010e56 <tcp_output_fill_options+0x2e>
 8010e48:	4b13      	ldr	r3, [pc, #76]	; (8010e98 <tcp_output_fill_options+0x70>)
 8010e4a:	f240 7256 	movw	r2, #1878	; 0x756
 8010e4e:	4913      	ldr	r1, [pc, #76]	; (8010e9c <tcp_output_fill_options+0x74>)
 8010e50:	4813      	ldr	r0, [pc, #76]	; (8010ea0 <tcp_output_fill_options+0x78>)
 8010e52:	f003 ff75 	bl	8014d40 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010e5c:	69bb      	ldr	r3, [r7, #24]
 8010e5e:	3314      	adds	r3, #20
 8010e60:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	f103 0214 	add.w	r2, r3, #20
 8010e68:	8bfb      	ldrh	r3, [r7, #30]
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	79fb      	ldrb	r3, [r7, #7]
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	f003 0304 	and.w	r3, r3, #4
 8010e76:	440b      	add	r3, r1
 8010e78:	4413      	add	r3, r2
 8010e7a:	697a      	ldr	r2, [r7, #20]
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d006      	beq.n	8010e8e <tcp_output_fill_options+0x66>
 8010e80:	4b05      	ldr	r3, [pc, #20]	; (8010e98 <tcp_output_fill_options+0x70>)
 8010e82:	f240 7275 	movw	r2, #1909	; 0x775
 8010e86:	4907      	ldr	r1, [pc, #28]	; (8010ea4 <tcp_output_fill_options+0x7c>)
 8010e88:	4805      	ldr	r0, [pc, #20]	; (8010ea0 <tcp_output_fill_options+0x78>)
 8010e8a:	f003 ff59 	bl	8014d40 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010e8e:	bf00      	nop
 8010e90:	3720      	adds	r7, #32
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	0801821c 	.word	0x0801821c
 8010e9c:	0801894c 	.word	0x0801894c
 8010ea0:	08018270 	.word	0x08018270
 8010ea4:	08018844 	.word	0x08018844

08010ea8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08a      	sub	sp, #40	; 0x28
 8010eac:	af04      	add	r7, sp, #16
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	607a      	str	r2, [r7, #4]
 8010eb4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d106      	bne.n	8010eca <tcp_output_control_segment+0x22>
 8010ebc:	4b1c      	ldr	r3, [pc, #112]	; (8010f30 <tcp_output_control_segment+0x88>)
 8010ebe:	f240 7287 	movw	r2, #1927	; 0x787
 8010ec2:	491c      	ldr	r1, [pc, #112]	; (8010f34 <tcp_output_control_segment+0x8c>)
 8010ec4:	481c      	ldr	r0, [pc, #112]	; (8010f38 <tcp_output_control_segment+0x90>)
 8010ec6:	f003 ff3b 	bl	8014d40 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010eca:	683a      	ldr	r2, [r7, #0]
 8010ecc:	6879      	ldr	r1, [r7, #4]
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f7fe fad6 	bl	800f480 <tcp_route>
 8010ed4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d102      	bne.n	8010ee2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010edc:	23fc      	movs	r3, #252	; 0xfc
 8010ede:	75fb      	strb	r3, [r7, #23]
 8010ee0:	e01c      	b.n	8010f1c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d006      	beq.n	8010ef6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	7adb      	ldrb	r3, [r3, #11]
 8010eec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	7a9b      	ldrb	r3, [r3, #10]
 8010ef2:	757b      	strb	r3, [r7, #21]
 8010ef4:	e003      	b.n	8010efe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010ef6:	23ff      	movs	r3, #255	; 0xff
 8010ef8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010efa:	2300      	movs	r3, #0
 8010efc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010efe:	7dba      	ldrb	r2, [r7, #22]
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	9302      	str	r3, [sp, #8]
 8010f04:	2306      	movs	r3, #6
 8010f06:	9301      	str	r3, [sp, #4]
 8010f08:	7d7b      	ldrb	r3, [r7, #21]
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	683a      	ldr	r2, [r7, #0]
 8010f10:	6879      	ldr	r1, [r7, #4]
 8010f12:	68b8      	ldr	r0, [r7, #8]
 8010f14:	f002 fb62 	bl	80135dc <ip4_output_if>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010f1c:	68b8      	ldr	r0, [r7, #8]
 8010f1e:	f7f9 feeb 	bl	800acf8 <pbuf_free>
  return err;
 8010f22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3718      	adds	r7, #24
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	0801821c 	.word	0x0801821c
 8010f34:	08018974 	.word	0x08018974
 8010f38:	08018270 	.word	0x08018270

08010f3c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010f3c:	b590      	push	{r4, r7, lr}
 8010f3e:	b08b      	sub	sp, #44	; 0x2c
 8010f40:	af04      	add	r7, sp, #16
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
 8010f48:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d106      	bne.n	8010f5e <tcp_rst+0x22>
 8010f50:	4b1f      	ldr	r3, [pc, #124]	; (8010fd0 <tcp_rst+0x94>)
 8010f52:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010f56:	491f      	ldr	r1, [pc, #124]	; (8010fd4 <tcp_rst+0x98>)
 8010f58:	481f      	ldr	r0, [pc, #124]	; (8010fd8 <tcp_rst+0x9c>)
 8010f5a:	f003 fef1 	bl	8014d40 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d106      	bne.n	8010f72 <tcp_rst+0x36>
 8010f64:	4b1a      	ldr	r3, [pc, #104]	; (8010fd0 <tcp_rst+0x94>)
 8010f66:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010f6a:	491c      	ldr	r1, [pc, #112]	; (8010fdc <tcp_rst+0xa0>)
 8010f6c:	481a      	ldr	r0, [pc, #104]	; (8010fd8 <tcp_rst+0x9c>)
 8010f6e:	f003 fee7 	bl	8014d40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010f72:	2300      	movs	r3, #0
 8010f74:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010f76:	f246 0308 	movw	r3, #24584	; 0x6008
 8010f7a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010f7c:	7dfb      	ldrb	r3, [r7, #23]
 8010f7e:	b29c      	uxth	r4, r3
 8010f80:	68b8      	ldr	r0, [r7, #8]
 8010f82:	f7f8 fb26 	bl	80095d2 <lwip_htonl>
 8010f86:	4602      	mov	r2, r0
 8010f88:	8abb      	ldrh	r3, [r7, #20]
 8010f8a:	9303      	str	r3, [sp, #12]
 8010f8c:	2314      	movs	r3, #20
 8010f8e:	9302      	str	r3, [sp, #8]
 8010f90:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010f92:	9301      	str	r3, [sp, #4]
 8010f94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010f96:	9300      	str	r3, [sp, #0]
 8010f98:	4613      	mov	r3, r2
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	4621      	mov	r1, r4
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f7ff fe90 	bl	8010cc4 <tcp_output_alloc_header_common>
 8010fa4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00c      	beq.n	8010fc6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010fac:	7dfb      	ldrb	r3, [r7, #23]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	6939      	ldr	r1, [r7, #16]
 8010fb2:	68f8      	ldr	r0, [r7, #12]
 8010fb4:	f7ff ff38 	bl	8010e28 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fba:	683a      	ldr	r2, [r7, #0]
 8010fbc:	6939      	ldr	r1, [r7, #16]
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f7ff ff72 	bl	8010ea8 <tcp_output_control_segment>
 8010fc4:	e000      	b.n	8010fc8 <tcp_rst+0x8c>
    return;
 8010fc6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010fc8:	371c      	adds	r7, #28
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd90      	pop	{r4, r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	0801821c 	.word	0x0801821c
 8010fd4:	080189a0 	.word	0x080189a0
 8010fd8:	08018270 	.word	0x08018270
 8010fdc:	080189bc 	.word	0x080189bc

08010fe0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010fe0:	b590      	push	{r4, r7, lr}
 8010fe2:	b087      	sub	sp, #28
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010fec:	2300      	movs	r3, #0
 8010fee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d106      	bne.n	8011004 <tcp_send_empty_ack+0x24>
 8010ff6:	4b28      	ldr	r3, [pc, #160]	; (8011098 <tcp_send_empty_ack+0xb8>)
 8010ff8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010ffc:	4927      	ldr	r1, [pc, #156]	; (801109c <tcp_send_empty_ack+0xbc>)
 8010ffe:	4828      	ldr	r0, [pc, #160]	; (80110a0 <tcp_send_empty_ack+0xc0>)
 8011000:	f003 fe9e 	bl	8014d40 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011004:	7dfb      	ldrb	r3, [r7, #23]
 8011006:	009b      	lsls	r3, r3, #2
 8011008:	b2db      	uxtb	r3, r3
 801100a:	f003 0304 	and.w	r3, r3, #4
 801100e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011010:	7d7b      	ldrb	r3, [r7, #21]
 8011012:	b29c      	uxth	r4, r3
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011018:	4618      	mov	r0, r3
 801101a:	f7f8 fada 	bl	80095d2 <lwip_htonl>
 801101e:	4603      	mov	r3, r0
 8011020:	2200      	movs	r2, #0
 8011022:	4621      	mov	r1, r4
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7ff fec1 	bl	8010dac <tcp_output_alloc_header>
 801102a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d109      	bne.n	8011046 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	8b5b      	ldrh	r3, [r3, #26]
 8011036:	f043 0303 	orr.w	r3, r3, #3
 801103a:	b29a      	uxth	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011040:	f06f 0301 	mvn.w	r3, #1
 8011044:	e023      	b.n	801108e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011046:	7dbb      	ldrb	r3, [r7, #22]
 8011048:	7dfa      	ldrb	r2, [r7, #23]
 801104a:	6939      	ldr	r1, [r7, #16]
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f7ff feeb 	bl	8010e28 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	3304      	adds	r3, #4
 8011058:	6939      	ldr	r1, [r7, #16]
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f7ff ff24 	bl	8010ea8 <tcp_output_control_segment>
 8011060:	4603      	mov	r3, r0
 8011062:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d007      	beq.n	801107c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	8b5b      	ldrh	r3, [r3, #26]
 8011070:	f043 0303 	orr.w	r3, r3, #3
 8011074:	b29a      	uxth	r2, r3
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	835a      	strh	r2, [r3, #26]
 801107a:	e006      	b.n	801108a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	8b5b      	ldrh	r3, [r3, #26]
 8011080:	f023 0303 	bic.w	r3, r3, #3
 8011084:	b29a      	uxth	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801108e:	4618      	mov	r0, r3
 8011090:	371c      	adds	r7, #28
 8011092:	46bd      	mov	sp, r7
 8011094:	bd90      	pop	{r4, r7, pc}
 8011096:	bf00      	nop
 8011098:	0801821c 	.word	0x0801821c
 801109c:	080189d8 	.word	0x080189d8
 80110a0:	08018270 	.word	0x08018270

080110a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80110a4:	b590      	push	{r4, r7, lr}
 80110a6:	b087      	sub	sp, #28
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80110ac:	2300      	movs	r3, #0
 80110ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d106      	bne.n	80110c4 <tcp_keepalive+0x20>
 80110b6:	4b18      	ldr	r3, [pc, #96]	; (8011118 <tcp_keepalive+0x74>)
 80110b8:	f640 0224 	movw	r2, #2084	; 0x824
 80110bc:	4917      	ldr	r1, [pc, #92]	; (801111c <tcp_keepalive+0x78>)
 80110be:	4818      	ldr	r0, [pc, #96]	; (8011120 <tcp_keepalive+0x7c>)
 80110c0:	f003 fe3e 	bl	8014d40 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80110c4:	7dfb      	ldrb	r3, [r7, #23]
 80110c6:	b29c      	uxth	r4, r3
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110cc:	3b01      	subs	r3, #1
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7f8 fa7f 	bl	80095d2 <lwip_htonl>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2200      	movs	r2, #0
 80110d8:	4621      	mov	r1, r4
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f7ff fe66 	bl	8010dac <tcp_output_alloc_header>
 80110e0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d102      	bne.n	80110ee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80110e8:	f04f 33ff 	mov.w	r3, #4294967295
 80110ec:	e010      	b.n	8011110 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80110ee:	7dfb      	ldrb	r3, [r7, #23]
 80110f0:	2200      	movs	r2, #0
 80110f2:	6939      	ldr	r1, [r7, #16]
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7ff fe97 	bl	8010e28 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	3304      	adds	r3, #4
 8011100:	6939      	ldr	r1, [r7, #16]
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7ff fed0 	bl	8010ea8 <tcp_output_control_segment>
 8011108:	4603      	mov	r3, r0
 801110a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011110:	4618      	mov	r0, r3
 8011112:	371c      	adds	r7, #28
 8011114:	46bd      	mov	sp, r7
 8011116:	bd90      	pop	{r4, r7, pc}
 8011118:	0801821c 	.word	0x0801821c
 801111c:	080189f8 	.word	0x080189f8
 8011120:	08018270 	.word	0x08018270

08011124 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011124:	b590      	push	{r4, r7, lr}
 8011126:	b08b      	sub	sp, #44	; 0x2c
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801112c:	2300      	movs	r3, #0
 801112e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d106      	bne.n	8011146 <tcp_zero_window_probe+0x22>
 8011138:	4b4c      	ldr	r3, [pc, #304]	; (801126c <tcp_zero_window_probe+0x148>)
 801113a:	f640 024f 	movw	r2, #2127	; 0x84f
 801113e:	494c      	ldr	r1, [pc, #304]	; (8011270 <tcp_zero_window_probe+0x14c>)
 8011140:	484c      	ldr	r0, [pc, #304]	; (8011274 <tcp_zero_window_probe+0x150>)
 8011142:	f003 fdfd 	bl	8014d40 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801114a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801114c:	6a3b      	ldr	r3, [r7, #32]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d101      	bne.n	8011156 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011152:	2300      	movs	r3, #0
 8011154:	e086      	b.n	8011264 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801115c:	2bff      	cmp	r3, #255	; 0xff
 801115e:	d007      	beq.n	8011170 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011166:	3301      	adds	r3, #1
 8011168:	b2da      	uxtb	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	899b      	ldrh	r3, [r3, #12]
 8011176:	b29b      	uxth	r3, r3
 8011178:	4618      	mov	r0, r3
 801117a:	f7f8 fa15 	bl	80095a8 <lwip_htons>
 801117e:	4603      	mov	r3, r0
 8011180:	b2db      	uxtb	r3, r3
 8011182:	f003 0301 	and.w	r3, r3, #1
 8011186:	2b00      	cmp	r3, #0
 8011188:	d005      	beq.n	8011196 <tcp_zero_window_probe+0x72>
 801118a:	6a3b      	ldr	r3, [r7, #32]
 801118c:	891b      	ldrh	r3, [r3, #8]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d101      	bne.n	8011196 <tcp_zero_window_probe+0x72>
 8011192:	2301      	movs	r3, #1
 8011194:	e000      	b.n	8011198 <tcp_zero_window_probe+0x74>
 8011196:	2300      	movs	r3, #0
 8011198:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801119a:	7ffb      	ldrb	r3, [r7, #31]
 801119c:	2b00      	cmp	r3, #0
 801119e:	bf0c      	ite	eq
 80111a0:	2301      	moveq	r3, #1
 80111a2:	2300      	movne	r3, #0
 80111a4:	b2db      	uxtb	r3, r3
 80111a6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80111a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111ac:	b299      	uxth	r1, r3
 80111ae:	6a3b      	ldr	r3, [r7, #32]
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	8bba      	ldrh	r2, [r7, #28]
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f7ff fdf8 	bl	8010dac <tcp_output_alloc_header>
 80111bc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d102      	bne.n	80111ca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80111c4:	f04f 33ff 	mov.w	r3, #4294967295
 80111c8:	e04c      	b.n	8011264 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80111d0:	7ffb      	ldrb	r3, [r7, #31]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d011      	beq.n	80111fa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	899b      	ldrh	r3, [r3, #12]
 80111da:	b29b      	uxth	r3, r3
 80111dc:	b21b      	sxth	r3, r3
 80111de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80111e2:	b21c      	sxth	r4, r3
 80111e4:	2011      	movs	r0, #17
 80111e6:	f7f8 f9df 	bl	80095a8 <lwip_htons>
 80111ea:	4603      	mov	r3, r0
 80111ec:	b21b      	sxth	r3, r3
 80111ee:	4323      	orrs	r3, r4
 80111f0:	b21b      	sxth	r3, r3
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	819a      	strh	r2, [r3, #12]
 80111f8:	e010      	b.n	801121c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80111fa:	69bb      	ldr	r3, [r7, #24]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	3314      	adds	r3, #20
 8011200:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011202:	6a3b      	ldr	r3, [r7, #32]
 8011204:	6858      	ldr	r0, [r3, #4]
 8011206:	6a3b      	ldr	r3, [r7, #32]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	891a      	ldrh	r2, [r3, #8]
 801120c:	6a3b      	ldr	r3, [r7, #32]
 801120e:	891b      	ldrh	r3, [r3, #8]
 8011210:	1ad3      	subs	r3, r2, r3
 8011212:	b29b      	uxth	r3, r3
 8011214:	2201      	movs	r2, #1
 8011216:	6939      	ldr	r1, [r7, #16]
 8011218:	f7f9 ff74 	bl	800b104 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801121c:	6a3b      	ldr	r3, [r7, #32]
 801121e:	68db      	ldr	r3, [r3, #12]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	4618      	mov	r0, r3
 8011224:	f7f8 f9d5 	bl	80095d2 <lwip_htonl>
 8011228:	4603      	mov	r3, r0
 801122a:	3301      	adds	r3, #1
 801122c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	2b00      	cmp	r3, #0
 8011238:	da02      	bge.n	8011240 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	68fa      	ldr	r2, [r7, #12]
 801123e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011244:	2200      	movs	r2, #0
 8011246:	69b9      	ldr	r1, [r7, #24]
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7ff fded 	bl	8010e28 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801124e:	687a      	ldr	r2, [r7, #4]
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	3304      	adds	r3, #4
 8011254:	69b9      	ldr	r1, [r7, #24]
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f7ff fe26 	bl	8010ea8 <tcp_output_control_segment>
 801125c:	4603      	mov	r3, r0
 801125e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011260:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011264:	4618      	mov	r0, r3
 8011266:	372c      	adds	r7, #44	; 0x2c
 8011268:	46bd      	mov	sp, r7
 801126a:	bd90      	pop	{r4, r7, pc}
 801126c:	0801821c 	.word	0x0801821c
 8011270:	08018a14 	.word	0x08018a14
 8011274:	08018270 	.word	0x08018270

08011278 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011280:	f7fa f82e 	bl	800b2e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011284:	4b0a      	ldr	r3, [pc, #40]	; (80112b0 <tcpip_tcp_timer+0x38>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d103      	bne.n	8011294 <tcpip_tcp_timer+0x1c>
 801128c:	4b09      	ldr	r3, [pc, #36]	; (80112b4 <tcpip_tcp_timer+0x3c>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d005      	beq.n	80112a0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011294:	2200      	movs	r2, #0
 8011296:	4908      	ldr	r1, [pc, #32]	; (80112b8 <tcpip_tcp_timer+0x40>)
 8011298:	20fa      	movs	r0, #250	; 0xfa
 801129a:	f000 f8f1 	bl	8011480 <sys_timeout>
 801129e:	e002      	b.n	80112a6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80112a0:	4b06      	ldr	r3, [pc, #24]	; (80112bc <tcpip_tcp_timer+0x44>)
 80112a2:	2200      	movs	r2, #0
 80112a4:	601a      	str	r2, [r3, #0]
  }
}
 80112a6:	bf00      	nop
 80112a8:	3708      	adds	r7, #8
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop
 80112b0:	2000e62c 	.word	0x2000e62c
 80112b4:	2000e63c 	.word	0x2000e63c
 80112b8:	08011279 	.word	0x08011279
 80112bc:	20004288 	.word	0x20004288

080112c0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80112c4:	4b0a      	ldr	r3, [pc, #40]	; (80112f0 <tcp_timer_needed+0x30>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d10f      	bne.n	80112ec <tcp_timer_needed+0x2c>
 80112cc:	4b09      	ldr	r3, [pc, #36]	; (80112f4 <tcp_timer_needed+0x34>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d103      	bne.n	80112dc <tcp_timer_needed+0x1c>
 80112d4:	4b08      	ldr	r3, [pc, #32]	; (80112f8 <tcp_timer_needed+0x38>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d007      	beq.n	80112ec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80112dc:	4b04      	ldr	r3, [pc, #16]	; (80112f0 <tcp_timer_needed+0x30>)
 80112de:	2201      	movs	r2, #1
 80112e0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80112e2:	2200      	movs	r2, #0
 80112e4:	4905      	ldr	r1, [pc, #20]	; (80112fc <tcp_timer_needed+0x3c>)
 80112e6:	20fa      	movs	r0, #250	; 0xfa
 80112e8:	f000 f8ca 	bl	8011480 <sys_timeout>
  }
}
 80112ec:	bf00      	nop
 80112ee:	bd80      	pop	{r7, pc}
 80112f0:	20004288 	.word	0x20004288
 80112f4:	2000e62c 	.word	0x2000e62c
 80112f8:	2000e63c 	.word	0x2000e63c
 80112fc:	08011279 	.word	0x08011279

08011300 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b086      	sub	sp, #24
 8011304:	af00      	add	r7, sp, #0
 8011306:	60f8      	str	r0, [r7, #12]
 8011308:	60b9      	str	r1, [r7, #8]
 801130a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801130c:	200a      	movs	r0, #10
 801130e:	f7f8 fe01 	bl	8009f14 <memp_malloc>
 8011312:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d109      	bne.n	801132e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d151      	bne.n	80113c4 <sys_timeout_abs+0xc4>
 8011320:	4b2a      	ldr	r3, [pc, #168]	; (80113cc <sys_timeout_abs+0xcc>)
 8011322:	22be      	movs	r2, #190	; 0xbe
 8011324:	492a      	ldr	r1, [pc, #168]	; (80113d0 <sys_timeout_abs+0xd0>)
 8011326:	482b      	ldr	r0, [pc, #172]	; (80113d4 <sys_timeout_abs+0xd4>)
 8011328:	f003 fd0a 	bl	8014d40 <iprintf>
    return;
 801132c:	e04a      	b.n	80113c4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	2200      	movs	r2, #0
 8011332:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	68ba      	ldr	r2, [r7, #8]
 8011338:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	68fa      	ldr	r2, [r7, #12]
 8011344:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011346:	4b24      	ldr	r3, [pc, #144]	; (80113d8 <sys_timeout_abs+0xd8>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d103      	bne.n	8011356 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801134e:	4a22      	ldr	r2, [pc, #136]	; (80113d8 <sys_timeout_abs+0xd8>)
 8011350:	693b      	ldr	r3, [r7, #16]
 8011352:	6013      	str	r3, [r2, #0]
    return;
 8011354:	e037      	b.n	80113c6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	685a      	ldr	r2, [r3, #4]
 801135a:	4b1f      	ldr	r3, [pc, #124]	; (80113d8 <sys_timeout_abs+0xd8>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	0fdb      	lsrs	r3, r3, #31
 8011364:	f003 0301 	and.w	r3, r3, #1
 8011368:	b2db      	uxtb	r3, r3
 801136a:	2b00      	cmp	r3, #0
 801136c:	d007      	beq.n	801137e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801136e:	4b1a      	ldr	r3, [pc, #104]	; (80113d8 <sys_timeout_abs+0xd8>)
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011376:	4a18      	ldr	r2, [pc, #96]	; (80113d8 <sys_timeout_abs+0xd8>)
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	6013      	str	r3, [r2, #0]
 801137c:	e023      	b.n	80113c6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801137e:	4b16      	ldr	r3, [pc, #88]	; (80113d8 <sys_timeout_abs+0xd8>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	617b      	str	r3, [r7, #20]
 8011384:	e01a      	b.n	80113bc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d00b      	beq.n	80113a6 <sys_timeout_abs+0xa6>
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	685a      	ldr	r2, [r3, #4]
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	1ad3      	subs	r3, r2, r3
 801139a:	0fdb      	lsrs	r3, r3, #31
 801139c:	f003 0301 	and.w	r3, r3, #1
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d007      	beq.n	80113b6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	693a      	ldr	r2, [r7, #16]
 80113b2:	601a      	str	r2, [r3, #0]
        break;
 80113b4:	e007      	b.n	80113c6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	617b      	str	r3, [r7, #20]
 80113bc:	697b      	ldr	r3, [r7, #20]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d1e1      	bne.n	8011386 <sys_timeout_abs+0x86>
 80113c2:	e000      	b.n	80113c6 <sys_timeout_abs+0xc6>
    return;
 80113c4:	bf00      	nop
      }
    }
  }
}
 80113c6:	3718      	adds	r7, #24
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	08018a38 	.word	0x08018a38
 80113d0:	08018a6c 	.word	0x08018a6c
 80113d4:	08018aac 	.word	0x08018aac
 80113d8:	20004280 	.word	0x20004280

080113dc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b086      	sub	sp, #24
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	4798      	blx	r3

  now = sys_now();
 80113ee:	f7f2 fba7 	bl	8003b40 <sys_now>
 80113f2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	4b0f      	ldr	r3, [pc, #60]	; (8011438 <lwip_cyclic_timer+0x5c>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4413      	add	r3, r2
 80113fe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011400:	68fa      	ldr	r2, [r7, #12]
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	1ad3      	subs	r3, r2, r3
 8011406:	0fdb      	lsrs	r3, r3, #31
 8011408:	f003 0301 	and.w	r3, r3, #1
 801140c:	b2db      	uxtb	r3, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	d009      	beq.n	8011426 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	681a      	ldr	r2, [r3, #0]
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	4413      	add	r3, r2
 801141a:	687a      	ldr	r2, [r7, #4]
 801141c:	4907      	ldr	r1, [pc, #28]	; (801143c <lwip_cyclic_timer+0x60>)
 801141e:	4618      	mov	r0, r3
 8011420:	f7ff ff6e 	bl	8011300 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011424:	e004      	b.n	8011430 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	4904      	ldr	r1, [pc, #16]	; (801143c <lwip_cyclic_timer+0x60>)
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f7ff ff68 	bl	8011300 <sys_timeout_abs>
}
 8011430:	bf00      	nop
 8011432:	3718      	adds	r7, #24
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	20004284 	.word	0x20004284
 801143c:	080113dd 	.word	0x080113dd

08011440 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011446:	2301      	movs	r3, #1
 8011448:	607b      	str	r3, [r7, #4]
 801144a:	e00e      	b.n	801146a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801144c:	4a0a      	ldr	r2, [pc, #40]	; (8011478 <sys_timeouts_init+0x38>)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	00db      	lsls	r3, r3, #3
 8011458:	4a07      	ldr	r2, [pc, #28]	; (8011478 <sys_timeouts_init+0x38>)
 801145a:	4413      	add	r3, r2
 801145c:	461a      	mov	r2, r3
 801145e:	4907      	ldr	r1, [pc, #28]	; (801147c <sys_timeouts_init+0x3c>)
 8011460:	f000 f80e 	bl	8011480 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	3301      	adds	r3, #1
 8011468:	607b      	str	r3, [r7, #4]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2b02      	cmp	r3, #2
 801146e:	d9ed      	bls.n	801144c <sys_timeouts_init+0xc>
  }
}
 8011470:	bf00      	nop
 8011472:	3708      	adds	r7, #8
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}
 8011478:	08019710 	.word	0x08019710
 801147c:	080113dd 	.word	0x080113dd

08011480 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b086      	sub	sp, #24
 8011484:	af00      	add	r7, sp, #0
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011492:	d306      	bcc.n	80114a2 <sys_timeout+0x22>
 8011494:	4b0a      	ldr	r3, [pc, #40]	; (80114c0 <sys_timeout+0x40>)
 8011496:	f240 1229 	movw	r2, #297	; 0x129
 801149a:	490a      	ldr	r1, [pc, #40]	; (80114c4 <sys_timeout+0x44>)
 801149c:	480a      	ldr	r0, [pc, #40]	; (80114c8 <sys_timeout+0x48>)
 801149e:	f003 fc4f 	bl	8014d40 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80114a2:	f7f2 fb4d 	bl	8003b40 <sys_now>
 80114a6:	4602      	mov	r2, r0
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	4413      	add	r3, r2
 80114ac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	68b9      	ldr	r1, [r7, #8]
 80114b2:	6978      	ldr	r0, [r7, #20]
 80114b4:	f7ff ff24 	bl	8011300 <sys_timeout_abs>
#endif
}
 80114b8:	bf00      	nop
 80114ba:	3718      	adds	r7, #24
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	08018a38 	.word	0x08018a38
 80114c4:	08018ad4 	.word	0x08018ad4
 80114c8:	08018aac 	.word	0x08018aac

080114cc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b084      	sub	sp, #16
 80114d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80114d2:	f7f2 fb35 	bl	8003b40 <sys_now>
 80114d6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80114d8:	4b17      	ldr	r3, [pc, #92]	; (8011538 <sys_check_timeouts+0x6c>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d022      	beq.n	801152a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	68fa      	ldr	r2, [r7, #12]
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	0fdb      	lsrs	r3, r3, #31
 80114ee:	f003 0301 	and.w	r3, r3, #1
 80114f2:	b2db      	uxtb	r3, r3
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d11a      	bne.n	801152e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	4a0e      	ldr	r2, [pc, #56]	; (8011538 <sys_check_timeouts+0x6c>)
 80114fe:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	689b      	ldr	r3, [r3, #8]
 8011504:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011506:	68bb      	ldr	r3, [r7, #8]
 8011508:	68db      	ldr	r3, [r3, #12]
 801150a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	4a0a      	ldr	r2, [pc, #40]	; (801153c <sys_check_timeouts+0x70>)
 8011512:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011514:	68b9      	ldr	r1, [r7, #8]
 8011516:	200a      	movs	r0, #10
 8011518:	f7f8 fd4e 	bl	8009fb8 <memp_free>
    if (handler != NULL) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d0da      	beq.n	80114d8 <sys_check_timeouts+0xc>
      handler(arg);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6838      	ldr	r0, [r7, #0]
 8011526:	4798      	blx	r3
  do {
 8011528:	e7d6      	b.n	80114d8 <sys_check_timeouts+0xc>
      return;
 801152a:	bf00      	nop
 801152c:	e000      	b.n	8011530 <sys_check_timeouts+0x64>
      return;
 801152e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
 8011536:	bf00      	nop
 8011538:	20004280 	.word	0x20004280
 801153c:	20004284 	.word	0x20004284

08011540 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b082      	sub	sp, #8
 8011544:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011546:	4b16      	ldr	r3, [pc, #88]	; (80115a0 <sys_timeouts_sleeptime+0x60>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d102      	bne.n	8011554 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801154e:	f04f 33ff 	mov.w	r3, #4294967295
 8011552:	e020      	b.n	8011596 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011554:	f7f2 faf4 	bl	8003b40 <sys_now>
 8011558:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801155a:	4b11      	ldr	r3, [pc, #68]	; (80115a0 <sys_timeouts_sleeptime+0x60>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	685a      	ldr	r2, [r3, #4]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	1ad3      	subs	r3, r2, r3
 8011564:	0fdb      	lsrs	r3, r3, #31
 8011566:	f003 0301 	and.w	r3, r3, #1
 801156a:	b2db      	uxtb	r3, r3
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011570:	2300      	movs	r3, #0
 8011572:	e010      	b.n	8011596 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011574:	4b0a      	ldr	r3, [pc, #40]	; (80115a0 <sys_timeouts_sleeptime+0x60>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	685a      	ldr	r2, [r3, #4]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	1ad3      	subs	r3, r2, r3
 801157e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	da06      	bge.n	8011594 <sys_timeouts_sleeptime+0x54>
 8011586:	4b07      	ldr	r3, [pc, #28]	; (80115a4 <sys_timeouts_sleeptime+0x64>)
 8011588:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801158c:	4906      	ldr	r1, [pc, #24]	; (80115a8 <sys_timeouts_sleeptime+0x68>)
 801158e:	4807      	ldr	r0, [pc, #28]	; (80115ac <sys_timeouts_sleeptime+0x6c>)
 8011590:	f003 fbd6 	bl	8014d40 <iprintf>
    return ret;
 8011594:	683b      	ldr	r3, [r7, #0]
  }
}
 8011596:	4618      	mov	r0, r3
 8011598:	3708      	adds	r7, #8
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}
 801159e:	bf00      	nop
 80115a0:	20004280 	.word	0x20004280
 80115a4:	08018a38 	.word	0x08018a38
 80115a8:	08018b0c 	.word	0x08018b0c
 80115ac:	08018aac 	.word	0x08018aac

080115b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80115b4:	f003 fbdc 	bl	8014d70 <rand>
 80115b8:	4603      	mov	r3, r0
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80115c6:	b29a      	uxth	r2, r3
 80115c8:	4b01      	ldr	r3, [pc, #4]	; (80115d0 <udp_init+0x20>)
 80115ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80115cc:	bf00      	nop
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	20000018 	.word	0x20000018

080115d4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80115da:	2300      	movs	r3, #0
 80115dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80115de:	4b17      	ldr	r3, [pc, #92]	; (801163c <udp_new_port+0x68>)
 80115e0:	881b      	ldrh	r3, [r3, #0]
 80115e2:	1c5a      	adds	r2, r3, #1
 80115e4:	b291      	uxth	r1, r2
 80115e6:	4a15      	ldr	r2, [pc, #84]	; (801163c <udp_new_port+0x68>)
 80115e8:	8011      	strh	r1, [r2, #0]
 80115ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d103      	bne.n	80115fa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80115f2:	4b12      	ldr	r3, [pc, #72]	; (801163c <udp_new_port+0x68>)
 80115f4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80115f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115fa:	4b11      	ldr	r3, [pc, #68]	; (8011640 <udp_new_port+0x6c>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	603b      	str	r3, [r7, #0]
 8011600:	e011      	b.n	8011626 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	8a5a      	ldrh	r2, [r3, #18]
 8011606:	4b0d      	ldr	r3, [pc, #52]	; (801163c <udp_new_port+0x68>)
 8011608:	881b      	ldrh	r3, [r3, #0]
 801160a:	429a      	cmp	r2, r3
 801160c:	d108      	bne.n	8011620 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801160e:	88fb      	ldrh	r3, [r7, #6]
 8011610:	3301      	adds	r3, #1
 8011612:	80fb      	strh	r3, [r7, #6]
 8011614:	88fb      	ldrh	r3, [r7, #6]
 8011616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801161a:	d3e0      	bcc.n	80115de <udp_new_port+0xa>
        return 0;
 801161c:	2300      	movs	r3, #0
 801161e:	e007      	b.n	8011630 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	603b      	str	r3, [r7, #0]
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d1ea      	bne.n	8011602 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801162c:	4b03      	ldr	r3, [pc, #12]	; (801163c <udp_new_port+0x68>)
 801162e:	881b      	ldrh	r3, [r3, #0]
}
 8011630:	4618      	mov	r0, r3
 8011632:	370c      	adds	r7, #12
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr
 801163c:	20000018 	.word	0x20000018
 8011640:	2000e644 	.word	0x2000e644

08011644 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	4613      	mov	r3, r2
 8011650:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d105      	bne.n	8011664 <udp_input_local_match+0x20>
 8011658:	4b27      	ldr	r3, [pc, #156]	; (80116f8 <udp_input_local_match+0xb4>)
 801165a:	2287      	movs	r2, #135	; 0x87
 801165c:	4927      	ldr	r1, [pc, #156]	; (80116fc <udp_input_local_match+0xb8>)
 801165e:	4828      	ldr	r0, [pc, #160]	; (8011700 <udp_input_local_match+0xbc>)
 8011660:	f003 fb6e 	bl	8014d40 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011664:	68bb      	ldr	r3, [r7, #8]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d105      	bne.n	8011676 <udp_input_local_match+0x32>
 801166a:	4b23      	ldr	r3, [pc, #140]	; (80116f8 <udp_input_local_match+0xb4>)
 801166c:	2288      	movs	r2, #136	; 0x88
 801166e:	4925      	ldr	r1, [pc, #148]	; (8011704 <udp_input_local_match+0xc0>)
 8011670:	4823      	ldr	r0, [pc, #140]	; (8011700 <udp_input_local_match+0xbc>)
 8011672:	f003 fb65 	bl	8014d40 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	7a1b      	ldrb	r3, [r3, #8]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00b      	beq.n	8011696 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	7a1a      	ldrb	r2, [r3, #8]
 8011682:	4b21      	ldr	r3, [pc, #132]	; (8011708 <udp_input_local_match+0xc4>)
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801168a:	3301      	adds	r3, #1
 801168c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801168e:	429a      	cmp	r2, r3
 8011690:	d001      	beq.n	8011696 <udp_input_local_match+0x52>
    return 0;
 8011692:	2300      	movs	r3, #0
 8011694:	e02b      	b.n	80116ee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011696:	79fb      	ldrb	r3, [r7, #7]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d018      	beq.n	80116ce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d013      	beq.n	80116ca <udp_input_local_match+0x86>
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d00f      	beq.n	80116ca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80116aa:	4b17      	ldr	r3, [pc, #92]	; (8011708 <udp_input_local_match+0xc4>)
 80116ac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80116ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116b2:	d00a      	beq.n	80116ca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	4b13      	ldr	r3, [pc, #76]	; (8011708 <udp_input_local_match+0xc4>)
 80116ba:	695b      	ldr	r3, [r3, #20]
 80116bc:	405a      	eors	r2, r3
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	3308      	adds	r3, #8
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d110      	bne.n	80116ec <udp_input_local_match+0xa8>
          return 1;
 80116ca:	2301      	movs	r3, #1
 80116cc:	e00f      	b.n	80116ee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d009      	beq.n	80116e8 <udp_input_local_match+0xa4>
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d005      	beq.n	80116e8 <udp_input_local_match+0xa4>
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	4b09      	ldr	r3, [pc, #36]	; (8011708 <udp_input_local_match+0xc4>)
 80116e2:	695b      	ldr	r3, [r3, #20]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d101      	bne.n	80116ec <udp_input_local_match+0xa8>
        return 1;
 80116e8:	2301      	movs	r3, #1
 80116ea:	e000      	b.n	80116ee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	08018b20 	.word	0x08018b20
 80116fc:	08018b50 	.word	0x08018b50
 8011700:	08018b74 	.word	0x08018b74
 8011704:	08018b9c 	.word	0x08018b9c
 8011708:	20007558 	.word	0x20007558

0801170c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801170c:	b590      	push	{r4, r7, lr}
 801170e:	b08d      	sub	sp, #52	; 0x34
 8011710:	af02      	add	r7, sp, #8
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011716:	2300      	movs	r3, #0
 8011718:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d105      	bne.n	801172c <udp_input+0x20>
 8011720:	4b7c      	ldr	r3, [pc, #496]	; (8011914 <udp_input+0x208>)
 8011722:	22cf      	movs	r2, #207	; 0xcf
 8011724:	497c      	ldr	r1, [pc, #496]	; (8011918 <udp_input+0x20c>)
 8011726:	487d      	ldr	r0, [pc, #500]	; (801191c <udp_input+0x210>)
 8011728:	f003 fb0a 	bl	8014d40 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d105      	bne.n	801173e <udp_input+0x32>
 8011732:	4b78      	ldr	r3, [pc, #480]	; (8011914 <udp_input+0x208>)
 8011734:	22d0      	movs	r2, #208	; 0xd0
 8011736:	497a      	ldr	r1, [pc, #488]	; (8011920 <udp_input+0x214>)
 8011738:	4878      	ldr	r0, [pc, #480]	; (801191c <udp_input+0x210>)
 801173a:	f003 fb01 	bl	8014d40 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	895b      	ldrh	r3, [r3, #10]
 8011742:	2b07      	cmp	r3, #7
 8011744:	d803      	bhi.n	801174e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7f9 fad6 	bl	800acf8 <pbuf_free>
    goto end;
 801174c:	e0de      	b.n	801190c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011754:	4b73      	ldr	r3, [pc, #460]	; (8011924 <udp_input+0x218>)
 8011756:	695a      	ldr	r2, [r3, #20]
 8011758:	4b72      	ldr	r3, [pc, #456]	; (8011924 <udp_input+0x218>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	4619      	mov	r1, r3
 801175e:	4610      	mov	r0, r2
 8011760:	f002 f814 	bl	801378c <ip4_addr_isbroadcast_u32>
 8011764:	4603      	mov	r3, r0
 8011766:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	881b      	ldrh	r3, [r3, #0]
 801176c:	b29b      	uxth	r3, r3
 801176e:	4618      	mov	r0, r3
 8011770:	f7f7 ff1a 	bl	80095a8 <lwip_htons>
 8011774:	4603      	mov	r3, r0
 8011776:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	885b      	ldrh	r3, [r3, #2]
 801177c:	b29b      	uxth	r3, r3
 801177e:	4618      	mov	r0, r3
 8011780:	f7f7 ff12 	bl	80095a8 <lwip_htons>
 8011784:	4603      	mov	r3, r0
 8011786:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011788:	2300      	movs	r3, #0
 801178a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801178c:	2300      	movs	r3, #0
 801178e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011790:	2300      	movs	r3, #0
 8011792:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011794:	4b64      	ldr	r3, [pc, #400]	; (8011928 <udp_input+0x21c>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	627b      	str	r3, [r7, #36]	; 0x24
 801179a:	e054      	b.n	8011846 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801179e:	8a5b      	ldrh	r3, [r3, #18]
 80117a0:	89fa      	ldrh	r2, [r7, #14]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d14a      	bne.n	801183c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80117a6:	7cfb      	ldrb	r3, [r7, #19]
 80117a8:	461a      	mov	r2, r3
 80117aa:	6839      	ldr	r1, [r7, #0]
 80117ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80117ae:	f7ff ff49 	bl	8011644 <udp_input_local_match>
 80117b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d041      	beq.n	801183c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80117b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ba:	7c1b      	ldrb	r3, [r3, #16]
 80117bc:	f003 0304 	and.w	r3, r3, #4
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d11d      	bne.n	8011800 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d102      	bne.n	80117d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80117ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117cc:	61fb      	str	r3, [r7, #28]
 80117ce:	e017      	b.n	8011800 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80117d0:	7cfb      	ldrb	r3, [r7, #19]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d014      	beq.n	8011800 <udp_input+0xf4>
 80117d6:	4b53      	ldr	r3, [pc, #332]	; (8011924 <udp_input+0x218>)
 80117d8:	695b      	ldr	r3, [r3, #20]
 80117da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117de:	d10f      	bne.n	8011800 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80117e0:	69fb      	ldr	r3, [r7, #28]
 80117e2:	681a      	ldr	r2, [r3, #0]
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	3304      	adds	r3, #4
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d008      	beq.n	8011800 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80117ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f0:	681a      	ldr	r2, [r3, #0]
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	3304      	adds	r3, #4
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d101      	bne.n	8011800 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80117fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011802:	8a9b      	ldrh	r3, [r3, #20]
 8011804:	8a3a      	ldrh	r2, [r7, #16]
 8011806:	429a      	cmp	r2, r3
 8011808:	d118      	bne.n	801183c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801180e:	2b00      	cmp	r3, #0
 8011810:	d005      	beq.n	801181e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011814:	685a      	ldr	r2, [r3, #4]
 8011816:	4b43      	ldr	r3, [pc, #268]	; (8011924 <udp_input+0x218>)
 8011818:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801181a:	429a      	cmp	r2, r3
 801181c:	d10e      	bne.n	801183c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801181e:	6a3b      	ldr	r3, [r7, #32]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d014      	beq.n	801184e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011826:	68da      	ldr	r2, [r3, #12]
 8011828:	6a3b      	ldr	r3, [r7, #32]
 801182a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801182c:	4b3e      	ldr	r3, [pc, #248]	; (8011928 <udp_input+0x21c>)
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011832:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011834:	4a3c      	ldr	r2, [pc, #240]	; (8011928 <udp_input+0x21c>)
 8011836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011838:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801183a:	e008      	b.n	801184e <udp_input+0x142>
      }
    }

    prev = pcb;
 801183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801183e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	627b      	str	r3, [r7, #36]	; 0x24
 8011846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1a7      	bne.n	801179c <udp_input+0x90>
 801184c:	e000      	b.n	8011850 <udp_input+0x144>
        break;
 801184e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011852:	2b00      	cmp	r3, #0
 8011854:	d101      	bne.n	801185a <udp_input+0x14e>
    pcb = uncon_pcb;
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185c:	2b00      	cmp	r3, #0
 801185e:	d002      	beq.n	8011866 <udp_input+0x15a>
    for_us = 1;
 8011860:	2301      	movs	r3, #1
 8011862:	76fb      	strb	r3, [r7, #27]
 8011864:	e00a      	b.n	801187c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	3304      	adds	r3, #4
 801186a:	681a      	ldr	r2, [r3, #0]
 801186c:	4b2d      	ldr	r3, [pc, #180]	; (8011924 <udp_input+0x218>)
 801186e:	695b      	ldr	r3, [r3, #20]
 8011870:	429a      	cmp	r2, r3
 8011872:	bf0c      	ite	eq
 8011874:	2301      	moveq	r3, #1
 8011876:	2300      	movne	r3, #0
 8011878:	b2db      	uxtb	r3, r3
 801187a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801187c:	7efb      	ldrb	r3, [r7, #27]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d041      	beq.n	8011906 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011882:	2108      	movs	r1, #8
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f7f9 f9b1 	bl	800abec <pbuf_remove_header>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d00a      	beq.n	80118a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011890:	4b20      	ldr	r3, [pc, #128]	; (8011914 <udp_input+0x208>)
 8011892:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011896:	4925      	ldr	r1, [pc, #148]	; (801192c <udp_input+0x220>)
 8011898:	4820      	ldr	r0, [pc, #128]	; (801191c <udp_input+0x210>)
 801189a:	f003 fa51 	bl	8014d40 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7f9 fa2a 	bl	800acf8 <pbuf_free>
      goto end;
 80118a4:	e032      	b.n	801190c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80118a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d012      	beq.n	80118d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80118ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ae:	699b      	ldr	r3, [r3, #24]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d00a      	beq.n	80118ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80118b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b6:	699c      	ldr	r4, [r3, #24]
 80118b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ba:	69d8      	ldr	r0, [r3, #28]
 80118bc:	8a3b      	ldrh	r3, [r7, #16]
 80118be:	9300      	str	r3, [sp, #0]
 80118c0:	4b1b      	ldr	r3, [pc, #108]	; (8011930 <udp_input+0x224>)
 80118c2:	687a      	ldr	r2, [r7, #4]
 80118c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80118c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80118c8:	e021      	b.n	801190e <udp_input+0x202>
        pbuf_free(p);
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f7f9 fa14 	bl	800acf8 <pbuf_free>
        goto end;
 80118d0:	e01c      	b.n	801190c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80118d2:	7cfb      	ldrb	r3, [r7, #19]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d112      	bne.n	80118fe <udp_input+0x1f2>
 80118d8:	4b12      	ldr	r3, [pc, #72]	; (8011924 <udp_input+0x218>)
 80118da:	695b      	ldr	r3, [r3, #20]
 80118dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80118e0:	2be0      	cmp	r3, #224	; 0xe0
 80118e2:	d00c      	beq.n	80118fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80118e4:	4b0f      	ldr	r3, [pc, #60]	; (8011924 <udp_input+0x218>)
 80118e6:	899b      	ldrh	r3, [r3, #12]
 80118e8:	3308      	adds	r3, #8
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	b21b      	sxth	r3, r3
 80118ee:	4619      	mov	r1, r3
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f7f9 f9ee 	bl	800acd2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80118f6:	2103      	movs	r1, #3
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f001 fc29 	bl	8013150 <icmp_dest_unreach>
      pbuf_free(p);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f7f9 f9fa 	bl	800acf8 <pbuf_free>
  return;
 8011904:	e003      	b.n	801190e <udp_input+0x202>
    pbuf_free(p);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7f9 f9f6 	bl	800acf8 <pbuf_free>
  return;
 801190c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801190e:	372c      	adds	r7, #44	; 0x2c
 8011910:	46bd      	mov	sp, r7
 8011912:	bd90      	pop	{r4, r7, pc}
 8011914:	08018b20 	.word	0x08018b20
 8011918:	08018bc4 	.word	0x08018bc4
 801191c:	08018b74 	.word	0x08018b74
 8011920:	08018bdc 	.word	0x08018bdc
 8011924:	20007558 	.word	0x20007558
 8011928:	2000e644 	.word	0x2000e644
 801192c:	08018bf8 	.word	0x08018bf8
 8011930:	20007568 	.word	0x20007568

08011934 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d109      	bne.n	8011958 <udp_send+0x24>
 8011944:	4b11      	ldr	r3, [pc, #68]	; (801198c <udp_send+0x58>)
 8011946:	f240 12d5 	movw	r2, #469	; 0x1d5
 801194a:	4911      	ldr	r1, [pc, #68]	; (8011990 <udp_send+0x5c>)
 801194c:	4811      	ldr	r0, [pc, #68]	; (8011994 <udp_send+0x60>)
 801194e:	f003 f9f7 	bl	8014d40 <iprintf>
 8011952:	f06f 030f 	mvn.w	r3, #15
 8011956:	e015      	b.n	8011984 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8011958:	683b      	ldr	r3, [r7, #0]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d109      	bne.n	8011972 <udp_send+0x3e>
 801195e:	4b0b      	ldr	r3, [pc, #44]	; (801198c <udp_send+0x58>)
 8011960:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011964:	490c      	ldr	r1, [pc, #48]	; (8011998 <udp_send+0x64>)
 8011966:	480b      	ldr	r0, [pc, #44]	; (8011994 <udp_send+0x60>)
 8011968:	f003 f9ea 	bl	8014d40 <iprintf>
 801196c:	f06f 030f 	mvn.w	r3, #15
 8011970:	e008      	b.n	8011984 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	1d1a      	adds	r2, r3, #4
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	8a9b      	ldrh	r3, [r3, #20]
 801197a:	6839      	ldr	r1, [r7, #0]
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f000 f80d 	bl	801199c <udp_sendto>
 8011982:	4603      	mov	r3, r0
}
 8011984:	4618      	mov	r0, r3
 8011986:	3708      	adds	r7, #8
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}
 801198c:	08018b20 	.word	0x08018b20
 8011990:	08018c14 	.word	0x08018c14
 8011994:	08018b74 	.word	0x08018b74
 8011998:	08018c2c 	.word	0x08018c2c

0801199c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b088      	sub	sp, #32
 80119a0:	af02      	add	r7, sp, #8
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	607a      	str	r2, [r7, #4]
 80119a8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d109      	bne.n	80119c4 <udp_sendto+0x28>
 80119b0:	4b23      	ldr	r3, [pc, #140]	; (8011a40 <udp_sendto+0xa4>)
 80119b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80119b6:	4923      	ldr	r1, [pc, #140]	; (8011a44 <udp_sendto+0xa8>)
 80119b8:	4823      	ldr	r0, [pc, #140]	; (8011a48 <udp_sendto+0xac>)
 80119ba:	f003 f9c1 	bl	8014d40 <iprintf>
 80119be:	f06f 030f 	mvn.w	r3, #15
 80119c2:	e038      	b.n	8011a36 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d109      	bne.n	80119de <udp_sendto+0x42>
 80119ca:	4b1d      	ldr	r3, [pc, #116]	; (8011a40 <udp_sendto+0xa4>)
 80119cc:	f240 2219 	movw	r2, #537	; 0x219
 80119d0:	491e      	ldr	r1, [pc, #120]	; (8011a4c <udp_sendto+0xb0>)
 80119d2:	481d      	ldr	r0, [pc, #116]	; (8011a48 <udp_sendto+0xac>)
 80119d4:	f003 f9b4 	bl	8014d40 <iprintf>
 80119d8:	f06f 030f 	mvn.w	r3, #15
 80119dc:	e02b      	b.n	8011a36 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d109      	bne.n	80119f8 <udp_sendto+0x5c>
 80119e4:	4b16      	ldr	r3, [pc, #88]	; (8011a40 <udp_sendto+0xa4>)
 80119e6:	f240 221a 	movw	r2, #538	; 0x21a
 80119ea:	4919      	ldr	r1, [pc, #100]	; (8011a50 <udp_sendto+0xb4>)
 80119ec:	4816      	ldr	r0, [pc, #88]	; (8011a48 <udp_sendto+0xac>)
 80119ee:	f003 f9a7 	bl	8014d40 <iprintf>
 80119f2:	f06f 030f 	mvn.w	r3, #15
 80119f6:	e01e      	b.n	8011a36 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	7a1b      	ldrb	r3, [r3, #8]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d006      	beq.n	8011a0e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	7a1b      	ldrb	r3, [r3, #8]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7f8 fded 	bl	800a5e4 <netif_get_by_index>
 8011a0a:	6178      	str	r0, [r7, #20]
 8011a0c:	e003      	b.n	8011a16 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f001 fc28 	bl	8013264 <ip4_route>
 8011a14:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d102      	bne.n	8011a22 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011a1c:	f06f 0303 	mvn.w	r3, #3
 8011a20:	e009      	b.n	8011a36 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011a22:	887a      	ldrh	r2, [r7, #2]
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	9300      	str	r3, [sp, #0]
 8011a28:	4613      	mov	r3, r2
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	68b9      	ldr	r1, [r7, #8]
 8011a2e:	68f8      	ldr	r0, [r7, #12]
 8011a30:	f000 f810 	bl	8011a54 <udp_sendto_if>
 8011a34:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3718      	adds	r7, #24
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	08018b20 	.word	0x08018b20
 8011a44:	08018c44 	.word	0x08018c44
 8011a48:	08018b74 	.word	0x08018b74
 8011a4c:	08018c5c 	.word	0x08018c5c
 8011a50:	08018c78 	.word	0x08018c78

08011a54 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b088      	sub	sp, #32
 8011a58:	af02      	add	r7, sp, #8
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	607a      	str	r2, [r7, #4]
 8011a60:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d109      	bne.n	8011a7c <udp_sendto_if+0x28>
 8011a68:	4b2e      	ldr	r3, [pc, #184]	; (8011b24 <udp_sendto_if+0xd0>)
 8011a6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011a6e:	492e      	ldr	r1, [pc, #184]	; (8011b28 <udp_sendto_if+0xd4>)
 8011a70:	482e      	ldr	r0, [pc, #184]	; (8011b2c <udp_sendto_if+0xd8>)
 8011a72:	f003 f965 	bl	8014d40 <iprintf>
 8011a76:	f06f 030f 	mvn.w	r3, #15
 8011a7a:	e04f      	b.n	8011b1c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d109      	bne.n	8011a96 <udp_sendto_if+0x42>
 8011a82:	4b28      	ldr	r3, [pc, #160]	; (8011b24 <udp_sendto_if+0xd0>)
 8011a84:	f240 2281 	movw	r2, #641	; 0x281
 8011a88:	4929      	ldr	r1, [pc, #164]	; (8011b30 <udp_sendto_if+0xdc>)
 8011a8a:	4828      	ldr	r0, [pc, #160]	; (8011b2c <udp_sendto_if+0xd8>)
 8011a8c:	f003 f958 	bl	8014d40 <iprintf>
 8011a90:	f06f 030f 	mvn.w	r3, #15
 8011a94:	e042      	b.n	8011b1c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d109      	bne.n	8011ab0 <udp_sendto_if+0x5c>
 8011a9c:	4b21      	ldr	r3, [pc, #132]	; (8011b24 <udp_sendto_if+0xd0>)
 8011a9e:	f240 2282 	movw	r2, #642	; 0x282
 8011aa2:	4924      	ldr	r1, [pc, #144]	; (8011b34 <udp_sendto_if+0xe0>)
 8011aa4:	4821      	ldr	r0, [pc, #132]	; (8011b2c <udp_sendto_if+0xd8>)
 8011aa6:	f003 f94b 	bl	8014d40 <iprintf>
 8011aaa:	f06f 030f 	mvn.w	r3, #15
 8011aae:	e035      	b.n	8011b1c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011ab0:	6a3b      	ldr	r3, [r7, #32]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d109      	bne.n	8011aca <udp_sendto_if+0x76>
 8011ab6:	4b1b      	ldr	r3, [pc, #108]	; (8011b24 <udp_sendto_if+0xd0>)
 8011ab8:	f240 2283 	movw	r2, #643	; 0x283
 8011abc:	491e      	ldr	r1, [pc, #120]	; (8011b38 <udp_sendto_if+0xe4>)
 8011abe:	481b      	ldr	r0, [pc, #108]	; (8011b2c <udp_sendto_if+0xd8>)
 8011ac0:	f003 f93e 	bl	8014d40 <iprintf>
 8011ac4:	f06f 030f 	mvn.w	r3, #15
 8011ac8:	e028      	b.n	8011b1c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d009      	beq.n	8011ae4 <udp_sendto_if+0x90>
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d005      	beq.n	8011ae4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ae0:	2be0      	cmp	r3, #224	; 0xe0
 8011ae2:	d103      	bne.n	8011aec <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011ae4:	6a3b      	ldr	r3, [r7, #32]
 8011ae6:	3304      	adds	r3, #4
 8011ae8:	617b      	str	r3, [r7, #20]
 8011aea:	e00b      	b.n	8011b04 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	6a3b      	ldr	r3, [r7, #32]
 8011af2:	3304      	adds	r3, #4
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	429a      	cmp	r2, r3
 8011af8:	d002      	beq.n	8011b00 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011afa:	f06f 0303 	mvn.w	r3, #3
 8011afe:	e00d      	b.n	8011b1c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011b04:	887a      	ldrh	r2, [r7, #2]
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	9301      	str	r3, [sp, #4]
 8011b0a:	6a3b      	ldr	r3, [r7, #32]
 8011b0c:	9300      	str	r3, [sp, #0]
 8011b0e:	4613      	mov	r3, r2
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	68b9      	ldr	r1, [r7, #8]
 8011b14:	68f8      	ldr	r0, [r7, #12]
 8011b16:	f000 f811 	bl	8011b3c <udp_sendto_if_src>
 8011b1a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3718      	adds	r7, #24
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	08018b20 	.word	0x08018b20
 8011b28:	08018c94 	.word	0x08018c94
 8011b2c:	08018b74 	.word	0x08018b74
 8011b30:	08018cb0 	.word	0x08018cb0
 8011b34:	08018ccc 	.word	0x08018ccc
 8011b38:	08018cec 	.word	0x08018cec

08011b3c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b08c      	sub	sp, #48	; 0x30
 8011b40:	af04      	add	r7, sp, #16
 8011b42:	60f8      	str	r0, [r7, #12]
 8011b44:	60b9      	str	r1, [r7, #8]
 8011b46:	607a      	str	r2, [r7, #4]
 8011b48:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d109      	bne.n	8011b64 <udp_sendto_if_src+0x28>
 8011b50:	4b65      	ldr	r3, [pc, #404]	; (8011ce8 <udp_sendto_if_src+0x1ac>)
 8011b52:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011b56:	4965      	ldr	r1, [pc, #404]	; (8011cec <udp_sendto_if_src+0x1b0>)
 8011b58:	4865      	ldr	r0, [pc, #404]	; (8011cf0 <udp_sendto_if_src+0x1b4>)
 8011b5a:	f003 f8f1 	bl	8014d40 <iprintf>
 8011b5e:	f06f 030f 	mvn.w	r3, #15
 8011b62:	e0bc      	b.n	8011cde <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d109      	bne.n	8011b7e <udp_sendto_if_src+0x42>
 8011b6a:	4b5f      	ldr	r3, [pc, #380]	; (8011ce8 <udp_sendto_if_src+0x1ac>)
 8011b6c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011b70:	4960      	ldr	r1, [pc, #384]	; (8011cf4 <udp_sendto_if_src+0x1b8>)
 8011b72:	485f      	ldr	r0, [pc, #380]	; (8011cf0 <udp_sendto_if_src+0x1b4>)
 8011b74:	f003 f8e4 	bl	8014d40 <iprintf>
 8011b78:	f06f 030f 	mvn.w	r3, #15
 8011b7c:	e0af      	b.n	8011cde <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d109      	bne.n	8011b98 <udp_sendto_if_src+0x5c>
 8011b84:	4b58      	ldr	r3, [pc, #352]	; (8011ce8 <udp_sendto_if_src+0x1ac>)
 8011b86:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011b8a:	495b      	ldr	r1, [pc, #364]	; (8011cf8 <udp_sendto_if_src+0x1bc>)
 8011b8c:	4858      	ldr	r0, [pc, #352]	; (8011cf0 <udp_sendto_if_src+0x1b4>)
 8011b8e:	f003 f8d7 	bl	8014d40 <iprintf>
 8011b92:	f06f 030f 	mvn.w	r3, #15
 8011b96:	e0a2      	b.n	8011cde <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d109      	bne.n	8011bb2 <udp_sendto_if_src+0x76>
 8011b9e:	4b52      	ldr	r3, [pc, #328]	; (8011ce8 <udp_sendto_if_src+0x1ac>)
 8011ba0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011ba4:	4955      	ldr	r1, [pc, #340]	; (8011cfc <udp_sendto_if_src+0x1c0>)
 8011ba6:	4852      	ldr	r0, [pc, #328]	; (8011cf0 <udp_sendto_if_src+0x1b4>)
 8011ba8:	f003 f8ca 	bl	8014d40 <iprintf>
 8011bac:	f06f 030f 	mvn.w	r3, #15
 8011bb0:	e095      	b.n	8011cde <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d109      	bne.n	8011bcc <udp_sendto_if_src+0x90>
 8011bb8:	4b4b      	ldr	r3, [pc, #300]	; (8011ce8 <udp_sendto_if_src+0x1ac>)
 8011bba:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011bbe:	4950      	ldr	r1, [pc, #320]	; (8011d00 <udp_sendto_if_src+0x1c4>)
 8011bc0:	484b      	ldr	r0, [pc, #300]	; (8011cf0 <udp_sendto_if_src+0x1b4>)
 8011bc2:	f003 f8bd 	bl	8014d40 <iprintf>
 8011bc6:	f06f 030f 	mvn.w	r3, #15
 8011bca:	e088      	b.n	8011cde <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	8a5b      	ldrh	r3, [r3, #18]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d10f      	bne.n	8011bf4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011bd4:	68f9      	ldr	r1, [r7, #12]
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	8a5b      	ldrh	r3, [r3, #18]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	68f8      	ldr	r0, [r7, #12]
 8011bde:	f000 f893 	bl	8011d08 <udp_bind>
 8011be2:	4603      	mov	r3, r0
 8011be4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011be6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d002      	beq.n	8011bf4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011bee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011bf2:	e074      	b.n	8011cde <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	891b      	ldrh	r3, [r3, #8]
 8011bf8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011bfc:	4293      	cmp	r3, r2
 8011bfe:	d902      	bls.n	8011c06 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011c00:	f04f 33ff 	mov.w	r3, #4294967295
 8011c04:	e06b      	b.n	8011cde <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011c06:	2108      	movs	r1, #8
 8011c08:	68b8      	ldr	r0, [r7, #8]
 8011c0a:	f7f8 ffdf 	bl	800abcc <pbuf_add_header>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d015      	beq.n	8011c40 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011c14:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c18:	2108      	movs	r1, #8
 8011c1a:	2022      	movs	r0, #34	; 0x22
 8011c1c:	f7f8 fd8c 	bl	800a738 <pbuf_alloc>
 8011c20:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011c22:	69fb      	ldr	r3, [r7, #28]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d102      	bne.n	8011c2e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011c28:	f04f 33ff 	mov.w	r3, #4294967295
 8011c2c:	e057      	b.n	8011cde <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	891b      	ldrh	r3, [r3, #8]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d006      	beq.n	8011c44 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011c36:	68b9      	ldr	r1, [r7, #8]
 8011c38:	69f8      	ldr	r0, [r7, #28]
 8011c3a:	f7f9 f981 	bl	800af40 <pbuf_chain>
 8011c3e:	e001      	b.n	8011c44 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011c44:	69fb      	ldr	r3, [r7, #28]
 8011c46:	895b      	ldrh	r3, [r3, #10]
 8011c48:	2b07      	cmp	r3, #7
 8011c4a:	d806      	bhi.n	8011c5a <udp_sendto_if_src+0x11e>
 8011c4c:	4b26      	ldr	r3, [pc, #152]	; (8011ce8 <udp_sendto_if_src+0x1ac>)
 8011c4e:	f240 320e 	movw	r2, #782	; 0x30e
 8011c52:	492c      	ldr	r1, [pc, #176]	; (8011d04 <udp_sendto_if_src+0x1c8>)
 8011c54:	4826      	ldr	r0, [pc, #152]	; (8011cf0 <udp_sendto_if_src+0x1b4>)
 8011c56:	f003 f873 	bl	8014d40 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011c5a:	69fb      	ldr	r3, [r7, #28]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	8a5b      	ldrh	r3, [r3, #18]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7f7 fc9f 	bl	80095a8 <lwip_htons>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011c72:	887b      	ldrh	r3, [r7, #2]
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7f7 fc97 	bl	80095a8 <lwip_htons>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	2200      	movs	r2, #0
 8011c86:	719a      	strb	r2, [r3, #6]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011c8c:	69fb      	ldr	r3, [r7, #28]
 8011c8e:	891b      	ldrh	r3, [r3, #8]
 8011c90:	4618      	mov	r0, r3
 8011c92:	f7f7 fc89 	bl	80095a8 <lwip_htons>
 8011c96:	4603      	mov	r3, r0
 8011c98:	461a      	mov	r2, r3
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011c9e:	2311      	movs	r3, #17
 8011ca0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	7adb      	ldrb	r3, [r3, #11]
 8011ca6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	7a9b      	ldrb	r3, [r3, #10]
 8011cac:	7cb9      	ldrb	r1, [r7, #18]
 8011cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cb0:	9202      	str	r2, [sp, #8]
 8011cb2:	7cfa      	ldrb	r2, [r7, #19]
 8011cb4:	9201      	str	r2, [sp, #4]
 8011cb6:	9300      	str	r3, [sp, #0]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011cbe:	69f8      	ldr	r0, [r7, #28]
 8011cc0:	f001 fcb6 	bl	8013630 <ip4_output_if_src>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011cc8:	69fa      	ldr	r2, [r7, #28]
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d004      	beq.n	8011cda <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011cd0:	69f8      	ldr	r0, [r7, #28]
 8011cd2:	f7f9 f811 	bl	800acf8 <pbuf_free>
    q = NULL;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011cda:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011cde:	4618      	mov	r0, r3
 8011ce0:	3720      	adds	r7, #32
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	08018b20 	.word	0x08018b20
 8011cec:	08018d0c 	.word	0x08018d0c
 8011cf0:	08018b74 	.word	0x08018b74
 8011cf4:	08018d2c 	.word	0x08018d2c
 8011cf8:	08018d4c 	.word	0x08018d4c
 8011cfc:	08018d70 	.word	0x08018d70
 8011d00:	08018d94 	.word	0x08018d94
 8011d04:	08018db8 	.word	0x08018db8

08011d08 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	4613      	mov	r3, r2
 8011d14:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d101      	bne.n	8011d20 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011d1c:	4b39      	ldr	r3, [pc, #228]	; (8011e04 <udp_bind+0xfc>)
 8011d1e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d109      	bne.n	8011d3a <udp_bind+0x32>
 8011d26:	4b38      	ldr	r3, [pc, #224]	; (8011e08 <udp_bind+0x100>)
 8011d28:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011d2c:	4937      	ldr	r1, [pc, #220]	; (8011e0c <udp_bind+0x104>)
 8011d2e:	4838      	ldr	r0, [pc, #224]	; (8011e10 <udp_bind+0x108>)
 8011d30:	f003 f806 	bl	8014d40 <iprintf>
 8011d34:	f06f 030f 	mvn.w	r3, #15
 8011d38:	e060      	b.n	8011dfc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d3e:	4b35      	ldr	r3, [pc, #212]	; (8011e14 <udp_bind+0x10c>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	617b      	str	r3, [r7, #20]
 8011d44:	e009      	b.n	8011d5a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011d46:	68fa      	ldr	r2, [r7, #12]
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d102      	bne.n	8011d54 <udp_bind+0x4c>
      rebind = 1;
 8011d4e:	2301      	movs	r3, #1
 8011d50:	74fb      	strb	r3, [r7, #19]
      break;
 8011d52:	e005      	b.n	8011d60 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	617b      	str	r3, [r7, #20]
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d1f2      	bne.n	8011d46 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011d60:	88fb      	ldrh	r3, [r7, #6]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d109      	bne.n	8011d7a <udp_bind+0x72>
    port = udp_new_port();
 8011d66:	f7ff fc35 	bl	80115d4 <udp_new_port>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011d6e:	88fb      	ldrh	r3, [r7, #6]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d12c      	bne.n	8011dce <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011d74:	f06f 0307 	mvn.w	r3, #7
 8011d78:	e040      	b.n	8011dfc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d7a:	4b26      	ldr	r3, [pc, #152]	; (8011e14 <udp_bind+0x10c>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	617b      	str	r3, [r7, #20]
 8011d80:	e022      	b.n	8011dc8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011d82:	68fa      	ldr	r2, [r7, #12]
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d01b      	beq.n	8011dc2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	8a5b      	ldrh	r3, [r3, #18]
 8011d8e:	88fa      	ldrh	r2, [r7, #6]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d116      	bne.n	8011dc2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d00d      	beq.n	8011dbc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d00a      	beq.n	8011dbc <udp_bind+0xb4>
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d006      	beq.n	8011dbc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011dae:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d003      	beq.n	8011dbc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d102      	bne.n	8011dc2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011dbc:	f06f 0307 	mvn.w	r3, #7
 8011dc0:	e01c      	b.n	8011dfc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	617b      	str	r3, [r7, #20]
 8011dc8:	697b      	ldr	r3, [r7, #20]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d1d9      	bne.n	8011d82 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d002      	beq.n	8011dda <udp_bind+0xd2>
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	e000      	b.n	8011ddc <udp_bind+0xd4>
 8011dda:	2300      	movs	r3, #0
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	88fa      	ldrh	r2, [r7, #6]
 8011de4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011de6:	7cfb      	ldrb	r3, [r7, #19]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d106      	bne.n	8011dfa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011dec:	4b09      	ldr	r3, [pc, #36]	; (8011e14 <udp_bind+0x10c>)
 8011dee:	681a      	ldr	r2, [r3, #0]
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011df4:	4a07      	ldr	r2, [pc, #28]	; (8011e14 <udp_bind+0x10c>)
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3718      	adds	r7, #24
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	08019728 	.word	0x08019728
 8011e08:	08018b20 	.word	0x08018b20
 8011e0c:	08018de8 	.word	0x08018de8
 8011e10:	08018b74 	.word	0x08018b74
 8011e14:	2000e644 	.word	0x2000e644

08011e18 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	60f8      	str	r0, [r7, #12]
 8011e20:	60b9      	str	r1, [r7, #8]
 8011e22:	4613      	mov	r3, r2
 8011e24:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d109      	bne.n	8011e40 <udp_connect+0x28>
 8011e2c:	4b2c      	ldr	r3, [pc, #176]	; (8011ee0 <udp_connect+0xc8>)
 8011e2e:	f240 4235 	movw	r2, #1077	; 0x435
 8011e32:	492c      	ldr	r1, [pc, #176]	; (8011ee4 <udp_connect+0xcc>)
 8011e34:	482c      	ldr	r0, [pc, #176]	; (8011ee8 <udp_connect+0xd0>)
 8011e36:	f002 ff83 	bl	8014d40 <iprintf>
 8011e3a:	f06f 030f 	mvn.w	r3, #15
 8011e3e:	e04b      	b.n	8011ed8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d109      	bne.n	8011e5a <udp_connect+0x42>
 8011e46:	4b26      	ldr	r3, [pc, #152]	; (8011ee0 <udp_connect+0xc8>)
 8011e48:	f240 4236 	movw	r2, #1078	; 0x436
 8011e4c:	4927      	ldr	r1, [pc, #156]	; (8011eec <udp_connect+0xd4>)
 8011e4e:	4826      	ldr	r0, [pc, #152]	; (8011ee8 <udp_connect+0xd0>)
 8011e50:	f002 ff76 	bl	8014d40 <iprintf>
 8011e54:	f06f 030f 	mvn.w	r3, #15
 8011e58:	e03e      	b.n	8011ed8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	8a5b      	ldrh	r3, [r3, #18]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d10f      	bne.n	8011e82 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011e62:	68f9      	ldr	r1, [r7, #12]
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	8a5b      	ldrh	r3, [r3, #18]
 8011e68:	461a      	mov	r2, r3
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	f7ff ff4c 	bl	8011d08 <udp_bind>
 8011e70:	4603      	mov	r3, r0
 8011e72:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011e74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d002      	beq.n	8011e82 <udp_connect+0x6a>
      return err;
 8011e7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e80:	e02a      	b.n	8011ed8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d002      	beq.n	8011e8e <udp_connect+0x76>
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	e000      	b.n	8011e90 <udp_connect+0x78>
 8011e8e:	2300      	movs	r3, #0
 8011e90:	68fa      	ldr	r2, [r7, #12]
 8011e92:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	88fa      	ldrh	r2, [r7, #6]
 8011e98:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	7c1b      	ldrb	r3, [r3, #16]
 8011e9e:	f043 0304 	orr.w	r3, r3, #4
 8011ea2:	b2da      	uxtb	r2, r3
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ea8:	4b11      	ldr	r3, [pc, #68]	; (8011ef0 <udp_connect+0xd8>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	617b      	str	r3, [r7, #20]
 8011eae:	e008      	b.n	8011ec2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011eb0:	68fa      	ldr	r2, [r7, #12]
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d101      	bne.n	8011ebc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	e00d      	b.n	8011ed8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	68db      	ldr	r3, [r3, #12]
 8011ec0:	617b      	str	r3, [r7, #20]
 8011ec2:	697b      	ldr	r3, [r7, #20]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d1f3      	bne.n	8011eb0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011ec8:	4b09      	ldr	r3, [pc, #36]	; (8011ef0 <udp_connect+0xd8>)
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011ed0:	4a07      	ldr	r2, [pc, #28]	; (8011ef0 <udp_connect+0xd8>)
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011ed6:	2300      	movs	r3, #0
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3718      	adds	r7, #24
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	08018b20 	.word	0x08018b20
 8011ee4:	08018e00 	.word	0x08018e00
 8011ee8:	08018b74 	.word	0x08018b74
 8011eec:	08018e1c 	.word	0x08018e1c
 8011ef0:	2000e644 	.word	0x2000e644

08011ef4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d107      	bne.n	8011f12 <udp_disconnect+0x1e>
 8011f02:	4b0d      	ldr	r3, [pc, #52]	; (8011f38 <udp_disconnect+0x44>)
 8011f04:	f240 426a 	movw	r2, #1130	; 0x46a
 8011f08:	490c      	ldr	r1, [pc, #48]	; (8011f3c <udp_disconnect+0x48>)
 8011f0a:	480d      	ldr	r0, [pc, #52]	; (8011f40 <udp_disconnect+0x4c>)
 8011f0c:	f002 ff18 	bl	8014d40 <iprintf>
 8011f10:	e00f      	b.n	8011f32 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	2200      	movs	r2, #0
 8011f16:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	2200      	movs	r2, #0
 8011f22:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	7c1b      	ldrb	r3, [r3, #16]
 8011f28:	f023 0304 	bic.w	r3, r3, #4
 8011f2c:	b2da      	uxtb	r2, r3
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	741a      	strb	r2, [r3, #16]
}
 8011f32:	3708      	adds	r7, #8
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	08018b20 	.word	0x08018b20
 8011f3c:	08018e38 	.word	0x08018e38
 8011f40:	08018b74 	.word	0x08018b74

08011f44 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d107      	bne.n	8011f66 <udp_recv+0x22>
 8011f56:	4b08      	ldr	r3, [pc, #32]	; (8011f78 <udp_recv+0x34>)
 8011f58:	f240 428a 	movw	r2, #1162	; 0x48a
 8011f5c:	4907      	ldr	r1, [pc, #28]	; (8011f7c <udp_recv+0x38>)
 8011f5e:	4808      	ldr	r0, [pc, #32]	; (8011f80 <udp_recv+0x3c>)
 8011f60:	f002 feee 	bl	8014d40 <iprintf>
 8011f64:	e005      	b.n	8011f72 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	68ba      	ldr	r2, [r7, #8]
 8011f6a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	61da      	str	r2, [r3, #28]
}
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}
 8011f78:	08018b20 	.word	0x08018b20
 8011f7c:	08018e54 	.word	0x08018e54
 8011f80:	08018b74 	.word	0x08018b74

08011f84 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b084      	sub	sp, #16
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d107      	bne.n	8011fa2 <udp_remove+0x1e>
 8011f92:	4b19      	ldr	r3, [pc, #100]	; (8011ff8 <udp_remove+0x74>)
 8011f94:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011f98:	4918      	ldr	r1, [pc, #96]	; (8011ffc <udp_remove+0x78>)
 8011f9a:	4819      	ldr	r0, [pc, #100]	; (8012000 <udp_remove+0x7c>)
 8011f9c:	f002 fed0 	bl	8014d40 <iprintf>
 8011fa0:	e026      	b.n	8011ff0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011fa2:	4b18      	ldr	r3, [pc, #96]	; (8012004 <udp_remove+0x80>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d105      	bne.n	8011fb8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011fac:	4b15      	ldr	r3, [pc, #84]	; (8012004 <udp_remove+0x80>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	4a14      	ldr	r2, [pc, #80]	; (8012004 <udp_remove+0x80>)
 8011fb4:	6013      	str	r3, [r2, #0]
 8011fb6:	e017      	b.n	8011fe8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011fb8:	4b12      	ldr	r3, [pc, #72]	; (8012004 <udp_remove+0x80>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	60fb      	str	r3, [r7, #12]
 8011fbe:	e010      	b.n	8011fe2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d009      	beq.n	8011fdc <udp_remove+0x58>
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d104      	bne.n	8011fdc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	68da      	ldr	r2, [r3, #12]
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	60da      	str	r2, [r3, #12]
        break;
 8011fda:	e005      	b.n	8011fe8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	60fb      	str	r3, [r7, #12]
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d1eb      	bne.n	8011fc0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011fe8:	6879      	ldr	r1, [r7, #4]
 8011fea:	2000      	movs	r0, #0
 8011fec:	f7f7 ffe4 	bl	8009fb8 <memp_free>
}
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	08018b20 	.word	0x08018b20
 8011ffc:	08018e6c 	.word	0x08018e6c
 8012000:	08018b74 	.word	0x08018b74
 8012004:	2000e644 	.word	0x2000e644

08012008 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801200e:	2000      	movs	r0, #0
 8012010:	f7f7 ff80 	bl	8009f14 <memp_malloc>
 8012014:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d007      	beq.n	801202c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801201c:	2220      	movs	r2, #32
 801201e:	2100      	movs	r1, #0
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f002 fe85 	bl	8014d30 <memset>
    pcb->ttl = UDP_TTL;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	22ff      	movs	r2, #255	; 0xff
 801202a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801202c:	687b      	ldr	r3, [r7, #4]
}
 801202e:	4618      	mov	r0, r3
 8012030:	3708      	adds	r7, #8
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b084      	sub	sp, #16
 801203a:	af00      	add	r7, sp, #0
 801203c:	4603      	mov	r3, r0
 801203e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012040:	f7ff ffe2 	bl	8012008 <udp_new>
 8012044:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012046:	68fb      	ldr	r3, [r7, #12]
}
 8012048:	4618      	mov	r0, r3
 801204a:	3710      	adds	r7, #16
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012050:	b480      	push	{r7}
 8012052:	b085      	sub	sp, #20
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d01e      	beq.n	801209e <udp_netif_ip_addr_changed+0x4e>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d01a      	beq.n	801209e <udp_netif_ip_addr_changed+0x4e>
 8012068:	683b      	ldr	r3, [r7, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d017      	beq.n	801209e <udp_netif_ip_addr_changed+0x4e>
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d013      	beq.n	801209e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012076:	4b0d      	ldr	r3, [pc, #52]	; (80120ac <udp_netif_ip_addr_changed+0x5c>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	60fb      	str	r3, [r7, #12]
 801207c:	e00c      	b.n	8012098 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	681a      	ldr	r2, [r3, #0]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	429a      	cmp	r2, r3
 8012088:	d103      	bne.n	8012092 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	68db      	ldr	r3, [r3, #12]
 8012096:	60fb      	str	r3, [r7, #12]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d1ef      	bne.n	801207e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801209e:	bf00      	nop
 80120a0:	3714      	adds	r7, #20
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr
 80120aa:	bf00      	nop
 80120ac:	2000e644 	.word	0x2000e644

080120b0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80120b8:	4915      	ldr	r1, [pc, #84]	; (8012110 <etharp_free_entry+0x60>)
 80120ba:	687a      	ldr	r2, [r7, #4]
 80120bc:	4613      	mov	r3, r2
 80120be:	005b      	lsls	r3, r3, #1
 80120c0:	4413      	add	r3, r2
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	440b      	add	r3, r1
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d013      	beq.n	80120f4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80120cc:	4910      	ldr	r1, [pc, #64]	; (8012110 <etharp_free_entry+0x60>)
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	4613      	mov	r3, r2
 80120d2:	005b      	lsls	r3, r3, #1
 80120d4:	4413      	add	r3, r2
 80120d6:	00db      	lsls	r3, r3, #3
 80120d8:	440b      	add	r3, r1
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	4618      	mov	r0, r3
 80120de:	f7f8 fe0b 	bl	800acf8 <pbuf_free>
    arp_table[i].q = NULL;
 80120e2:	490b      	ldr	r1, [pc, #44]	; (8012110 <etharp_free_entry+0x60>)
 80120e4:	687a      	ldr	r2, [r7, #4]
 80120e6:	4613      	mov	r3, r2
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	4413      	add	r3, r2
 80120ec:	00db      	lsls	r3, r3, #3
 80120ee:	440b      	add	r3, r1
 80120f0:	2200      	movs	r2, #0
 80120f2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80120f4:	4906      	ldr	r1, [pc, #24]	; (8012110 <etharp_free_entry+0x60>)
 80120f6:	687a      	ldr	r2, [r7, #4]
 80120f8:	4613      	mov	r3, r2
 80120fa:	005b      	lsls	r3, r3, #1
 80120fc:	4413      	add	r3, r2
 80120fe:	00db      	lsls	r3, r3, #3
 8012100:	440b      	add	r3, r1
 8012102:	3314      	adds	r3, #20
 8012104:	2200      	movs	r2, #0
 8012106:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012108:	bf00      	nop
 801210a:	3708      	adds	r7, #8
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	2000428c 	.word	0x2000428c

08012114 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801211a:	2300      	movs	r3, #0
 801211c:	607b      	str	r3, [r7, #4]
 801211e:	e096      	b.n	801224e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012120:	494f      	ldr	r1, [pc, #316]	; (8012260 <etharp_tmr+0x14c>)
 8012122:	687a      	ldr	r2, [r7, #4]
 8012124:	4613      	mov	r3, r2
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	4413      	add	r3, r2
 801212a:	00db      	lsls	r3, r3, #3
 801212c:	440b      	add	r3, r1
 801212e:	3314      	adds	r3, #20
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012134:	78fb      	ldrb	r3, [r7, #3]
 8012136:	2b00      	cmp	r3, #0
 8012138:	f000 8086 	beq.w	8012248 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801213c:	4948      	ldr	r1, [pc, #288]	; (8012260 <etharp_tmr+0x14c>)
 801213e:	687a      	ldr	r2, [r7, #4]
 8012140:	4613      	mov	r3, r2
 8012142:	005b      	lsls	r3, r3, #1
 8012144:	4413      	add	r3, r2
 8012146:	00db      	lsls	r3, r3, #3
 8012148:	440b      	add	r3, r1
 801214a:	3312      	adds	r3, #18
 801214c:	881b      	ldrh	r3, [r3, #0]
 801214e:	3301      	adds	r3, #1
 8012150:	b298      	uxth	r0, r3
 8012152:	4943      	ldr	r1, [pc, #268]	; (8012260 <etharp_tmr+0x14c>)
 8012154:	687a      	ldr	r2, [r7, #4]
 8012156:	4613      	mov	r3, r2
 8012158:	005b      	lsls	r3, r3, #1
 801215a:	4413      	add	r3, r2
 801215c:	00db      	lsls	r3, r3, #3
 801215e:	440b      	add	r3, r1
 8012160:	3312      	adds	r3, #18
 8012162:	4602      	mov	r2, r0
 8012164:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012166:	493e      	ldr	r1, [pc, #248]	; (8012260 <etharp_tmr+0x14c>)
 8012168:	687a      	ldr	r2, [r7, #4]
 801216a:	4613      	mov	r3, r2
 801216c:	005b      	lsls	r3, r3, #1
 801216e:	4413      	add	r3, r2
 8012170:	00db      	lsls	r3, r3, #3
 8012172:	440b      	add	r3, r1
 8012174:	3312      	adds	r3, #18
 8012176:	881b      	ldrh	r3, [r3, #0]
 8012178:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801217c:	d215      	bcs.n	80121aa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801217e:	4938      	ldr	r1, [pc, #224]	; (8012260 <etharp_tmr+0x14c>)
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	4613      	mov	r3, r2
 8012184:	005b      	lsls	r3, r3, #1
 8012186:	4413      	add	r3, r2
 8012188:	00db      	lsls	r3, r3, #3
 801218a:	440b      	add	r3, r1
 801218c:	3314      	adds	r3, #20
 801218e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012190:	2b01      	cmp	r3, #1
 8012192:	d10e      	bne.n	80121b2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012194:	4932      	ldr	r1, [pc, #200]	; (8012260 <etharp_tmr+0x14c>)
 8012196:	687a      	ldr	r2, [r7, #4]
 8012198:	4613      	mov	r3, r2
 801219a:	005b      	lsls	r3, r3, #1
 801219c:	4413      	add	r3, r2
 801219e:	00db      	lsls	r3, r3, #3
 80121a0:	440b      	add	r3, r1
 80121a2:	3312      	adds	r3, #18
 80121a4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80121a6:	2b04      	cmp	r3, #4
 80121a8:	d903      	bls.n	80121b2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80121aa:	6878      	ldr	r0, [r7, #4]
 80121ac:	f7ff ff80 	bl	80120b0 <etharp_free_entry>
 80121b0:	e04a      	b.n	8012248 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80121b2:	492b      	ldr	r1, [pc, #172]	; (8012260 <etharp_tmr+0x14c>)
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	4613      	mov	r3, r2
 80121b8:	005b      	lsls	r3, r3, #1
 80121ba:	4413      	add	r3, r2
 80121bc:	00db      	lsls	r3, r3, #3
 80121be:	440b      	add	r3, r1
 80121c0:	3314      	adds	r3, #20
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	2b03      	cmp	r3, #3
 80121c6:	d10a      	bne.n	80121de <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80121c8:	4925      	ldr	r1, [pc, #148]	; (8012260 <etharp_tmr+0x14c>)
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	4613      	mov	r3, r2
 80121ce:	005b      	lsls	r3, r3, #1
 80121d0:	4413      	add	r3, r2
 80121d2:	00db      	lsls	r3, r3, #3
 80121d4:	440b      	add	r3, r1
 80121d6:	3314      	adds	r3, #20
 80121d8:	2204      	movs	r2, #4
 80121da:	701a      	strb	r2, [r3, #0]
 80121dc:	e034      	b.n	8012248 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80121de:	4920      	ldr	r1, [pc, #128]	; (8012260 <etharp_tmr+0x14c>)
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	4613      	mov	r3, r2
 80121e4:	005b      	lsls	r3, r3, #1
 80121e6:	4413      	add	r3, r2
 80121e8:	00db      	lsls	r3, r3, #3
 80121ea:	440b      	add	r3, r1
 80121ec:	3314      	adds	r3, #20
 80121ee:	781b      	ldrb	r3, [r3, #0]
 80121f0:	2b04      	cmp	r3, #4
 80121f2:	d10a      	bne.n	801220a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80121f4:	491a      	ldr	r1, [pc, #104]	; (8012260 <etharp_tmr+0x14c>)
 80121f6:	687a      	ldr	r2, [r7, #4]
 80121f8:	4613      	mov	r3, r2
 80121fa:	005b      	lsls	r3, r3, #1
 80121fc:	4413      	add	r3, r2
 80121fe:	00db      	lsls	r3, r3, #3
 8012200:	440b      	add	r3, r1
 8012202:	3314      	adds	r3, #20
 8012204:	2202      	movs	r2, #2
 8012206:	701a      	strb	r2, [r3, #0]
 8012208:	e01e      	b.n	8012248 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801220a:	4915      	ldr	r1, [pc, #84]	; (8012260 <etharp_tmr+0x14c>)
 801220c:	687a      	ldr	r2, [r7, #4]
 801220e:	4613      	mov	r3, r2
 8012210:	005b      	lsls	r3, r3, #1
 8012212:	4413      	add	r3, r2
 8012214:	00db      	lsls	r3, r3, #3
 8012216:	440b      	add	r3, r1
 8012218:	3314      	adds	r3, #20
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	2b01      	cmp	r3, #1
 801221e:	d113      	bne.n	8012248 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012220:	490f      	ldr	r1, [pc, #60]	; (8012260 <etharp_tmr+0x14c>)
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	4613      	mov	r3, r2
 8012226:	005b      	lsls	r3, r3, #1
 8012228:	4413      	add	r3, r2
 801222a:	00db      	lsls	r3, r3, #3
 801222c:	440b      	add	r3, r1
 801222e:	3308      	adds	r3, #8
 8012230:	6818      	ldr	r0, [r3, #0]
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	4613      	mov	r3, r2
 8012236:	005b      	lsls	r3, r3, #1
 8012238:	4413      	add	r3, r2
 801223a:	00db      	lsls	r3, r3, #3
 801223c:	4a08      	ldr	r2, [pc, #32]	; (8012260 <etharp_tmr+0x14c>)
 801223e:	4413      	add	r3, r2
 8012240:	3304      	adds	r3, #4
 8012242:	4619      	mov	r1, r3
 8012244:	f000 fe6e 	bl	8012f24 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	3301      	adds	r3, #1
 801224c:	607b      	str	r3, [r7, #4]
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2b09      	cmp	r3, #9
 8012252:	f77f af65 	ble.w	8012120 <etharp_tmr+0xc>
      }
    }
  }
}
 8012256:	bf00      	nop
 8012258:	3708      	adds	r7, #8
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	2000428c 	.word	0x2000428c

08012264 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b08a      	sub	sp, #40	; 0x28
 8012268:	af00      	add	r7, sp, #0
 801226a:	60f8      	str	r0, [r7, #12]
 801226c:	460b      	mov	r3, r1
 801226e:	607a      	str	r2, [r7, #4]
 8012270:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012272:	230a      	movs	r3, #10
 8012274:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012276:	230a      	movs	r3, #10
 8012278:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801227a:	230a      	movs	r3, #10
 801227c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801227e:	2300      	movs	r3, #0
 8012280:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012282:	230a      	movs	r3, #10
 8012284:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012286:	2300      	movs	r3, #0
 8012288:	83bb      	strh	r3, [r7, #28]
 801228a:	2300      	movs	r3, #0
 801228c:	837b      	strh	r3, [r7, #26]
 801228e:	2300      	movs	r3, #0
 8012290:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012292:	2300      	movs	r3, #0
 8012294:	843b      	strh	r3, [r7, #32]
 8012296:	e0ae      	b.n	80123f6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012298:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801229c:	49a6      	ldr	r1, [pc, #664]	; (8012538 <etharp_find_entry+0x2d4>)
 801229e:	4613      	mov	r3, r2
 80122a0:	005b      	lsls	r3, r3, #1
 80122a2:	4413      	add	r3, r2
 80122a4:	00db      	lsls	r3, r3, #3
 80122a6:	440b      	add	r3, r1
 80122a8:	3314      	adds	r3, #20
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80122ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80122b2:	2b0a      	cmp	r3, #10
 80122b4:	d105      	bne.n	80122c2 <etharp_find_entry+0x5e>
 80122b6:	7dfb      	ldrb	r3, [r7, #23]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d102      	bne.n	80122c2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80122bc:	8c3b      	ldrh	r3, [r7, #32]
 80122be:	847b      	strh	r3, [r7, #34]	; 0x22
 80122c0:	e095      	b.n	80123ee <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80122c2:	7dfb      	ldrb	r3, [r7, #23]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	f000 8092 	beq.w	80123ee <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80122ca:	7dfb      	ldrb	r3, [r7, #23]
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d009      	beq.n	80122e4 <etharp_find_entry+0x80>
 80122d0:	7dfb      	ldrb	r3, [r7, #23]
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	d806      	bhi.n	80122e4 <etharp_find_entry+0x80>
 80122d6:	4b99      	ldr	r3, [pc, #612]	; (801253c <etharp_find_entry+0x2d8>)
 80122d8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80122dc:	4998      	ldr	r1, [pc, #608]	; (8012540 <etharp_find_entry+0x2dc>)
 80122de:	4899      	ldr	r0, [pc, #612]	; (8012544 <etharp_find_entry+0x2e0>)
 80122e0:	f002 fd2e 	bl	8014d40 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d020      	beq.n	801232c <etharp_find_entry+0xc8>
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	6819      	ldr	r1, [r3, #0]
 80122ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122f2:	4891      	ldr	r0, [pc, #580]	; (8012538 <etharp_find_entry+0x2d4>)
 80122f4:	4613      	mov	r3, r2
 80122f6:	005b      	lsls	r3, r3, #1
 80122f8:	4413      	add	r3, r2
 80122fa:	00db      	lsls	r3, r3, #3
 80122fc:	4403      	add	r3, r0
 80122fe:	3304      	adds	r3, #4
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	4299      	cmp	r1, r3
 8012304:	d112      	bne.n	801232c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d00c      	beq.n	8012326 <etharp_find_entry+0xc2>
 801230c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012310:	4989      	ldr	r1, [pc, #548]	; (8012538 <etharp_find_entry+0x2d4>)
 8012312:	4613      	mov	r3, r2
 8012314:	005b      	lsls	r3, r3, #1
 8012316:	4413      	add	r3, r2
 8012318:	00db      	lsls	r3, r3, #3
 801231a:	440b      	add	r3, r1
 801231c:	3308      	adds	r3, #8
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	687a      	ldr	r2, [r7, #4]
 8012322:	429a      	cmp	r2, r3
 8012324:	d102      	bne.n	801232c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012326:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801232a:	e100      	b.n	801252e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801232c:	7dfb      	ldrb	r3, [r7, #23]
 801232e:	2b01      	cmp	r3, #1
 8012330:	d140      	bne.n	80123b4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012332:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012336:	4980      	ldr	r1, [pc, #512]	; (8012538 <etharp_find_entry+0x2d4>)
 8012338:	4613      	mov	r3, r2
 801233a:	005b      	lsls	r3, r3, #1
 801233c:	4413      	add	r3, r2
 801233e:	00db      	lsls	r3, r3, #3
 8012340:	440b      	add	r3, r1
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d01a      	beq.n	801237e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012348:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801234c:	497a      	ldr	r1, [pc, #488]	; (8012538 <etharp_find_entry+0x2d4>)
 801234e:	4613      	mov	r3, r2
 8012350:	005b      	lsls	r3, r3, #1
 8012352:	4413      	add	r3, r2
 8012354:	00db      	lsls	r3, r3, #3
 8012356:	440b      	add	r3, r1
 8012358:	3312      	adds	r3, #18
 801235a:	881b      	ldrh	r3, [r3, #0]
 801235c:	8bba      	ldrh	r2, [r7, #28]
 801235e:	429a      	cmp	r2, r3
 8012360:	d845      	bhi.n	80123ee <etharp_find_entry+0x18a>
            old_queue = i;
 8012362:	8c3b      	ldrh	r3, [r7, #32]
 8012364:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012366:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801236a:	4973      	ldr	r1, [pc, #460]	; (8012538 <etharp_find_entry+0x2d4>)
 801236c:	4613      	mov	r3, r2
 801236e:	005b      	lsls	r3, r3, #1
 8012370:	4413      	add	r3, r2
 8012372:	00db      	lsls	r3, r3, #3
 8012374:	440b      	add	r3, r1
 8012376:	3312      	adds	r3, #18
 8012378:	881b      	ldrh	r3, [r3, #0]
 801237a:	83bb      	strh	r3, [r7, #28]
 801237c:	e037      	b.n	80123ee <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801237e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012382:	496d      	ldr	r1, [pc, #436]	; (8012538 <etharp_find_entry+0x2d4>)
 8012384:	4613      	mov	r3, r2
 8012386:	005b      	lsls	r3, r3, #1
 8012388:	4413      	add	r3, r2
 801238a:	00db      	lsls	r3, r3, #3
 801238c:	440b      	add	r3, r1
 801238e:	3312      	adds	r3, #18
 8012390:	881b      	ldrh	r3, [r3, #0]
 8012392:	8b7a      	ldrh	r2, [r7, #26]
 8012394:	429a      	cmp	r2, r3
 8012396:	d82a      	bhi.n	80123ee <etharp_find_entry+0x18a>
            old_pending = i;
 8012398:	8c3b      	ldrh	r3, [r7, #32]
 801239a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801239c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123a0:	4965      	ldr	r1, [pc, #404]	; (8012538 <etharp_find_entry+0x2d4>)
 80123a2:	4613      	mov	r3, r2
 80123a4:	005b      	lsls	r3, r3, #1
 80123a6:	4413      	add	r3, r2
 80123a8:	00db      	lsls	r3, r3, #3
 80123aa:	440b      	add	r3, r1
 80123ac:	3312      	adds	r3, #18
 80123ae:	881b      	ldrh	r3, [r3, #0]
 80123b0:	837b      	strh	r3, [r7, #26]
 80123b2:	e01c      	b.n	80123ee <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80123b4:	7dfb      	ldrb	r3, [r7, #23]
 80123b6:	2b01      	cmp	r3, #1
 80123b8:	d919      	bls.n	80123ee <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80123ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123be:	495e      	ldr	r1, [pc, #376]	; (8012538 <etharp_find_entry+0x2d4>)
 80123c0:	4613      	mov	r3, r2
 80123c2:	005b      	lsls	r3, r3, #1
 80123c4:	4413      	add	r3, r2
 80123c6:	00db      	lsls	r3, r3, #3
 80123c8:	440b      	add	r3, r1
 80123ca:	3312      	adds	r3, #18
 80123cc:	881b      	ldrh	r3, [r3, #0]
 80123ce:	8b3a      	ldrh	r2, [r7, #24]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	d80c      	bhi.n	80123ee <etharp_find_entry+0x18a>
            old_stable = i;
 80123d4:	8c3b      	ldrh	r3, [r7, #32]
 80123d6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80123d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123dc:	4956      	ldr	r1, [pc, #344]	; (8012538 <etharp_find_entry+0x2d4>)
 80123de:	4613      	mov	r3, r2
 80123e0:	005b      	lsls	r3, r3, #1
 80123e2:	4413      	add	r3, r2
 80123e4:	00db      	lsls	r3, r3, #3
 80123e6:	440b      	add	r3, r1
 80123e8:	3312      	adds	r3, #18
 80123ea:	881b      	ldrh	r3, [r3, #0]
 80123ec:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80123ee:	8c3b      	ldrh	r3, [r7, #32]
 80123f0:	3301      	adds	r3, #1
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	843b      	strh	r3, [r7, #32]
 80123f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80123fa:	2b09      	cmp	r3, #9
 80123fc:	f77f af4c 	ble.w	8012298 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012400:	7afb      	ldrb	r3, [r7, #11]
 8012402:	f003 0302 	and.w	r3, r3, #2
 8012406:	2b00      	cmp	r3, #0
 8012408:	d108      	bne.n	801241c <etharp_find_entry+0x1b8>
 801240a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801240e:	2b0a      	cmp	r3, #10
 8012410:	d107      	bne.n	8012422 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012412:	7afb      	ldrb	r3, [r7, #11]
 8012414:	f003 0301 	and.w	r3, r3, #1
 8012418:	2b00      	cmp	r3, #0
 801241a:	d102      	bne.n	8012422 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801241c:	f04f 33ff 	mov.w	r3, #4294967295
 8012420:	e085      	b.n	801252e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012422:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012426:	2b09      	cmp	r3, #9
 8012428:	dc02      	bgt.n	8012430 <etharp_find_entry+0x1cc>
    i = empty;
 801242a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801242c:	843b      	strh	r3, [r7, #32]
 801242e:	e039      	b.n	80124a4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012430:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012434:	2b09      	cmp	r3, #9
 8012436:	dc14      	bgt.n	8012462 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801243a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801243c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012440:	493d      	ldr	r1, [pc, #244]	; (8012538 <etharp_find_entry+0x2d4>)
 8012442:	4613      	mov	r3, r2
 8012444:	005b      	lsls	r3, r3, #1
 8012446:	4413      	add	r3, r2
 8012448:	00db      	lsls	r3, r3, #3
 801244a:	440b      	add	r3, r1
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d018      	beq.n	8012484 <etharp_find_entry+0x220>
 8012452:	4b3a      	ldr	r3, [pc, #232]	; (801253c <etharp_find_entry+0x2d8>)
 8012454:	f240 126d 	movw	r2, #365	; 0x16d
 8012458:	493b      	ldr	r1, [pc, #236]	; (8012548 <etharp_find_entry+0x2e4>)
 801245a:	483a      	ldr	r0, [pc, #232]	; (8012544 <etharp_find_entry+0x2e0>)
 801245c:	f002 fc70 	bl	8014d40 <iprintf>
 8012460:	e010      	b.n	8012484 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012462:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012466:	2b09      	cmp	r3, #9
 8012468:	dc02      	bgt.n	8012470 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801246a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801246c:	843b      	strh	r3, [r7, #32]
 801246e:	e009      	b.n	8012484 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012470:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012474:	2b09      	cmp	r3, #9
 8012476:	dc02      	bgt.n	801247e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012478:	8bfb      	ldrh	r3, [r7, #30]
 801247a:	843b      	strh	r3, [r7, #32]
 801247c:	e002      	b.n	8012484 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801247e:	f04f 33ff 	mov.w	r3, #4294967295
 8012482:	e054      	b.n	801252e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012484:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012488:	2b09      	cmp	r3, #9
 801248a:	dd06      	ble.n	801249a <etharp_find_entry+0x236>
 801248c:	4b2b      	ldr	r3, [pc, #172]	; (801253c <etharp_find_entry+0x2d8>)
 801248e:	f240 127f 	movw	r2, #383	; 0x17f
 8012492:	492e      	ldr	r1, [pc, #184]	; (801254c <etharp_find_entry+0x2e8>)
 8012494:	482b      	ldr	r0, [pc, #172]	; (8012544 <etharp_find_entry+0x2e0>)
 8012496:	f002 fc53 	bl	8014d40 <iprintf>
    etharp_free_entry(i);
 801249a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801249e:	4618      	mov	r0, r3
 80124a0:	f7ff fe06 	bl	80120b0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80124a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80124a8:	2b09      	cmp	r3, #9
 80124aa:	dd06      	ble.n	80124ba <etharp_find_entry+0x256>
 80124ac:	4b23      	ldr	r3, [pc, #140]	; (801253c <etharp_find_entry+0x2d8>)
 80124ae:	f240 1283 	movw	r2, #387	; 0x183
 80124b2:	4926      	ldr	r1, [pc, #152]	; (801254c <etharp_find_entry+0x2e8>)
 80124b4:	4823      	ldr	r0, [pc, #140]	; (8012544 <etharp_find_entry+0x2e0>)
 80124b6:	f002 fc43 	bl	8014d40 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80124ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124be:	491e      	ldr	r1, [pc, #120]	; (8012538 <etharp_find_entry+0x2d4>)
 80124c0:	4613      	mov	r3, r2
 80124c2:	005b      	lsls	r3, r3, #1
 80124c4:	4413      	add	r3, r2
 80124c6:	00db      	lsls	r3, r3, #3
 80124c8:	440b      	add	r3, r1
 80124ca:	3314      	adds	r3, #20
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d006      	beq.n	80124e0 <etharp_find_entry+0x27c>
 80124d2:	4b1a      	ldr	r3, [pc, #104]	; (801253c <etharp_find_entry+0x2d8>)
 80124d4:	f240 1285 	movw	r2, #389	; 0x185
 80124d8:	491d      	ldr	r1, [pc, #116]	; (8012550 <etharp_find_entry+0x2ec>)
 80124da:	481a      	ldr	r0, [pc, #104]	; (8012544 <etharp_find_entry+0x2e0>)
 80124dc:	f002 fc30 	bl	8014d40 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d00b      	beq.n	80124fe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80124e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	6819      	ldr	r1, [r3, #0]
 80124ee:	4812      	ldr	r0, [pc, #72]	; (8012538 <etharp_find_entry+0x2d4>)
 80124f0:	4613      	mov	r3, r2
 80124f2:	005b      	lsls	r3, r3, #1
 80124f4:	4413      	add	r3, r2
 80124f6:	00db      	lsls	r3, r3, #3
 80124f8:	4403      	add	r3, r0
 80124fa:	3304      	adds	r3, #4
 80124fc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80124fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012502:	490d      	ldr	r1, [pc, #52]	; (8012538 <etharp_find_entry+0x2d4>)
 8012504:	4613      	mov	r3, r2
 8012506:	005b      	lsls	r3, r3, #1
 8012508:	4413      	add	r3, r2
 801250a:	00db      	lsls	r3, r3, #3
 801250c:	440b      	add	r3, r1
 801250e:	3312      	adds	r3, #18
 8012510:	2200      	movs	r2, #0
 8012512:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012514:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012518:	4907      	ldr	r1, [pc, #28]	; (8012538 <etharp_find_entry+0x2d4>)
 801251a:	4613      	mov	r3, r2
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	4413      	add	r3, r2
 8012520:	00db      	lsls	r3, r3, #3
 8012522:	440b      	add	r3, r1
 8012524:	3308      	adds	r3, #8
 8012526:	687a      	ldr	r2, [r7, #4]
 8012528:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801252a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801252e:	4618      	mov	r0, r3
 8012530:	3728      	adds	r7, #40	; 0x28
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	2000428c 	.word	0x2000428c
 801253c:	08018e84 	.word	0x08018e84
 8012540:	08018ebc 	.word	0x08018ebc
 8012544:	08018efc 	.word	0x08018efc
 8012548:	08018f24 	.word	0x08018f24
 801254c:	08018f3c 	.word	0x08018f3c
 8012550:	08018f50 	.word	0x08018f50

08012554 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b088      	sub	sp, #32
 8012558:	af02      	add	r7, sp, #8
 801255a:	60f8      	str	r0, [r7, #12]
 801255c:	60b9      	str	r1, [r7, #8]
 801255e:	607a      	str	r2, [r7, #4]
 8012560:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012568:	2b06      	cmp	r3, #6
 801256a:	d006      	beq.n	801257a <etharp_update_arp_entry+0x26>
 801256c:	4b48      	ldr	r3, [pc, #288]	; (8012690 <etharp_update_arp_entry+0x13c>)
 801256e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012572:	4948      	ldr	r1, [pc, #288]	; (8012694 <etharp_update_arp_entry+0x140>)
 8012574:	4848      	ldr	r0, [pc, #288]	; (8012698 <etharp_update_arp_entry+0x144>)
 8012576:	f002 fbe3 	bl	8014d40 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d012      	beq.n	80125a6 <etharp_update_arp_entry+0x52>
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00e      	beq.n	80125a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	68f9      	ldr	r1, [r7, #12]
 801258e:	4618      	mov	r0, r3
 8012590:	f001 f8fc 	bl	801378c <ip4_addr_isbroadcast_u32>
 8012594:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012596:	2b00      	cmp	r3, #0
 8012598:	d105      	bne.n	80125a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80125a2:	2be0      	cmp	r3, #224	; 0xe0
 80125a4:	d102      	bne.n	80125ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80125a6:	f06f 030f 	mvn.w	r3, #15
 80125aa:	e06c      	b.n	8012686 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80125ac:	78fb      	ldrb	r3, [r7, #3]
 80125ae:	68fa      	ldr	r2, [r7, #12]
 80125b0:	4619      	mov	r1, r3
 80125b2:	68b8      	ldr	r0, [r7, #8]
 80125b4:	f7ff fe56 	bl	8012264 <etharp_find_entry>
 80125b8:	4603      	mov	r3, r0
 80125ba:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80125bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	da02      	bge.n	80125ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80125c4:	8afb      	ldrh	r3, [r7, #22]
 80125c6:	b25b      	sxtb	r3, r3
 80125c8:	e05d      	b.n	8012686 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80125ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125ce:	4933      	ldr	r1, [pc, #204]	; (801269c <etharp_update_arp_entry+0x148>)
 80125d0:	4613      	mov	r3, r2
 80125d2:	005b      	lsls	r3, r3, #1
 80125d4:	4413      	add	r3, r2
 80125d6:	00db      	lsls	r3, r3, #3
 80125d8:	440b      	add	r3, r1
 80125da:	3314      	adds	r3, #20
 80125dc:	2202      	movs	r2, #2
 80125de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80125e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125e4:	492d      	ldr	r1, [pc, #180]	; (801269c <etharp_update_arp_entry+0x148>)
 80125e6:	4613      	mov	r3, r2
 80125e8:	005b      	lsls	r3, r3, #1
 80125ea:	4413      	add	r3, r2
 80125ec:	00db      	lsls	r3, r3, #3
 80125ee:	440b      	add	r3, r1
 80125f0:	3308      	adds	r3, #8
 80125f2:	68fa      	ldr	r2, [r7, #12]
 80125f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80125f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80125fa:	4613      	mov	r3, r2
 80125fc:	005b      	lsls	r3, r3, #1
 80125fe:	4413      	add	r3, r2
 8012600:	00db      	lsls	r3, r3, #3
 8012602:	3308      	adds	r3, #8
 8012604:	4a25      	ldr	r2, [pc, #148]	; (801269c <etharp_update_arp_entry+0x148>)
 8012606:	4413      	add	r3, r2
 8012608:	3304      	adds	r3, #4
 801260a:	2206      	movs	r2, #6
 801260c:	6879      	ldr	r1, [r7, #4]
 801260e:	4618      	mov	r0, r3
 8012610:	f002 fb83 	bl	8014d1a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012614:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012618:	4920      	ldr	r1, [pc, #128]	; (801269c <etharp_update_arp_entry+0x148>)
 801261a:	4613      	mov	r3, r2
 801261c:	005b      	lsls	r3, r3, #1
 801261e:	4413      	add	r3, r2
 8012620:	00db      	lsls	r3, r3, #3
 8012622:	440b      	add	r3, r1
 8012624:	3312      	adds	r3, #18
 8012626:	2200      	movs	r2, #0
 8012628:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801262a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801262e:	491b      	ldr	r1, [pc, #108]	; (801269c <etharp_update_arp_entry+0x148>)
 8012630:	4613      	mov	r3, r2
 8012632:	005b      	lsls	r3, r3, #1
 8012634:	4413      	add	r3, r2
 8012636:	00db      	lsls	r3, r3, #3
 8012638:	440b      	add	r3, r1
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d021      	beq.n	8012684 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012640:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012644:	4915      	ldr	r1, [pc, #84]	; (801269c <etharp_update_arp_entry+0x148>)
 8012646:	4613      	mov	r3, r2
 8012648:	005b      	lsls	r3, r3, #1
 801264a:	4413      	add	r3, r2
 801264c:	00db      	lsls	r3, r3, #3
 801264e:	440b      	add	r3, r1
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012654:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012658:	4910      	ldr	r1, [pc, #64]	; (801269c <etharp_update_arp_entry+0x148>)
 801265a:	4613      	mov	r3, r2
 801265c:	005b      	lsls	r3, r3, #1
 801265e:	4413      	add	r3, r2
 8012660:	00db      	lsls	r3, r3, #3
 8012662:	440b      	add	r3, r1
 8012664:	2200      	movs	r2, #0
 8012666:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801266e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6939      	ldr	r1, [r7, #16]
 8012678:	68f8      	ldr	r0, [r7, #12]
 801267a:	f002 f8d1 	bl	8014820 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801267e:	6938      	ldr	r0, [r7, #16]
 8012680:	f7f8 fb3a 	bl	800acf8 <pbuf_free>
  }
  return ERR_OK;
 8012684:	2300      	movs	r3, #0
}
 8012686:	4618      	mov	r0, r3
 8012688:	3718      	adds	r7, #24
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	08018e84 	.word	0x08018e84
 8012694:	08018f7c 	.word	0x08018f7c
 8012698:	08018efc 	.word	0x08018efc
 801269c:	2000428c 	.word	0x2000428c

080126a0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80126a8:	2300      	movs	r3, #0
 80126aa:	60fb      	str	r3, [r7, #12]
 80126ac:	e01e      	b.n	80126ec <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80126ae:	4913      	ldr	r1, [pc, #76]	; (80126fc <etharp_cleanup_netif+0x5c>)
 80126b0:	68fa      	ldr	r2, [r7, #12]
 80126b2:	4613      	mov	r3, r2
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	4413      	add	r3, r2
 80126b8:	00db      	lsls	r3, r3, #3
 80126ba:	440b      	add	r3, r1
 80126bc:	3314      	adds	r3, #20
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80126c2:	7afb      	ldrb	r3, [r7, #11]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00e      	beq.n	80126e6 <etharp_cleanup_netif+0x46>
 80126c8:	490c      	ldr	r1, [pc, #48]	; (80126fc <etharp_cleanup_netif+0x5c>)
 80126ca:	68fa      	ldr	r2, [r7, #12]
 80126cc:	4613      	mov	r3, r2
 80126ce:	005b      	lsls	r3, r3, #1
 80126d0:	4413      	add	r3, r2
 80126d2:	00db      	lsls	r3, r3, #3
 80126d4:	440b      	add	r3, r1
 80126d6:	3308      	adds	r3, #8
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d102      	bne.n	80126e6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f7ff fce5 	bl	80120b0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	3301      	adds	r3, #1
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2b09      	cmp	r3, #9
 80126f0:	dddd      	ble.n	80126ae <etharp_cleanup_netif+0xe>
    }
  }
}
 80126f2:	bf00      	nop
 80126f4:	3710      	adds	r7, #16
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	2000428c 	.word	0x2000428c

08012700 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012700:	b5b0      	push	{r4, r5, r7, lr}
 8012702:	b08a      	sub	sp, #40	; 0x28
 8012704:	af04      	add	r7, sp, #16
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d107      	bne.n	8012720 <etharp_input+0x20>
 8012710:	4b3d      	ldr	r3, [pc, #244]	; (8012808 <etharp_input+0x108>)
 8012712:	f240 228a 	movw	r2, #650	; 0x28a
 8012716:	493d      	ldr	r1, [pc, #244]	; (801280c <etharp_input+0x10c>)
 8012718:	483d      	ldr	r0, [pc, #244]	; (8012810 <etharp_input+0x110>)
 801271a:	f002 fb11 	bl	8014d40 <iprintf>
 801271e:	e06f      	b.n	8012800 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012726:	693b      	ldr	r3, [r7, #16]
 8012728:	881b      	ldrh	r3, [r3, #0]
 801272a:	b29b      	uxth	r3, r3
 801272c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012730:	d10c      	bne.n	801274c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012736:	2b06      	cmp	r3, #6
 8012738:	d108      	bne.n	801274c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801273e:	2b04      	cmp	r3, #4
 8012740:	d104      	bne.n	801274c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	885b      	ldrh	r3, [r3, #2]
 8012746:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012748:	2b08      	cmp	r3, #8
 801274a:	d003      	beq.n	8012754 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f7f8 fad3 	bl	800acf8 <pbuf_free>
    return;
 8012752:	e055      	b.n	8012800 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012754:	693b      	ldr	r3, [r7, #16]
 8012756:	330e      	adds	r3, #14
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	3318      	adds	r3, #24
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012764:	683b      	ldr	r3, [r7, #0]
 8012766:	3304      	adds	r3, #4
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d102      	bne.n	8012774 <etharp_input+0x74>
    for_us = 0;
 801276e:	2300      	movs	r3, #0
 8012770:	75fb      	strb	r3, [r7, #23]
 8012772:	e009      	b.n	8012788 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012774:	68ba      	ldr	r2, [r7, #8]
 8012776:	683b      	ldr	r3, [r7, #0]
 8012778:	3304      	adds	r3, #4
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	429a      	cmp	r2, r3
 801277e:	bf0c      	ite	eq
 8012780:	2301      	moveq	r3, #1
 8012782:	2300      	movne	r3, #0
 8012784:	b2db      	uxtb	r3, r3
 8012786:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	f103 0208 	add.w	r2, r3, #8
 801278e:	7dfb      	ldrb	r3, [r7, #23]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <etharp_input+0x98>
 8012794:	2301      	movs	r3, #1
 8012796:	e000      	b.n	801279a <etharp_input+0x9a>
 8012798:	2302      	movs	r3, #2
 801279a:	f107 010c 	add.w	r1, r7, #12
 801279e:	6838      	ldr	r0, [r7, #0]
 80127a0:	f7ff fed8 	bl	8012554 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	88db      	ldrh	r3, [r3, #6]
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127ae:	d003      	beq.n	80127b8 <etharp_input+0xb8>
 80127b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127b4:	d01e      	beq.n	80127f4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80127b6:	e020      	b.n	80127fa <etharp_input+0xfa>
      if (for_us) {
 80127b8:	7dfb      	ldrb	r3, [r7, #23]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d01c      	beq.n	80127f8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80127c4:	693b      	ldr	r3, [r7, #16]
 80127c6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80127d4:	693a      	ldr	r2, [r7, #16]
 80127d6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80127d8:	2102      	movs	r1, #2
 80127da:	9103      	str	r1, [sp, #12]
 80127dc:	f107 010c 	add.w	r1, r7, #12
 80127e0:	9102      	str	r1, [sp, #8]
 80127e2:	9201      	str	r2, [sp, #4]
 80127e4:	9300      	str	r3, [sp, #0]
 80127e6:	462b      	mov	r3, r5
 80127e8:	4622      	mov	r2, r4
 80127ea:	4601      	mov	r1, r0
 80127ec:	6838      	ldr	r0, [r7, #0]
 80127ee:	f000 faeb 	bl	8012dc8 <etharp_raw>
      break;
 80127f2:	e001      	b.n	80127f8 <etharp_input+0xf8>
      break;
 80127f4:	bf00      	nop
 80127f6:	e000      	b.n	80127fa <etharp_input+0xfa>
      break;
 80127f8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f7f8 fa7c 	bl	800acf8 <pbuf_free>
}
 8012800:	3718      	adds	r7, #24
 8012802:	46bd      	mov	sp, r7
 8012804:	bdb0      	pop	{r4, r5, r7, pc}
 8012806:	bf00      	nop
 8012808:	08018e84 	.word	0x08018e84
 801280c:	08018fd4 	.word	0x08018fd4
 8012810:	08018efc 	.word	0x08018efc

08012814 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b086      	sub	sp, #24
 8012818:	af02      	add	r7, sp, #8
 801281a:	60f8      	str	r0, [r7, #12]
 801281c:	60b9      	str	r1, [r7, #8]
 801281e:	4613      	mov	r3, r2
 8012820:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012822:	79fa      	ldrb	r2, [r7, #7]
 8012824:	4944      	ldr	r1, [pc, #272]	; (8012938 <etharp_output_to_arp_index+0x124>)
 8012826:	4613      	mov	r3, r2
 8012828:	005b      	lsls	r3, r3, #1
 801282a:	4413      	add	r3, r2
 801282c:	00db      	lsls	r3, r3, #3
 801282e:	440b      	add	r3, r1
 8012830:	3314      	adds	r3, #20
 8012832:	781b      	ldrb	r3, [r3, #0]
 8012834:	2b01      	cmp	r3, #1
 8012836:	d806      	bhi.n	8012846 <etharp_output_to_arp_index+0x32>
 8012838:	4b40      	ldr	r3, [pc, #256]	; (801293c <etharp_output_to_arp_index+0x128>)
 801283a:	f240 22ef 	movw	r2, #751	; 0x2ef
 801283e:	4940      	ldr	r1, [pc, #256]	; (8012940 <etharp_output_to_arp_index+0x12c>)
 8012840:	4840      	ldr	r0, [pc, #256]	; (8012944 <etharp_output_to_arp_index+0x130>)
 8012842:	f002 fa7d 	bl	8014d40 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012846:	79fa      	ldrb	r2, [r7, #7]
 8012848:	493b      	ldr	r1, [pc, #236]	; (8012938 <etharp_output_to_arp_index+0x124>)
 801284a:	4613      	mov	r3, r2
 801284c:	005b      	lsls	r3, r3, #1
 801284e:	4413      	add	r3, r2
 8012850:	00db      	lsls	r3, r3, #3
 8012852:	440b      	add	r3, r1
 8012854:	3314      	adds	r3, #20
 8012856:	781b      	ldrb	r3, [r3, #0]
 8012858:	2b02      	cmp	r3, #2
 801285a:	d153      	bne.n	8012904 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801285c:	79fa      	ldrb	r2, [r7, #7]
 801285e:	4936      	ldr	r1, [pc, #216]	; (8012938 <etharp_output_to_arp_index+0x124>)
 8012860:	4613      	mov	r3, r2
 8012862:	005b      	lsls	r3, r3, #1
 8012864:	4413      	add	r3, r2
 8012866:	00db      	lsls	r3, r3, #3
 8012868:	440b      	add	r3, r1
 801286a:	3312      	adds	r3, #18
 801286c:	881b      	ldrh	r3, [r3, #0]
 801286e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012872:	d919      	bls.n	80128a8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012874:	79fa      	ldrb	r2, [r7, #7]
 8012876:	4613      	mov	r3, r2
 8012878:	005b      	lsls	r3, r3, #1
 801287a:	4413      	add	r3, r2
 801287c:	00db      	lsls	r3, r3, #3
 801287e:	4a2e      	ldr	r2, [pc, #184]	; (8012938 <etharp_output_to_arp_index+0x124>)
 8012880:	4413      	add	r3, r2
 8012882:	3304      	adds	r3, #4
 8012884:	4619      	mov	r1, r3
 8012886:	68f8      	ldr	r0, [r7, #12]
 8012888:	f000 fb4c 	bl	8012f24 <etharp_request>
 801288c:	4603      	mov	r3, r0
 801288e:	2b00      	cmp	r3, #0
 8012890:	d138      	bne.n	8012904 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012892:	79fa      	ldrb	r2, [r7, #7]
 8012894:	4928      	ldr	r1, [pc, #160]	; (8012938 <etharp_output_to_arp_index+0x124>)
 8012896:	4613      	mov	r3, r2
 8012898:	005b      	lsls	r3, r3, #1
 801289a:	4413      	add	r3, r2
 801289c:	00db      	lsls	r3, r3, #3
 801289e:	440b      	add	r3, r1
 80128a0:	3314      	adds	r3, #20
 80128a2:	2203      	movs	r2, #3
 80128a4:	701a      	strb	r2, [r3, #0]
 80128a6:	e02d      	b.n	8012904 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80128a8:	79fa      	ldrb	r2, [r7, #7]
 80128aa:	4923      	ldr	r1, [pc, #140]	; (8012938 <etharp_output_to_arp_index+0x124>)
 80128ac:	4613      	mov	r3, r2
 80128ae:	005b      	lsls	r3, r3, #1
 80128b0:	4413      	add	r3, r2
 80128b2:	00db      	lsls	r3, r3, #3
 80128b4:	440b      	add	r3, r1
 80128b6:	3312      	adds	r3, #18
 80128b8:	881b      	ldrh	r3, [r3, #0]
 80128ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80128be:	d321      	bcc.n	8012904 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80128c0:	79fa      	ldrb	r2, [r7, #7]
 80128c2:	4613      	mov	r3, r2
 80128c4:	005b      	lsls	r3, r3, #1
 80128c6:	4413      	add	r3, r2
 80128c8:	00db      	lsls	r3, r3, #3
 80128ca:	4a1b      	ldr	r2, [pc, #108]	; (8012938 <etharp_output_to_arp_index+0x124>)
 80128cc:	4413      	add	r3, r2
 80128ce:	1d19      	adds	r1, r3, #4
 80128d0:	79fa      	ldrb	r2, [r7, #7]
 80128d2:	4613      	mov	r3, r2
 80128d4:	005b      	lsls	r3, r3, #1
 80128d6:	4413      	add	r3, r2
 80128d8:	00db      	lsls	r3, r3, #3
 80128da:	3308      	adds	r3, #8
 80128dc:	4a16      	ldr	r2, [pc, #88]	; (8012938 <etharp_output_to_arp_index+0x124>)
 80128de:	4413      	add	r3, r2
 80128e0:	3304      	adds	r3, #4
 80128e2:	461a      	mov	r2, r3
 80128e4:	68f8      	ldr	r0, [r7, #12]
 80128e6:	f000 fafb 	bl	8012ee0 <etharp_request_dst>
 80128ea:	4603      	mov	r3, r0
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d109      	bne.n	8012904 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80128f0:	79fa      	ldrb	r2, [r7, #7]
 80128f2:	4911      	ldr	r1, [pc, #68]	; (8012938 <etharp_output_to_arp_index+0x124>)
 80128f4:	4613      	mov	r3, r2
 80128f6:	005b      	lsls	r3, r3, #1
 80128f8:	4413      	add	r3, r2
 80128fa:	00db      	lsls	r3, r3, #3
 80128fc:	440b      	add	r3, r1
 80128fe:	3314      	adds	r3, #20
 8012900:	2203      	movs	r2, #3
 8012902:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801290a:	79fa      	ldrb	r2, [r7, #7]
 801290c:	4613      	mov	r3, r2
 801290e:	005b      	lsls	r3, r3, #1
 8012910:	4413      	add	r3, r2
 8012912:	00db      	lsls	r3, r3, #3
 8012914:	3308      	adds	r3, #8
 8012916:	4a08      	ldr	r2, [pc, #32]	; (8012938 <etharp_output_to_arp_index+0x124>)
 8012918:	4413      	add	r3, r2
 801291a:	1d1a      	adds	r2, r3, #4
 801291c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012920:	9300      	str	r3, [sp, #0]
 8012922:	4613      	mov	r3, r2
 8012924:	460a      	mov	r2, r1
 8012926:	68b9      	ldr	r1, [r7, #8]
 8012928:	68f8      	ldr	r0, [r7, #12]
 801292a:	f001 ff79 	bl	8014820 <ethernet_output>
 801292e:	4603      	mov	r3, r0
}
 8012930:	4618      	mov	r0, r3
 8012932:	3710      	adds	r7, #16
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}
 8012938:	2000428c 	.word	0x2000428c
 801293c:	08018e84 	.word	0x08018e84
 8012940:	08018ff4 	.word	0x08018ff4
 8012944:	08018efc 	.word	0x08018efc

08012948 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b08a      	sub	sp, #40	; 0x28
 801294c:	af02      	add	r7, sp, #8
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <etharp_output+0x24>
 801295e:	4b73      	ldr	r3, [pc, #460]	; (8012b2c <etharp_output+0x1e4>)
 8012960:	f240 321e 	movw	r2, #798	; 0x31e
 8012964:	4972      	ldr	r1, [pc, #456]	; (8012b30 <etharp_output+0x1e8>)
 8012966:	4873      	ldr	r0, [pc, #460]	; (8012b34 <etharp_output+0x1ec>)
 8012968:	f002 f9ea 	bl	8014d40 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <etharp_output+0x38>
 8012972:	4b6e      	ldr	r3, [pc, #440]	; (8012b2c <etharp_output+0x1e4>)
 8012974:	f240 321f 	movw	r2, #799	; 0x31f
 8012978:	496f      	ldr	r1, [pc, #444]	; (8012b38 <etharp_output+0x1f0>)
 801297a:	486e      	ldr	r0, [pc, #440]	; (8012b34 <etharp_output+0x1ec>)
 801297c:	f002 f9e0 	bl	8014d40 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d106      	bne.n	8012994 <etharp_output+0x4c>
 8012986:	4b69      	ldr	r3, [pc, #420]	; (8012b2c <etharp_output+0x1e4>)
 8012988:	f44f 7248 	mov.w	r2, #800	; 0x320
 801298c:	496b      	ldr	r1, [pc, #428]	; (8012b3c <etharp_output+0x1f4>)
 801298e:	4869      	ldr	r0, [pc, #420]	; (8012b34 <etharp_output+0x1ec>)
 8012990:	f002 f9d6 	bl	8014d40 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	68f9      	ldr	r1, [r7, #12]
 801299a:	4618      	mov	r0, r3
 801299c:	f000 fef6 	bl	801378c <ip4_addr_isbroadcast_u32>
 80129a0:	4603      	mov	r3, r0
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d002      	beq.n	80129ac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80129a6:	4b66      	ldr	r3, [pc, #408]	; (8012b40 <etharp_output+0x1f8>)
 80129a8:	61fb      	str	r3, [r7, #28]
 80129aa:	e0af      	b.n	8012b0c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80129b4:	2be0      	cmp	r3, #224	; 0xe0
 80129b6:	d118      	bne.n	80129ea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80129b8:	2301      	movs	r3, #1
 80129ba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80129bc:	2300      	movs	r3, #0
 80129be:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80129c0:	235e      	movs	r3, #94	; 0x5e
 80129c2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	3301      	adds	r3, #1
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129ce:	b2db      	uxtb	r3, r3
 80129d0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	3302      	adds	r3, #2
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	3303      	adds	r3, #3
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80129e2:	f107 0310 	add.w	r3, r7, #16
 80129e6:	61fb      	str	r3, [r7, #28]
 80129e8:	e090      	b.n	8012b0c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	3304      	adds	r3, #4
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	405a      	eors	r2, r3
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	3308      	adds	r3, #8
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	4013      	ands	r3, r2
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d012      	beq.n	8012a28 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012a08:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d00b      	beq.n	8012a28 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	330c      	adds	r3, #12
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d003      	beq.n	8012a22 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	330c      	adds	r3, #12
 8012a1e:	61bb      	str	r3, [r7, #24]
 8012a20:	e002      	b.n	8012a28 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012a22:	f06f 0303 	mvn.w	r3, #3
 8012a26:	e07d      	b.n	8012b24 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a28:	4b46      	ldr	r3, [pc, #280]	; (8012b44 <etharp_output+0x1fc>)
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	4a46      	ldr	r2, [pc, #280]	; (8012b48 <etharp_output+0x200>)
 8012a30:	460b      	mov	r3, r1
 8012a32:	005b      	lsls	r3, r3, #1
 8012a34:	440b      	add	r3, r1
 8012a36:	00db      	lsls	r3, r3, #3
 8012a38:	4413      	add	r3, r2
 8012a3a:	3314      	adds	r3, #20
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	2b01      	cmp	r3, #1
 8012a40:	d925      	bls.n	8012a8e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012a42:	4b40      	ldr	r3, [pc, #256]	; (8012b44 <etharp_output+0x1fc>)
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	4619      	mov	r1, r3
 8012a48:	4a3f      	ldr	r2, [pc, #252]	; (8012b48 <etharp_output+0x200>)
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	005b      	lsls	r3, r3, #1
 8012a4e:	440b      	add	r3, r1
 8012a50:	00db      	lsls	r3, r3, #3
 8012a52:	4413      	add	r3, r2
 8012a54:	3308      	adds	r3, #8
 8012a56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a58:	68fa      	ldr	r2, [r7, #12]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d117      	bne.n	8012a8e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	681a      	ldr	r2, [r3, #0]
 8012a62:	4b38      	ldr	r3, [pc, #224]	; (8012b44 <etharp_output+0x1fc>)
 8012a64:	781b      	ldrb	r3, [r3, #0]
 8012a66:	4618      	mov	r0, r3
 8012a68:	4937      	ldr	r1, [pc, #220]	; (8012b48 <etharp_output+0x200>)
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	005b      	lsls	r3, r3, #1
 8012a6e:	4403      	add	r3, r0
 8012a70:	00db      	lsls	r3, r3, #3
 8012a72:	440b      	add	r3, r1
 8012a74:	3304      	adds	r3, #4
 8012a76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d108      	bne.n	8012a8e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012a7c:	4b31      	ldr	r3, [pc, #196]	; (8012b44 <etharp_output+0x1fc>)
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	461a      	mov	r2, r3
 8012a82:	68b9      	ldr	r1, [r7, #8]
 8012a84:	68f8      	ldr	r0, [r7, #12]
 8012a86:	f7ff fec5 	bl	8012814 <etharp_output_to_arp_index>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	e04a      	b.n	8012b24 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012a8e:	2300      	movs	r3, #0
 8012a90:	75fb      	strb	r3, [r7, #23]
 8012a92:	e031      	b.n	8012af8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012a94:	7dfa      	ldrb	r2, [r7, #23]
 8012a96:	492c      	ldr	r1, [pc, #176]	; (8012b48 <etharp_output+0x200>)
 8012a98:	4613      	mov	r3, r2
 8012a9a:	005b      	lsls	r3, r3, #1
 8012a9c:	4413      	add	r3, r2
 8012a9e:	00db      	lsls	r3, r3, #3
 8012aa0:	440b      	add	r3, r1
 8012aa2:	3314      	adds	r3, #20
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	2b01      	cmp	r3, #1
 8012aa8:	d923      	bls.n	8012af2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012aaa:	7dfa      	ldrb	r2, [r7, #23]
 8012aac:	4926      	ldr	r1, [pc, #152]	; (8012b48 <etharp_output+0x200>)
 8012aae:	4613      	mov	r3, r2
 8012ab0:	005b      	lsls	r3, r3, #1
 8012ab2:	4413      	add	r3, r2
 8012ab4:	00db      	lsls	r3, r3, #3
 8012ab6:	440b      	add	r3, r1
 8012ab8:	3308      	adds	r3, #8
 8012aba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012abc:	68fa      	ldr	r2, [r7, #12]
 8012abe:	429a      	cmp	r2, r3
 8012ac0:	d117      	bne.n	8012af2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012ac2:	69bb      	ldr	r3, [r7, #24]
 8012ac4:	6819      	ldr	r1, [r3, #0]
 8012ac6:	7dfa      	ldrb	r2, [r7, #23]
 8012ac8:	481f      	ldr	r0, [pc, #124]	; (8012b48 <etharp_output+0x200>)
 8012aca:	4613      	mov	r3, r2
 8012acc:	005b      	lsls	r3, r3, #1
 8012ace:	4413      	add	r3, r2
 8012ad0:	00db      	lsls	r3, r3, #3
 8012ad2:	4403      	add	r3, r0
 8012ad4:	3304      	adds	r3, #4
 8012ad6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012ad8:	4299      	cmp	r1, r3
 8012ada:	d10a      	bne.n	8012af2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012adc:	4a19      	ldr	r2, [pc, #100]	; (8012b44 <etharp_output+0x1fc>)
 8012ade:	7dfb      	ldrb	r3, [r7, #23]
 8012ae0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012ae2:	7dfb      	ldrb	r3, [r7, #23]
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	68b9      	ldr	r1, [r7, #8]
 8012ae8:	68f8      	ldr	r0, [r7, #12]
 8012aea:	f7ff fe93 	bl	8012814 <etharp_output_to_arp_index>
 8012aee:	4603      	mov	r3, r0
 8012af0:	e018      	b.n	8012b24 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012af2:	7dfb      	ldrb	r3, [r7, #23]
 8012af4:	3301      	adds	r3, #1
 8012af6:	75fb      	strb	r3, [r7, #23]
 8012af8:	7dfb      	ldrb	r3, [r7, #23]
 8012afa:	2b09      	cmp	r3, #9
 8012afc:	d9ca      	bls.n	8012a94 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012afe:	68ba      	ldr	r2, [r7, #8]
 8012b00:	69b9      	ldr	r1, [r7, #24]
 8012b02:	68f8      	ldr	r0, [r7, #12]
 8012b04:	f000 f822 	bl	8012b4c <etharp_query>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	e00b      	b.n	8012b24 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012b16:	9300      	str	r3, [sp, #0]
 8012b18:	69fb      	ldr	r3, [r7, #28]
 8012b1a:	68b9      	ldr	r1, [r7, #8]
 8012b1c:	68f8      	ldr	r0, [r7, #12]
 8012b1e:	f001 fe7f 	bl	8014820 <ethernet_output>
 8012b22:	4603      	mov	r3, r0
}
 8012b24:	4618      	mov	r0, r3
 8012b26:	3720      	adds	r7, #32
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	bd80      	pop	{r7, pc}
 8012b2c:	08018e84 	.word	0x08018e84
 8012b30:	08018fd4 	.word	0x08018fd4
 8012b34:	08018efc 	.word	0x08018efc
 8012b38:	08019024 	.word	0x08019024
 8012b3c:	08018fc4 	.word	0x08018fc4
 8012b40:	0801972c 	.word	0x0801972c
 8012b44:	2000437c 	.word	0x2000437c
 8012b48:	2000428c 	.word	0x2000428c

08012b4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b08c      	sub	sp, #48	; 0x30
 8012b50:	af02      	add	r7, sp, #8
 8012b52:	60f8      	str	r0, [r7, #12]
 8012b54:	60b9      	str	r1, [r7, #8]
 8012b56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	3326      	adds	r3, #38	; 0x26
 8012b5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012b5e:	23ff      	movs	r3, #255	; 0xff
 8012b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012b64:	2300      	movs	r3, #0
 8012b66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	68f9      	ldr	r1, [r7, #12]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f000 fe0c 	bl	801378c <ip4_addr_isbroadcast_u32>
 8012b74:	4603      	mov	r3, r0
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d10c      	bne.n	8012b94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b82:	2be0      	cmp	r3, #224	; 0xe0
 8012b84:	d006      	beq.n	8012b94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d003      	beq.n	8012b94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d102      	bne.n	8012b9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012b94:	f06f 030f 	mvn.w	r3, #15
 8012b98:	e102      	b.n	8012da0 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	2101      	movs	r1, #1
 8012b9e:	68b8      	ldr	r0, [r7, #8]
 8012ba0:	f7ff fb60 	bl	8012264 <etharp_find_entry>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012ba8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	da02      	bge.n	8012bb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012bb0:	8a7b      	ldrh	r3, [r7, #18]
 8012bb2:	b25b      	sxtb	r3, r3
 8012bb4:	e0f4      	b.n	8012da0 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012bb6:	8a7b      	ldrh	r3, [r7, #18]
 8012bb8:	2b7e      	cmp	r3, #126	; 0x7e
 8012bba:	d906      	bls.n	8012bca <etharp_query+0x7e>
 8012bbc:	4b7a      	ldr	r3, [pc, #488]	; (8012da8 <etharp_query+0x25c>)
 8012bbe:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012bc2:	497a      	ldr	r1, [pc, #488]	; (8012dac <etharp_query+0x260>)
 8012bc4:	487a      	ldr	r0, [pc, #488]	; (8012db0 <etharp_query+0x264>)
 8012bc6:	f002 f8bb 	bl	8014d40 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012bca:	8a7b      	ldrh	r3, [r7, #18]
 8012bcc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012bce:	7c7a      	ldrb	r2, [r7, #17]
 8012bd0:	4978      	ldr	r1, [pc, #480]	; (8012db4 <etharp_query+0x268>)
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	005b      	lsls	r3, r3, #1
 8012bd6:	4413      	add	r3, r2
 8012bd8:	00db      	lsls	r3, r3, #3
 8012bda:	440b      	add	r3, r1
 8012bdc:	3314      	adds	r3, #20
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d115      	bne.n	8012c10 <etharp_query+0xc4>
    is_new_entry = 1;
 8012be4:	2301      	movs	r3, #1
 8012be6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012be8:	7c7a      	ldrb	r2, [r7, #17]
 8012bea:	4972      	ldr	r1, [pc, #456]	; (8012db4 <etharp_query+0x268>)
 8012bec:	4613      	mov	r3, r2
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	4413      	add	r3, r2
 8012bf2:	00db      	lsls	r3, r3, #3
 8012bf4:	440b      	add	r3, r1
 8012bf6:	3314      	adds	r3, #20
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012bfc:	7c7a      	ldrb	r2, [r7, #17]
 8012bfe:	496d      	ldr	r1, [pc, #436]	; (8012db4 <etharp_query+0x268>)
 8012c00:	4613      	mov	r3, r2
 8012c02:	005b      	lsls	r3, r3, #1
 8012c04:	4413      	add	r3, r2
 8012c06:	00db      	lsls	r3, r3, #3
 8012c08:	440b      	add	r3, r1
 8012c0a:	3308      	adds	r3, #8
 8012c0c:	68fa      	ldr	r2, [r7, #12]
 8012c0e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012c10:	7c7a      	ldrb	r2, [r7, #17]
 8012c12:	4968      	ldr	r1, [pc, #416]	; (8012db4 <etharp_query+0x268>)
 8012c14:	4613      	mov	r3, r2
 8012c16:	005b      	lsls	r3, r3, #1
 8012c18:	4413      	add	r3, r2
 8012c1a:	00db      	lsls	r3, r3, #3
 8012c1c:	440b      	add	r3, r1
 8012c1e:	3314      	adds	r3, #20
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	2b01      	cmp	r3, #1
 8012c24:	d011      	beq.n	8012c4a <etharp_query+0xfe>
 8012c26:	7c7a      	ldrb	r2, [r7, #17]
 8012c28:	4962      	ldr	r1, [pc, #392]	; (8012db4 <etharp_query+0x268>)
 8012c2a:	4613      	mov	r3, r2
 8012c2c:	005b      	lsls	r3, r3, #1
 8012c2e:	4413      	add	r3, r2
 8012c30:	00db      	lsls	r3, r3, #3
 8012c32:	440b      	add	r3, r1
 8012c34:	3314      	adds	r3, #20
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d806      	bhi.n	8012c4a <etharp_query+0xfe>
 8012c3c:	4b5a      	ldr	r3, [pc, #360]	; (8012da8 <etharp_query+0x25c>)
 8012c3e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012c42:	495d      	ldr	r1, [pc, #372]	; (8012db8 <etharp_query+0x26c>)
 8012c44:	485a      	ldr	r0, [pc, #360]	; (8012db0 <etharp_query+0x264>)
 8012c46:	f002 f87b 	bl	8014d40 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012c4a:	6a3b      	ldr	r3, [r7, #32]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d102      	bne.n	8012c56 <etharp_query+0x10a>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d10c      	bne.n	8012c70 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012c56:	68b9      	ldr	r1, [r7, #8]
 8012c58:	68f8      	ldr	r0, [r7, #12]
 8012c5a:	f000 f963 	bl	8012f24 <etharp_request>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d102      	bne.n	8012c70 <etharp_query+0x124>
      return result;
 8012c6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012c6e:	e097      	b.n	8012da0 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d106      	bne.n	8012c84 <etharp_query+0x138>
 8012c76:	4b4c      	ldr	r3, [pc, #304]	; (8012da8 <etharp_query+0x25c>)
 8012c78:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012c7c:	494f      	ldr	r1, [pc, #316]	; (8012dbc <etharp_query+0x270>)
 8012c7e:	484c      	ldr	r0, [pc, #304]	; (8012db0 <etharp_query+0x264>)
 8012c80:	f002 f85e 	bl	8014d40 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012c84:	7c7a      	ldrb	r2, [r7, #17]
 8012c86:	494b      	ldr	r1, [pc, #300]	; (8012db4 <etharp_query+0x268>)
 8012c88:	4613      	mov	r3, r2
 8012c8a:	005b      	lsls	r3, r3, #1
 8012c8c:	4413      	add	r3, r2
 8012c8e:	00db      	lsls	r3, r3, #3
 8012c90:	440b      	add	r3, r1
 8012c92:	3314      	adds	r3, #20
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	2b01      	cmp	r3, #1
 8012c98:	d918      	bls.n	8012ccc <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012c9a:	4a49      	ldr	r2, [pc, #292]	; (8012dc0 <etharp_query+0x274>)
 8012c9c:	7c7b      	ldrb	r3, [r7, #17]
 8012c9e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012ca0:	7c7a      	ldrb	r2, [r7, #17]
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	005b      	lsls	r3, r3, #1
 8012ca6:	4413      	add	r3, r2
 8012ca8:	00db      	lsls	r3, r3, #3
 8012caa:	3308      	adds	r3, #8
 8012cac:	4a41      	ldr	r2, [pc, #260]	; (8012db4 <etharp_query+0x268>)
 8012cae:	4413      	add	r3, r2
 8012cb0:	1d1a      	adds	r2, r3, #4
 8012cb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012cb6:	9300      	str	r3, [sp, #0]
 8012cb8:	4613      	mov	r3, r2
 8012cba:	697a      	ldr	r2, [r7, #20]
 8012cbc:	6879      	ldr	r1, [r7, #4]
 8012cbe:	68f8      	ldr	r0, [r7, #12]
 8012cc0:	f001 fdae 	bl	8014820 <ethernet_output>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012cca:	e067      	b.n	8012d9c <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012ccc:	7c7a      	ldrb	r2, [r7, #17]
 8012cce:	4939      	ldr	r1, [pc, #228]	; (8012db4 <etharp_query+0x268>)
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	005b      	lsls	r3, r3, #1
 8012cd4:	4413      	add	r3, r2
 8012cd6:	00db      	lsls	r3, r3, #3
 8012cd8:	440b      	add	r3, r1
 8012cda:	3314      	adds	r3, #20
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	d15c      	bne.n	8012d9c <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012cea:	e01c      	b.n	8012d26 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	895a      	ldrh	r2, [r3, #10]
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	891b      	ldrh	r3, [r3, #8]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d10a      	bne.n	8012d0e <etharp_query+0x1c2>
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d006      	beq.n	8012d0e <etharp_query+0x1c2>
 8012d00:	4b29      	ldr	r3, [pc, #164]	; (8012da8 <etharp_query+0x25c>)
 8012d02:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012d06:	492f      	ldr	r1, [pc, #188]	; (8012dc4 <etharp_query+0x278>)
 8012d08:	4829      	ldr	r0, [pc, #164]	; (8012db0 <etharp_query+0x264>)
 8012d0a:	f002 f819 	bl	8014d40 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012d0e:	69fb      	ldr	r3, [r7, #28]
 8012d10:	7b1b      	ldrb	r3, [r3, #12]
 8012d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d002      	beq.n	8012d20 <etharp_query+0x1d4>
        copy_needed = 1;
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	61bb      	str	r3, [r7, #24]
        break;
 8012d1e:	e005      	b.n	8012d2c <etharp_query+0x1e0>
      }
      p = p->next;
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d1df      	bne.n	8012cec <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d007      	beq.n	8012d42 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012d32:	687a      	ldr	r2, [r7, #4]
 8012d34:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012d38:	200e      	movs	r0, #14
 8012d3a:	f7f8 fa55 	bl	800b1e8 <pbuf_clone>
 8012d3e:	61f8      	str	r0, [r7, #28]
 8012d40:	e004      	b.n	8012d4c <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012d46:	69f8      	ldr	r0, [r7, #28]
 8012d48:	f7f8 f87c 	bl	800ae44 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d021      	beq.n	8012d96 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012d52:	7c7a      	ldrb	r2, [r7, #17]
 8012d54:	4917      	ldr	r1, [pc, #92]	; (8012db4 <etharp_query+0x268>)
 8012d56:	4613      	mov	r3, r2
 8012d58:	005b      	lsls	r3, r3, #1
 8012d5a:	4413      	add	r3, r2
 8012d5c:	00db      	lsls	r3, r3, #3
 8012d5e:	440b      	add	r3, r1
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d00a      	beq.n	8012d7c <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012d66:	7c7a      	ldrb	r2, [r7, #17]
 8012d68:	4912      	ldr	r1, [pc, #72]	; (8012db4 <etharp_query+0x268>)
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	005b      	lsls	r3, r3, #1
 8012d6e:	4413      	add	r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	440b      	add	r3, r1
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7f7 ffbe 	bl	800acf8 <pbuf_free>
      }
      arp_table[i].q = p;
 8012d7c:	7c7a      	ldrb	r2, [r7, #17]
 8012d7e:	490d      	ldr	r1, [pc, #52]	; (8012db4 <etharp_query+0x268>)
 8012d80:	4613      	mov	r3, r2
 8012d82:	005b      	lsls	r3, r3, #1
 8012d84:	4413      	add	r3, r2
 8012d86:	00db      	lsls	r3, r3, #3
 8012d88:	440b      	add	r3, r1
 8012d8a:	69fa      	ldr	r2, [r7, #28]
 8012d8c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012d94:	e002      	b.n	8012d9c <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012d96:	23ff      	movs	r3, #255	; 0xff
 8012d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012d9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	3728      	adds	r7, #40	; 0x28
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	08018e84 	.word	0x08018e84
 8012dac:	08019030 	.word	0x08019030
 8012db0:	08018efc 	.word	0x08018efc
 8012db4:	2000428c 	.word	0x2000428c
 8012db8:	08019040 	.word	0x08019040
 8012dbc:	08019024 	.word	0x08019024
 8012dc0:	2000437c 	.word	0x2000437c
 8012dc4:	08019068 	.word	0x08019068

08012dc8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b08a      	sub	sp, #40	; 0x28
 8012dcc:	af02      	add	r7, sp, #8
 8012dce:	60f8      	str	r0, [r7, #12]
 8012dd0:	60b9      	str	r1, [r7, #8]
 8012dd2:	607a      	str	r2, [r7, #4]
 8012dd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d106      	bne.n	8012dee <etharp_raw+0x26>
 8012de0:	4b3a      	ldr	r3, [pc, #232]	; (8012ecc <etharp_raw+0x104>)
 8012de2:	f240 4257 	movw	r2, #1111	; 0x457
 8012de6:	493a      	ldr	r1, [pc, #232]	; (8012ed0 <etharp_raw+0x108>)
 8012de8:	483a      	ldr	r0, [pc, #232]	; (8012ed4 <etharp_raw+0x10c>)
 8012dea:	f001 ffa9 	bl	8014d40 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012dee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012df2:	211c      	movs	r1, #28
 8012df4:	200e      	movs	r0, #14
 8012df6:	f7f7 fc9f 	bl	800a738 <pbuf_alloc>
 8012dfa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d102      	bne.n	8012e08 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012e02:	f04f 33ff 	mov.w	r3, #4294967295
 8012e06:	e05d      	b.n	8012ec4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	895b      	ldrh	r3, [r3, #10]
 8012e0c:	2b1b      	cmp	r3, #27
 8012e0e:	d806      	bhi.n	8012e1e <etharp_raw+0x56>
 8012e10:	4b2e      	ldr	r3, [pc, #184]	; (8012ecc <etharp_raw+0x104>)
 8012e12:	f240 4263 	movw	r2, #1123	; 0x463
 8012e16:	4930      	ldr	r1, [pc, #192]	; (8012ed8 <etharp_raw+0x110>)
 8012e18:	482e      	ldr	r0, [pc, #184]	; (8012ed4 <etharp_raw+0x10c>)
 8012e1a:	f001 ff91 	bl	8014d40 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012e1e:	69bb      	ldr	r3, [r7, #24]
 8012e20:	685b      	ldr	r3, [r3, #4]
 8012e22:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012e24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7f6 fbbe 	bl	80095a8 <lwip_htons>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	461a      	mov	r2, r3
 8012e30:	697b      	ldr	r3, [r7, #20]
 8012e32:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012e3a:	2b06      	cmp	r3, #6
 8012e3c:	d006      	beq.n	8012e4c <etharp_raw+0x84>
 8012e3e:	4b23      	ldr	r3, [pc, #140]	; (8012ecc <etharp_raw+0x104>)
 8012e40:	f240 426a 	movw	r2, #1130	; 0x46a
 8012e44:	4925      	ldr	r1, [pc, #148]	; (8012edc <etharp_raw+0x114>)
 8012e46:	4823      	ldr	r0, [pc, #140]	; (8012ed4 <etharp_raw+0x10c>)
 8012e48:	f001 ff7a 	bl	8014d40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	3308      	adds	r3, #8
 8012e50:	2206      	movs	r2, #6
 8012e52:	6839      	ldr	r1, [r7, #0]
 8012e54:	4618      	mov	r0, r3
 8012e56:	f001 ff60 	bl	8014d1a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012e5a:	697b      	ldr	r3, [r7, #20]
 8012e5c:	3312      	adds	r3, #18
 8012e5e:	2206      	movs	r2, #6
 8012e60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e62:	4618      	mov	r0, r3
 8012e64:	f001 ff59 	bl	8014d1a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	330e      	adds	r3, #14
 8012e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e6e:	6812      	ldr	r2, [r2, #0]
 8012e70:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	3318      	adds	r3, #24
 8012e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e78:	6812      	ldr	r2, [r2, #0]
 8012e7a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	2200      	movs	r2, #0
 8012e80:	701a      	strb	r2, [r3, #0]
 8012e82:	2200      	movs	r2, #0
 8012e84:	f042 0201 	orr.w	r2, r2, #1
 8012e88:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	f042 0208 	orr.w	r2, r2, #8
 8012e92:	709a      	strb	r2, [r3, #2]
 8012e94:	2200      	movs	r2, #0
 8012e96:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012e98:	697b      	ldr	r3, [r7, #20]
 8012e9a:	2206      	movs	r2, #6
 8012e9c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	2204      	movs	r2, #4
 8012ea2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012ea4:	f640 0306 	movw	r3, #2054	; 0x806
 8012ea8:	9300      	str	r3, [sp, #0]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	68ba      	ldr	r2, [r7, #8]
 8012eae:	69b9      	ldr	r1, [r7, #24]
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f001 fcb5 	bl	8014820 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012eb6:	69b8      	ldr	r0, [r7, #24]
 8012eb8:	f7f7 ff1e 	bl	800acf8 <pbuf_free>
  p = NULL;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012ec0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3720      	adds	r7, #32
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	08018e84 	.word	0x08018e84
 8012ed0:	08018fd4 	.word	0x08018fd4
 8012ed4:	08018efc 	.word	0x08018efc
 8012ed8:	08019084 	.word	0x08019084
 8012edc:	080190b8 	.word	0x080190b8

08012ee0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b088      	sub	sp, #32
 8012ee4:	af04      	add	r7, sp, #16
 8012ee6:	60f8      	str	r0, [r7, #12]
 8012ee8:	60b9      	str	r1, [r7, #8]
 8012eea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012efc:	2201      	movs	r2, #1
 8012efe:	9203      	str	r2, [sp, #12]
 8012f00:	68ba      	ldr	r2, [r7, #8]
 8012f02:	9202      	str	r2, [sp, #8]
 8012f04:	4a06      	ldr	r2, [pc, #24]	; (8012f20 <etharp_request_dst+0x40>)
 8012f06:	9201      	str	r2, [sp, #4]
 8012f08:	9300      	str	r3, [sp, #0]
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	68f8      	ldr	r0, [r7, #12]
 8012f10:	f7ff ff5a 	bl	8012dc8 <etharp_raw>
 8012f14:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012f16:	4618      	mov	r0, r3
 8012f18:	3710      	adds	r7, #16
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}
 8012f1e:	bf00      	nop
 8012f20:	08019734 	.word	0x08019734

08012f24 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b082      	sub	sp, #8
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012f2e:	4a05      	ldr	r2, [pc, #20]	; (8012f44 <etharp_request+0x20>)
 8012f30:	6839      	ldr	r1, [r7, #0]
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f7ff ffd4 	bl	8012ee0 <etharp_request_dst>
 8012f38:	4603      	mov	r3, r0
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	0801972c 	.word	0x0801972c

08012f48 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b08e      	sub	sp, #56	; 0x38
 8012f4c:	af04      	add	r7, sp, #16
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012f52:	4b79      	ldr	r3, [pc, #484]	; (8013138 <icmp_input+0x1f0>)
 8012f54:	689b      	ldr	r3, [r3, #8]
 8012f56:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	f003 030f 	and.w	r3, r3, #15
 8012f60:	b2db      	uxtb	r3, r3
 8012f62:	009b      	lsls	r3, r3, #2
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012f68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f6a:	2b13      	cmp	r3, #19
 8012f6c:	f240 80cd 	bls.w	801310a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	895b      	ldrh	r3, [r3, #10]
 8012f74:	2b03      	cmp	r3, #3
 8012f76:	f240 80ca 	bls.w	801310e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	685b      	ldr	r3, [r3, #4]
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012f84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f000 80b7 	beq.w	80130fc <icmp_input+0x1b4>
 8012f8e:	2b08      	cmp	r3, #8
 8012f90:	f040 80b7 	bne.w	8013102 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012f94:	4b69      	ldr	r3, [pc, #420]	; (801313c <icmp_input+0x1f4>)
 8012f96:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012f98:	4b67      	ldr	r3, [pc, #412]	; (8013138 <icmp_input+0x1f0>)
 8012f9a:	695b      	ldr	r3, [r3, #20]
 8012f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012fa0:	2be0      	cmp	r3, #224	; 0xe0
 8012fa2:	f000 80bb 	beq.w	801311c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012fa6:	4b64      	ldr	r3, [pc, #400]	; (8013138 <icmp_input+0x1f0>)
 8012fa8:	695a      	ldr	r2, [r3, #20]
 8012faa:	4b63      	ldr	r3, [pc, #396]	; (8013138 <icmp_input+0x1f0>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	4619      	mov	r1, r3
 8012fb0:	4610      	mov	r0, r2
 8012fb2:	f000 fbeb 	bl	801378c <ip4_addr_isbroadcast_u32>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	f040 80b1 	bne.w	8013120 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	891b      	ldrh	r3, [r3, #8]
 8012fc2:	2b07      	cmp	r3, #7
 8012fc4:	f240 80a5 	bls.w	8013112 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fca:	330e      	adds	r3, #14
 8012fcc:	4619      	mov	r1, r3
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f7f7 fdfc 	bl	800abcc <pbuf_add_header>
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d04b      	beq.n	8013072 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	891a      	ldrh	r2, [r3, #8]
 8012fde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fe0:	4413      	add	r3, r2
 8012fe2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	891b      	ldrh	r3, [r3, #8]
 8012fe8:	8b7a      	ldrh	r2, [r7, #26]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	f0c0 809a 	bcc.w	8013124 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012ff0:	8b7b      	ldrh	r3, [r7, #26]
 8012ff2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	200e      	movs	r0, #14
 8012ffa:	f7f7 fb9d 	bl	800a738 <pbuf_alloc>
 8012ffe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	2b00      	cmp	r3, #0
 8013004:	f000 8090 	beq.w	8013128 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013008:	697b      	ldr	r3, [r7, #20]
 801300a:	895b      	ldrh	r3, [r3, #10]
 801300c:	461a      	mov	r2, r3
 801300e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013010:	3308      	adds	r3, #8
 8013012:	429a      	cmp	r2, r3
 8013014:	d203      	bcs.n	801301e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013016:	6978      	ldr	r0, [r7, #20]
 8013018:	f7f7 fe6e 	bl	800acf8 <pbuf_free>
          goto icmperr;
 801301c:	e085      	b.n	801312a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013026:	4618      	mov	r0, r3
 8013028:	f001 fe77 	bl	8014d1a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801302c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801302e:	4619      	mov	r1, r3
 8013030:	6978      	ldr	r0, [r7, #20]
 8013032:	f7f7 fddb 	bl	800abec <pbuf_remove_header>
 8013036:	4603      	mov	r3, r0
 8013038:	2b00      	cmp	r3, #0
 801303a:	d009      	beq.n	8013050 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801303c:	4b40      	ldr	r3, [pc, #256]	; (8013140 <icmp_input+0x1f8>)
 801303e:	22b6      	movs	r2, #182	; 0xb6
 8013040:	4940      	ldr	r1, [pc, #256]	; (8013144 <icmp_input+0x1fc>)
 8013042:	4841      	ldr	r0, [pc, #260]	; (8013148 <icmp_input+0x200>)
 8013044:	f001 fe7c 	bl	8014d40 <iprintf>
          pbuf_free(r);
 8013048:	6978      	ldr	r0, [r7, #20]
 801304a:	f7f7 fe55 	bl	800acf8 <pbuf_free>
          goto icmperr;
 801304e:	e06c      	b.n	801312a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013050:	6879      	ldr	r1, [r7, #4]
 8013052:	6978      	ldr	r0, [r7, #20]
 8013054:	f7f7 ff84 	bl	800af60 <pbuf_copy>
 8013058:	4603      	mov	r3, r0
 801305a:	2b00      	cmp	r3, #0
 801305c:	d003      	beq.n	8013066 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801305e:	6978      	ldr	r0, [r7, #20]
 8013060:	f7f7 fe4a 	bl	800acf8 <pbuf_free>
          goto icmperr;
 8013064:	e061      	b.n	801312a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f7f7 fe46 	bl	800acf8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	607b      	str	r3, [r7, #4]
 8013070:	e00f      	b.n	8013092 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013072:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013074:	330e      	adds	r3, #14
 8013076:	4619      	mov	r1, r3
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f7f7 fdb7 	bl	800abec <pbuf_remove_header>
 801307e:	4603      	mov	r3, r0
 8013080:	2b00      	cmp	r3, #0
 8013082:	d006      	beq.n	8013092 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013084:	4b2e      	ldr	r3, [pc, #184]	; (8013140 <icmp_input+0x1f8>)
 8013086:	22c7      	movs	r2, #199	; 0xc7
 8013088:	4930      	ldr	r1, [pc, #192]	; (801314c <icmp_input+0x204>)
 801308a:	482f      	ldr	r0, [pc, #188]	; (8013148 <icmp_input+0x200>)
 801308c:	f001 fe58 	bl	8014d40 <iprintf>
          goto icmperr;
 8013090:	e04b      	b.n	801312a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013098:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801309a:	4619      	mov	r1, r3
 801309c:	6878      	ldr	r0, [r7, #4]
 801309e:	f7f7 fd95 	bl	800abcc <pbuf_add_header>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d12b      	bne.n	8013100 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	685b      	ldr	r3, [r3, #4]
 80130ac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	681a      	ldr	r2, [r3, #0]
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80130b6:	4b20      	ldr	r3, [pc, #128]	; (8013138 <icmp_input+0x1f0>)
 80130b8:	691a      	ldr	r2, [r3, #16]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	2200      	movs	r2, #0
 80130c2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	2200      	movs	r2, #0
 80130c8:	709a      	strb	r2, [r3, #2]
 80130ca:	2200      	movs	r2, #0
 80130cc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	22ff      	movs	r2, #255	; 0xff
 80130d2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2200      	movs	r2, #0
 80130d8:	729a      	strb	r2, [r3, #10]
 80130da:	2200      	movs	r2, #0
 80130dc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	9302      	str	r3, [sp, #8]
 80130e2:	2301      	movs	r3, #1
 80130e4:	9301      	str	r3, [sp, #4]
 80130e6:	2300      	movs	r3, #0
 80130e8:	9300      	str	r3, [sp, #0]
 80130ea:	23ff      	movs	r3, #255	; 0xff
 80130ec:	2200      	movs	r2, #0
 80130ee:	69f9      	ldr	r1, [r7, #28]
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f000 fa73 	bl	80135dc <ip4_output_if>
 80130f6:	4603      	mov	r3, r0
 80130f8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80130fa:	e001      	b.n	8013100 <icmp_input+0x1b8>
      break;
 80130fc:	bf00      	nop
 80130fe:	e000      	b.n	8013102 <icmp_input+0x1ba>
      break;
 8013100:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f7f7 fdf8 	bl	800acf8 <pbuf_free>
  return;
 8013108:	e013      	b.n	8013132 <icmp_input+0x1ea>
    goto lenerr;
 801310a:	bf00      	nop
 801310c:	e002      	b.n	8013114 <icmp_input+0x1cc>
    goto lenerr;
 801310e:	bf00      	nop
 8013110:	e000      	b.n	8013114 <icmp_input+0x1cc>
        goto lenerr;
 8013112:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f7f7 fdef 	bl	800acf8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801311a:	e00a      	b.n	8013132 <icmp_input+0x1ea>
        goto icmperr;
 801311c:	bf00      	nop
 801311e:	e004      	b.n	801312a <icmp_input+0x1e2>
        goto icmperr;
 8013120:	bf00      	nop
 8013122:	e002      	b.n	801312a <icmp_input+0x1e2>
          goto icmperr;
 8013124:	bf00      	nop
 8013126:	e000      	b.n	801312a <icmp_input+0x1e2>
          goto icmperr;
 8013128:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f7f7 fde4 	bl	800acf8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013130:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013132:	3728      	adds	r7, #40	; 0x28
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}
 8013138:	20007558 	.word	0x20007558
 801313c:	2000756c 	.word	0x2000756c
 8013140:	080190fc 	.word	0x080190fc
 8013144:	08019134 	.word	0x08019134
 8013148:	0801916c 	.word	0x0801916c
 801314c:	08019194 	.word	0x08019194

08013150 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	460b      	mov	r3, r1
 801315a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801315c:	78fb      	ldrb	r3, [r7, #3]
 801315e:	461a      	mov	r2, r3
 8013160:	2103      	movs	r1, #3
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f000 f814 	bl	8013190 <icmp_send_response>
}
 8013168:	bf00      	nop
 801316a:	3708      	adds	r7, #8
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}

08013170 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	460b      	mov	r3, r1
 801317a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801317c:	78fb      	ldrb	r3, [r7, #3]
 801317e:	461a      	mov	r2, r3
 8013180:	210b      	movs	r1, #11
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f000 f804 	bl	8013190 <icmp_send_response>
}
 8013188:	bf00      	nop
 801318a:	3708      	adds	r7, #8
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}

08013190 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b08c      	sub	sp, #48	; 0x30
 8013194:	af04      	add	r7, sp, #16
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	460b      	mov	r3, r1
 801319a:	70fb      	strb	r3, [r7, #3]
 801319c:	4613      	mov	r3, r2
 801319e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80131a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80131a4:	2124      	movs	r1, #36	; 0x24
 80131a6:	2022      	movs	r0, #34	; 0x22
 80131a8:	f7f7 fac6 	bl	800a738 <pbuf_alloc>
 80131ac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80131ae:	69fb      	ldr	r3, [r7, #28]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d04c      	beq.n	801324e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80131b4:	69fb      	ldr	r3, [r7, #28]
 80131b6:	895b      	ldrh	r3, [r3, #10]
 80131b8:	2b23      	cmp	r3, #35	; 0x23
 80131ba:	d806      	bhi.n	80131ca <icmp_send_response+0x3a>
 80131bc:	4b26      	ldr	r3, [pc, #152]	; (8013258 <icmp_send_response+0xc8>)
 80131be:	f240 1269 	movw	r2, #361	; 0x169
 80131c2:	4926      	ldr	r1, [pc, #152]	; (801325c <icmp_send_response+0xcc>)
 80131c4:	4826      	ldr	r0, [pc, #152]	; (8013260 <icmp_send_response+0xd0>)
 80131c6:	f001 fdbb 	bl	8014d40 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	78fa      	ldrb	r2, [r7, #3]
 80131da:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	78ba      	ldrb	r2, [r7, #2]
 80131e0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	2200      	movs	r2, #0
 80131e6:	711a      	strb	r2, [r3, #4]
 80131e8:	2200      	movs	r2, #0
 80131ea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	2200      	movs	r2, #0
 80131f0:	719a      	strb	r2, [r3, #6]
 80131f2:	2200      	movs	r2, #0
 80131f4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80131f6:	69fb      	ldr	r3, [r7, #28]
 80131f8:	685b      	ldr	r3, [r3, #4]
 80131fa:	f103 0008 	add.w	r0, r3, #8
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	221c      	movs	r2, #28
 8013204:	4619      	mov	r1, r3
 8013206:	f001 fd88 	bl	8014d1a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801320a:	69bb      	ldr	r3, [r7, #24]
 801320c:	68db      	ldr	r3, [r3, #12]
 801320e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013210:	f107 030c 	add.w	r3, r7, #12
 8013214:	4618      	mov	r0, r3
 8013216:	f000 f825 	bl	8013264 <ip4_route>
 801321a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d011      	beq.n	8013246 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	2200      	movs	r2, #0
 8013226:	709a      	strb	r2, [r3, #2]
 8013228:	2200      	movs	r2, #0
 801322a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801322c:	f107 020c 	add.w	r2, r7, #12
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	9302      	str	r3, [sp, #8]
 8013234:	2301      	movs	r3, #1
 8013236:	9301      	str	r3, [sp, #4]
 8013238:	2300      	movs	r3, #0
 801323a:	9300      	str	r3, [sp, #0]
 801323c:	23ff      	movs	r3, #255	; 0xff
 801323e:	2100      	movs	r1, #0
 8013240:	69f8      	ldr	r0, [r7, #28]
 8013242:	f000 f9cb 	bl	80135dc <ip4_output_if>
  }
  pbuf_free(q);
 8013246:	69f8      	ldr	r0, [r7, #28]
 8013248:	f7f7 fd56 	bl	800acf8 <pbuf_free>
 801324c:	e000      	b.n	8013250 <icmp_send_response+0xc0>
    return;
 801324e:	bf00      	nop
}
 8013250:	3720      	adds	r7, #32
 8013252:	46bd      	mov	sp, r7
 8013254:	bd80      	pop	{r7, pc}
 8013256:	bf00      	nop
 8013258:	080190fc 	.word	0x080190fc
 801325c:	080191c8 	.word	0x080191c8
 8013260:	0801916c 	.word	0x0801916c

08013264 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013264:	b480      	push	{r7}
 8013266:	b085      	sub	sp, #20
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801326c:	4b33      	ldr	r3, [pc, #204]	; (801333c <ip4_route+0xd8>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	60fb      	str	r3, [r7, #12]
 8013272:	e036      	b.n	80132e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801327a:	f003 0301 	and.w	r3, r3, #1
 801327e:	b2db      	uxtb	r3, r3
 8013280:	2b00      	cmp	r3, #0
 8013282:	d02b      	beq.n	80132dc <ip4_route+0x78>
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801328a:	089b      	lsrs	r3, r3, #2
 801328c:	f003 0301 	and.w	r3, r3, #1
 8013290:	b2db      	uxtb	r3, r3
 8013292:	2b00      	cmp	r3, #0
 8013294:	d022      	beq.n	80132dc <ip4_route+0x78>
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	3304      	adds	r3, #4
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d01d      	beq.n	80132dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681a      	ldr	r2, [r3, #0]
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	3304      	adds	r3, #4
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	405a      	eors	r2, r3
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	3308      	adds	r3, #8
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	4013      	ands	r3, r2
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d101      	bne.n	80132bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	e038      	b.n	801332e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132c2:	f003 0302 	and.w	r3, r3, #2
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d108      	bne.n	80132dc <ip4_route+0x78>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681a      	ldr	r2, [r3, #0]
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	330c      	adds	r3, #12
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d101      	bne.n	80132dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	e028      	b.n	801332e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	60fb      	str	r3, [r7, #12]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d1c5      	bne.n	8013274 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80132e8:	4b15      	ldr	r3, [pc, #84]	; (8013340 <ip4_route+0xdc>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d01a      	beq.n	8013326 <ip4_route+0xc2>
 80132f0:	4b13      	ldr	r3, [pc, #76]	; (8013340 <ip4_route+0xdc>)
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132f8:	f003 0301 	and.w	r3, r3, #1
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d012      	beq.n	8013326 <ip4_route+0xc2>
 8013300:	4b0f      	ldr	r3, [pc, #60]	; (8013340 <ip4_route+0xdc>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013308:	f003 0304 	and.w	r3, r3, #4
 801330c:	2b00      	cmp	r3, #0
 801330e:	d00a      	beq.n	8013326 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013310:	4b0b      	ldr	r3, [pc, #44]	; (8013340 <ip4_route+0xdc>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	3304      	adds	r3, #4
 8013316:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013318:	2b00      	cmp	r3, #0
 801331a:	d004      	beq.n	8013326 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	b2db      	uxtb	r3, r3
 8013322:	2b7f      	cmp	r3, #127	; 0x7f
 8013324:	d101      	bne.n	801332a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013326:	2300      	movs	r3, #0
 8013328:	e001      	b.n	801332e <ip4_route+0xca>
  }

  return netif_default;
 801332a:	4b05      	ldr	r3, [pc, #20]	; (8013340 <ip4_route+0xdc>)
 801332c:	681b      	ldr	r3, [r3, #0]
}
 801332e:	4618      	mov	r0, r3
 8013330:	3714      	adds	r7, #20
 8013332:	46bd      	mov	sp, r7
 8013334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013338:	4770      	bx	lr
 801333a:	bf00      	nop
 801333c:	2000e61c 	.word	0x2000e61c
 8013340:	2000e620 	.word	0x2000e620

08013344 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013352:	f003 0301 	and.w	r3, r3, #1
 8013356:	b2db      	uxtb	r3, r3
 8013358:	2b00      	cmp	r3, #0
 801335a:	d016      	beq.n	801338a <ip4_input_accept+0x46>
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	3304      	adds	r3, #4
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d011      	beq.n	801338a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013366:	4b0b      	ldr	r3, [pc, #44]	; (8013394 <ip4_input_accept+0x50>)
 8013368:	695a      	ldr	r2, [r3, #20]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	3304      	adds	r3, #4
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	429a      	cmp	r2, r3
 8013372:	d008      	beq.n	8013386 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013374:	4b07      	ldr	r3, [pc, #28]	; (8013394 <ip4_input_accept+0x50>)
 8013376:	695b      	ldr	r3, [r3, #20]
 8013378:	6879      	ldr	r1, [r7, #4]
 801337a:	4618      	mov	r0, r3
 801337c:	f000 fa06 	bl	801378c <ip4_addr_isbroadcast_u32>
 8013380:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013382:	2b00      	cmp	r3, #0
 8013384:	d001      	beq.n	801338a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013386:	2301      	movs	r3, #1
 8013388:	e000      	b.n	801338c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801338a:	2300      	movs	r3, #0
}
 801338c:	4618      	mov	r0, r3
 801338e:	3708      	adds	r7, #8
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	20007558 	.word	0x20007558

08013398 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b086      	sub	sp, #24
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	685b      	ldr	r3, [r3, #4]
 80133a6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	091b      	lsrs	r3, r3, #4
 80133ae:	b2db      	uxtb	r3, r3
 80133b0:	2b04      	cmp	r3, #4
 80133b2:	d004      	beq.n	80133be <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7f7 fc9f 	bl	800acf8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80133ba:	2300      	movs	r3, #0
 80133bc:	e105      	b.n	80135ca <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	f003 030f 	and.w	r3, r3, #15
 80133c6:	b2db      	uxtb	r3, r3
 80133c8:	009b      	lsls	r3, r3, #2
 80133ca:	b2db      	uxtb	r3, r3
 80133cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	885b      	ldrh	r3, [r3, #2]
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	4618      	mov	r0, r3
 80133d6:	f7f6 f8e7 	bl	80095a8 <lwip_htons>
 80133da:	4603      	mov	r3, r0
 80133dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	891b      	ldrh	r3, [r3, #8]
 80133e2:	89ba      	ldrh	r2, [r7, #12]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	d204      	bcs.n	80133f2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80133e8:	89bb      	ldrh	r3, [r7, #12]
 80133ea:	4619      	mov	r1, r3
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f7f7 fafd 	bl	800a9ec <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	895b      	ldrh	r3, [r3, #10]
 80133f6:	89fa      	ldrh	r2, [r7, #14]
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d807      	bhi.n	801340c <ip4_input+0x74>
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	891b      	ldrh	r3, [r3, #8]
 8013400:	89ba      	ldrh	r2, [r7, #12]
 8013402:	429a      	cmp	r2, r3
 8013404:	d802      	bhi.n	801340c <ip4_input+0x74>
 8013406:	89fb      	ldrh	r3, [r7, #14]
 8013408:	2b13      	cmp	r3, #19
 801340a:	d804      	bhi.n	8013416 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f7f7 fc73 	bl	800acf8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013412:	2300      	movs	r3, #0
 8013414:	e0d9      	b.n	80135ca <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	691b      	ldr	r3, [r3, #16]
 801341a:	4a6e      	ldr	r2, [pc, #440]	; (80135d4 <ip4_input+0x23c>)
 801341c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	68db      	ldr	r3, [r3, #12]
 8013422:	4a6c      	ldr	r2, [pc, #432]	; (80135d4 <ip4_input+0x23c>)
 8013424:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013426:	4b6b      	ldr	r3, [pc, #428]	; (80135d4 <ip4_input+0x23c>)
 8013428:	695b      	ldr	r3, [r3, #20]
 801342a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801342e:	2be0      	cmp	r3, #224	; 0xe0
 8013430:	d112      	bne.n	8013458 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013438:	f003 0301 	and.w	r3, r3, #1
 801343c:	b2db      	uxtb	r3, r3
 801343e:	2b00      	cmp	r3, #0
 8013440:	d007      	beq.n	8013452 <ip4_input+0xba>
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	3304      	adds	r3, #4
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d002      	beq.n	8013452 <ip4_input+0xba>
      netif = inp;
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	613b      	str	r3, [r7, #16]
 8013450:	e02a      	b.n	80134a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013452:	2300      	movs	r3, #0
 8013454:	613b      	str	r3, [r7, #16]
 8013456:	e027      	b.n	80134a8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013458:	6838      	ldr	r0, [r7, #0]
 801345a:	f7ff ff73 	bl	8013344 <ip4_input_accept>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d002      	beq.n	801346a <ip4_input+0xd2>
      netif = inp;
 8013464:	683b      	ldr	r3, [r7, #0]
 8013466:	613b      	str	r3, [r7, #16]
 8013468:	e01e      	b.n	80134a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801346a:	2300      	movs	r3, #0
 801346c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801346e:	4b59      	ldr	r3, [pc, #356]	; (80135d4 <ip4_input+0x23c>)
 8013470:	695b      	ldr	r3, [r3, #20]
 8013472:	b2db      	uxtb	r3, r3
 8013474:	2b7f      	cmp	r3, #127	; 0x7f
 8013476:	d017      	beq.n	80134a8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013478:	4b57      	ldr	r3, [pc, #348]	; (80135d8 <ip4_input+0x240>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	613b      	str	r3, [r7, #16]
 801347e:	e00e      	b.n	801349e <ip4_input+0x106>
          if (netif == inp) {
 8013480:	693a      	ldr	r2, [r7, #16]
 8013482:	683b      	ldr	r3, [r7, #0]
 8013484:	429a      	cmp	r2, r3
 8013486:	d006      	beq.n	8013496 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013488:	6938      	ldr	r0, [r7, #16]
 801348a:	f7ff ff5b 	bl	8013344 <ip4_input_accept>
 801348e:	4603      	mov	r3, r0
 8013490:	2b00      	cmp	r3, #0
 8013492:	d108      	bne.n	80134a6 <ip4_input+0x10e>
 8013494:	e000      	b.n	8013498 <ip4_input+0x100>
            continue;
 8013496:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	613b      	str	r3, [r7, #16]
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d1ed      	bne.n	8013480 <ip4_input+0xe8>
 80134a4:	e000      	b.n	80134a8 <ip4_input+0x110>
            break;
 80134a6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134a8:	4b4a      	ldr	r3, [pc, #296]	; (80135d4 <ip4_input+0x23c>)
 80134aa:	691b      	ldr	r3, [r3, #16]
 80134ac:	6839      	ldr	r1, [r7, #0]
 80134ae:	4618      	mov	r0, r3
 80134b0:	f000 f96c 	bl	801378c <ip4_addr_isbroadcast_u32>
 80134b4:	4603      	mov	r3, r0
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d105      	bne.n	80134c6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80134ba:	4b46      	ldr	r3, [pc, #280]	; (80135d4 <ip4_input+0x23c>)
 80134bc:	691b      	ldr	r3, [r3, #16]
 80134be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134c2:	2be0      	cmp	r3, #224	; 0xe0
 80134c4:	d104      	bne.n	80134d0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f7f7 fc16 	bl	800acf8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80134cc:	2300      	movs	r3, #0
 80134ce:	e07c      	b.n	80135ca <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80134d0:	693b      	ldr	r3, [r7, #16]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d104      	bne.n	80134e0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80134d6:	6878      	ldr	r0, [r7, #4]
 80134d8:	f7f7 fc0e 	bl	800acf8 <pbuf_free>
    return ERR_OK;
 80134dc:	2300      	movs	r3, #0
 80134de:	e074      	b.n	80135ca <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	88db      	ldrh	r3, [r3, #6]
 80134e4:	b29b      	uxth	r3, r3
 80134e6:	461a      	mov	r2, r3
 80134e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80134ec:	4013      	ands	r3, r2
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d00b      	beq.n	801350a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80134f2:	6878      	ldr	r0, [r7, #4]
 80134f4:	f000 fdd6 	bl	80140a4 <ip4_reass>
 80134f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d101      	bne.n	8013504 <ip4_input+0x16c>
      return ERR_OK;
 8013500:	2300      	movs	r3, #0
 8013502:	e062      	b.n	80135ca <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801350a:	4a32      	ldr	r2, [pc, #200]	; (80135d4 <ip4_input+0x23c>)
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013510:	4a30      	ldr	r2, [pc, #192]	; (80135d4 <ip4_input+0x23c>)
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013516:	4a2f      	ldr	r2, [pc, #188]	; (80135d4 <ip4_input+0x23c>)
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	f003 030f 	and.w	r3, r3, #15
 8013524:	b2db      	uxtb	r3, r3
 8013526:	009b      	lsls	r3, r3, #2
 8013528:	b2db      	uxtb	r3, r3
 801352a:	b29a      	uxth	r2, r3
 801352c:	4b29      	ldr	r3, [pc, #164]	; (80135d4 <ip4_input+0x23c>)
 801352e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013530:	89fb      	ldrh	r3, [r7, #14]
 8013532:	4619      	mov	r1, r3
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7f7 fb59 	bl	800abec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	7a5b      	ldrb	r3, [r3, #9]
 801353e:	2b06      	cmp	r3, #6
 8013540:	d009      	beq.n	8013556 <ip4_input+0x1be>
 8013542:	2b11      	cmp	r3, #17
 8013544:	d002      	beq.n	801354c <ip4_input+0x1b4>
 8013546:	2b01      	cmp	r3, #1
 8013548:	d00a      	beq.n	8013560 <ip4_input+0x1c8>
 801354a:	e00e      	b.n	801356a <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801354c:	6839      	ldr	r1, [r7, #0]
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f7fe f8dc 	bl	801170c <udp_input>
        break;
 8013554:	e026      	b.n	80135a4 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013556:	6839      	ldr	r1, [r7, #0]
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f7f9 fc8b 	bl	800ce74 <tcp_input>
        break;
 801355e:	e021      	b.n	80135a4 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013560:	6839      	ldr	r1, [r7, #0]
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f7ff fcf0 	bl	8012f48 <icmp_input>
        break;
 8013568:	e01c      	b.n	80135a4 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801356a:	4b1a      	ldr	r3, [pc, #104]	; (80135d4 <ip4_input+0x23c>)
 801356c:	695b      	ldr	r3, [r3, #20]
 801356e:	6939      	ldr	r1, [r7, #16]
 8013570:	4618      	mov	r0, r3
 8013572:	f000 f90b 	bl	801378c <ip4_addr_isbroadcast_u32>
 8013576:	4603      	mov	r3, r0
 8013578:	2b00      	cmp	r3, #0
 801357a:	d10f      	bne.n	801359c <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801357c:	4b15      	ldr	r3, [pc, #84]	; (80135d4 <ip4_input+0x23c>)
 801357e:	695b      	ldr	r3, [r3, #20]
 8013580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013584:	2be0      	cmp	r3, #224	; 0xe0
 8013586:	d009      	beq.n	801359c <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013588:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801358c:	4619      	mov	r1, r3
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f7f7 fb9f 	bl	800acd2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013594:	2102      	movs	r1, #2
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f7ff fdda 	bl	8013150 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f7f7 fbab 	bl	800acf8 <pbuf_free>
        break;
 80135a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80135a4:	4b0b      	ldr	r3, [pc, #44]	; (80135d4 <ip4_input+0x23c>)
 80135a6:	2200      	movs	r2, #0
 80135a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80135aa:	4b0a      	ldr	r3, [pc, #40]	; (80135d4 <ip4_input+0x23c>)
 80135ac:	2200      	movs	r2, #0
 80135ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80135b0:	4b08      	ldr	r3, [pc, #32]	; (80135d4 <ip4_input+0x23c>)
 80135b2:	2200      	movs	r2, #0
 80135b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80135b6:	4b07      	ldr	r3, [pc, #28]	; (80135d4 <ip4_input+0x23c>)
 80135b8:	2200      	movs	r2, #0
 80135ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80135bc:	4b05      	ldr	r3, [pc, #20]	; (80135d4 <ip4_input+0x23c>)
 80135be:	2200      	movs	r2, #0
 80135c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80135c2:	4b04      	ldr	r3, [pc, #16]	; (80135d4 <ip4_input+0x23c>)
 80135c4:	2200      	movs	r2, #0
 80135c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80135c8:	2300      	movs	r3, #0
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3718      	adds	r7, #24
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	20007558 	.word	0x20007558
 80135d8:	2000e61c 	.word	0x2000e61c

080135dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b08a      	sub	sp, #40	; 0x28
 80135e0:	af04      	add	r7, sp, #16
 80135e2:	60f8      	str	r0, [r7, #12]
 80135e4:	60b9      	str	r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
 80135e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d009      	beq.n	8013608 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d003      	beq.n	8013602 <ip4_output_if+0x26>
 80135fa:	68bb      	ldr	r3, [r7, #8]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d102      	bne.n	8013608 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013604:	3304      	adds	r3, #4
 8013606:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013608:	78fa      	ldrb	r2, [r7, #3]
 801360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360c:	9302      	str	r3, [sp, #8]
 801360e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013612:	9301      	str	r3, [sp, #4]
 8013614:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013618:	9300      	str	r3, [sp, #0]
 801361a:	4613      	mov	r3, r2
 801361c:	687a      	ldr	r2, [r7, #4]
 801361e:	6979      	ldr	r1, [r7, #20]
 8013620:	68f8      	ldr	r0, [r7, #12]
 8013622:	f000 f805 	bl	8013630 <ip4_output_if_src>
 8013626:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013628:	4618      	mov	r0, r3
 801362a:	3718      	adds	r7, #24
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}

08013630 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b088      	sub	sp, #32
 8013634:	af00      	add	r7, sp, #0
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	60b9      	str	r1, [r7, #8]
 801363a:	607a      	str	r2, [r7, #4]
 801363c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	7b9b      	ldrb	r3, [r3, #14]
 8013642:	2b01      	cmp	r3, #1
 8013644:	d006      	beq.n	8013654 <ip4_output_if_src+0x24>
 8013646:	4b4b      	ldr	r3, [pc, #300]	; (8013774 <ip4_output_if_src+0x144>)
 8013648:	f44f 7255 	mov.w	r2, #852	; 0x354
 801364c:	494a      	ldr	r1, [pc, #296]	; (8013778 <ip4_output_if_src+0x148>)
 801364e:	484b      	ldr	r0, [pc, #300]	; (801377c <ip4_output_if_src+0x14c>)
 8013650:	f001 fb76 	bl	8014d40 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d060      	beq.n	801371c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801365a:	2314      	movs	r3, #20
 801365c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801365e:	2114      	movs	r1, #20
 8013660:	68f8      	ldr	r0, [r7, #12]
 8013662:	f7f7 fab3 	bl	800abcc <pbuf_add_header>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d002      	beq.n	8013672 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801366c:	f06f 0301 	mvn.w	r3, #1
 8013670:	e07c      	b.n	801376c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	685b      	ldr	r3, [r3, #4]
 8013676:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	895b      	ldrh	r3, [r3, #10]
 801367c:	2b13      	cmp	r3, #19
 801367e:	d806      	bhi.n	801368e <ip4_output_if_src+0x5e>
 8013680:	4b3c      	ldr	r3, [pc, #240]	; (8013774 <ip4_output_if_src+0x144>)
 8013682:	f240 3289 	movw	r2, #905	; 0x389
 8013686:	493e      	ldr	r1, [pc, #248]	; (8013780 <ip4_output_if_src+0x150>)
 8013688:	483c      	ldr	r0, [pc, #240]	; (801377c <ip4_output_if_src+0x14c>)
 801368a:	f001 fb59 	bl	8014d40 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801368e:	69fb      	ldr	r3, [r7, #28]
 8013690:	78fa      	ldrb	r2, [r7, #3]
 8013692:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013694:	69fb      	ldr	r3, [r7, #28]
 8013696:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801369a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80136a4:	8b7b      	ldrh	r3, [r7, #26]
 80136a6:	089b      	lsrs	r3, r3, #2
 80136a8:	b29b      	uxth	r3, r3
 80136aa:	b2db      	uxtb	r3, r3
 80136ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136b0:	b2da      	uxtb	r2, r3
 80136b2:	69fb      	ldr	r3, [r7, #28]
 80136b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80136b6:	69fb      	ldr	r3, [r7, #28]
 80136b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80136bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	891b      	ldrh	r3, [r3, #8]
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7f5 ff70 	bl	80095a8 <lwip_htons>
 80136c8:	4603      	mov	r3, r0
 80136ca:	461a      	mov	r2, r3
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80136d0:	69fb      	ldr	r3, [r7, #28]
 80136d2:	2200      	movs	r2, #0
 80136d4:	719a      	strb	r2, [r3, #6]
 80136d6:	2200      	movs	r2, #0
 80136d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80136da:	4b2a      	ldr	r3, [pc, #168]	; (8013784 <ip4_output_if_src+0x154>)
 80136dc:	881b      	ldrh	r3, [r3, #0]
 80136de:	4618      	mov	r0, r3
 80136e0:	f7f5 ff62 	bl	80095a8 <lwip_htons>
 80136e4:	4603      	mov	r3, r0
 80136e6:	461a      	mov	r2, r3
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80136ec:	4b25      	ldr	r3, [pc, #148]	; (8013784 <ip4_output_if_src+0x154>)
 80136ee:	881b      	ldrh	r3, [r3, #0]
 80136f0:	3301      	adds	r3, #1
 80136f2:	b29a      	uxth	r2, r3
 80136f4:	4b23      	ldr	r3, [pc, #140]	; (8013784 <ip4_output_if_src+0x154>)
 80136f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d104      	bne.n	8013708 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80136fe:	4b22      	ldr	r3, [pc, #136]	; (8013788 <ip4_output_if_src+0x158>)
 8013700:	681a      	ldr	r2, [r3, #0]
 8013702:	69fb      	ldr	r3, [r7, #28]
 8013704:	60da      	str	r2, [r3, #12]
 8013706:	e003      	b.n	8013710 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	681a      	ldr	r2, [r3, #0]
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013710:	69fb      	ldr	r3, [r7, #28]
 8013712:	2200      	movs	r2, #0
 8013714:	729a      	strb	r2, [r3, #10]
 8013716:	2200      	movs	r2, #0
 8013718:	72da      	strb	r2, [r3, #11]
 801371a:	e00f      	b.n	801373c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	895b      	ldrh	r3, [r3, #10]
 8013720:	2b13      	cmp	r3, #19
 8013722:	d802      	bhi.n	801372a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013724:	f06f 0301 	mvn.w	r3, #1
 8013728:	e020      	b.n	801376c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013730:	69fb      	ldr	r3, [r7, #28]
 8013732:	691b      	ldr	r3, [r3, #16]
 8013734:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013736:	f107 0314 	add.w	r3, r7, #20
 801373a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013740:	2b00      	cmp	r3, #0
 8013742:	d00c      	beq.n	801375e <ip4_output_if_src+0x12e>
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	891a      	ldrh	r2, [r3, #8]
 8013748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801374a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801374c:	429a      	cmp	r2, r3
 801374e:	d906      	bls.n	801375e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013754:	68f8      	ldr	r0, [r7, #12]
 8013756:	f000 fe91 	bl	801447c <ip4_frag>
 801375a:	4603      	mov	r3, r0
 801375c:	e006      	b.n	801376c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013760:	695b      	ldr	r3, [r3, #20]
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	68f9      	ldr	r1, [r7, #12]
 8013766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013768:	4798      	blx	r3
 801376a:	4603      	mov	r3, r0
}
 801376c:	4618      	mov	r0, r3
 801376e:	3720      	adds	r7, #32
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	080191f4 	.word	0x080191f4
 8013778:	08019228 	.word	0x08019228
 801377c:	08019234 	.word	0x08019234
 8013780:	0801925c 	.word	0x0801925c
 8013784:	2000437e 	.word	0x2000437e
 8013788:	08019728 	.word	0x08019728

0801378c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801378c:	b480      	push	{r7}
 801378e:	b085      	sub	sp, #20
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137a0:	d002      	beq.n	80137a8 <ip4_addr_isbroadcast_u32+0x1c>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d101      	bne.n	80137ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80137a8:	2301      	movs	r3, #1
 80137aa:	e02a      	b.n	8013802 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80137ac:	683b      	ldr	r3, [r7, #0]
 80137ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80137b2:	f003 0302 	and.w	r3, r3, #2
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d101      	bne.n	80137be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80137ba:	2300      	movs	r3, #0
 80137bc:	e021      	b.n	8013802 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	3304      	adds	r3, #4
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d101      	bne.n	80137ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80137ca:	2300      	movs	r3, #0
 80137cc:	e019      	b.n	8013802 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80137ce:	68fa      	ldr	r2, [r7, #12]
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	3304      	adds	r3, #4
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	405a      	eors	r2, r3
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	3308      	adds	r3, #8
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	4013      	ands	r3, r2
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d10d      	bne.n	8013800 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	3308      	adds	r3, #8
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	43da      	mvns	r2, r3
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	3308      	adds	r3, #8
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d101      	bne.n	8013800 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80137fc:	2301      	movs	r3, #1
 80137fe:	e000      	b.n	8013802 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013800:	2300      	movs	r3, #0
  }
}
 8013802:	4618      	mov	r0, r3
 8013804:	3714      	adds	r7, #20
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr

0801380e <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 801380e:	b580      	push	{r7, lr}
 8013810:	b084      	sub	sp, #16
 8013812:	af00      	add	r7, sp, #0
 8013814:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8013816:	f107 030c 	add.w	r3, r7, #12
 801381a:	4619      	mov	r1, r3
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f000 f80b 	bl	8013838 <ip4addr_aton>
 8013822:	4603      	mov	r3, r0
 8013824:	2b00      	cmp	r3, #0
 8013826:	d001      	beq.n	801382c <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	e001      	b.n	8013830 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 801382c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013830:	4618      	mov	r0, r3
 8013832:	3710      	adds	r7, #16
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}

08013838 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8013838:	b5b0      	push	{r4, r5, r7, lr}
 801383a:	b08a      	sub	sp, #40	; 0x28
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8013842:	f107 030c 	add.w	r3, r7, #12
 8013846:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8013850:	f001 fa34 	bl	8014cbc <__locale_ctype_ptr>
 8013854:	4602      	mov	r2, r0
 8013856:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801385a:	3301      	adds	r3, #1
 801385c:	4413      	add	r3, r2
 801385e:	781b      	ldrb	r3, [r3, #0]
 8013860:	f003 0304 	and.w	r3, r3, #4
 8013864:	2b00      	cmp	r3, #0
 8013866:	d101      	bne.n	801386c <ip4addr_aton+0x34>
      return 0;
 8013868:	2300      	movs	r3, #0
 801386a:	e10d      	b.n	8013a88 <ip4addr_aton+0x250>
    }
    val = 0;
 801386c:	2300      	movs	r3, #0
 801386e:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8013870:	230a      	movs	r3, #10
 8013872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8013876:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801387a:	2b30      	cmp	r3, #48	; 0x30
 801387c:	d11c      	bne.n	80138b8 <ip4addr_aton+0x80>
      c = *++cp;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	3301      	adds	r3, #1
 8013882:	607b      	str	r3, [r7, #4]
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	781b      	ldrb	r3, [r3, #0]
 8013888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801388c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013890:	2b78      	cmp	r3, #120	; 0x78
 8013892:	d003      	beq.n	801389c <ip4addr_aton+0x64>
 8013894:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013898:	2b58      	cmp	r3, #88	; 0x58
 801389a:	d10a      	bne.n	80138b2 <ip4addr_aton+0x7a>
        base = 16;
 801389c:	2310      	movs	r3, #16
 801389e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	3301      	adds	r3, #1
 80138a6:	607b      	str	r3, [r7, #4]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80138b0:	e002      	b.n	80138b8 <ip4addr_aton+0x80>
      } else {
        base = 8;
 80138b2:	2308      	movs	r3, #8
 80138b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80138b8:	f001 fa00 	bl	8014cbc <__locale_ctype_ptr>
 80138bc:	4602      	mov	r2, r0
 80138be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80138c2:	3301      	adds	r3, #1
 80138c4:	4413      	add	r3, r2
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	f003 0304 	and.w	r3, r3, #4
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d011      	beq.n	80138f4 <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 80138d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80138d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138d6:	fb02 f203 	mul.w	r2, r2, r3
 80138da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80138de:	4413      	add	r3, r2
 80138e0:	3b30      	subs	r3, #48	; 0x30
 80138e2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	3301      	adds	r3, #1
 80138e8:	607b      	str	r3, [r7, #4]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	781b      	ldrb	r3, [r3, #0]
 80138ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80138f2:	e7e1      	b.n	80138b8 <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80138f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80138f8:	2b10      	cmp	r3, #16
 80138fa:	d12b      	bne.n	8013954 <ip4addr_aton+0x11c>
 80138fc:	f001 f9de 	bl	8014cbc <__locale_ctype_ptr>
 8013900:	4602      	mov	r2, r0
 8013902:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013906:	3301      	adds	r3, #1
 8013908:	4413      	add	r3, r2
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013910:	2b00      	cmp	r3, #0
 8013912:	d01f      	beq.n	8013954 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8013914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013916:	011c      	lsls	r4, r3, #4
 8013918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801391c:	f103 050a 	add.w	r5, r3, #10
 8013920:	f001 f9cc 	bl	8014cbc <__locale_ctype_ptr>
 8013924:	4602      	mov	r2, r0
 8013926:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801392a:	3301      	adds	r3, #1
 801392c:	4413      	add	r3, r2
 801392e:	781b      	ldrb	r3, [r3, #0]
 8013930:	f003 0303 	and.w	r3, r3, #3
 8013934:	2b02      	cmp	r3, #2
 8013936:	d101      	bne.n	801393c <ip4addr_aton+0x104>
 8013938:	2361      	movs	r3, #97	; 0x61
 801393a:	e000      	b.n	801393e <ip4addr_aton+0x106>
 801393c:	2341      	movs	r3, #65	; 0x41
 801393e:	1aeb      	subs	r3, r5, r3
 8013940:	4323      	orrs	r3, r4
 8013942:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	3301      	adds	r3, #1
 8013948:	607b      	str	r3, [r7, #4]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	781b      	ldrb	r3, [r3, #0]
 801394e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8013952:	e7b1      	b.n	80138b8 <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 8013954:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013958:	2b2e      	cmp	r3, #46	; 0x2e
 801395a:	d114      	bne.n	8013986 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801395c:	f107 030c 	add.w	r3, r7, #12
 8013960:	330c      	adds	r3, #12
 8013962:	69fa      	ldr	r2, [r7, #28]
 8013964:	429a      	cmp	r2, r3
 8013966:	d301      	bcc.n	801396c <ip4addr_aton+0x134>
        return 0;
 8013968:	2300      	movs	r3, #0
 801396a:	e08d      	b.n	8013a88 <ip4addr_aton+0x250>
      }
      *pp++ = val;
 801396c:	69fb      	ldr	r3, [r7, #28]
 801396e:	1d1a      	adds	r2, r3, #4
 8013970:	61fa      	str	r2, [r7, #28]
 8013972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013974:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	3301      	adds	r3, #1
 801397a:	607b      	str	r3, [r7, #4]
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8013984:	e764      	b.n	8013850 <ip4addr_aton+0x18>
    } else {
      break;
 8013986:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8013988:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801398c:	2b00      	cmp	r3, #0
 801398e:	d00d      	beq.n	80139ac <ip4addr_aton+0x174>
 8013990:	f001 f994 	bl	8014cbc <__locale_ctype_ptr>
 8013994:	4602      	mov	r2, r0
 8013996:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801399a:	3301      	adds	r3, #1
 801399c:	4413      	add	r3, r2
 801399e:	781b      	ldrb	r3, [r3, #0]
 80139a0:	f003 0308 	and.w	r3, r3, #8
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d101      	bne.n	80139ac <ip4addr_aton+0x174>
    return 0;
 80139a8:	2300      	movs	r3, #0
 80139aa:	e06d      	b.n	8013a88 <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80139ac:	69fa      	ldr	r2, [r7, #28]
 80139ae:	f107 030c 	add.w	r3, r7, #12
 80139b2:	1ad3      	subs	r3, r2, r3
 80139b4:	109b      	asrs	r3, r3, #2
 80139b6:	3301      	adds	r3, #1
 80139b8:	2b04      	cmp	r3, #4
 80139ba:	d853      	bhi.n	8013a64 <ip4addr_aton+0x22c>
 80139bc:	a201      	add	r2, pc, #4	; (adr r2, 80139c4 <ip4addr_aton+0x18c>)
 80139be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139c2:	bf00      	nop
 80139c4:	080139d9 	.word	0x080139d9
 80139c8:	08013a73 	.word	0x08013a73
 80139cc:	080139dd 	.word	0x080139dd
 80139d0:	080139ff 	.word	0x080139ff
 80139d4:	08013a2d 	.word	0x08013a2d

    case 0:
      return 0;       /* initial nondigit */
 80139d8:	2300      	movs	r3, #0
 80139da:	e055      	b.n	8013a88 <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80139dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80139e2:	d301      	bcc.n	80139e8 <ip4addr_aton+0x1b0>
        return 0;
 80139e4:	2300      	movs	r3, #0
 80139e6:	e04f      	b.n	8013a88 <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	2bff      	cmp	r3, #255	; 0xff
 80139ec:	d901      	bls.n	80139f2 <ip4addr_aton+0x1ba>
        return 0;
 80139ee:	2300      	movs	r3, #0
 80139f0:	e04a      	b.n	8013a88 <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	061b      	lsls	r3, r3, #24
 80139f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139f8:	4313      	orrs	r3, r2
 80139fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80139fc:	e03a      	b.n	8013a74 <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80139fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a04:	d301      	bcc.n	8013a0a <ip4addr_aton+0x1d2>
        return 0;
 8013a06:	2300      	movs	r3, #0
 8013a08:	e03e      	b.n	8013a88 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	2bff      	cmp	r3, #255	; 0xff
 8013a0e:	d802      	bhi.n	8013a16 <ip4addr_aton+0x1de>
 8013a10:	693b      	ldr	r3, [r7, #16]
 8013a12:	2bff      	cmp	r3, #255	; 0xff
 8013a14:	d901      	bls.n	8013a1a <ip4addr_aton+0x1e2>
        return 0;
 8013a16:	2300      	movs	r3, #0
 8013a18:	e036      	b.n	8013a88 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	061a      	lsls	r2, r3, #24
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	041b      	lsls	r3, r3, #16
 8013a22:	4313      	orrs	r3, r2
 8013a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a26:	4313      	orrs	r3, r2
 8013a28:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8013a2a:	e023      	b.n	8013a74 <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8013a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2e:	2bff      	cmp	r3, #255	; 0xff
 8013a30:	d901      	bls.n	8013a36 <ip4addr_aton+0x1fe>
        return 0;
 8013a32:	2300      	movs	r3, #0
 8013a34:	e028      	b.n	8013a88 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	2bff      	cmp	r3, #255	; 0xff
 8013a3a:	d805      	bhi.n	8013a48 <ip4addr_aton+0x210>
 8013a3c:	693b      	ldr	r3, [r7, #16]
 8013a3e:	2bff      	cmp	r3, #255	; 0xff
 8013a40:	d802      	bhi.n	8013a48 <ip4addr_aton+0x210>
 8013a42:	697b      	ldr	r3, [r7, #20]
 8013a44:	2bff      	cmp	r3, #255	; 0xff
 8013a46:	d901      	bls.n	8013a4c <ip4addr_aton+0x214>
        return 0;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	e01d      	b.n	8013a88 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	061a      	lsls	r2, r3, #24
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	041b      	lsls	r3, r3, #16
 8013a54:	431a      	orrs	r2, r3
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	021b      	lsls	r3, r3, #8
 8013a5a:	4313      	orrs	r3, r2
 8013a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a5e:	4313      	orrs	r3, r2
 8013a60:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8013a62:	e007      	b.n	8013a74 <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 8013a64:	4b0a      	ldr	r3, [pc, #40]	; (8013a90 <ip4addr_aton+0x258>)
 8013a66:	22f9      	movs	r2, #249	; 0xf9
 8013a68:	490a      	ldr	r1, [pc, #40]	; (8013a94 <ip4addr_aton+0x25c>)
 8013a6a:	480b      	ldr	r0, [pc, #44]	; (8013a98 <ip4addr_aton+0x260>)
 8013a6c:	f001 f968 	bl	8014d40 <iprintf>
      break;
 8013a70:	e000      	b.n	8013a74 <ip4addr_aton+0x23c>
      break;
 8013a72:	bf00      	nop
  }
  if (addr) {
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d005      	beq.n	8013a86 <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8013a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a7c:	f7f5 fda9 	bl	80095d2 <lwip_htonl>
 8013a80:	4602      	mov	r2, r0
 8013a82:	683b      	ldr	r3, [r7, #0]
 8013a84:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8013a86:	2301      	movs	r3, #1
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3728      	adds	r7, #40	; 0x28
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8013a90:	0801928c 	.word	0x0801928c
 8013a94:	080192c8 	.word	0x080192c8
 8013a98:	080192d4 	.word	0x080192d4

08013a9c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013aa6:	4b12      	ldr	r3, [pc, #72]	; (8013af0 <ip_reass_tmr+0x54>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013aac:	e018      	b.n	8013ae0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	7fdb      	ldrb	r3, [r3, #31]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d00b      	beq.n	8013ace <ip_reass_tmr+0x32>
      r->timer--;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	7fdb      	ldrb	r3, [r3, #31]
 8013aba:	3b01      	subs	r3, #1
 8013abc:	b2da      	uxtb	r2, r3
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	60fb      	str	r3, [r7, #12]
 8013acc:	e008      	b.n	8013ae0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013ad8:	68b9      	ldr	r1, [r7, #8]
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f000 f80a 	bl	8013af4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d1e3      	bne.n	8013aae <ip_reass_tmr+0x12>
    }
  }
}
 8013ae6:	bf00      	nop
 8013ae8:	3710      	adds	r7, #16
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}
 8013aee:	bf00      	nop
 8013af0:	20004380 	.word	0x20004380

08013af4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b088      	sub	sp, #32
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
 8013afc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013afe:	2300      	movs	r3, #0
 8013b00:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013b02:	683a      	ldr	r2, [r7, #0]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d105      	bne.n	8013b16 <ip_reass_free_complete_datagram+0x22>
 8013b0a:	4b45      	ldr	r3, [pc, #276]	; (8013c20 <ip_reass_free_complete_datagram+0x12c>)
 8013b0c:	22ab      	movs	r2, #171	; 0xab
 8013b0e:	4945      	ldr	r1, [pc, #276]	; (8013c24 <ip_reass_free_complete_datagram+0x130>)
 8013b10:	4845      	ldr	r0, [pc, #276]	; (8013c28 <ip_reass_free_complete_datagram+0x134>)
 8013b12:	f001 f915 	bl	8014d40 <iprintf>
  if (prev != NULL) {
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d00a      	beq.n	8013b32 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013b1c:	683b      	ldr	r3, [r7, #0]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d005      	beq.n	8013b32 <ip_reass_free_complete_datagram+0x3e>
 8013b26:	4b3e      	ldr	r3, [pc, #248]	; (8013c20 <ip_reass_free_complete_datagram+0x12c>)
 8013b28:	22ad      	movs	r2, #173	; 0xad
 8013b2a:	4940      	ldr	r1, [pc, #256]	; (8013c2c <ip_reass_free_complete_datagram+0x138>)
 8013b2c:	483e      	ldr	r0, [pc, #248]	; (8013c28 <ip_reass_free_complete_datagram+0x134>)
 8013b2e:	f001 f907 	bl	8014d40 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	889b      	ldrh	r3, [r3, #4]
 8013b3e:	b29b      	uxth	r3, r3
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d12a      	bne.n	8013b9a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013b4a:	697b      	ldr	r3, [r7, #20]
 8013b4c:	681a      	ldr	r2, [r3, #0]
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013b52:	69bb      	ldr	r3, [r7, #24]
 8013b54:	6858      	ldr	r0, [r3, #4]
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	3308      	adds	r3, #8
 8013b5a:	2214      	movs	r2, #20
 8013b5c:	4619      	mov	r1, r3
 8013b5e:	f001 f8dc 	bl	8014d1a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013b62:	2101      	movs	r1, #1
 8013b64:	69b8      	ldr	r0, [r7, #24]
 8013b66:	f7ff fb03 	bl	8013170 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013b6a:	69b8      	ldr	r0, [r7, #24]
 8013b6c:	f7f7 f952 	bl	800ae14 <pbuf_clen>
 8013b70:	4603      	mov	r3, r0
 8013b72:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013b74:	8bfa      	ldrh	r2, [r7, #30]
 8013b76:	8a7b      	ldrh	r3, [r7, #18]
 8013b78:	4413      	add	r3, r2
 8013b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b7e:	db05      	blt.n	8013b8c <ip_reass_free_complete_datagram+0x98>
 8013b80:	4b27      	ldr	r3, [pc, #156]	; (8013c20 <ip_reass_free_complete_datagram+0x12c>)
 8013b82:	22bc      	movs	r2, #188	; 0xbc
 8013b84:	492a      	ldr	r1, [pc, #168]	; (8013c30 <ip_reass_free_complete_datagram+0x13c>)
 8013b86:	4828      	ldr	r0, [pc, #160]	; (8013c28 <ip_reass_free_complete_datagram+0x134>)
 8013b88:	f001 f8da 	bl	8014d40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013b8c:	8bfa      	ldrh	r2, [r7, #30]
 8013b8e:	8a7b      	ldrh	r3, [r7, #18]
 8013b90:	4413      	add	r3, r2
 8013b92:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013b94:	69b8      	ldr	r0, [r7, #24]
 8013b96:	f7f7 f8af 	bl	800acf8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013ba0:	e01f      	b.n	8013be2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013ba2:	69bb      	ldr	r3, [r7, #24]
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013ba8:	69bb      	ldr	r3, [r7, #24]
 8013baa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013bac:	697b      	ldr	r3, [r7, #20]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013bb2:	68f8      	ldr	r0, [r7, #12]
 8013bb4:	f7f7 f92e 	bl	800ae14 <pbuf_clen>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013bbc:	8bfa      	ldrh	r2, [r7, #30]
 8013bbe:	8a7b      	ldrh	r3, [r7, #18]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013bc6:	db05      	blt.n	8013bd4 <ip_reass_free_complete_datagram+0xe0>
 8013bc8:	4b15      	ldr	r3, [pc, #84]	; (8013c20 <ip_reass_free_complete_datagram+0x12c>)
 8013bca:	22cc      	movs	r2, #204	; 0xcc
 8013bcc:	4918      	ldr	r1, [pc, #96]	; (8013c30 <ip_reass_free_complete_datagram+0x13c>)
 8013bce:	4816      	ldr	r0, [pc, #88]	; (8013c28 <ip_reass_free_complete_datagram+0x134>)
 8013bd0:	f001 f8b6 	bl	8014d40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013bd4:	8bfa      	ldrh	r2, [r7, #30]
 8013bd6:	8a7b      	ldrh	r3, [r7, #18]
 8013bd8:	4413      	add	r3, r2
 8013bda:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013bdc:	68f8      	ldr	r0, [r7, #12]
 8013bde:	f7f7 f88b 	bl	800acf8 <pbuf_free>
  while (p != NULL) {
 8013be2:	69bb      	ldr	r3, [r7, #24]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d1dc      	bne.n	8013ba2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013be8:	6839      	ldr	r1, [r7, #0]
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f000 f8c2 	bl	8013d74 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013bf0:	4b10      	ldr	r3, [pc, #64]	; (8013c34 <ip_reass_free_complete_datagram+0x140>)
 8013bf2:	881b      	ldrh	r3, [r3, #0]
 8013bf4:	8bfa      	ldrh	r2, [r7, #30]
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d905      	bls.n	8013c06 <ip_reass_free_complete_datagram+0x112>
 8013bfa:	4b09      	ldr	r3, [pc, #36]	; (8013c20 <ip_reass_free_complete_datagram+0x12c>)
 8013bfc:	22d2      	movs	r2, #210	; 0xd2
 8013bfe:	490e      	ldr	r1, [pc, #56]	; (8013c38 <ip_reass_free_complete_datagram+0x144>)
 8013c00:	4809      	ldr	r0, [pc, #36]	; (8013c28 <ip_reass_free_complete_datagram+0x134>)
 8013c02:	f001 f89d 	bl	8014d40 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013c06:	4b0b      	ldr	r3, [pc, #44]	; (8013c34 <ip_reass_free_complete_datagram+0x140>)
 8013c08:	881a      	ldrh	r2, [r3, #0]
 8013c0a:	8bfb      	ldrh	r3, [r7, #30]
 8013c0c:	1ad3      	subs	r3, r2, r3
 8013c0e:	b29a      	uxth	r2, r3
 8013c10:	4b08      	ldr	r3, [pc, #32]	; (8013c34 <ip_reass_free_complete_datagram+0x140>)
 8013c12:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013c14:	8bfb      	ldrh	r3, [r7, #30]
}
 8013c16:	4618      	mov	r0, r3
 8013c18:	3720      	adds	r7, #32
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
 8013c1e:	bf00      	nop
 8013c20:	080192fc 	.word	0x080192fc
 8013c24:	08019338 	.word	0x08019338
 8013c28:	08019344 	.word	0x08019344
 8013c2c:	0801936c 	.word	0x0801936c
 8013c30:	08019380 	.word	0x08019380
 8013c34:	20004384 	.word	0x20004384
 8013c38:	080193a0 	.word	0x080193a0

08013c3c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b08a      	sub	sp, #40	; 0x28
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013c46:	2300      	movs	r3, #0
 8013c48:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013c52:	2300      	movs	r3, #0
 8013c54:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013c56:	2300      	movs	r3, #0
 8013c58:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013c5a:	4b28      	ldr	r3, [pc, #160]	; (8013cfc <ip_reass_remove_oldest_datagram+0xc0>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013c60:	e030      	b.n	8013cc4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c64:	695a      	ldr	r2, [r3, #20]
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	68db      	ldr	r3, [r3, #12]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d10c      	bne.n	8013c88 <ip_reass_remove_oldest_datagram+0x4c>
 8013c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c70:	699a      	ldr	r2, [r3, #24]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	691b      	ldr	r3, [r3, #16]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	d106      	bne.n	8013c88 <ip_reass_remove_oldest_datagram+0x4c>
 8013c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c7c:	899a      	ldrh	r2, [r3, #12]
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	889b      	ldrh	r3, [r3, #4]
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d014      	beq.n	8013cb2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013c88:	693b      	ldr	r3, [r7, #16]
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013c8e:	6a3b      	ldr	r3, [r7, #32]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d104      	bne.n	8013c9e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c96:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	61bb      	str	r3, [r7, #24]
 8013c9c:	e009      	b.n	8013cb2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca0:	7fda      	ldrb	r2, [r3, #31]
 8013ca2:	6a3b      	ldr	r3, [r7, #32]
 8013ca4:	7fdb      	ldrb	r3, [r3, #31]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d803      	bhi.n	8013cb2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cac:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013cae:	69fb      	ldr	r3, [r7, #28]
 8013cb0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d001      	beq.n	8013cbe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cbc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d1cb      	bne.n	8013c62 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013cca:	6a3b      	ldr	r3, [r7, #32]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d008      	beq.n	8013ce2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013cd0:	69b9      	ldr	r1, [r7, #24]
 8013cd2:	6a38      	ldr	r0, [r7, #32]
 8013cd4:	f7ff ff0e 	bl	8013af4 <ip_reass_free_complete_datagram>
 8013cd8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013cda:	697a      	ldr	r2, [r7, #20]
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	4413      	add	r3, r2
 8013ce0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013ce2:	697a      	ldr	r2, [r7, #20]
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	da02      	bge.n	8013cf0 <ip_reass_remove_oldest_datagram+0xb4>
 8013cea:	693b      	ldr	r3, [r7, #16]
 8013cec:	2b01      	cmp	r3, #1
 8013cee:	dcac      	bgt.n	8013c4a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013cf0:	697b      	ldr	r3, [r7, #20]
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3728      	adds	r7, #40	; 0x28
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}
 8013cfa:	bf00      	nop
 8013cfc:	20004380 	.word	0x20004380

08013d00 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b084      	sub	sp, #16
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013d0a:	2004      	movs	r0, #4
 8013d0c:	f7f6 f902 	bl	8009f14 <memp_malloc>
 8013d10:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d110      	bne.n	8013d3a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013d18:	6839      	ldr	r1, [r7, #0]
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7ff ff8e 	bl	8013c3c <ip_reass_remove_oldest_datagram>
 8013d20:	4602      	mov	r2, r0
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	4293      	cmp	r3, r2
 8013d26:	dc03      	bgt.n	8013d30 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013d28:	2004      	movs	r0, #4
 8013d2a:	f7f6 f8f3 	bl	8009f14 <memp_malloc>
 8013d2e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d101      	bne.n	8013d3a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013d36:	2300      	movs	r3, #0
 8013d38:	e016      	b.n	8013d68 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013d3a:	2220      	movs	r2, #32
 8013d3c:	2100      	movs	r1, #0
 8013d3e:	68f8      	ldr	r0, [r7, #12]
 8013d40:	f000 fff6 	bl	8014d30 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	220f      	movs	r2, #15
 8013d48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013d4a:	4b09      	ldr	r3, [pc, #36]	; (8013d70 <ip_reass_enqueue_new_datagram+0x70>)
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013d52:	4a07      	ldr	r2, [pc, #28]	; (8013d70 <ip_reass_enqueue_new_datagram+0x70>)
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	3308      	adds	r3, #8
 8013d5c:	2214      	movs	r2, #20
 8013d5e:	6879      	ldr	r1, [r7, #4]
 8013d60:	4618      	mov	r0, r3
 8013d62:	f000 ffda 	bl	8014d1a <memcpy>
  return ipr;
 8013d66:	68fb      	ldr	r3, [r7, #12]
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3710      	adds	r7, #16
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	20004380 	.word	0x20004380

08013d74 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b082      	sub	sp, #8
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
 8013d7c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013d7e:	4b10      	ldr	r3, [pc, #64]	; (8013dc0 <ip_reass_dequeue_datagram+0x4c>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d104      	bne.n	8013d92 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	4a0c      	ldr	r2, [pc, #48]	; (8013dc0 <ip_reass_dequeue_datagram+0x4c>)
 8013d8e:	6013      	str	r3, [r2, #0]
 8013d90:	e00d      	b.n	8013dae <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d106      	bne.n	8013da6 <ip_reass_dequeue_datagram+0x32>
 8013d98:	4b0a      	ldr	r3, [pc, #40]	; (8013dc4 <ip_reass_dequeue_datagram+0x50>)
 8013d9a:	f240 1245 	movw	r2, #325	; 0x145
 8013d9e:	490a      	ldr	r1, [pc, #40]	; (8013dc8 <ip_reass_dequeue_datagram+0x54>)
 8013da0:	480a      	ldr	r0, [pc, #40]	; (8013dcc <ip_reass_dequeue_datagram+0x58>)
 8013da2:	f000 ffcd 	bl	8014d40 <iprintf>
    prev->next = ipr->next;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013dae:	6879      	ldr	r1, [r7, #4]
 8013db0:	2004      	movs	r0, #4
 8013db2:	f7f6 f901 	bl	8009fb8 <memp_free>
}
 8013db6:	bf00      	nop
 8013db8:	3708      	adds	r7, #8
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	20004380 	.word	0x20004380
 8013dc4:	080192fc 	.word	0x080192fc
 8013dc8:	080193c4 	.word	0x080193c4
 8013dcc:	08019344 	.word	0x08019344

08013dd0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b08c      	sub	sp, #48	; 0x30
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	60f8      	str	r0, [r7, #12]
 8013dd8:	60b9      	str	r1, [r7, #8]
 8013dda:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013de0:	2301      	movs	r3, #1
 8013de2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	685b      	ldr	r3, [r3, #4]
 8013de8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	885b      	ldrh	r3, [r3, #2]
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7f5 fbd9 	bl	80095a8 <lwip_htons>
 8013df6:	4603      	mov	r3, r0
 8013df8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013dfa:	69fb      	ldr	r3, [r7, #28]
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	f003 030f 	and.w	r3, r3, #15
 8013e02:	b2db      	uxtb	r3, r3
 8013e04:	009b      	lsls	r3, r3, #2
 8013e06:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013e08:	7e7b      	ldrb	r3, [r7, #25]
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	8b7a      	ldrh	r2, [r7, #26]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	d202      	bcs.n	8013e18 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e12:	f04f 33ff 	mov.w	r3, #4294967295
 8013e16:	e135      	b.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013e18:	7e7b      	ldrb	r3, [r7, #25]
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	8b7a      	ldrh	r2, [r7, #26]
 8013e1e:	1ad3      	subs	r3, r2, r3
 8013e20:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013e22:	69fb      	ldr	r3, [r7, #28]
 8013e24:	88db      	ldrh	r3, [r3, #6]
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7f5 fbbd 	bl	80095a8 <lwip_htons>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	00db      	lsls	r3, r3, #3
 8013e38:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013e3a:	68bb      	ldr	r3, [r7, #8]
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e42:	2200      	movs	r2, #0
 8013e44:	701a      	strb	r2, [r3, #0]
 8013e46:	2200      	movs	r2, #0
 8013e48:	705a      	strb	r2, [r3, #1]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	709a      	strb	r2, [r3, #2]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e54:	8afa      	ldrh	r2, [r7, #22]
 8013e56:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013e58:	8afa      	ldrh	r2, [r7, #22]
 8013e5a:	8b7b      	ldrh	r3, [r7, #26]
 8013e5c:	4413      	add	r3, r2
 8013e5e:	b29a      	uxth	r2, r3
 8013e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e62:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e66:	88db      	ldrh	r3, [r3, #6]
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	8afa      	ldrh	r2, [r7, #22]
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d902      	bls.n	8013e76 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013e70:	f04f 33ff 	mov.w	r3, #4294967295
 8013e74:	e106      	b.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8013e7c:	e068      	b.n	8013f50 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e86:	889b      	ldrh	r3, [r3, #4]
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	889b      	ldrh	r3, [r3, #4]
 8013e8e:	b29b      	uxth	r3, r3
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d235      	bcs.n	8013f00 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e98:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d020      	beq.n	8013ee2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ea2:	889b      	ldrh	r3, [r3, #4]
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea8:	88db      	ldrh	r3, [r3, #6]
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d307      	bcc.n	8013ec0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013eb2:	88db      	ldrh	r3, [r3, #6]
 8013eb4:	b29a      	uxth	r2, r3
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	889b      	ldrh	r3, [r3, #4]
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d902      	bls.n	8013ec6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8013ec4:	e0de      	b.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ec8:	68ba      	ldr	r2, [r7, #8]
 8013eca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ece:	88db      	ldrh	r3, [r3, #6]
 8013ed0:	b29a      	uxth	r2, r3
 8013ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed4:	889b      	ldrh	r3, [r3, #4]
 8013ed6:	b29b      	uxth	r3, r3
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	d03d      	beq.n	8013f58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013edc:	2300      	movs	r3, #0
 8013ede:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013ee0:	e03a      	b.n	8013f58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ee4:	88db      	ldrh	r3, [r3, #6]
 8013ee6:	b29a      	uxth	r2, r3
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	889b      	ldrh	r3, [r3, #4]
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	429a      	cmp	r2, r3
 8013ef0:	d902      	bls.n	8013ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ef6:	e0c5      	b.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	68ba      	ldr	r2, [r7, #8]
 8013efc:	605a      	str	r2, [r3, #4]
      break;
 8013efe:	e02b      	b.n	8013f58 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f02:	889b      	ldrh	r3, [r3, #4]
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	889b      	ldrh	r3, [r3, #4]
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	429a      	cmp	r2, r3
 8013f0e:	d102      	bne.n	8013f16 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013f10:	f04f 33ff 	mov.w	r3, #4294967295
 8013f14:	e0b6      	b.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f18:	889b      	ldrh	r3, [r3, #4]
 8013f1a:	b29a      	uxth	r2, r3
 8013f1c:	693b      	ldr	r3, [r7, #16]
 8013f1e:	88db      	ldrh	r3, [r3, #6]
 8013f20:	b29b      	uxth	r3, r3
 8013f22:	429a      	cmp	r2, r3
 8013f24:	d202      	bcs.n	8013f2c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013f26:	f04f 33ff 	mov.w	r3, #4294967295
 8013f2a:	e0ab      	b.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d009      	beq.n	8013f46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f34:	88db      	ldrh	r3, [r3, #6]
 8013f36:	b29a      	uxth	r2, r3
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	889b      	ldrh	r3, [r3, #4]
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d001      	beq.n	8013f46 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013f42:	2300      	movs	r3, #0
 8013f44:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013f4c:	693b      	ldr	r3, [r7, #16]
 8013f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d193      	bne.n	8013e7e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013f56:	e000      	b.n	8013f5a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013f58:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d12d      	bne.n	8013fbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d01c      	beq.n	8013fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f68:	88db      	ldrh	r3, [r3, #6]
 8013f6a:	b29a      	uxth	r2, r3
 8013f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6e:	889b      	ldrh	r3, [r3, #4]
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d906      	bls.n	8013f84 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013f76:	4b45      	ldr	r3, [pc, #276]	; (801408c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013f78:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013f7c:	4944      	ldr	r1, [pc, #272]	; (8014090 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013f7e:	4845      	ldr	r0, [pc, #276]	; (8014094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013f80:	f000 fede 	bl	8014d40 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f86:	68ba      	ldr	r2, [r7, #8]
 8013f88:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8c:	88db      	ldrh	r3, [r3, #6]
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f92:	889b      	ldrh	r3, [r3, #4]
 8013f94:	b29b      	uxth	r3, r3
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d010      	beq.n	8013fbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	623b      	str	r3, [r7, #32]
 8013f9e:	e00d      	b.n	8013fbc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	685b      	ldr	r3, [r3, #4]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d006      	beq.n	8013fb6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013fa8:	4b38      	ldr	r3, [pc, #224]	; (801408c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013faa:	f240 12bf 	movw	r2, #447	; 0x1bf
 8013fae:	493a      	ldr	r1, [pc, #232]	; (8014098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013fb0:	4838      	ldr	r0, [pc, #224]	; (8014094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013fb2:	f000 fec5 	bl	8014d40 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	68ba      	ldr	r2, [r7, #8]
 8013fba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d105      	bne.n	8013fce <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	7f9b      	ldrb	r3, [r3, #30]
 8013fc6:	f003 0301 	and.w	r3, r3, #1
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d059      	beq.n	8014082 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013fce:	6a3b      	ldr	r3, [r7, #32]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d04f      	beq.n	8014074 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	685b      	ldr	r3, [r3, #4]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d006      	beq.n	8013fea <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	889b      	ldrh	r3, [r3, #4]
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d002      	beq.n	8013ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013fea:	2300      	movs	r3, #0
 8013fec:	623b      	str	r3, [r7, #32]
 8013fee:	e041      	b.n	8014074 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013ffa:	e012      	b.n	8014022 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014004:	88db      	ldrh	r3, [r3, #6]
 8014006:	b29a      	uxth	r2, r3
 8014008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801400a:	889b      	ldrh	r3, [r3, #4]
 801400c:	b29b      	uxth	r3, r3
 801400e:	429a      	cmp	r2, r3
 8014010:	d002      	beq.n	8014018 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014012:	2300      	movs	r3, #0
 8014014:	623b      	str	r3, [r7, #32]
            break;
 8014016:	e007      	b.n	8014028 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014024:	2b00      	cmp	r3, #0
 8014026:	d1e9      	bne.n	8013ffc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014028:	6a3b      	ldr	r3, [r7, #32]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d022      	beq.n	8014074 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d106      	bne.n	8014044 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014036:	4b15      	ldr	r3, [pc, #84]	; (801408c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014038:	f240 12df 	movw	r2, #479	; 0x1df
 801403c:	4917      	ldr	r1, [pc, #92]	; (801409c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801403e:	4815      	ldr	r0, [pc, #84]	; (8014094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014040:	f000 fe7e 	bl	8014d40 <iprintf>
          LWIP_ASSERT("sanity check",
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	685b      	ldr	r3, [r3, #4]
 8014048:	685b      	ldr	r3, [r3, #4]
 801404a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801404c:	429a      	cmp	r2, r3
 801404e:	d106      	bne.n	801405e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014050:	4b0e      	ldr	r3, [pc, #56]	; (801408c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014052:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014056:	4911      	ldr	r1, [pc, #68]	; (801409c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014058:	480e      	ldr	r0, [pc, #56]	; (8014094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801405a:	f000 fe71 	bl	8014d40 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d006      	beq.n	8014074 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014066:	4b09      	ldr	r3, [pc, #36]	; (801408c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014068:	f240 12e3 	movw	r2, #483	; 0x1e3
 801406c:	490c      	ldr	r1, [pc, #48]	; (80140a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801406e:	4809      	ldr	r0, [pc, #36]	; (8014094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014070:	f000 fe66 	bl	8014d40 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014074:	6a3b      	ldr	r3, [r7, #32]
 8014076:	2b00      	cmp	r3, #0
 8014078:	bf14      	ite	ne
 801407a:	2301      	movne	r3, #1
 801407c:	2300      	moveq	r3, #0
 801407e:	b2db      	uxtb	r3, r3
 8014080:	e000      	b.n	8014084 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014082:	2300      	movs	r3, #0
}
 8014084:	4618      	mov	r0, r3
 8014086:	3730      	adds	r7, #48	; 0x30
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}
 801408c:	080192fc 	.word	0x080192fc
 8014090:	080193e0 	.word	0x080193e0
 8014094:	08019344 	.word	0x08019344
 8014098:	08019400 	.word	0x08019400
 801409c:	08019438 	.word	0x08019438
 80140a0:	08019448 	.word	0x08019448

080140a4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b08e      	sub	sp, #56	; 0x38
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80140b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b4:	781b      	ldrb	r3, [r3, #0]
 80140b6:	f003 030f 	and.w	r3, r3, #15
 80140ba:	b2db      	uxtb	r3, r3
 80140bc:	009b      	lsls	r3, r3, #2
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	2b14      	cmp	r3, #20
 80140c2:	f040 8167 	bne.w	8014394 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80140c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140c8:	88db      	ldrh	r3, [r3, #6]
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7f5 fa6b 	bl	80095a8 <lwip_htons>
 80140d2:	4603      	mov	r3, r0
 80140d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80140d8:	b29b      	uxth	r3, r3
 80140da:	00db      	lsls	r3, r3, #3
 80140dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80140de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e0:	885b      	ldrh	r3, [r3, #2]
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7f5 fa5f 	bl	80095a8 <lwip_htons>
 80140ea:	4603      	mov	r3, r0
 80140ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80140ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	f003 030f 	and.w	r3, r3, #15
 80140f6:	b2db      	uxtb	r3, r3
 80140f8:	009b      	lsls	r3, r3, #2
 80140fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80140fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014102:	b29b      	uxth	r3, r3
 8014104:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014106:	429a      	cmp	r2, r3
 8014108:	f0c0 8146 	bcc.w	8014398 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801410c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014110:	b29b      	uxth	r3, r3
 8014112:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014114:	1ad3      	subs	r3, r2, r3
 8014116:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f7f6 fe7b 	bl	800ae14 <pbuf_clen>
 801411e:	4603      	mov	r3, r0
 8014120:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014122:	4ba3      	ldr	r3, [pc, #652]	; (80143b0 <ip4_reass+0x30c>)
 8014124:	881b      	ldrh	r3, [r3, #0]
 8014126:	461a      	mov	r2, r3
 8014128:	8c3b      	ldrh	r3, [r7, #32]
 801412a:	4413      	add	r3, r2
 801412c:	2b0a      	cmp	r3, #10
 801412e:	dd10      	ble.n	8014152 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014130:	8c3b      	ldrh	r3, [r7, #32]
 8014132:	4619      	mov	r1, r3
 8014134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014136:	f7ff fd81 	bl	8013c3c <ip_reass_remove_oldest_datagram>
 801413a:	4603      	mov	r3, r0
 801413c:	2b00      	cmp	r3, #0
 801413e:	f000 812d 	beq.w	801439c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014142:	4b9b      	ldr	r3, [pc, #620]	; (80143b0 <ip4_reass+0x30c>)
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	461a      	mov	r2, r3
 8014148:	8c3b      	ldrh	r3, [r7, #32]
 801414a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801414c:	2b0a      	cmp	r3, #10
 801414e:	f300 8125 	bgt.w	801439c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014152:	4b98      	ldr	r3, [pc, #608]	; (80143b4 <ip4_reass+0x310>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	633b      	str	r3, [r7, #48]	; 0x30
 8014158:	e015      	b.n	8014186 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801415c:	695a      	ldr	r2, [r3, #20]
 801415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014160:	68db      	ldr	r3, [r3, #12]
 8014162:	429a      	cmp	r2, r3
 8014164:	d10c      	bne.n	8014180 <ip4_reass+0xdc>
 8014166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014168:	699a      	ldr	r2, [r3, #24]
 801416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416c:	691b      	ldr	r3, [r3, #16]
 801416e:	429a      	cmp	r2, r3
 8014170:	d106      	bne.n	8014180 <ip4_reass+0xdc>
 8014172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014174:	899a      	ldrh	r2, [r3, #12]
 8014176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014178:	889b      	ldrh	r3, [r3, #4]
 801417a:	b29b      	uxth	r3, r3
 801417c:	429a      	cmp	r2, r3
 801417e:	d006      	beq.n	801418e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	633b      	str	r3, [r7, #48]	; 0x30
 8014186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014188:	2b00      	cmp	r3, #0
 801418a:	d1e6      	bne.n	801415a <ip4_reass+0xb6>
 801418c:	e000      	b.n	8014190 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801418e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014192:	2b00      	cmp	r3, #0
 8014194:	d109      	bne.n	80141aa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014196:	8c3b      	ldrh	r3, [r7, #32]
 8014198:	4619      	mov	r1, r3
 801419a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801419c:	f7ff fdb0 	bl	8013d00 <ip_reass_enqueue_new_datagram>
 80141a0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80141a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d11c      	bne.n	80141e2 <ip4_reass+0x13e>
      goto nullreturn;
 80141a8:	e0f9      	b.n	801439e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80141aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141ac:	88db      	ldrh	r3, [r3, #6]
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7f5 f9f9 	bl	80095a8 <lwip_htons>
 80141b6:	4603      	mov	r3, r0
 80141b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d110      	bne.n	80141e2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80141c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c2:	89db      	ldrh	r3, [r3, #14]
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7f5 f9ef 	bl	80095a8 <lwip_htons>
 80141ca:	4603      	mov	r3, r0
 80141cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d006      	beq.n	80141e2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80141d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d6:	3308      	adds	r3, #8
 80141d8:	2214      	movs	r2, #20
 80141da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80141dc:	4618      	mov	r0, r3
 80141de:	f000 fd9c 	bl	8014d1a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80141e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e4:	88db      	ldrh	r3, [r3, #6]
 80141e6:	b29b      	uxth	r3, r3
 80141e8:	f003 0320 	and.w	r3, r3, #32
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	bf0c      	ite	eq
 80141f0:	2301      	moveq	r3, #1
 80141f2:	2300      	movne	r3, #0
 80141f4:	b2db      	uxtb	r3, r3
 80141f6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80141f8:	69fb      	ldr	r3, [r7, #28]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d00e      	beq.n	801421c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80141fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014202:	4413      	add	r3, r2
 8014204:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014206:	8b7a      	ldrh	r2, [r7, #26]
 8014208:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801420a:	429a      	cmp	r2, r3
 801420c:	f0c0 80a0 	bcc.w	8014350 <ip4_reass+0x2ac>
 8014210:	8b7b      	ldrh	r3, [r7, #26]
 8014212:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014216:	4293      	cmp	r3, r2
 8014218:	f200 809a 	bhi.w	8014350 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801421c:	69fa      	ldr	r2, [r7, #28]
 801421e:	6879      	ldr	r1, [r7, #4]
 8014220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014222:	f7ff fdd5 	bl	8013dd0 <ip_reass_chain_frag_into_datagram_and_validate>
 8014226:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801422e:	f000 8091 	beq.w	8014354 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014232:	4b5f      	ldr	r3, [pc, #380]	; (80143b0 <ip4_reass+0x30c>)
 8014234:	881a      	ldrh	r2, [r3, #0]
 8014236:	8c3b      	ldrh	r3, [r7, #32]
 8014238:	4413      	add	r3, r2
 801423a:	b29a      	uxth	r2, r3
 801423c:	4b5c      	ldr	r3, [pc, #368]	; (80143b0 <ip4_reass+0x30c>)
 801423e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d00d      	beq.n	8014262 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014246:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801424a:	4413      	add	r3, r2
 801424c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014250:	8a7a      	ldrh	r2, [r7, #18]
 8014252:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014256:	7f9b      	ldrb	r3, [r3, #30]
 8014258:	f043 0301 	orr.w	r3, r3, #1
 801425c:	b2da      	uxtb	r2, r3
 801425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014260:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	2b01      	cmp	r3, #1
 8014266:	d171      	bne.n	801434c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426a:	8b9b      	ldrh	r3, [r3, #28]
 801426c:	3314      	adds	r3, #20
 801426e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014272:	685b      	ldr	r3, [r3, #4]
 8014274:	685b      	ldr	r3, [r3, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427c:	685b      	ldr	r3, [r3, #4]
 801427e:	685b      	ldr	r3, [r3, #4]
 8014280:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014284:	3308      	adds	r3, #8
 8014286:	2214      	movs	r2, #20
 8014288:	4619      	mov	r1, r3
 801428a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801428c:	f000 fd45 	bl	8014d1a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014290:	8a3b      	ldrh	r3, [r7, #16]
 8014292:	4618      	mov	r0, r3
 8014294:	f7f5 f988 	bl	80095a8 <lwip_htons>
 8014298:	4603      	mov	r3, r0
 801429a:	461a      	mov	r2, r3
 801429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801429e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80142a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a2:	2200      	movs	r2, #0
 80142a4:	719a      	strb	r2, [r3, #6]
 80142a6:	2200      	movs	r2, #0
 80142a8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80142aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ac:	2200      	movs	r2, #0
 80142ae:	729a      	strb	r2, [r3, #10]
 80142b0:	2200      	movs	r2, #0
 80142b2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80142b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80142ba:	e00d      	b.n	80142d8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80142bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142be:	685b      	ldr	r3, [r3, #4]
 80142c0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80142c2:	2114      	movs	r1, #20
 80142c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80142c6:	f7f6 fc91 	bl	800abec <pbuf_remove_header>
      pbuf_cat(p, r);
 80142ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80142cc:	6878      	ldr	r0, [r7, #4]
 80142ce:	f7f6 fde1 	bl	800ae94 <pbuf_cat>
      r = iprh->next_pbuf;
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80142d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d1ee      	bne.n	80142bc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80142de:	4b35      	ldr	r3, [pc, #212]	; (80143b4 <ip4_reass+0x310>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142e4:	429a      	cmp	r2, r3
 80142e6:	d102      	bne.n	80142ee <ip4_reass+0x24a>
      ipr_prev = NULL;
 80142e8:	2300      	movs	r3, #0
 80142ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142ec:	e010      	b.n	8014310 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80142ee:	4b31      	ldr	r3, [pc, #196]	; (80143b4 <ip4_reass+0x310>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80142f4:	e007      	b.n	8014306 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80142f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d006      	beq.n	801430e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014308:	2b00      	cmp	r3, #0
 801430a:	d1f4      	bne.n	80142f6 <ip4_reass+0x252>
 801430c:	e000      	b.n	8014310 <ip4_reass+0x26c>
          break;
 801430e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014314:	f7ff fd2e 	bl	8013d74 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f7f6 fd7b 	bl	800ae14 <pbuf_clen>
 801431e:	4603      	mov	r3, r0
 8014320:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014322:	4b23      	ldr	r3, [pc, #140]	; (80143b0 <ip4_reass+0x30c>)
 8014324:	881b      	ldrh	r3, [r3, #0]
 8014326:	8c3a      	ldrh	r2, [r7, #32]
 8014328:	429a      	cmp	r2, r3
 801432a:	d906      	bls.n	801433a <ip4_reass+0x296>
 801432c:	4b22      	ldr	r3, [pc, #136]	; (80143b8 <ip4_reass+0x314>)
 801432e:	f240 229b 	movw	r2, #667	; 0x29b
 8014332:	4922      	ldr	r1, [pc, #136]	; (80143bc <ip4_reass+0x318>)
 8014334:	4822      	ldr	r0, [pc, #136]	; (80143c0 <ip4_reass+0x31c>)
 8014336:	f000 fd03 	bl	8014d40 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801433a:	4b1d      	ldr	r3, [pc, #116]	; (80143b0 <ip4_reass+0x30c>)
 801433c:	881a      	ldrh	r2, [r3, #0]
 801433e:	8c3b      	ldrh	r3, [r7, #32]
 8014340:	1ad3      	subs	r3, r2, r3
 8014342:	b29a      	uxth	r2, r3
 8014344:	4b1a      	ldr	r3, [pc, #104]	; (80143b0 <ip4_reass+0x30c>)
 8014346:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	e02c      	b.n	80143a6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801434c:	2300      	movs	r3, #0
 801434e:	e02a      	b.n	80143a6 <ip4_reass+0x302>

nullreturn_ipr:
 8014350:	bf00      	nop
 8014352:	e000      	b.n	8014356 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014354:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014358:	2b00      	cmp	r3, #0
 801435a:	d106      	bne.n	801436a <ip4_reass+0x2c6>
 801435c:	4b16      	ldr	r3, [pc, #88]	; (80143b8 <ip4_reass+0x314>)
 801435e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014362:	4918      	ldr	r1, [pc, #96]	; (80143c4 <ip4_reass+0x320>)
 8014364:	4816      	ldr	r0, [pc, #88]	; (80143c0 <ip4_reass+0x31c>)
 8014366:	f000 fceb 	bl	8014d40 <iprintf>
  if (ipr->p == NULL) {
 801436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d114      	bne.n	801439c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014372:	4b10      	ldr	r3, [pc, #64]	; (80143b4 <ip4_reass+0x310>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014378:	429a      	cmp	r2, r3
 801437a:	d006      	beq.n	801438a <ip4_reass+0x2e6>
 801437c:	4b0e      	ldr	r3, [pc, #56]	; (80143b8 <ip4_reass+0x314>)
 801437e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014382:	4911      	ldr	r1, [pc, #68]	; (80143c8 <ip4_reass+0x324>)
 8014384:	480e      	ldr	r0, [pc, #56]	; (80143c0 <ip4_reass+0x31c>)
 8014386:	f000 fcdb 	bl	8014d40 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801438a:	2100      	movs	r1, #0
 801438c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801438e:	f7ff fcf1 	bl	8013d74 <ip_reass_dequeue_datagram>
 8014392:	e004      	b.n	801439e <ip4_reass+0x2fa>
    goto nullreturn;
 8014394:	bf00      	nop
 8014396:	e002      	b.n	801439e <ip4_reass+0x2fa>
    goto nullreturn;
 8014398:	bf00      	nop
 801439a:	e000      	b.n	801439e <ip4_reass+0x2fa>
  }

nullreturn:
 801439c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f7f6 fcaa 	bl	800acf8 <pbuf_free>
  return NULL;
 80143a4:	2300      	movs	r3, #0
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3738      	adds	r7, #56	; 0x38
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
 80143ae:	bf00      	nop
 80143b0:	20004384 	.word	0x20004384
 80143b4:	20004380 	.word	0x20004380
 80143b8:	080192fc 	.word	0x080192fc
 80143bc:	0801946c 	.word	0x0801946c
 80143c0:	08019344 	.word	0x08019344
 80143c4:	08019488 	.word	0x08019488
 80143c8:	08019494 	.word	0x08019494

080143cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80143d0:	2005      	movs	r0, #5
 80143d2:	f7f5 fd9f 	bl	8009f14 <memp_malloc>
 80143d6:	4603      	mov	r3, r0
}
 80143d8:	4618      	mov	r0, r3
 80143da:	bd80      	pop	{r7, pc}

080143dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b082      	sub	sp, #8
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d106      	bne.n	80143f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80143ea:	4b07      	ldr	r3, [pc, #28]	; (8014408 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80143ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80143f0:	4906      	ldr	r1, [pc, #24]	; (801440c <ip_frag_free_pbuf_custom_ref+0x30>)
 80143f2:	4807      	ldr	r0, [pc, #28]	; (8014410 <ip_frag_free_pbuf_custom_ref+0x34>)
 80143f4:	f000 fca4 	bl	8014d40 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80143f8:	6879      	ldr	r1, [r7, #4]
 80143fa:	2005      	movs	r0, #5
 80143fc:	f7f5 fddc 	bl	8009fb8 <memp_free>
}
 8014400:	bf00      	nop
 8014402:	3708      	adds	r7, #8
 8014404:	46bd      	mov	sp, r7
 8014406:	bd80      	pop	{r7, pc}
 8014408:	080192fc 	.word	0x080192fc
 801440c:	080194b4 	.word	0x080194b4
 8014410:	08019344 	.word	0x08019344

08014414 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b084      	sub	sp, #16
 8014418:	af00      	add	r7, sp, #0
 801441a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d106      	bne.n	8014434 <ipfrag_free_pbuf_custom+0x20>
 8014426:	4b11      	ldr	r3, [pc, #68]	; (801446c <ipfrag_free_pbuf_custom+0x58>)
 8014428:	f240 22ce 	movw	r2, #718	; 0x2ce
 801442c:	4910      	ldr	r1, [pc, #64]	; (8014470 <ipfrag_free_pbuf_custom+0x5c>)
 801442e:	4811      	ldr	r0, [pc, #68]	; (8014474 <ipfrag_free_pbuf_custom+0x60>)
 8014430:	f000 fc86 	bl	8014d40 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014434:	68fa      	ldr	r2, [r7, #12]
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	429a      	cmp	r2, r3
 801443a:	d006      	beq.n	801444a <ipfrag_free_pbuf_custom+0x36>
 801443c:	4b0b      	ldr	r3, [pc, #44]	; (801446c <ipfrag_free_pbuf_custom+0x58>)
 801443e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014442:	490d      	ldr	r1, [pc, #52]	; (8014478 <ipfrag_free_pbuf_custom+0x64>)
 8014444:	480b      	ldr	r0, [pc, #44]	; (8014474 <ipfrag_free_pbuf_custom+0x60>)
 8014446:	f000 fc7b 	bl	8014d40 <iprintf>
  if (pcr->original != NULL) {
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	695b      	ldr	r3, [r3, #20]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d004      	beq.n	801445c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	695b      	ldr	r3, [r3, #20]
 8014456:	4618      	mov	r0, r3
 8014458:	f7f6 fc4e 	bl	800acf8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801445c:	68f8      	ldr	r0, [r7, #12]
 801445e:	f7ff ffbd 	bl	80143dc <ip_frag_free_pbuf_custom_ref>
}
 8014462:	bf00      	nop
 8014464:	3710      	adds	r7, #16
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	080192fc 	.word	0x080192fc
 8014470:	080194c0 	.word	0x080194c0
 8014474:	08019344 	.word	0x08019344
 8014478:	080194cc 	.word	0x080194cc

0801447c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b094      	sub	sp, #80	; 0x50
 8014480:	af02      	add	r7, sp, #8
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	60b9      	str	r1, [r7, #8]
 8014486:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014488:	2300      	movs	r3, #0
 801448a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014492:	3b14      	subs	r3, #20
 8014494:	2b00      	cmp	r3, #0
 8014496:	da00      	bge.n	801449a <ip4_frag+0x1e>
 8014498:	3307      	adds	r3, #7
 801449a:	10db      	asrs	r3, r3, #3
 801449c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801449e:	2314      	movs	r3, #20
 80144a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80144a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80144ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ae:	781b      	ldrb	r3, [r3, #0]
 80144b0:	f003 030f 	and.w	r3, r3, #15
 80144b4:	b2db      	uxtb	r3, r3
 80144b6:	009b      	lsls	r3, r3, #2
 80144b8:	b2db      	uxtb	r3, r3
 80144ba:	2b14      	cmp	r3, #20
 80144bc:	d002      	beq.n	80144c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80144be:	f06f 0305 	mvn.w	r3, #5
 80144c2:	e10f      	b.n	80146e4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	895b      	ldrh	r3, [r3, #10]
 80144c8:	2b13      	cmp	r3, #19
 80144ca:	d809      	bhi.n	80144e0 <ip4_frag+0x64>
 80144cc:	4b87      	ldr	r3, [pc, #540]	; (80146ec <ip4_frag+0x270>)
 80144ce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80144d2:	4987      	ldr	r1, [pc, #540]	; (80146f0 <ip4_frag+0x274>)
 80144d4:	4887      	ldr	r0, [pc, #540]	; (80146f4 <ip4_frag+0x278>)
 80144d6:	f000 fc33 	bl	8014d40 <iprintf>
 80144da:	f06f 0305 	mvn.w	r3, #5
 80144de:	e101      	b.n	80146e4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80144e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144e2:	88db      	ldrh	r3, [r3, #6]
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7f5 f85e 	bl	80095a8 <lwip_htons>
 80144ec:	4603      	mov	r3, r0
 80144ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80144f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80144f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80144fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80144fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014500:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	891b      	ldrh	r3, [r3, #8]
 8014506:	3b14      	subs	r3, #20
 8014508:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801450c:	e0e0      	b.n	80146d0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801450e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014510:	00db      	lsls	r3, r3, #3
 8014512:	b29b      	uxth	r3, r3
 8014514:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014518:	4293      	cmp	r3, r2
 801451a:	bf28      	it	cs
 801451c:	4613      	movcs	r3, r2
 801451e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014520:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014524:	2114      	movs	r1, #20
 8014526:	200e      	movs	r0, #14
 8014528:	f7f6 f906 	bl	800a738 <pbuf_alloc>
 801452c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014530:	2b00      	cmp	r3, #0
 8014532:	f000 80d4 	beq.w	80146de <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014538:	895b      	ldrh	r3, [r3, #10]
 801453a:	2b13      	cmp	r3, #19
 801453c:	d806      	bhi.n	801454c <ip4_frag+0xd0>
 801453e:	4b6b      	ldr	r3, [pc, #428]	; (80146ec <ip4_frag+0x270>)
 8014540:	f240 3225 	movw	r2, #805	; 0x325
 8014544:	496c      	ldr	r1, [pc, #432]	; (80146f8 <ip4_frag+0x27c>)
 8014546:	486b      	ldr	r0, [pc, #428]	; (80146f4 <ip4_frag+0x278>)
 8014548:	f000 fbfa 	bl	8014d40 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801454e:	685b      	ldr	r3, [r3, #4]
 8014550:	2214      	movs	r2, #20
 8014552:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014554:	4618      	mov	r0, r3
 8014556:	f000 fbe0 	bl	8014d1a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455c:	685b      	ldr	r3, [r3, #4]
 801455e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014560:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014562:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014566:	e064      	b.n	8014632 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	895a      	ldrh	r2, [r3, #10]
 801456c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801456e:	1ad3      	subs	r3, r2, r3
 8014570:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	895b      	ldrh	r3, [r3, #10]
 8014576:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014578:	429a      	cmp	r2, r3
 801457a:	d906      	bls.n	801458a <ip4_frag+0x10e>
 801457c:	4b5b      	ldr	r3, [pc, #364]	; (80146ec <ip4_frag+0x270>)
 801457e:	f240 322d 	movw	r2, #813	; 0x32d
 8014582:	495e      	ldr	r1, [pc, #376]	; (80146fc <ip4_frag+0x280>)
 8014584:	485b      	ldr	r0, [pc, #364]	; (80146f4 <ip4_frag+0x278>)
 8014586:	f000 fbdb 	bl	8014d40 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801458a:	8bfa      	ldrh	r2, [r7, #30]
 801458c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014590:	4293      	cmp	r3, r2
 8014592:	bf28      	it	cs
 8014594:	4613      	movcs	r3, r2
 8014596:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801459a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d105      	bne.n	80145ae <ip4_frag+0x132>
        poff = 0;
 80145a2:	2300      	movs	r3, #0
 80145a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	60fb      	str	r3, [r7, #12]
        continue;
 80145ac:	e041      	b.n	8014632 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80145ae:	f7ff ff0d 	bl	80143cc <ip_frag_alloc_pbuf_custom_ref>
 80145b2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80145b4:	69bb      	ldr	r3, [r7, #24]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d103      	bne.n	80145c2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80145ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145bc:	f7f6 fb9c 	bl	800acf8 <pbuf_free>
        goto memerr;
 80145c0:	e08e      	b.n	80146e0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80145c2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80145c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80145ca:	4413      	add	r3, r2
 80145cc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80145d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80145d4:	9201      	str	r2, [sp, #4]
 80145d6:	9300      	str	r3, [sp, #0]
 80145d8:	4603      	mov	r3, r0
 80145da:	2241      	movs	r2, #65	; 0x41
 80145dc:	2000      	movs	r0, #0
 80145de:	f7f6 f9d1 	bl	800a984 <pbuf_alloced_custom>
 80145e2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d106      	bne.n	80145f8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80145ea:	69b8      	ldr	r0, [r7, #24]
 80145ec:	f7ff fef6 	bl	80143dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80145f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145f2:	f7f6 fb81 	bl	800acf8 <pbuf_free>
        goto memerr;
 80145f6:	e073      	b.n	80146e0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80145f8:	68f8      	ldr	r0, [r7, #12]
 80145fa:	f7f6 fc23 	bl	800ae44 <pbuf_ref>
      pcr->original = p;
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	68fa      	ldr	r2, [r7, #12]
 8014602:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014604:	69bb      	ldr	r3, [r7, #24]
 8014606:	4a3e      	ldr	r2, [pc, #248]	; (8014700 <ip4_frag+0x284>)
 8014608:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801460a:	6979      	ldr	r1, [r7, #20]
 801460c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801460e:	f7f6 fc41 	bl	800ae94 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014612:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014616:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801461a:	1ad3      	subs	r3, r2, r3
 801461c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014620:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014624:	2b00      	cmp	r3, #0
 8014626:	d004      	beq.n	8014632 <ip4_frag+0x1b6>
        poff = 0;
 8014628:	2300      	movs	r3, #0
 801462a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014632:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014636:	2b00      	cmp	r3, #0
 8014638:	d196      	bne.n	8014568 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801463a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801463c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014640:	4413      	add	r3, r2
 8014642:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014644:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801464c:	3b14      	subs	r3, #20
 801464e:	429a      	cmp	r2, r3
 8014650:	bfd4      	ite	le
 8014652:	2301      	movle	r3, #1
 8014654:	2300      	movgt	r3, #0
 8014656:	b2db      	uxtb	r3, r3
 8014658:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801465a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801465e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014662:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014664:	6a3b      	ldr	r3, [r7, #32]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d002      	beq.n	8014670 <ip4_frag+0x1f4>
 801466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801466c:	2b00      	cmp	r3, #0
 801466e:	d003      	beq.n	8014678 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014670:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014676:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014678:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801467a:	4618      	mov	r0, r3
 801467c:	f7f4 ff94 	bl	80095a8 <lwip_htons>
 8014680:	4603      	mov	r3, r0
 8014682:	461a      	mov	r2, r3
 8014684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014686:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014688:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801468a:	3314      	adds	r3, #20
 801468c:	b29b      	uxth	r3, r3
 801468e:	4618      	mov	r0, r3
 8014690:	f7f4 ff8a 	bl	80095a8 <lwip_htons>
 8014694:	4603      	mov	r3, r0
 8014696:	461a      	mov	r2, r3
 8014698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469e:	2200      	movs	r2, #0
 80146a0:	729a      	strb	r2, [r3, #10]
 80146a2:	2200      	movs	r2, #0
 80146a4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	695b      	ldr	r3, [r3, #20]
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146ae:	68b8      	ldr	r0, [r7, #8]
 80146b0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80146b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80146b4:	f7f6 fb20 	bl	800acf8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80146b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80146be:	1ad3      	subs	r3, r2, r3
 80146c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80146c4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80146c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80146ca:	4413      	add	r3, r2
 80146cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80146d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	f47f af1a 	bne.w	801450e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80146da:	2300      	movs	r3, #0
 80146dc:	e002      	b.n	80146e4 <ip4_frag+0x268>
      goto memerr;
 80146de:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80146e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3748      	adds	r7, #72	; 0x48
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	080192fc 	.word	0x080192fc
 80146f0:	080194d8 	.word	0x080194d8
 80146f4:	08019344 	.word	0x08019344
 80146f8:	080194f4 	.word	0x080194f4
 80146fc:	08019514 	.word	0x08019514
 8014700:	08014415 	.word	0x08014415

08014704 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b086      	sub	sp, #24
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801470e:	230e      	movs	r3, #14
 8014710:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	895b      	ldrh	r3, [r3, #10]
 8014716:	2b0e      	cmp	r3, #14
 8014718:	d96e      	bls.n	80147f8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	7bdb      	ldrb	r3, [r3, #15]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d106      	bne.n	8014730 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014722:	683b      	ldr	r3, [r7, #0]
 8014724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014728:	3301      	adds	r3, #1
 801472a:	b2da      	uxtb	r2, r3
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	685b      	ldr	r3, [r3, #4]
 8014734:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014736:	693b      	ldr	r3, [r7, #16]
 8014738:	7b1a      	ldrb	r2, [r3, #12]
 801473a:	7b5b      	ldrb	r3, [r3, #13]
 801473c:	021b      	lsls	r3, r3, #8
 801473e:	4313      	orrs	r3, r2
 8014740:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	f003 0301 	and.w	r3, r3, #1
 801474a:	2b00      	cmp	r3, #0
 801474c:	d023      	beq.n	8014796 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	2b01      	cmp	r3, #1
 8014754:	d10f      	bne.n	8014776 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	785b      	ldrb	r3, [r3, #1]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d11b      	bne.n	8014796 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801475e:	693b      	ldr	r3, [r7, #16]
 8014760:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014762:	2b5e      	cmp	r3, #94	; 0x5e
 8014764:	d117      	bne.n	8014796 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	7b5b      	ldrb	r3, [r3, #13]
 801476a:	f043 0310 	orr.w	r3, r3, #16
 801476e:	b2da      	uxtb	r2, r3
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	735a      	strb	r2, [r3, #13]
 8014774:	e00f      	b.n	8014796 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	2206      	movs	r2, #6
 801477a:	4928      	ldr	r1, [pc, #160]	; (801481c <ethernet_input+0x118>)
 801477c:	4618      	mov	r0, r3
 801477e:	f000 fabd 	bl	8014cfc <memcmp>
 8014782:	4603      	mov	r3, r0
 8014784:	2b00      	cmp	r3, #0
 8014786:	d106      	bne.n	8014796 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	7b5b      	ldrb	r3, [r3, #13]
 801478c:	f043 0308 	orr.w	r3, r3, #8
 8014790:	b2da      	uxtb	r2, r3
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014796:	89fb      	ldrh	r3, [r7, #14]
 8014798:	2b08      	cmp	r3, #8
 801479a:	d003      	beq.n	80147a4 <ethernet_input+0xa0>
 801479c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80147a0:	d014      	beq.n	80147cc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80147a2:	e032      	b.n	801480a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80147a4:	683b      	ldr	r3, [r7, #0]
 80147a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147aa:	f003 0308 	and.w	r3, r3, #8
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d024      	beq.n	80147fc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80147b2:	8afb      	ldrh	r3, [r7, #22]
 80147b4:	4619      	mov	r1, r3
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7f6 fa18 	bl	800abec <pbuf_remove_header>
 80147bc:	4603      	mov	r3, r0
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d11e      	bne.n	8014800 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80147c2:	6839      	ldr	r1, [r7, #0]
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f7fe fde7 	bl	8013398 <ip4_input>
      break;
 80147ca:	e013      	b.n	80147f4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147d2:	f003 0308 	and.w	r3, r3, #8
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d014      	beq.n	8014804 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80147da:	8afb      	ldrh	r3, [r7, #22]
 80147dc:	4619      	mov	r1, r3
 80147de:	6878      	ldr	r0, [r7, #4]
 80147e0:	f7f6 fa04 	bl	800abec <pbuf_remove_header>
 80147e4:	4603      	mov	r3, r0
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d10e      	bne.n	8014808 <ethernet_input+0x104>
        etharp_input(p, netif);
 80147ea:	6839      	ldr	r1, [r7, #0]
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f7fd ff87 	bl	8012700 <etharp_input>
      break;
 80147f2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80147f4:	2300      	movs	r3, #0
 80147f6:	e00c      	b.n	8014812 <ethernet_input+0x10e>
    goto free_and_return;
 80147f8:	bf00      	nop
 80147fa:	e006      	b.n	801480a <ethernet_input+0x106>
        goto free_and_return;
 80147fc:	bf00      	nop
 80147fe:	e004      	b.n	801480a <ethernet_input+0x106>
        goto free_and_return;
 8014800:	bf00      	nop
 8014802:	e002      	b.n	801480a <ethernet_input+0x106>
        goto free_and_return;
 8014804:	bf00      	nop
 8014806:	e000      	b.n	801480a <ethernet_input+0x106>
        goto free_and_return;
 8014808:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f7f6 fa74 	bl	800acf8 <pbuf_free>
  return ERR_OK;
 8014810:	2300      	movs	r3, #0
}
 8014812:	4618      	mov	r0, r3
 8014814:	3718      	adds	r7, #24
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	0801972c 	.word	0x0801972c

08014820 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014820:	b580      	push	{r7, lr}
 8014822:	b086      	sub	sp, #24
 8014824:	af00      	add	r7, sp, #0
 8014826:	60f8      	str	r0, [r7, #12]
 8014828:	60b9      	str	r1, [r7, #8]
 801482a:	607a      	str	r2, [r7, #4]
 801482c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801482e:	8c3b      	ldrh	r3, [r7, #32]
 8014830:	4618      	mov	r0, r3
 8014832:	f7f4 feb9 	bl	80095a8 <lwip_htons>
 8014836:	4603      	mov	r3, r0
 8014838:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801483a:	210e      	movs	r1, #14
 801483c:	68b8      	ldr	r0, [r7, #8]
 801483e:	f7f6 f9c5 	bl	800abcc <pbuf_add_header>
 8014842:	4603      	mov	r3, r0
 8014844:	2b00      	cmp	r3, #0
 8014846:	d125      	bne.n	8014894 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	8afa      	ldrh	r2, [r7, #22]
 8014852:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	2206      	movs	r2, #6
 8014858:	6839      	ldr	r1, [r7, #0]
 801485a:	4618      	mov	r0, r3
 801485c:	f000 fa5d 	bl	8014d1a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	3306      	adds	r3, #6
 8014864:	2206      	movs	r2, #6
 8014866:	6879      	ldr	r1, [r7, #4]
 8014868:	4618      	mov	r0, r3
 801486a:	f000 fa56 	bl	8014d1a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014874:	2b06      	cmp	r3, #6
 8014876:	d006      	beq.n	8014886 <ethernet_output+0x66>
 8014878:	4b0a      	ldr	r3, [pc, #40]	; (80148a4 <ethernet_output+0x84>)
 801487a:	f240 1233 	movw	r2, #307	; 0x133
 801487e:	490a      	ldr	r1, [pc, #40]	; (80148a8 <ethernet_output+0x88>)
 8014880:	480a      	ldr	r0, [pc, #40]	; (80148ac <ethernet_output+0x8c>)
 8014882:	f000 fa5d 	bl	8014d40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	699b      	ldr	r3, [r3, #24]
 801488a:	68b9      	ldr	r1, [r7, #8]
 801488c:	68f8      	ldr	r0, [r7, #12]
 801488e:	4798      	blx	r3
 8014890:	4603      	mov	r3, r0
 8014892:	e002      	b.n	801489a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014894:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014896:	f06f 0301 	mvn.w	r3, #1
}
 801489a:	4618      	mov	r0, r3
 801489c:	3718      	adds	r7, #24
 801489e:	46bd      	mov	sp, r7
 80148a0:	bd80      	pop	{r7, pc}
 80148a2:	bf00      	nop
 80148a4:	08019524 	.word	0x08019524
 80148a8:	0801955c 	.word	0x0801955c
 80148ac:	08019590 	.word	0x08019590

080148b0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b086      	sub	sp, #24
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	60bb      	str	r3, [r7, #8]
 80148be:	2304      	movs	r3, #4
 80148c0:	60fb      	str	r3, [r7, #12]
 80148c2:	2300      	movs	r3, #0
 80148c4:	613b      	str	r3, [r7, #16]
 80148c6:	2300      	movs	r3, #0
 80148c8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80148ca:	f107 0308 	add.w	r3, r7, #8
 80148ce:	2100      	movs	r1, #0
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7ef fc08 	bl	80040e6 <osMessageCreate>
 80148d6:	4602      	mov	r2, r0
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d102      	bne.n	80148ea <sys_mbox_new+0x3a>
    return ERR_MEM;
 80148e4:	f04f 33ff 	mov.w	r3, #4294967295
 80148e8:	e000      	b.n	80148ec <sys_mbox_new+0x3c>

  return ERR_OK;
 80148ea:	2300      	movs	r3, #0
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3718      	adds	r7, #24
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b082      	sub	sp, #8
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	4618      	mov	r0, r3
 8014902:	f7ef fccd 	bl	80042a0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	4618      	mov	r0, r3
 801490c:	f7ef fcde 	bl	80042cc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014910:	bf00      	nop
 8014912:	3708      	adds	r7, #8
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b084      	sub	sp, #16
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
 8014920:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	6839      	ldr	r1, [r7, #0]
 8014928:	2200      	movs	r2, #0
 801492a:	4618      	mov	r0, r3
 801492c:	f7ef fc04 	bl	8004138 <osMessagePut>
 8014930:	4603      	mov	r3, r0
 8014932:	2b00      	cmp	r3, #0
 8014934:	d102      	bne.n	801493c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014936:	2300      	movs	r3, #0
 8014938:	73fb      	strb	r3, [r7, #15]
 801493a:	e001      	b.n	8014940 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801493c:	23ff      	movs	r3, #255	; 0xff
 801493e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014944:	4618      	mov	r0, r3
 8014946:	3710      	adds	r7, #16
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b08c      	sub	sp, #48	; 0x30
 8014950:	af00      	add	r7, sp, #0
 8014952:	61f8      	str	r0, [r7, #28]
 8014954:	61b9      	str	r1, [r7, #24]
 8014956:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014958:	f7ef f9ed 	bl	8003d36 <osKernelSysTick>
 801495c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801495e:	697b      	ldr	r3, [r7, #20]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d017      	beq.n	8014994 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014964:	69fb      	ldr	r3, [r7, #28]
 8014966:	6819      	ldr	r1, [r3, #0]
 8014968:	f107 0320 	add.w	r3, r7, #32
 801496c:	697a      	ldr	r2, [r7, #20]
 801496e:	4618      	mov	r0, r3
 8014970:	f7ef fc22 	bl	80041b8 <osMessageGet>

    if(event.status == osEventMessage)
 8014974:	6a3b      	ldr	r3, [r7, #32]
 8014976:	2b10      	cmp	r3, #16
 8014978:	d109      	bne.n	801498e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	461a      	mov	r2, r3
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014982:	f7ef f9d8 	bl	8003d36 <osKernelSysTick>
 8014986:	4602      	mov	r2, r0
 8014988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801498a:	1ad3      	subs	r3, r2, r3
 801498c:	e019      	b.n	80149c2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801498e:	f04f 33ff 	mov.w	r3, #4294967295
 8014992:	e016      	b.n	80149c2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014994:	69fb      	ldr	r3, [r7, #28]
 8014996:	6819      	ldr	r1, [r3, #0]
 8014998:	463b      	mov	r3, r7
 801499a:	f04f 32ff 	mov.w	r2, #4294967295
 801499e:	4618      	mov	r0, r3
 80149a0:	f7ef fc0a 	bl	80041b8 <osMessageGet>
 80149a4:	f107 0320 	add.w	r3, r7, #32
 80149a8:	463a      	mov	r2, r7
 80149aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80149ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80149b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b2:	461a      	mov	r2, r3
 80149b4:	69bb      	ldr	r3, [r7, #24]
 80149b6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80149b8:	f7ef f9bd 	bl	8003d36 <osKernelSysTick>
 80149bc:	4602      	mov	r2, r0
 80149be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80149c2:	4618      	mov	r0, r3
 80149c4:	3730      	adds	r7, #48	; 0x30
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}

080149ca <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80149ca:	b580      	push	{r7, lr}
 80149cc:	b086      	sub	sp, #24
 80149ce:	af00      	add	r7, sp, #0
 80149d0:	6078      	str	r0, [r7, #4]
 80149d2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6819      	ldr	r1, [r3, #0]
 80149d8:	f107 030c 	add.w	r3, r7, #12
 80149dc:	2200      	movs	r2, #0
 80149de:	4618      	mov	r0, r3
 80149e0:	f7ef fbea 	bl	80041b8 <osMessageGet>

  if(event.status == osEventMessage)
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	2b10      	cmp	r3, #16
 80149e8:	d105      	bne.n	80149f6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	461a      	mov	r2, r3
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80149f2:	2300      	movs	r3, #0
 80149f4:	e001      	b.n	80149fa <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80149f6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3718      	adds	r7, #24
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}

08014a02 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014a02:	b480      	push	{r7}
 8014a04:	b083      	sub	sp, #12
 8014a06:	af00      	add	r7, sp, #0
 8014a08:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d101      	bne.n	8014a16 <sys_mbox_valid+0x14>
    return 0;
 8014a12:	2300      	movs	r3, #0
 8014a14:	e000      	b.n	8014a18 <sys_mbox_valid+0x16>
  else
    return 1;
 8014a16:	2301      	movs	r3, #1
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	370c      	adds	r7, #12
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr

08014a24 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8014a24:	b480      	push	{r7}
 8014a26:	b083      	sub	sp, #12
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2200      	movs	r2, #0
 8014a30:	601a      	str	r2, [r3, #0]
}
 8014a32:	bf00      	nop
 8014a34:	370c      	adds	r7, #12
 8014a36:	46bd      	mov	sp, r7
 8014a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3c:	4770      	bx	lr

08014a3e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014a3e:	b580      	push	{r7, lr}
 8014a40:	b084      	sub	sp, #16
 8014a42:	af00      	add	r7, sp, #0
 8014a44:	6078      	str	r0, [r7, #4]
 8014a46:	460b      	mov	r3, r1
 8014a48:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	60bb      	str	r3, [r7, #8]
 8014a4e:	2300      	movs	r3, #0
 8014a50:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8014a52:	f107 0308 	add.w	r3, r7, #8
 8014a56:	2101      	movs	r1, #1
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7ef fa79 	bl	8003f50 <osSemaphoreCreate>
 8014a5e:	4602      	mov	r2, r0
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d102      	bne.n	8014a72 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a70:	e009      	b.n	8014a86 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8014a72:	78fb      	ldrb	r3, [r7, #3]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d105      	bne.n	8014a84 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	2100      	movs	r1, #0
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7ef fa9a 	bl	8003fb8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014a84:	2300      	movs	r3, #0
}
 8014a86:	4618      	mov	r0, r3
 8014a88:	3710      	adds	r7, #16
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}

08014a8e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014a8e:	b580      	push	{r7, lr}
 8014a90:	b084      	sub	sp, #16
 8014a92:	af00      	add	r7, sp, #0
 8014a94:	6078      	str	r0, [r7, #4]
 8014a96:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8014a98:	f7ef f94d 	bl	8003d36 <osKernelSysTick>
 8014a9c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d011      	beq.n	8014ac8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	6839      	ldr	r1, [r7, #0]
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7ef fa84 	bl	8003fb8 <osSemaphoreWait>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d105      	bne.n	8014ac2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8014ab6:	f7ef f93e 	bl	8003d36 <osKernelSysTick>
 8014aba:	4602      	mov	r2, r0
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	1ad3      	subs	r3, r2, r3
 8014ac0:	e012      	b.n	8014ae8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ac6:	e00f      	b.n	8014ae8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014ac8:	bf00      	nop
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	f04f 31ff 	mov.w	r1, #4294967295
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7ef fa70 	bl	8003fb8 <osSemaphoreWait>
 8014ad8:	4603      	mov	r3, r0
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d1f5      	bne.n	8014aca <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8014ade:	f7ef f92a 	bl	8003d36 <osKernelSysTick>
 8014ae2:	4602      	mov	r2, r0
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3710      	adds	r7, #16
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}

08014af0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	4618      	mov	r0, r3
 8014afe:	f7ef faa9 	bl	8004054 <osSemaphoreRelease>
}
 8014b02:	bf00      	nop
 8014b04:	3708      	adds	r7, #8
 8014b06:	46bd      	mov	sp, r7
 8014b08:	bd80      	pop	{r7, pc}

08014b0a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8014b0a:	b580      	push	{r7, lr}
 8014b0c:	b082      	sub	sp, #8
 8014b0e:	af00      	add	r7, sp, #0
 8014b10:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	4618      	mov	r0, r3
 8014b18:	f7ef fad2 	bl	80040c0 <osSemaphoreDelete>
}
 8014b1c:	bf00      	nop
 8014b1e:	3708      	adds	r7, #8
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8014b24:	b480      	push	{r7}
 8014b26:	b083      	sub	sp, #12
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d101      	bne.n	8014b38 <sys_sem_valid+0x14>
    return 0;
 8014b34:	2300      	movs	r3, #0
 8014b36:	e000      	b.n	8014b3a <sys_sem_valid+0x16>
  else
    return 1;
 8014b38:	2301      	movs	r3, #1
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	370c      	adds	r7, #12
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b44:	4770      	bx	lr

08014b46 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8014b46:	b480      	push	{r7}
 8014b48:	b083      	sub	sp, #12
 8014b4a:	af00      	add	r7, sp, #0
 8014b4c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	2200      	movs	r2, #0
 8014b52:	601a      	str	r2, [r3, #0]
}
 8014b54:	bf00      	nop
 8014b56:	370c      	adds	r7, #12
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5e:	4770      	bx	lr

08014b60 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014b64:	4803      	ldr	r0, [pc, #12]	; (8014b74 <sys_init+0x14>)
 8014b66:	f7ef f956 	bl	8003e16 <osMutexCreate>
 8014b6a:	4602      	mov	r2, r0
 8014b6c:	4b02      	ldr	r3, [pc, #8]	; (8014b78 <sys_init+0x18>)
 8014b6e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014b70:	bf00      	nop
 8014b72:	bd80      	pop	{r7, pc}
 8014b74:	0801973c 	.word	0x0801973c
 8014b78:	2000e64c 	.word	0x2000e64c

08014b7c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b084      	sub	sp, #16
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014b84:	2300      	movs	r3, #0
 8014b86:	60bb      	str	r3, [r7, #8]
 8014b88:	2300      	movs	r3, #0
 8014b8a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014b8c:	f107 0308 	add.w	r3, r7, #8
 8014b90:	4618      	mov	r0, r3
 8014b92:	f7ef f940 	bl	8003e16 <osMutexCreate>
 8014b96:	4602      	mov	r2, r0
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d102      	bne.n	8014baa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ba8:	e000      	b.n	8014bac <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014baa:	2300      	movs	r3, #0
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3710      	adds	r7, #16
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b082      	sub	sp, #8
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7ef f93f 	bl	8003e48 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014bca:	bf00      	nop
 8014bcc:	3708      	adds	r7, #8
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014bd2:	b580      	push	{r7, lr}
 8014bd4:	b082      	sub	sp, #8
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7ef f980 	bl	8003ee4 <osMutexRelease>
}
 8014be4:	bf00      	nop
 8014be6:	3708      	adds	r7, #8
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}

08014bec <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b08c      	sub	sp, #48	; 0x30
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	60f8      	str	r0, [r7, #12]
 8014bf4:	60b9      	str	r1, [r7, #8]
 8014bf6:	607a      	str	r2, [r7, #4]
 8014bf8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014bfa:	f107 0314 	add.w	r3, r7, #20
 8014bfe:	2200      	movs	r2, #0
 8014c00:	601a      	str	r2, [r3, #0]
 8014c02:	605a      	str	r2, [r3, #4]
 8014c04:	609a      	str	r2, [r3, #8]
 8014c06:	60da      	str	r2, [r3, #12]
 8014c08:	611a      	str	r2, [r3, #16]
 8014c0a:	615a      	str	r2, [r3, #20]
 8014c0c:	619a      	str	r2, [r3, #24]
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	617b      	str	r3, [r7, #20]
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	61bb      	str	r3, [r7, #24]
 8014c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c18:	b21b      	sxth	r3, r3
 8014c1a:	83bb      	strh	r3, [r7, #28]
 8014c1c:	683b      	ldr	r3, [r7, #0]
 8014c1e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014c20:	f107 0314 	add.w	r3, r7, #20
 8014c24:	6879      	ldr	r1, [r7, #4]
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7ef f895 	bl	8003d56 <osThreadCreate>
 8014c2c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3730      	adds	r7, #48	; 0x30
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
	...

08014c38 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014c3c:	4b04      	ldr	r3, [pc, #16]	; (8014c50 <sys_arch_protect+0x18>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	f04f 31ff 	mov.w	r1, #4294967295
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7ef f8ff 	bl	8003e48 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014c4a:	2301      	movs	r3, #1
}
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	bd80      	pop	{r7, pc}
 8014c50:	2000e64c 	.word	0x2000e64c

08014c54 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b082      	sub	sp, #8
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014c5c:	4b04      	ldr	r3, [pc, #16]	; (8014c70 <sys_arch_unprotect+0x1c>)
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7ef f93f 	bl	8003ee4 <osMutexRelease>
}
 8014c66:	bf00      	nop
 8014c68:	3708      	adds	r7, #8
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd80      	pop	{r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	2000e64c 	.word	0x2000e64c

08014c74 <__libc_init_array>:
 8014c74:	b570      	push	{r4, r5, r6, lr}
 8014c76:	4e0d      	ldr	r6, [pc, #52]	; (8014cac <__libc_init_array+0x38>)
 8014c78:	4c0d      	ldr	r4, [pc, #52]	; (8014cb0 <__libc_init_array+0x3c>)
 8014c7a:	1ba4      	subs	r4, r4, r6
 8014c7c:	10a4      	asrs	r4, r4, #2
 8014c7e:	2500      	movs	r5, #0
 8014c80:	42a5      	cmp	r5, r4
 8014c82:	d109      	bne.n	8014c98 <__libc_init_array+0x24>
 8014c84:	4e0b      	ldr	r6, [pc, #44]	; (8014cb4 <__libc_init_array+0x40>)
 8014c86:	4c0c      	ldr	r4, [pc, #48]	; (8014cb8 <__libc_init_array+0x44>)
 8014c88:	f000 ff88 	bl	8015b9c <_init>
 8014c8c:	1ba4      	subs	r4, r4, r6
 8014c8e:	10a4      	asrs	r4, r4, #2
 8014c90:	2500      	movs	r5, #0
 8014c92:	42a5      	cmp	r5, r4
 8014c94:	d105      	bne.n	8014ca2 <__libc_init_array+0x2e>
 8014c96:	bd70      	pop	{r4, r5, r6, pc}
 8014c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014c9c:	4798      	blx	r3
 8014c9e:	3501      	adds	r5, #1
 8014ca0:	e7ee      	b.n	8014c80 <__libc_init_array+0xc>
 8014ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014ca6:	4798      	blx	r3
 8014ca8:	3501      	adds	r5, #1
 8014caa:	e7f2      	b.n	8014c92 <__libc_init_array+0x1e>
 8014cac:	080198f0 	.word	0x080198f0
 8014cb0:	080198f0 	.word	0x080198f0
 8014cb4:	080198f0 	.word	0x080198f0
 8014cb8:	080198f4 	.word	0x080198f4

08014cbc <__locale_ctype_ptr>:
 8014cbc:	4b04      	ldr	r3, [pc, #16]	; (8014cd0 <__locale_ctype_ptr+0x14>)
 8014cbe:	4a05      	ldr	r2, [pc, #20]	; (8014cd4 <__locale_ctype_ptr+0x18>)
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	6a1b      	ldr	r3, [r3, #32]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	bf08      	it	eq
 8014cc8:	4613      	moveq	r3, r2
 8014cca:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8014cce:	4770      	bx	lr
 8014cd0:	2000001c 	.word	0x2000001c
 8014cd4:	20000080 	.word	0x20000080

08014cd8 <__ascii_mbtowc>:
 8014cd8:	b082      	sub	sp, #8
 8014cda:	b901      	cbnz	r1, 8014cde <__ascii_mbtowc+0x6>
 8014cdc:	a901      	add	r1, sp, #4
 8014cde:	b142      	cbz	r2, 8014cf2 <__ascii_mbtowc+0x1a>
 8014ce0:	b14b      	cbz	r3, 8014cf6 <__ascii_mbtowc+0x1e>
 8014ce2:	7813      	ldrb	r3, [r2, #0]
 8014ce4:	600b      	str	r3, [r1, #0]
 8014ce6:	7812      	ldrb	r2, [r2, #0]
 8014ce8:	1c10      	adds	r0, r2, #0
 8014cea:	bf18      	it	ne
 8014cec:	2001      	movne	r0, #1
 8014cee:	b002      	add	sp, #8
 8014cf0:	4770      	bx	lr
 8014cf2:	4610      	mov	r0, r2
 8014cf4:	e7fb      	b.n	8014cee <__ascii_mbtowc+0x16>
 8014cf6:	f06f 0001 	mvn.w	r0, #1
 8014cfa:	e7f8      	b.n	8014cee <__ascii_mbtowc+0x16>

08014cfc <memcmp>:
 8014cfc:	b530      	push	{r4, r5, lr}
 8014cfe:	2400      	movs	r4, #0
 8014d00:	42a2      	cmp	r2, r4
 8014d02:	d101      	bne.n	8014d08 <memcmp+0xc>
 8014d04:	2000      	movs	r0, #0
 8014d06:	e007      	b.n	8014d18 <memcmp+0x1c>
 8014d08:	5d03      	ldrb	r3, [r0, r4]
 8014d0a:	3401      	adds	r4, #1
 8014d0c:	190d      	adds	r5, r1, r4
 8014d0e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014d12:	42ab      	cmp	r3, r5
 8014d14:	d0f4      	beq.n	8014d00 <memcmp+0x4>
 8014d16:	1b58      	subs	r0, r3, r5
 8014d18:	bd30      	pop	{r4, r5, pc}

08014d1a <memcpy>:
 8014d1a:	b510      	push	{r4, lr}
 8014d1c:	1e43      	subs	r3, r0, #1
 8014d1e:	440a      	add	r2, r1
 8014d20:	4291      	cmp	r1, r2
 8014d22:	d100      	bne.n	8014d26 <memcpy+0xc>
 8014d24:	bd10      	pop	{r4, pc}
 8014d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d2e:	e7f7      	b.n	8014d20 <memcpy+0x6>

08014d30 <memset>:
 8014d30:	4402      	add	r2, r0
 8014d32:	4603      	mov	r3, r0
 8014d34:	4293      	cmp	r3, r2
 8014d36:	d100      	bne.n	8014d3a <memset+0xa>
 8014d38:	4770      	bx	lr
 8014d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8014d3e:	e7f9      	b.n	8014d34 <memset+0x4>

08014d40 <iprintf>:
 8014d40:	b40f      	push	{r0, r1, r2, r3}
 8014d42:	4b0a      	ldr	r3, [pc, #40]	; (8014d6c <iprintf+0x2c>)
 8014d44:	b513      	push	{r0, r1, r4, lr}
 8014d46:	681c      	ldr	r4, [r3, #0]
 8014d48:	b124      	cbz	r4, 8014d54 <iprintf+0x14>
 8014d4a:	69a3      	ldr	r3, [r4, #24]
 8014d4c:	b913      	cbnz	r3, 8014d54 <iprintf+0x14>
 8014d4e:	4620      	mov	r0, r4
 8014d50:	f000 f890 	bl	8014e74 <__sinit>
 8014d54:	ab05      	add	r3, sp, #20
 8014d56:	9a04      	ldr	r2, [sp, #16]
 8014d58:	68a1      	ldr	r1, [r4, #8]
 8014d5a:	9301      	str	r3, [sp, #4]
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f000 f9ed 	bl	801513c <_vfiprintf_r>
 8014d62:	b002      	add	sp, #8
 8014d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d68:	b004      	add	sp, #16
 8014d6a:	4770      	bx	lr
 8014d6c:	2000001c 	.word	0x2000001c

08014d70 <rand>:
 8014d70:	b538      	push	{r3, r4, r5, lr}
 8014d72:	4b13      	ldr	r3, [pc, #76]	; (8014dc0 <rand+0x50>)
 8014d74:	681c      	ldr	r4, [r3, #0]
 8014d76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014d78:	b97b      	cbnz	r3, 8014d9a <rand+0x2a>
 8014d7a:	2018      	movs	r0, #24
 8014d7c:	f000 f904 	bl	8014f88 <malloc>
 8014d80:	4a10      	ldr	r2, [pc, #64]	; (8014dc4 <rand+0x54>)
 8014d82:	4b11      	ldr	r3, [pc, #68]	; (8014dc8 <rand+0x58>)
 8014d84:	63a0      	str	r0, [r4, #56]	; 0x38
 8014d86:	e9c0 2300 	strd	r2, r3, [r0]
 8014d8a:	4b10      	ldr	r3, [pc, #64]	; (8014dcc <rand+0x5c>)
 8014d8c:	6083      	str	r3, [r0, #8]
 8014d8e:	230b      	movs	r3, #11
 8014d90:	8183      	strh	r3, [r0, #12]
 8014d92:	2201      	movs	r2, #1
 8014d94:	2300      	movs	r3, #0
 8014d96:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014d9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014d9c:	480c      	ldr	r0, [pc, #48]	; (8014dd0 <rand+0x60>)
 8014d9e:	690a      	ldr	r2, [r1, #16]
 8014da0:	694b      	ldr	r3, [r1, #20]
 8014da2:	4c0c      	ldr	r4, [pc, #48]	; (8014dd4 <rand+0x64>)
 8014da4:	4350      	muls	r0, r2
 8014da6:	fb04 0003 	mla	r0, r4, r3, r0
 8014daa:	fba2 2304 	umull	r2, r3, r2, r4
 8014dae:	4403      	add	r3, r0
 8014db0:	1c54      	adds	r4, r2, #1
 8014db2:	f143 0500 	adc.w	r5, r3, #0
 8014db6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8014dba:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8014dbe:	bd38      	pop	{r3, r4, r5, pc}
 8014dc0:	2000001c 	.word	0x2000001c
 8014dc4:	abcd330e 	.word	0xabcd330e
 8014dc8:	e66d1234 	.word	0xe66d1234
 8014dcc:	0005deec 	.word	0x0005deec
 8014dd0:	5851f42d 	.word	0x5851f42d
 8014dd4:	4c957f2d 	.word	0x4c957f2d

08014dd8 <__ascii_wctomb>:
 8014dd8:	b149      	cbz	r1, 8014dee <__ascii_wctomb+0x16>
 8014dda:	2aff      	cmp	r2, #255	; 0xff
 8014ddc:	bf85      	ittet	hi
 8014dde:	238a      	movhi	r3, #138	; 0x8a
 8014de0:	6003      	strhi	r3, [r0, #0]
 8014de2:	700a      	strbls	r2, [r1, #0]
 8014de4:	f04f 30ff 	movhi.w	r0, #4294967295
 8014de8:	bf98      	it	ls
 8014dea:	2001      	movls	r0, #1
 8014dec:	4770      	bx	lr
 8014dee:	4608      	mov	r0, r1
 8014df0:	4770      	bx	lr
	...

08014df4 <std>:
 8014df4:	2300      	movs	r3, #0
 8014df6:	b510      	push	{r4, lr}
 8014df8:	4604      	mov	r4, r0
 8014dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8014dfe:	6083      	str	r3, [r0, #8]
 8014e00:	8181      	strh	r1, [r0, #12]
 8014e02:	6643      	str	r3, [r0, #100]	; 0x64
 8014e04:	81c2      	strh	r2, [r0, #14]
 8014e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e0a:	6183      	str	r3, [r0, #24]
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	2208      	movs	r2, #8
 8014e10:	305c      	adds	r0, #92	; 0x5c
 8014e12:	f7ff ff8d 	bl	8014d30 <memset>
 8014e16:	4b05      	ldr	r3, [pc, #20]	; (8014e2c <std+0x38>)
 8014e18:	6263      	str	r3, [r4, #36]	; 0x24
 8014e1a:	4b05      	ldr	r3, [pc, #20]	; (8014e30 <std+0x3c>)
 8014e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e1e:	4b05      	ldr	r3, [pc, #20]	; (8014e34 <std+0x40>)
 8014e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e22:	4b05      	ldr	r3, [pc, #20]	; (8014e38 <std+0x44>)
 8014e24:	6224      	str	r4, [r4, #32]
 8014e26:	6323      	str	r3, [r4, #48]	; 0x30
 8014e28:	bd10      	pop	{r4, pc}
 8014e2a:	bf00      	nop
 8014e2c:	08015699 	.word	0x08015699
 8014e30:	080156bb 	.word	0x080156bb
 8014e34:	080156f3 	.word	0x080156f3
 8014e38:	08015717 	.word	0x08015717

08014e3c <_cleanup_r>:
 8014e3c:	4901      	ldr	r1, [pc, #4]	; (8014e44 <_cleanup_r+0x8>)
 8014e3e:	f000 b885 	b.w	8014f4c <_fwalk_reent>
 8014e42:	bf00      	nop
 8014e44:	080159f1 	.word	0x080159f1

08014e48 <__sfmoreglue>:
 8014e48:	b570      	push	{r4, r5, r6, lr}
 8014e4a:	1e4a      	subs	r2, r1, #1
 8014e4c:	2568      	movs	r5, #104	; 0x68
 8014e4e:	4355      	muls	r5, r2
 8014e50:	460e      	mov	r6, r1
 8014e52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e56:	f000 f8ed 	bl	8015034 <_malloc_r>
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	b140      	cbz	r0, 8014e70 <__sfmoreglue+0x28>
 8014e5e:	2100      	movs	r1, #0
 8014e60:	e9c0 1600 	strd	r1, r6, [r0]
 8014e64:	300c      	adds	r0, #12
 8014e66:	60a0      	str	r0, [r4, #8]
 8014e68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e6c:	f7ff ff60 	bl	8014d30 <memset>
 8014e70:	4620      	mov	r0, r4
 8014e72:	bd70      	pop	{r4, r5, r6, pc}

08014e74 <__sinit>:
 8014e74:	6983      	ldr	r3, [r0, #24]
 8014e76:	b510      	push	{r4, lr}
 8014e78:	4604      	mov	r4, r0
 8014e7a:	bb33      	cbnz	r3, 8014eca <__sinit+0x56>
 8014e7c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014e80:	6503      	str	r3, [r0, #80]	; 0x50
 8014e82:	4b12      	ldr	r3, [pc, #72]	; (8014ecc <__sinit+0x58>)
 8014e84:	4a12      	ldr	r2, [pc, #72]	; (8014ed0 <__sinit+0x5c>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	6282      	str	r2, [r0, #40]	; 0x28
 8014e8a:	4298      	cmp	r0, r3
 8014e8c:	bf04      	itt	eq
 8014e8e:	2301      	moveq	r3, #1
 8014e90:	6183      	streq	r3, [r0, #24]
 8014e92:	f000 f81f 	bl	8014ed4 <__sfp>
 8014e96:	6060      	str	r0, [r4, #4]
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f000 f81b 	bl	8014ed4 <__sfp>
 8014e9e:	60a0      	str	r0, [r4, #8]
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	f000 f817 	bl	8014ed4 <__sfp>
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	60e0      	str	r0, [r4, #12]
 8014eaa:	2104      	movs	r1, #4
 8014eac:	6860      	ldr	r0, [r4, #4]
 8014eae:	f7ff ffa1 	bl	8014df4 <std>
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	2109      	movs	r1, #9
 8014eb6:	68a0      	ldr	r0, [r4, #8]
 8014eb8:	f7ff ff9c 	bl	8014df4 <std>
 8014ebc:	2202      	movs	r2, #2
 8014ebe:	2112      	movs	r1, #18
 8014ec0:	68e0      	ldr	r0, [r4, #12]
 8014ec2:	f7ff ff97 	bl	8014df4 <std>
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	61a3      	str	r3, [r4, #24]
 8014eca:	bd10      	pop	{r4, pc}
 8014ecc:	08019744 	.word	0x08019744
 8014ed0:	08014e3d 	.word	0x08014e3d

08014ed4 <__sfp>:
 8014ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ed6:	4b1b      	ldr	r3, [pc, #108]	; (8014f44 <__sfp+0x70>)
 8014ed8:	681e      	ldr	r6, [r3, #0]
 8014eda:	69b3      	ldr	r3, [r6, #24]
 8014edc:	4607      	mov	r7, r0
 8014ede:	b913      	cbnz	r3, 8014ee6 <__sfp+0x12>
 8014ee0:	4630      	mov	r0, r6
 8014ee2:	f7ff ffc7 	bl	8014e74 <__sinit>
 8014ee6:	3648      	adds	r6, #72	; 0x48
 8014ee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014eec:	3b01      	subs	r3, #1
 8014eee:	d503      	bpl.n	8014ef8 <__sfp+0x24>
 8014ef0:	6833      	ldr	r3, [r6, #0]
 8014ef2:	b133      	cbz	r3, 8014f02 <__sfp+0x2e>
 8014ef4:	6836      	ldr	r6, [r6, #0]
 8014ef6:	e7f7      	b.n	8014ee8 <__sfp+0x14>
 8014ef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014efc:	b16d      	cbz	r5, 8014f1a <__sfp+0x46>
 8014efe:	3468      	adds	r4, #104	; 0x68
 8014f00:	e7f4      	b.n	8014eec <__sfp+0x18>
 8014f02:	2104      	movs	r1, #4
 8014f04:	4638      	mov	r0, r7
 8014f06:	f7ff ff9f 	bl	8014e48 <__sfmoreglue>
 8014f0a:	6030      	str	r0, [r6, #0]
 8014f0c:	2800      	cmp	r0, #0
 8014f0e:	d1f1      	bne.n	8014ef4 <__sfp+0x20>
 8014f10:	230c      	movs	r3, #12
 8014f12:	603b      	str	r3, [r7, #0]
 8014f14:	4604      	mov	r4, r0
 8014f16:	4620      	mov	r0, r4
 8014f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f1a:	4b0b      	ldr	r3, [pc, #44]	; (8014f48 <__sfp+0x74>)
 8014f1c:	6665      	str	r5, [r4, #100]	; 0x64
 8014f1e:	e9c4 5500 	strd	r5, r5, [r4]
 8014f22:	60a5      	str	r5, [r4, #8]
 8014f24:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014f28:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014f2c:	2208      	movs	r2, #8
 8014f2e:	4629      	mov	r1, r5
 8014f30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f34:	f7ff fefc 	bl	8014d30 <memset>
 8014f38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f40:	e7e9      	b.n	8014f16 <__sfp+0x42>
 8014f42:	bf00      	nop
 8014f44:	08019744 	.word	0x08019744
 8014f48:	ffff0001 	.word	0xffff0001

08014f4c <_fwalk_reent>:
 8014f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f50:	4680      	mov	r8, r0
 8014f52:	4689      	mov	r9, r1
 8014f54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014f58:	2600      	movs	r6, #0
 8014f5a:	b914      	cbnz	r4, 8014f62 <_fwalk_reent+0x16>
 8014f5c:	4630      	mov	r0, r6
 8014f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f62:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014f66:	3f01      	subs	r7, #1
 8014f68:	d501      	bpl.n	8014f6e <_fwalk_reent+0x22>
 8014f6a:	6824      	ldr	r4, [r4, #0]
 8014f6c:	e7f5      	b.n	8014f5a <_fwalk_reent+0xe>
 8014f6e:	89ab      	ldrh	r3, [r5, #12]
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d907      	bls.n	8014f84 <_fwalk_reent+0x38>
 8014f74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f78:	3301      	adds	r3, #1
 8014f7a:	d003      	beq.n	8014f84 <_fwalk_reent+0x38>
 8014f7c:	4629      	mov	r1, r5
 8014f7e:	4640      	mov	r0, r8
 8014f80:	47c8      	blx	r9
 8014f82:	4306      	orrs	r6, r0
 8014f84:	3568      	adds	r5, #104	; 0x68
 8014f86:	e7ee      	b.n	8014f66 <_fwalk_reent+0x1a>

08014f88 <malloc>:
 8014f88:	4b02      	ldr	r3, [pc, #8]	; (8014f94 <malloc+0xc>)
 8014f8a:	4601      	mov	r1, r0
 8014f8c:	6818      	ldr	r0, [r3, #0]
 8014f8e:	f000 b851 	b.w	8015034 <_malloc_r>
 8014f92:	bf00      	nop
 8014f94:	2000001c 	.word	0x2000001c

08014f98 <_free_r>:
 8014f98:	b538      	push	{r3, r4, r5, lr}
 8014f9a:	4605      	mov	r5, r0
 8014f9c:	2900      	cmp	r1, #0
 8014f9e:	d045      	beq.n	801502c <_free_r+0x94>
 8014fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014fa4:	1f0c      	subs	r4, r1, #4
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	bfb8      	it	lt
 8014faa:	18e4      	addlt	r4, r4, r3
 8014fac:	f000 fdc0 	bl	8015b30 <__malloc_lock>
 8014fb0:	4a1f      	ldr	r2, [pc, #124]	; (8015030 <_free_r+0x98>)
 8014fb2:	6813      	ldr	r3, [r2, #0]
 8014fb4:	4610      	mov	r0, r2
 8014fb6:	b933      	cbnz	r3, 8014fc6 <_free_r+0x2e>
 8014fb8:	6063      	str	r3, [r4, #4]
 8014fba:	6014      	str	r4, [r2, #0]
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fc2:	f000 bdb6 	b.w	8015b32 <__malloc_unlock>
 8014fc6:	42a3      	cmp	r3, r4
 8014fc8:	d90c      	bls.n	8014fe4 <_free_r+0x4c>
 8014fca:	6821      	ldr	r1, [r4, #0]
 8014fcc:	1862      	adds	r2, r4, r1
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	bf04      	itt	eq
 8014fd2:	681a      	ldreq	r2, [r3, #0]
 8014fd4:	685b      	ldreq	r3, [r3, #4]
 8014fd6:	6063      	str	r3, [r4, #4]
 8014fd8:	bf04      	itt	eq
 8014fda:	1852      	addeq	r2, r2, r1
 8014fdc:	6022      	streq	r2, [r4, #0]
 8014fde:	6004      	str	r4, [r0, #0]
 8014fe0:	e7ec      	b.n	8014fbc <_free_r+0x24>
 8014fe2:	4613      	mov	r3, r2
 8014fe4:	685a      	ldr	r2, [r3, #4]
 8014fe6:	b10a      	cbz	r2, 8014fec <_free_r+0x54>
 8014fe8:	42a2      	cmp	r2, r4
 8014fea:	d9fa      	bls.n	8014fe2 <_free_r+0x4a>
 8014fec:	6819      	ldr	r1, [r3, #0]
 8014fee:	1858      	adds	r0, r3, r1
 8014ff0:	42a0      	cmp	r0, r4
 8014ff2:	d10b      	bne.n	801500c <_free_r+0x74>
 8014ff4:	6820      	ldr	r0, [r4, #0]
 8014ff6:	4401      	add	r1, r0
 8014ff8:	1858      	adds	r0, r3, r1
 8014ffa:	4282      	cmp	r2, r0
 8014ffc:	6019      	str	r1, [r3, #0]
 8014ffe:	d1dd      	bne.n	8014fbc <_free_r+0x24>
 8015000:	6810      	ldr	r0, [r2, #0]
 8015002:	6852      	ldr	r2, [r2, #4]
 8015004:	605a      	str	r2, [r3, #4]
 8015006:	4401      	add	r1, r0
 8015008:	6019      	str	r1, [r3, #0]
 801500a:	e7d7      	b.n	8014fbc <_free_r+0x24>
 801500c:	d902      	bls.n	8015014 <_free_r+0x7c>
 801500e:	230c      	movs	r3, #12
 8015010:	602b      	str	r3, [r5, #0]
 8015012:	e7d3      	b.n	8014fbc <_free_r+0x24>
 8015014:	6820      	ldr	r0, [r4, #0]
 8015016:	1821      	adds	r1, r4, r0
 8015018:	428a      	cmp	r2, r1
 801501a:	bf04      	itt	eq
 801501c:	6811      	ldreq	r1, [r2, #0]
 801501e:	6852      	ldreq	r2, [r2, #4]
 8015020:	6062      	str	r2, [r4, #4]
 8015022:	bf04      	itt	eq
 8015024:	1809      	addeq	r1, r1, r0
 8015026:	6021      	streq	r1, [r4, #0]
 8015028:	605c      	str	r4, [r3, #4]
 801502a:	e7c7      	b.n	8014fbc <_free_r+0x24>
 801502c:	bd38      	pop	{r3, r4, r5, pc}
 801502e:	bf00      	nop
 8015030:	20004388 	.word	0x20004388

08015034 <_malloc_r>:
 8015034:	b570      	push	{r4, r5, r6, lr}
 8015036:	1ccd      	adds	r5, r1, #3
 8015038:	f025 0503 	bic.w	r5, r5, #3
 801503c:	3508      	adds	r5, #8
 801503e:	2d0c      	cmp	r5, #12
 8015040:	bf38      	it	cc
 8015042:	250c      	movcc	r5, #12
 8015044:	2d00      	cmp	r5, #0
 8015046:	4606      	mov	r6, r0
 8015048:	db01      	blt.n	801504e <_malloc_r+0x1a>
 801504a:	42a9      	cmp	r1, r5
 801504c:	d903      	bls.n	8015056 <_malloc_r+0x22>
 801504e:	230c      	movs	r3, #12
 8015050:	6033      	str	r3, [r6, #0]
 8015052:	2000      	movs	r0, #0
 8015054:	bd70      	pop	{r4, r5, r6, pc}
 8015056:	f000 fd6b 	bl	8015b30 <__malloc_lock>
 801505a:	4a21      	ldr	r2, [pc, #132]	; (80150e0 <_malloc_r+0xac>)
 801505c:	6814      	ldr	r4, [r2, #0]
 801505e:	4621      	mov	r1, r4
 8015060:	b991      	cbnz	r1, 8015088 <_malloc_r+0x54>
 8015062:	4c20      	ldr	r4, [pc, #128]	; (80150e4 <_malloc_r+0xb0>)
 8015064:	6823      	ldr	r3, [r4, #0]
 8015066:	b91b      	cbnz	r3, 8015070 <_malloc_r+0x3c>
 8015068:	4630      	mov	r0, r6
 801506a:	f000 fb05 	bl	8015678 <_sbrk_r>
 801506e:	6020      	str	r0, [r4, #0]
 8015070:	4629      	mov	r1, r5
 8015072:	4630      	mov	r0, r6
 8015074:	f000 fb00 	bl	8015678 <_sbrk_r>
 8015078:	1c43      	adds	r3, r0, #1
 801507a:	d124      	bne.n	80150c6 <_malloc_r+0x92>
 801507c:	230c      	movs	r3, #12
 801507e:	6033      	str	r3, [r6, #0]
 8015080:	4630      	mov	r0, r6
 8015082:	f000 fd56 	bl	8015b32 <__malloc_unlock>
 8015086:	e7e4      	b.n	8015052 <_malloc_r+0x1e>
 8015088:	680b      	ldr	r3, [r1, #0]
 801508a:	1b5b      	subs	r3, r3, r5
 801508c:	d418      	bmi.n	80150c0 <_malloc_r+0x8c>
 801508e:	2b0b      	cmp	r3, #11
 8015090:	d90f      	bls.n	80150b2 <_malloc_r+0x7e>
 8015092:	600b      	str	r3, [r1, #0]
 8015094:	50cd      	str	r5, [r1, r3]
 8015096:	18cc      	adds	r4, r1, r3
 8015098:	4630      	mov	r0, r6
 801509a:	f000 fd4a 	bl	8015b32 <__malloc_unlock>
 801509e:	f104 000b 	add.w	r0, r4, #11
 80150a2:	1d23      	adds	r3, r4, #4
 80150a4:	f020 0007 	bic.w	r0, r0, #7
 80150a8:	1ac3      	subs	r3, r0, r3
 80150aa:	d0d3      	beq.n	8015054 <_malloc_r+0x20>
 80150ac:	425a      	negs	r2, r3
 80150ae:	50e2      	str	r2, [r4, r3]
 80150b0:	e7d0      	b.n	8015054 <_malloc_r+0x20>
 80150b2:	428c      	cmp	r4, r1
 80150b4:	684b      	ldr	r3, [r1, #4]
 80150b6:	bf16      	itet	ne
 80150b8:	6063      	strne	r3, [r4, #4]
 80150ba:	6013      	streq	r3, [r2, #0]
 80150bc:	460c      	movne	r4, r1
 80150be:	e7eb      	b.n	8015098 <_malloc_r+0x64>
 80150c0:	460c      	mov	r4, r1
 80150c2:	6849      	ldr	r1, [r1, #4]
 80150c4:	e7cc      	b.n	8015060 <_malloc_r+0x2c>
 80150c6:	1cc4      	adds	r4, r0, #3
 80150c8:	f024 0403 	bic.w	r4, r4, #3
 80150cc:	42a0      	cmp	r0, r4
 80150ce:	d005      	beq.n	80150dc <_malloc_r+0xa8>
 80150d0:	1a21      	subs	r1, r4, r0
 80150d2:	4630      	mov	r0, r6
 80150d4:	f000 fad0 	bl	8015678 <_sbrk_r>
 80150d8:	3001      	adds	r0, #1
 80150da:	d0cf      	beq.n	801507c <_malloc_r+0x48>
 80150dc:	6025      	str	r5, [r4, #0]
 80150de:	e7db      	b.n	8015098 <_malloc_r+0x64>
 80150e0:	20004388 	.word	0x20004388
 80150e4:	2000438c 	.word	0x2000438c

080150e8 <__sfputc_r>:
 80150e8:	6893      	ldr	r3, [r2, #8]
 80150ea:	3b01      	subs	r3, #1
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	b410      	push	{r4}
 80150f0:	6093      	str	r3, [r2, #8]
 80150f2:	da08      	bge.n	8015106 <__sfputc_r+0x1e>
 80150f4:	6994      	ldr	r4, [r2, #24]
 80150f6:	42a3      	cmp	r3, r4
 80150f8:	db01      	blt.n	80150fe <__sfputc_r+0x16>
 80150fa:	290a      	cmp	r1, #10
 80150fc:	d103      	bne.n	8015106 <__sfputc_r+0x1e>
 80150fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015102:	f000 bb0d 	b.w	8015720 <__swbuf_r>
 8015106:	6813      	ldr	r3, [r2, #0]
 8015108:	1c58      	adds	r0, r3, #1
 801510a:	6010      	str	r0, [r2, #0]
 801510c:	7019      	strb	r1, [r3, #0]
 801510e:	4608      	mov	r0, r1
 8015110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015114:	4770      	bx	lr

08015116 <__sfputs_r>:
 8015116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015118:	4606      	mov	r6, r0
 801511a:	460f      	mov	r7, r1
 801511c:	4614      	mov	r4, r2
 801511e:	18d5      	adds	r5, r2, r3
 8015120:	42ac      	cmp	r4, r5
 8015122:	d101      	bne.n	8015128 <__sfputs_r+0x12>
 8015124:	2000      	movs	r0, #0
 8015126:	e007      	b.n	8015138 <__sfputs_r+0x22>
 8015128:	463a      	mov	r2, r7
 801512a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801512e:	4630      	mov	r0, r6
 8015130:	f7ff ffda 	bl	80150e8 <__sfputc_r>
 8015134:	1c43      	adds	r3, r0, #1
 8015136:	d1f3      	bne.n	8015120 <__sfputs_r+0xa>
 8015138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801513c <_vfiprintf_r>:
 801513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015140:	460c      	mov	r4, r1
 8015142:	b09d      	sub	sp, #116	; 0x74
 8015144:	4617      	mov	r7, r2
 8015146:	461d      	mov	r5, r3
 8015148:	4606      	mov	r6, r0
 801514a:	b118      	cbz	r0, 8015154 <_vfiprintf_r+0x18>
 801514c:	6983      	ldr	r3, [r0, #24]
 801514e:	b90b      	cbnz	r3, 8015154 <_vfiprintf_r+0x18>
 8015150:	f7ff fe90 	bl	8014e74 <__sinit>
 8015154:	4b7c      	ldr	r3, [pc, #496]	; (8015348 <_vfiprintf_r+0x20c>)
 8015156:	429c      	cmp	r4, r3
 8015158:	d158      	bne.n	801520c <_vfiprintf_r+0xd0>
 801515a:	6874      	ldr	r4, [r6, #4]
 801515c:	89a3      	ldrh	r3, [r4, #12]
 801515e:	0718      	lsls	r0, r3, #28
 8015160:	d55e      	bpl.n	8015220 <_vfiprintf_r+0xe4>
 8015162:	6923      	ldr	r3, [r4, #16]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d05b      	beq.n	8015220 <_vfiprintf_r+0xe4>
 8015168:	2300      	movs	r3, #0
 801516a:	9309      	str	r3, [sp, #36]	; 0x24
 801516c:	2320      	movs	r3, #32
 801516e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015172:	2330      	movs	r3, #48	; 0x30
 8015174:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015178:	9503      	str	r5, [sp, #12]
 801517a:	f04f 0b01 	mov.w	fp, #1
 801517e:	46b8      	mov	r8, r7
 8015180:	4645      	mov	r5, r8
 8015182:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015186:	b10b      	cbz	r3, 801518c <_vfiprintf_r+0x50>
 8015188:	2b25      	cmp	r3, #37	; 0x25
 801518a:	d154      	bne.n	8015236 <_vfiprintf_r+0xfa>
 801518c:	ebb8 0a07 	subs.w	sl, r8, r7
 8015190:	d00b      	beq.n	80151aa <_vfiprintf_r+0x6e>
 8015192:	4653      	mov	r3, sl
 8015194:	463a      	mov	r2, r7
 8015196:	4621      	mov	r1, r4
 8015198:	4630      	mov	r0, r6
 801519a:	f7ff ffbc 	bl	8015116 <__sfputs_r>
 801519e:	3001      	adds	r0, #1
 80151a0:	f000 80c2 	beq.w	8015328 <_vfiprintf_r+0x1ec>
 80151a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151a6:	4453      	add	r3, sl
 80151a8:	9309      	str	r3, [sp, #36]	; 0x24
 80151aa:	f898 3000 	ldrb.w	r3, [r8]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	f000 80ba 	beq.w	8015328 <_vfiprintf_r+0x1ec>
 80151b4:	2300      	movs	r3, #0
 80151b6:	f04f 32ff 	mov.w	r2, #4294967295
 80151ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151be:	9304      	str	r3, [sp, #16]
 80151c0:	9307      	str	r3, [sp, #28]
 80151c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80151c6:	931a      	str	r3, [sp, #104]	; 0x68
 80151c8:	46a8      	mov	r8, r5
 80151ca:	2205      	movs	r2, #5
 80151cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80151d0:	485e      	ldr	r0, [pc, #376]	; (801534c <_vfiprintf_r+0x210>)
 80151d2:	f7eb f805 	bl	80001e0 <memchr>
 80151d6:	9b04      	ldr	r3, [sp, #16]
 80151d8:	bb78      	cbnz	r0, 801523a <_vfiprintf_r+0xfe>
 80151da:	06d9      	lsls	r1, r3, #27
 80151dc:	bf44      	itt	mi
 80151de:	2220      	movmi	r2, #32
 80151e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80151e4:	071a      	lsls	r2, r3, #28
 80151e6:	bf44      	itt	mi
 80151e8:	222b      	movmi	r2, #43	; 0x2b
 80151ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80151ee:	782a      	ldrb	r2, [r5, #0]
 80151f0:	2a2a      	cmp	r2, #42	; 0x2a
 80151f2:	d02a      	beq.n	801524a <_vfiprintf_r+0x10e>
 80151f4:	9a07      	ldr	r2, [sp, #28]
 80151f6:	46a8      	mov	r8, r5
 80151f8:	2000      	movs	r0, #0
 80151fa:	250a      	movs	r5, #10
 80151fc:	4641      	mov	r1, r8
 80151fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015202:	3b30      	subs	r3, #48	; 0x30
 8015204:	2b09      	cmp	r3, #9
 8015206:	d969      	bls.n	80152dc <_vfiprintf_r+0x1a0>
 8015208:	b360      	cbz	r0, 8015264 <_vfiprintf_r+0x128>
 801520a:	e024      	b.n	8015256 <_vfiprintf_r+0x11a>
 801520c:	4b50      	ldr	r3, [pc, #320]	; (8015350 <_vfiprintf_r+0x214>)
 801520e:	429c      	cmp	r4, r3
 8015210:	d101      	bne.n	8015216 <_vfiprintf_r+0xda>
 8015212:	68b4      	ldr	r4, [r6, #8]
 8015214:	e7a2      	b.n	801515c <_vfiprintf_r+0x20>
 8015216:	4b4f      	ldr	r3, [pc, #316]	; (8015354 <_vfiprintf_r+0x218>)
 8015218:	429c      	cmp	r4, r3
 801521a:	bf08      	it	eq
 801521c:	68f4      	ldreq	r4, [r6, #12]
 801521e:	e79d      	b.n	801515c <_vfiprintf_r+0x20>
 8015220:	4621      	mov	r1, r4
 8015222:	4630      	mov	r0, r6
 8015224:	f000 fae0 	bl	80157e8 <__swsetup_r>
 8015228:	2800      	cmp	r0, #0
 801522a:	d09d      	beq.n	8015168 <_vfiprintf_r+0x2c>
 801522c:	f04f 30ff 	mov.w	r0, #4294967295
 8015230:	b01d      	add	sp, #116	; 0x74
 8015232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015236:	46a8      	mov	r8, r5
 8015238:	e7a2      	b.n	8015180 <_vfiprintf_r+0x44>
 801523a:	4a44      	ldr	r2, [pc, #272]	; (801534c <_vfiprintf_r+0x210>)
 801523c:	1a80      	subs	r0, r0, r2
 801523e:	fa0b f000 	lsl.w	r0, fp, r0
 8015242:	4318      	orrs	r0, r3
 8015244:	9004      	str	r0, [sp, #16]
 8015246:	4645      	mov	r5, r8
 8015248:	e7be      	b.n	80151c8 <_vfiprintf_r+0x8c>
 801524a:	9a03      	ldr	r2, [sp, #12]
 801524c:	1d11      	adds	r1, r2, #4
 801524e:	6812      	ldr	r2, [r2, #0]
 8015250:	9103      	str	r1, [sp, #12]
 8015252:	2a00      	cmp	r2, #0
 8015254:	db01      	blt.n	801525a <_vfiprintf_r+0x11e>
 8015256:	9207      	str	r2, [sp, #28]
 8015258:	e004      	b.n	8015264 <_vfiprintf_r+0x128>
 801525a:	4252      	negs	r2, r2
 801525c:	f043 0302 	orr.w	r3, r3, #2
 8015260:	9207      	str	r2, [sp, #28]
 8015262:	9304      	str	r3, [sp, #16]
 8015264:	f898 3000 	ldrb.w	r3, [r8]
 8015268:	2b2e      	cmp	r3, #46	; 0x2e
 801526a:	d10e      	bne.n	801528a <_vfiprintf_r+0x14e>
 801526c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015270:	2b2a      	cmp	r3, #42	; 0x2a
 8015272:	d138      	bne.n	80152e6 <_vfiprintf_r+0x1aa>
 8015274:	9b03      	ldr	r3, [sp, #12]
 8015276:	1d1a      	adds	r2, r3, #4
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	9203      	str	r2, [sp, #12]
 801527c:	2b00      	cmp	r3, #0
 801527e:	bfb8      	it	lt
 8015280:	f04f 33ff 	movlt.w	r3, #4294967295
 8015284:	f108 0802 	add.w	r8, r8, #2
 8015288:	9305      	str	r3, [sp, #20]
 801528a:	4d33      	ldr	r5, [pc, #204]	; (8015358 <_vfiprintf_r+0x21c>)
 801528c:	f898 1000 	ldrb.w	r1, [r8]
 8015290:	2203      	movs	r2, #3
 8015292:	4628      	mov	r0, r5
 8015294:	f7ea ffa4 	bl	80001e0 <memchr>
 8015298:	b140      	cbz	r0, 80152ac <_vfiprintf_r+0x170>
 801529a:	2340      	movs	r3, #64	; 0x40
 801529c:	1b40      	subs	r0, r0, r5
 801529e:	fa03 f000 	lsl.w	r0, r3, r0
 80152a2:	9b04      	ldr	r3, [sp, #16]
 80152a4:	4303      	orrs	r3, r0
 80152a6:	f108 0801 	add.w	r8, r8, #1
 80152aa:	9304      	str	r3, [sp, #16]
 80152ac:	f898 1000 	ldrb.w	r1, [r8]
 80152b0:	482a      	ldr	r0, [pc, #168]	; (801535c <_vfiprintf_r+0x220>)
 80152b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80152b6:	2206      	movs	r2, #6
 80152b8:	f108 0701 	add.w	r7, r8, #1
 80152bc:	f7ea ff90 	bl	80001e0 <memchr>
 80152c0:	2800      	cmp	r0, #0
 80152c2:	d037      	beq.n	8015334 <_vfiprintf_r+0x1f8>
 80152c4:	4b26      	ldr	r3, [pc, #152]	; (8015360 <_vfiprintf_r+0x224>)
 80152c6:	bb1b      	cbnz	r3, 8015310 <_vfiprintf_r+0x1d4>
 80152c8:	9b03      	ldr	r3, [sp, #12]
 80152ca:	3307      	adds	r3, #7
 80152cc:	f023 0307 	bic.w	r3, r3, #7
 80152d0:	3308      	adds	r3, #8
 80152d2:	9303      	str	r3, [sp, #12]
 80152d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d6:	444b      	add	r3, r9
 80152d8:	9309      	str	r3, [sp, #36]	; 0x24
 80152da:	e750      	b.n	801517e <_vfiprintf_r+0x42>
 80152dc:	fb05 3202 	mla	r2, r5, r2, r3
 80152e0:	2001      	movs	r0, #1
 80152e2:	4688      	mov	r8, r1
 80152e4:	e78a      	b.n	80151fc <_vfiprintf_r+0xc0>
 80152e6:	2300      	movs	r3, #0
 80152e8:	f108 0801 	add.w	r8, r8, #1
 80152ec:	9305      	str	r3, [sp, #20]
 80152ee:	4619      	mov	r1, r3
 80152f0:	250a      	movs	r5, #10
 80152f2:	4640      	mov	r0, r8
 80152f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152f8:	3a30      	subs	r2, #48	; 0x30
 80152fa:	2a09      	cmp	r2, #9
 80152fc:	d903      	bls.n	8015306 <_vfiprintf_r+0x1ca>
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d0c3      	beq.n	801528a <_vfiprintf_r+0x14e>
 8015302:	9105      	str	r1, [sp, #20]
 8015304:	e7c1      	b.n	801528a <_vfiprintf_r+0x14e>
 8015306:	fb05 2101 	mla	r1, r5, r1, r2
 801530a:	2301      	movs	r3, #1
 801530c:	4680      	mov	r8, r0
 801530e:	e7f0      	b.n	80152f2 <_vfiprintf_r+0x1b6>
 8015310:	ab03      	add	r3, sp, #12
 8015312:	9300      	str	r3, [sp, #0]
 8015314:	4622      	mov	r2, r4
 8015316:	4b13      	ldr	r3, [pc, #76]	; (8015364 <_vfiprintf_r+0x228>)
 8015318:	a904      	add	r1, sp, #16
 801531a:	4630      	mov	r0, r6
 801531c:	f3af 8000 	nop.w
 8015320:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015324:	4681      	mov	r9, r0
 8015326:	d1d5      	bne.n	80152d4 <_vfiprintf_r+0x198>
 8015328:	89a3      	ldrh	r3, [r4, #12]
 801532a:	065b      	lsls	r3, r3, #25
 801532c:	f53f af7e 	bmi.w	801522c <_vfiprintf_r+0xf0>
 8015330:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015332:	e77d      	b.n	8015230 <_vfiprintf_r+0xf4>
 8015334:	ab03      	add	r3, sp, #12
 8015336:	9300      	str	r3, [sp, #0]
 8015338:	4622      	mov	r2, r4
 801533a:	4b0a      	ldr	r3, [pc, #40]	; (8015364 <_vfiprintf_r+0x228>)
 801533c:	a904      	add	r1, sp, #16
 801533e:	4630      	mov	r0, r6
 8015340:	f000 f888 	bl	8015454 <_printf_i>
 8015344:	e7ec      	b.n	8015320 <_vfiprintf_r+0x1e4>
 8015346:	bf00      	nop
 8015348:	08019874 	.word	0x08019874
 801534c:	080198b4 	.word	0x080198b4
 8015350:	08019894 	.word	0x08019894
 8015354:	08019854 	.word	0x08019854
 8015358:	080198ba 	.word	0x080198ba
 801535c:	080198be 	.word	0x080198be
 8015360:	00000000 	.word	0x00000000
 8015364:	08015117 	.word	0x08015117

08015368 <_printf_common>:
 8015368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801536c:	4691      	mov	r9, r2
 801536e:	461f      	mov	r7, r3
 8015370:	688a      	ldr	r2, [r1, #8]
 8015372:	690b      	ldr	r3, [r1, #16]
 8015374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015378:	4293      	cmp	r3, r2
 801537a:	bfb8      	it	lt
 801537c:	4613      	movlt	r3, r2
 801537e:	f8c9 3000 	str.w	r3, [r9]
 8015382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015386:	4606      	mov	r6, r0
 8015388:	460c      	mov	r4, r1
 801538a:	b112      	cbz	r2, 8015392 <_printf_common+0x2a>
 801538c:	3301      	adds	r3, #1
 801538e:	f8c9 3000 	str.w	r3, [r9]
 8015392:	6823      	ldr	r3, [r4, #0]
 8015394:	0699      	lsls	r1, r3, #26
 8015396:	bf42      	ittt	mi
 8015398:	f8d9 3000 	ldrmi.w	r3, [r9]
 801539c:	3302      	addmi	r3, #2
 801539e:	f8c9 3000 	strmi.w	r3, [r9]
 80153a2:	6825      	ldr	r5, [r4, #0]
 80153a4:	f015 0506 	ands.w	r5, r5, #6
 80153a8:	d107      	bne.n	80153ba <_printf_common+0x52>
 80153aa:	f104 0a19 	add.w	sl, r4, #25
 80153ae:	68e3      	ldr	r3, [r4, #12]
 80153b0:	f8d9 2000 	ldr.w	r2, [r9]
 80153b4:	1a9b      	subs	r3, r3, r2
 80153b6:	42ab      	cmp	r3, r5
 80153b8:	dc28      	bgt.n	801540c <_printf_common+0xa4>
 80153ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80153be:	6822      	ldr	r2, [r4, #0]
 80153c0:	3300      	adds	r3, #0
 80153c2:	bf18      	it	ne
 80153c4:	2301      	movne	r3, #1
 80153c6:	0692      	lsls	r2, r2, #26
 80153c8:	d42d      	bmi.n	8015426 <_printf_common+0xbe>
 80153ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80153ce:	4639      	mov	r1, r7
 80153d0:	4630      	mov	r0, r6
 80153d2:	47c0      	blx	r8
 80153d4:	3001      	adds	r0, #1
 80153d6:	d020      	beq.n	801541a <_printf_common+0xb2>
 80153d8:	6823      	ldr	r3, [r4, #0]
 80153da:	68e5      	ldr	r5, [r4, #12]
 80153dc:	f8d9 2000 	ldr.w	r2, [r9]
 80153e0:	f003 0306 	and.w	r3, r3, #6
 80153e4:	2b04      	cmp	r3, #4
 80153e6:	bf08      	it	eq
 80153e8:	1aad      	subeq	r5, r5, r2
 80153ea:	68a3      	ldr	r3, [r4, #8]
 80153ec:	6922      	ldr	r2, [r4, #16]
 80153ee:	bf0c      	ite	eq
 80153f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80153f4:	2500      	movne	r5, #0
 80153f6:	4293      	cmp	r3, r2
 80153f8:	bfc4      	itt	gt
 80153fa:	1a9b      	subgt	r3, r3, r2
 80153fc:	18ed      	addgt	r5, r5, r3
 80153fe:	f04f 0900 	mov.w	r9, #0
 8015402:	341a      	adds	r4, #26
 8015404:	454d      	cmp	r5, r9
 8015406:	d11a      	bne.n	801543e <_printf_common+0xd6>
 8015408:	2000      	movs	r0, #0
 801540a:	e008      	b.n	801541e <_printf_common+0xb6>
 801540c:	2301      	movs	r3, #1
 801540e:	4652      	mov	r2, sl
 8015410:	4639      	mov	r1, r7
 8015412:	4630      	mov	r0, r6
 8015414:	47c0      	blx	r8
 8015416:	3001      	adds	r0, #1
 8015418:	d103      	bne.n	8015422 <_printf_common+0xba>
 801541a:	f04f 30ff 	mov.w	r0, #4294967295
 801541e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015422:	3501      	adds	r5, #1
 8015424:	e7c3      	b.n	80153ae <_printf_common+0x46>
 8015426:	18e1      	adds	r1, r4, r3
 8015428:	1c5a      	adds	r2, r3, #1
 801542a:	2030      	movs	r0, #48	; 0x30
 801542c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015430:	4422      	add	r2, r4
 8015432:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015436:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801543a:	3302      	adds	r3, #2
 801543c:	e7c5      	b.n	80153ca <_printf_common+0x62>
 801543e:	2301      	movs	r3, #1
 8015440:	4622      	mov	r2, r4
 8015442:	4639      	mov	r1, r7
 8015444:	4630      	mov	r0, r6
 8015446:	47c0      	blx	r8
 8015448:	3001      	adds	r0, #1
 801544a:	d0e6      	beq.n	801541a <_printf_common+0xb2>
 801544c:	f109 0901 	add.w	r9, r9, #1
 8015450:	e7d8      	b.n	8015404 <_printf_common+0x9c>
	...

08015454 <_printf_i>:
 8015454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015458:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801545c:	460c      	mov	r4, r1
 801545e:	7e09      	ldrb	r1, [r1, #24]
 8015460:	b085      	sub	sp, #20
 8015462:	296e      	cmp	r1, #110	; 0x6e
 8015464:	4617      	mov	r7, r2
 8015466:	4606      	mov	r6, r0
 8015468:	4698      	mov	r8, r3
 801546a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801546c:	f000 80b3 	beq.w	80155d6 <_printf_i+0x182>
 8015470:	d822      	bhi.n	80154b8 <_printf_i+0x64>
 8015472:	2963      	cmp	r1, #99	; 0x63
 8015474:	d036      	beq.n	80154e4 <_printf_i+0x90>
 8015476:	d80a      	bhi.n	801548e <_printf_i+0x3a>
 8015478:	2900      	cmp	r1, #0
 801547a:	f000 80b9 	beq.w	80155f0 <_printf_i+0x19c>
 801547e:	2958      	cmp	r1, #88	; 0x58
 8015480:	f000 8083 	beq.w	801558a <_printf_i+0x136>
 8015484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015488:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801548c:	e032      	b.n	80154f4 <_printf_i+0xa0>
 801548e:	2964      	cmp	r1, #100	; 0x64
 8015490:	d001      	beq.n	8015496 <_printf_i+0x42>
 8015492:	2969      	cmp	r1, #105	; 0x69
 8015494:	d1f6      	bne.n	8015484 <_printf_i+0x30>
 8015496:	6820      	ldr	r0, [r4, #0]
 8015498:	6813      	ldr	r3, [r2, #0]
 801549a:	0605      	lsls	r5, r0, #24
 801549c:	f103 0104 	add.w	r1, r3, #4
 80154a0:	d52a      	bpl.n	80154f8 <_printf_i+0xa4>
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	6011      	str	r1, [r2, #0]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	da03      	bge.n	80154b2 <_printf_i+0x5e>
 80154aa:	222d      	movs	r2, #45	; 0x2d
 80154ac:	425b      	negs	r3, r3
 80154ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80154b2:	486f      	ldr	r0, [pc, #444]	; (8015670 <_printf_i+0x21c>)
 80154b4:	220a      	movs	r2, #10
 80154b6:	e039      	b.n	801552c <_printf_i+0xd8>
 80154b8:	2973      	cmp	r1, #115	; 0x73
 80154ba:	f000 809d 	beq.w	80155f8 <_printf_i+0x1a4>
 80154be:	d808      	bhi.n	80154d2 <_printf_i+0x7e>
 80154c0:	296f      	cmp	r1, #111	; 0x6f
 80154c2:	d020      	beq.n	8015506 <_printf_i+0xb2>
 80154c4:	2970      	cmp	r1, #112	; 0x70
 80154c6:	d1dd      	bne.n	8015484 <_printf_i+0x30>
 80154c8:	6823      	ldr	r3, [r4, #0]
 80154ca:	f043 0320 	orr.w	r3, r3, #32
 80154ce:	6023      	str	r3, [r4, #0]
 80154d0:	e003      	b.n	80154da <_printf_i+0x86>
 80154d2:	2975      	cmp	r1, #117	; 0x75
 80154d4:	d017      	beq.n	8015506 <_printf_i+0xb2>
 80154d6:	2978      	cmp	r1, #120	; 0x78
 80154d8:	d1d4      	bne.n	8015484 <_printf_i+0x30>
 80154da:	2378      	movs	r3, #120	; 0x78
 80154dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80154e0:	4864      	ldr	r0, [pc, #400]	; (8015674 <_printf_i+0x220>)
 80154e2:	e055      	b.n	8015590 <_printf_i+0x13c>
 80154e4:	6813      	ldr	r3, [r2, #0]
 80154e6:	1d19      	adds	r1, r3, #4
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	6011      	str	r1, [r2, #0]
 80154ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80154f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80154f4:	2301      	movs	r3, #1
 80154f6:	e08c      	b.n	8015612 <_printf_i+0x1be>
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	6011      	str	r1, [r2, #0]
 80154fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015500:	bf18      	it	ne
 8015502:	b21b      	sxthne	r3, r3
 8015504:	e7cf      	b.n	80154a6 <_printf_i+0x52>
 8015506:	6813      	ldr	r3, [r2, #0]
 8015508:	6825      	ldr	r5, [r4, #0]
 801550a:	1d18      	adds	r0, r3, #4
 801550c:	6010      	str	r0, [r2, #0]
 801550e:	0628      	lsls	r0, r5, #24
 8015510:	d501      	bpl.n	8015516 <_printf_i+0xc2>
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	e002      	b.n	801551c <_printf_i+0xc8>
 8015516:	0668      	lsls	r0, r5, #25
 8015518:	d5fb      	bpl.n	8015512 <_printf_i+0xbe>
 801551a:	881b      	ldrh	r3, [r3, #0]
 801551c:	4854      	ldr	r0, [pc, #336]	; (8015670 <_printf_i+0x21c>)
 801551e:	296f      	cmp	r1, #111	; 0x6f
 8015520:	bf14      	ite	ne
 8015522:	220a      	movne	r2, #10
 8015524:	2208      	moveq	r2, #8
 8015526:	2100      	movs	r1, #0
 8015528:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801552c:	6865      	ldr	r5, [r4, #4]
 801552e:	60a5      	str	r5, [r4, #8]
 8015530:	2d00      	cmp	r5, #0
 8015532:	f2c0 8095 	blt.w	8015660 <_printf_i+0x20c>
 8015536:	6821      	ldr	r1, [r4, #0]
 8015538:	f021 0104 	bic.w	r1, r1, #4
 801553c:	6021      	str	r1, [r4, #0]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d13d      	bne.n	80155be <_printf_i+0x16a>
 8015542:	2d00      	cmp	r5, #0
 8015544:	f040 808e 	bne.w	8015664 <_printf_i+0x210>
 8015548:	4665      	mov	r5, ip
 801554a:	2a08      	cmp	r2, #8
 801554c:	d10b      	bne.n	8015566 <_printf_i+0x112>
 801554e:	6823      	ldr	r3, [r4, #0]
 8015550:	07db      	lsls	r3, r3, #31
 8015552:	d508      	bpl.n	8015566 <_printf_i+0x112>
 8015554:	6923      	ldr	r3, [r4, #16]
 8015556:	6862      	ldr	r2, [r4, #4]
 8015558:	429a      	cmp	r2, r3
 801555a:	bfde      	ittt	le
 801555c:	2330      	movle	r3, #48	; 0x30
 801555e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015562:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015566:	ebac 0305 	sub.w	r3, ip, r5
 801556a:	6123      	str	r3, [r4, #16]
 801556c:	f8cd 8000 	str.w	r8, [sp]
 8015570:	463b      	mov	r3, r7
 8015572:	aa03      	add	r2, sp, #12
 8015574:	4621      	mov	r1, r4
 8015576:	4630      	mov	r0, r6
 8015578:	f7ff fef6 	bl	8015368 <_printf_common>
 801557c:	3001      	adds	r0, #1
 801557e:	d14d      	bne.n	801561c <_printf_i+0x1c8>
 8015580:	f04f 30ff 	mov.w	r0, #4294967295
 8015584:	b005      	add	sp, #20
 8015586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801558a:	4839      	ldr	r0, [pc, #228]	; (8015670 <_printf_i+0x21c>)
 801558c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015590:	6813      	ldr	r3, [r2, #0]
 8015592:	6821      	ldr	r1, [r4, #0]
 8015594:	1d1d      	adds	r5, r3, #4
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	6015      	str	r5, [r2, #0]
 801559a:	060a      	lsls	r2, r1, #24
 801559c:	d50b      	bpl.n	80155b6 <_printf_i+0x162>
 801559e:	07ca      	lsls	r2, r1, #31
 80155a0:	bf44      	itt	mi
 80155a2:	f041 0120 	orrmi.w	r1, r1, #32
 80155a6:	6021      	strmi	r1, [r4, #0]
 80155a8:	b91b      	cbnz	r3, 80155b2 <_printf_i+0x15e>
 80155aa:	6822      	ldr	r2, [r4, #0]
 80155ac:	f022 0220 	bic.w	r2, r2, #32
 80155b0:	6022      	str	r2, [r4, #0]
 80155b2:	2210      	movs	r2, #16
 80155b4:	e7b7      	b.n	8015526 <_printf_i+0xd2>
 80155b6:	064d      	lsls	r5, r1, #25
 80155b8:	bf48      	it	mi
 80155ba:	b29b      	uxthmi	r3, r3
 80155bc:	e7ef      	b.n	801559e <_printf_i+0x14a>
 80155be:	4665      	mov	r5, ip
 80155c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80155c4:	fb02 3311 	mls	r3, r2, r1, r3
 80155c8:	5cc3      	ldrb	r3, [r0, r3]
 80155ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80155ce:	460b      	mov	r3, r1
 80155d0:	2900      	cmp	r1, #0
 80155d2:	d1f5      	bne.n	80155c0 <_printf_i+0x16c>
 80155d4:	e7b9      	b.n	801554a <_printf_i+0xf6>
 80155d6:	6813      	ldr	r3, [r2, #0]
 80155d8:	6825      	ldr	r5, [r4, #0]
 80155da:	6961      	ldr	r1, [r4, #20]
 80155dc:	1d18      	adds	r0, r3, #4
 80155de:	6010      	str	r0, [r2, #0]
 80155e0:	0628      	lsls	r0, r5, #24
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	d501      	bpl.n	80155ea <_printf_i+0x196>
 80155e6:	6019      	str	r1, [r3, #0]
 80155e8:	e002      	b.n	80155f0 <_printf_i+0x19c>
 80155ea:	066a      	lsls	r2, r5, #25
 80155ec:	d5fb      	bpl.n	80155e6 <_printf_i+0x192>
 80155ee:	8019      	strh	r1, [r3, #0]
 80155f0:	2300      	movs	r3, #0
 80155f2:	6123      	str	r3, [r4, #16]
 80155f4:	4665      	mov	r5, ip
 80155f6:	e7b9      	b.n	801556c <_printf_i+0x118>
 80155f8:	6813      	ldr	r3, [r2, #0]
 80155fa:	1d19      	adds	r1, r3, #4
 80155fc:	6011      	str	r1, [r2, #0]
 80155fe:	681d      	ldr	r5, [r3, #0]
 8015600:	6862      	ldr	r2, [r4, #4]
 8015602:	2100      	movs	r1, #0
 8015604:	4628      	mov	r0, r5
 8015606:	f7ea fdeb 	bl	80001e0 <memchr>
 801560a:	b108      	cbz	r0, 8015610 <_printf_i+0x1bc>
 801560c:	1b40      	subs	r0, r0, r5
 801560e:	6060      	str	r0, [r4, #4]
 8015610:	6863      	ldr	r3, [r4, #4]
 8015612:	6123      	str	r3, [r4, #16]
 8015614:	2300      	movs	r3, #0
 8015616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801561a:	e7a7      	b.n	801556c <_printf_i+0x118>
 801561c:	6923      	ldr	r3, [r4, #16]
 801561e:	462a      	mov	r2, r5
 8015620:	4639      	mov	r1, r7
 8015622:	4630      	mov	r0, r6
 8015624:	47c0      	blx	r8
 8015626:	3001      	adds	r0, #1
 8015628:	d0aa      	beq.n	8015580 <_printf_i+0x12c>
 801562a:	6823      	ldr	r3, [r4, #0]
 801562c:	079b      	lsls	r3, r3, #30
 801562e:	d413      	bmi.n	8015658 <_printf_i+0x204>
 8015630:	68e0      	ldr	r0, [r4, #12]
 8015632:	9b03      	ldr	r3, [sp, #12]
 8015634:	4298      	cmp	r0, r3
 8015636:	bfb8      	it	lt
 8015638:	4618      	movlt	r0, r3
 801563a:	e7a3      	b.n	8015584 <_printf_i+0x130>
 801563c:	2301      	movs	r3, #1
 801563e:	464a      	mov	r2, r9
 8015640:	4639      	mov	r1, r7
 8015642:	4630      	mov	r0, r6
 8015644:	47c0      	blx	r8
 8015646:	3001      	adds	r0, #1
 8015648:	d09a      	beq.n	8015580 <_printf_i+0x12c>
 801564a:	3501      	adds	r5, #1
 801564c:	68e3      	ldr	r3, [r4, #12]
 801564e:	9a03      	ldr	r2, [sp, #12]
 8015650:	1a9b      	subs	r3, r3, r2
 8015652:	42ab      	cmp	r3, r5
 8015654:	dcf2      	bgt.n	801563c <_printf_i+0x1e8>
 8015656:	e7eb      	b.n	8015630 <_printf_i+0x1dc>
 8015658:	2500      	movs	r5, #0
 801565a:	f104 0919 	add.w	r9, r4, #25
 801565e:	e7f5      	b.n	801564c <_printf_i+0x1f8>
 8015660:	2b00      	cmp	r3, #0
 8015662:	d1ac      	bne.n	80155be <_printf_i+0x16a>
 8015664:	7803      	ldrb	r3, [r0, #0]
 8015666:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801566a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801566e:	e76c      	b.n	801554a <_printf_i+0xf6>
 8015670:	080198c5 	.word	0x080198c5
 8015674:	080198d6 	.word	0x080198d6

08015678 <_sbrk_r>:
 8015678:	b538      	push	{r3, r4, r5, lr}
 801567a:	4c06      	ldr	r4, [pc, #24]	; (8015694 <_sbrk_r+0x1c>)
 801567c:	2300      	movs	r3, #0
 801567e:	4605      	mov	r5, r0
 8015680:	4608      	mov	r0, r1
 8015682:	6023      	str	r3, [r4, #0]
 8015684:	f7eb f9fc 	bl	8000a80 <_sbrk>
 8015688:	1c43      	adds	r3, r0, #1
 801568a:	d102      	bne.n	8015692 <_sbrk_r+0x1a>
 801568c:	6823      	ldr	r3, [r4, #0]
 801568e:	b103      	cbz	r3, 8015692 <_sbrk_r+0x1a>
 8015690:	602b      	str	r3, [r5, #0]
 8015692:	bd38      	pop	{r3, r4, r5, pc}
 8015694:	2000e648 	.word	0x2000e648

08015698 <__sread>:
 8015698:	b510      	push	{r4, lr}
 801569a:	460c      	mov	r4, r1
 801569c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156a0:	f000 fa48 	bl	8015b34 <_read_r>
 80156a4:	2800      	cmp	r0, #0
 80156a6:	bfab      	itete	ge
 80156a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80156aa:	89a3      	ldrhlt	r3, [r4, #12]
 80156ac:	181b      	addge	r3, r3, r0
 80156ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80156b2:	bfac      	ite	ge
 80156b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80156b6:	81a3      	strhlt	r3, [r4, #12]
 80156b8:	bd10      	pop	{r4, pc}

080156ba <__swrite>:
 80156ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156be:	461f      	mov	r7, r3
 80156c0:	898b      	ldrh	r3, [r1, #12]
 80156c2:	05db      	lsls	r3, r3, #23
 80156c4:	4605      	mov	r5, r0
 80156c6:	460c      	mov	r4, r1
 80156c8:	4616      	mov	r6, r2
 80156ca:	d505      	bpl.n	80156d8 <__swrite+0x1e>
 80156cc:	2302      	movs	r3, #2
 80156ce:	2200      	movs	r2, #0
 80156d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156d4:	f000 f9b6 	bl	8015a44 <_lseek_r>
 80156d8:	89a3      	ldrh	r3, [r4, #12]
 80156da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80156de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80156e2:	81a3      	strh	r3, [r4, #12]
 80156e4:	4632      	mov	r2, r6
 80156e6:	463b      	mov	r3, r7
 80156e8:	4628      	mov	r0, r5
 80156ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80156ee:	f000 b869 	b.w	80157c4 <_write_r>

080156f2 <__sseek>:
 80156f2:	b510      	push	{r4, lr}
 80156f4:	460c      	mov	r4, r1
 80156f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156fa:	f000 f9a3 	bl	8015a44 <_lseek_r>
 80156fe:	1c43      	adds	r3, r0, #1
 8015700:	89a3      	ldrh	r3, [r4, #12]
 8015702:	bf15      	itete	ne
 8015704:	6560      	strne	r0, [r4, #84]	; 0x54
 8015706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801570a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801570e:	81a3      	strheq	r3, [r4, #12]
 8015710:	bf18      	it	ne
 8015712:	81a3      	strhne	r3, [r4, #12]
 8015714:	bd10      	pop	{r4, pc}

08015716 <__sclose>:
 8015716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801571a:	f000 b8d3 	b.w	80158c4 <_close_r>
	...

08015720 <__swbuf_r>:
 8015720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015722:	460e      	mov	r6, r1
 8015724:	4614      	mov	r4, r2
 8015726:	4605      	mov	r5, r0
 8015728:	b118      	cbz	r0, 8015732 <__swbuf_r+0x12>
 801572a:	6983      	ldr	r3, [r0, #24]
 801572c:	b90b      	cbnz	r3, 8015732 <__swbuf_r+0x12>
 801572e:	f7ff fba1 	bl	8014e74 <__sinit>
 8015732:	4b21      	ldr	r3, [pc, #132]	; (80157b8 <__swbuf_r+0x98>)
 8015734:	429c      	cmp	r4, r3
 8015736:	d12a      	bne.n	801578e <__swbuf_r+0x6e>
 8015738:	686c      	ldr	r4, [r5, #4]
 801573a:	69a3      	ldr	r3, [r4, #24]
 801573c:	60a3      	str	r3, [r4, #8]
 801573e:	89a3      	ldrh	r3, [r4, #12]
 8015740:	071a      	lsls	r2, r3, #28
 8015742:	d52e      	bpl.n	80157a2 <__swbuf_r+0x82>
 8015744:	6923      	ldr	r3, [r4, #16]
 8015746:	b363      	cbz	r3, 80157a2 <__swbuf_r+0x82>
 8015748:	6923      	ldr	r3, [r4, #16]
 801574a:	6820      	ldr	r0, [r4, #0]
 801574c:	1ac0      	subs	r0, r0, r3
 801574e:	6963      	ldr	r3, [r4, #20]
 8015750:	b2f6      	uxtb	r6, r6
 8015752:	4283      	cmp	r3, r0
 8015754:	4637      	mov	r7, r6
 8015756:	dc04      	bgt.n	8015762 <__swbuf_r+0x42>
 8015758:	4621      	mov	r1, r4
 801575a:	4628      	mov	r0, r5
 801575c:	f000 f948 	bl	80159f0 <_fflush_r>
 8015760:	bb28      	cbnz	r0, 80157ae <__swbuf_r+0x8e>
 8015762:	68a3      	ldr	r3, [r4, #8]
 8015764:	3b01      	subs	r3, #1
 8015766:	60a3      	str	r3, [r4, #8]
 8015768:	6823      	ldr	r3, [r4, #0]
 801576a:	1c5a      	adds	r2, r3, #1
 801576c:	6022      	str	r2, [r4, #0]
 801576e:	701e      	strb	r6, [r3, #0]
 8015770:	6963      	ldr	r3, [r4, #20]
 8015772:	3001      	adds	r0, #1
 8015774:	4283      	cmp	r3, r0
 8015776:	d004      	beq.n	8015782 <__swbuf_r+0x62>
 8015778:	89a3      	ldrh	r3, [r4, #12]
 801577a:	07db      	lsls	r3, r3, #31
 801577c:	d519      	bpl.n	80157b2 <__swbuf_r+0x92>
 801577e:	2e0a      	cmp	r6, #10
 8015780:	d117      	bne.n	80157b2 <__swbuf_r+0x92>
 8015782:	4621      	mov	r1, r4
 8015784:	4628      	mov	r0, r5
 8015786:	f000 f933 	bl	80159f0 <_fflush_r>
 801578a:	b190      	cbz	r0, 80157b2 <__swbuf_r+0x92>
 801578c:	e00f      	b.n	80157ae <__swbuf_r+0x8e>
 801578e:	4b0b      	ldr	r3, [pc, #44]	; (80157bc <__swbuf_r+0x9c>)
 8015790:	429c      	cmp	r4, r3
 8015792:	d101      	bne.n	8015798 <__swbuf_r+0x78>
 8015794:	68ac      	ldr	r4, [r5, #8]
 8015796:	e7d0      	b.n	801573a <__swbuf_r+0x1a>
 8015798:	4b09      	ldr	r3, [pc, #36]	; (80157c0 <__swbuf_r+0xa0>)
 801579a:	429c      	cmp	r4, r3
 801579c:	bf08      	it	eq
 801579e:	68ec      	ldreq	r4, [r5, #12]
 80157a0:	e7cb      	b.n	801573a <__swbuf_r+0x1a>
 80157a2:	4621      	mov	r1, r4
 80157a4:	4628      	mov	r0, r5
 80157a6:	f000 f81f 	bl	80157e8 <__swsetup_r>
 80157aa:	2800      	cmp	r0, #0
 80157ac:	d0cc      	beq.n	8015748 <__swbuf_r+0x28>
 80157ae:	f04f 37ff 	mov.w	r7, #4294967295
 80157b2:	4638      	mov	r0, r7
 80157b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157b6:	bf00      	nop
 80157b8:	08019874 	.word	0x08019874
 80157bc:	08019894 	.word	0x08019894
 80157c0:	08019854 	.word	0x08019854

080157c4 <_write_r>:
 80157c4:	b538      	push	{r3, r4, r5, lr}
 80157c6:	4c07      	ldr	r4, [pc, #28]	; (80157e4 <_write_r+0x20>)
 80157c8:	4605      	mov	r5, r0
 80157ca:	4608      	mov	r0, r1
 80157cc:	4611      	mov	r1, r2
 80157ce:	2200      	movs	r2, #0
 80157d0:	6022      	str	r2, [r4, #0]
 80157d2:	461a      	mov	r2, r3
 80157d4:	f7eb f903 	bl	80009de <_write>
 80157d8:	1c43      	adds	r3, r0, #1
 80157da:	d102      	bne.n	80157e2 <_write_r+0x1e>
 80157dc:	6823      	ldr	r3, [r4, #0]
 80157de:	b103      	cbz	r3, 80157e2 <_write_r+0x1e>
 80157e0:	602b      	str	r3, [r5, #0]
 80157e2:	bd38      	pop	{r3, r4, r5, pc}
 80157e4:	2000e648 	.word	0x2000e648

080157e8 <__swsetup_r>:
 80157e8:	4b32      	ldr	r3, [pc, #200]	; (80158b4 <__swsetup_r+0xcc>)
 80157ea:	b570      	push	{r4, r5, r6, lr}
 80157ec:	681d      	ldr	r5, [r3, #0]
 80157ee:	4606      	mov	r6, r0
 80157f0:	460c      	mov	r4, r1
 80157f2:	b125      	cbz	r5, 80157fe <__swsetup_r+0x16>
 80157f4:	69ab      	ldr	r3, [r5, #24]
 80157f6:	b913      	cbnz	r3, 80157fe <__swsetup_r+0x16>
 80157f8:	4628      	mov	r0, r5
 80157fa:	f7ff fb3b 	bl	8014e74 <__sinit>
 80157fe:	4b2e      	ldr	r3, [pc, #184]	; (80158b8 <__swsetup_r+0xd0>)
 8015800:	429c      	cmp	r4, r3
 8015802:	d10f      	bne.n	8015824 <__swsetup_r+0x3c>
 8015804:	686c      	ldr	r4, [r5, #4]
 8015806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801580a:	b29a      	uxth	r2, r3
 801580c:	0715      	lsls	r5, r2, #28
 801580e:	d42c      	bmi.n	801586a <__swsetup_r+0x82>
 8015810:	06d0      	lsls	r0, r2, #27
 8015812:	d411      	bmi.n	8015838 <__swsetup_r+0x50>
 8015814:	2209      	movs	r2, #9
 8015816:	6032      	str	r2, [r6, #0]
 8015818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801581c:	81a3      	strh	r3, [r4, #12]
 801581e:	f04f 30ff 	mov.w	r0, #4294967295
 8015822:	e03e      	b.n	80158a2 <__swsetup_r+0xba>
 8015824:	4b25      	ldr	r3, [pc, #148]	; (80158bc <__swsetup_r+0xd4>)
 8015826:	429c      	cmp	r4, r3
 8015828:	d101      	bne.n	801582e <__swsetup_r+0x46>
 801582a:	68ac      	ldr	r4, [r5, #8]
 801582c:	e7eb      	b.n	8015806 <__swsetup_r+0x1e>
 801582e:	4b24      	ldr	r3, [pc, #144]	; (80158c0 <__swsetup_r+0xd8>)
 8015830:	429c      	cmp	r4, r3
 8015832:	bf08      	it	eq
 8015834:	68ec      	ldreq	r4, [r5, #12]
 8015836:	e7e6      	b.n	8015806 <__swsetup_r+0x1e>
 8015838:	0751      	lsls	r1, r2, #29
 801583a:	d512      	bpl.n	8015862 <__swsetup_r+0x7a>
 801583c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801583e:	b141      	cbz	r1, 8015852 <__swsetup_r+0x6a>
 8015840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015844:	4299      	cmp	r1, r3
 8015846:	d002      	beq.n	801584e <__swsetup_r+0x66>
 8015848:	4630      	mov	r0, r6
 801584a:	f7ff fba5 	bl	8014f98 <_free_r>
 801584e:	2300      	movs	r3, #0
 8015850:	6363      	str	r3, [r4, #52]	; 0x34
 8015852:	89a3      	ldrh	r3, [r4, #12]
 8015854:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015858:	81a3      	strh	r3, [r4, #12]
 801585a:	2300      	movs	r3, #0
 801585c:	6063      	str	r3, [r4, #4]
 801585e:	6923      	ldr	r3, [r4, #16]
 8015860:	6023      	str	r3, [r4, #0]
 8015862:	89a3      	ldrh	r3, [r4, #12]
 8015864:	f043 0308 	orr.w	r3, r3, #8
 8015868:	81a3      	strh	r3, [r4, #12]
 801586a:	6923      	ldr	r3, [r4, #16]
 801586c:	b94b      	cbnz	r3, 8015882 <__swsetup_r+0x9a>
 801586e:	89a3      	ldrh	r3, [r4, #12]
 8015870:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015878:	d003      	beq.n	8015882 <__swsetup_r+0x9a>
 801587a:	4621      	mov	r1, r4
 801587c:	4630      	mov	r0, r6
 801587e:	f000 f917 	bl	8015ab0 <__smakebuf_r>
 8015882:	89a2      	ldrh	r2, [r4, #12]
 8015884:	f012 0301 	ands.w	r3, r2, #1
 8015888:	d00c      	beq.n	80158a4 <__swsetup_r+0xbc>
 801588a:	2300      	movs	r3, #0
 801588c:	60a3      	str	r3, [r4, #8]
 801588e:	6963      	ldr	r3, [r4, #20]
 8015890:	425b      	negs	r3, r3
 8015892:	61a3      	str	r3, [r4, #24]
 8015894:	6923      	ldr	r3, [r4, #16]
 8015896:	b953      	cbnz	r3, 80158ae <__swsetup_r+0xc6>
 8015898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801589c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80158a0:	d1ba      	bne.n	8015818 <__swsetup_r+0x30>
 80158a2:	bd70      	pop	{r4, r5, r6, pc}
 80158a4:	0792      	lsls	r2, r2, #30
 80158a6:	bf58      	it	pl
 80158a8:	6963      	ldrpl	r3, [r4, #20]
 80158aa:	60a3      	str	r3, [r4, #8]
 80158ac:	e7f2      	b.n	8015894 <__swsetup_r+0xac>
 80158ae:	2000      	movs	r0, #0
 80158b0:	e7f7      	b.n	80158a2 <__swsetup_r+0xba>
 80158b2:	bf00      	nop
 80158b4:	2000001c 	.word	0x2000001c
 80158b8:	08019874 	.word	0x08019874
 80158bc:	08019894 	.word	0x08019894
 80158c0:	08019854 	.word	0x08019854

080158c4 <_close_r>:
 80158c4:	b538      	push	{r3, r4, r5, lr}
 80158c6:	4c06      	ldr	r4, [pc, #24]	; (80158e0 <_close_r+0x1c>)
 80158c8:	2300      	movs	r3, #0
 80158ca:	4605      	mov	r5, r0
 80158cc:	4608      	mov	r0, r1
 80158ce:	6023      	str	r3, [r4, #0]
 80158d0:	f7eb f8a1 	bl	8000a16 <_close>
 80158d4:	1c43      	adds	r3, r0, #1
 80158d6:	d102      	bne.n	80158de <_close_r+0x1a>
 80158d8:	6823      	ldr	r3, [r4, #0]
 80158da:	b103      	cbz	r3, 80158de <_close_r+0x1a>
 80158dc:	602b      	str	r3, [r5, #0]
 80158de:	bd38      	pop	{r3, r4, r5, pc}
 80158e0:	2000e648 	.word	0x2000e648

080158e4 <__sflush_r>:
 80158e4:	898a      	ldrh	r2, [r1, #12]
 80158e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158ea:	4605      	mov	r5, r0
 80158ec:	0710      	lsls	r0, r2, #28
 80158ee:	460c      	mov	r4, r1
 80158f0:	d458      	bmi.n	80159a4 <__sflush_r+0xc0>
 80158f2:	684b      	ldr	r3, [r1, #4]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	dc05      	bgt.n	8015904 <__sflush_r+0x20>
 80158f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	dc02      	bgt.n	8015904 <__sflush_r+0x20>
 80158fe:	2000      	movs	r0, #0
 8015900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015906:	2e00      	cmp	r6, #0
 8015908:	d0f9      	beq.n	80158fe <__sflush_r+0x1a>
 801590a:	2300      	movs	r3, #0
 801590c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015910:	682f      	ldr	r7, [r5, #0]
 8015912:	6a21      	ldr	r1, [r4, #32]
 8015914:	602b      	str	r3, [r5, #0]
 8015916:	d032      	beq.n	801597e <__sflush_r+0x9a>
 8015918:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801591a:	89a3      	ldrh	r3, [r4, #12]
 801591c:	075a      	lsls	r2, r3, #29
 801591e:	d505      	bpl.n	801592c <__sflush_r+0x48>
 8015920:	6863      	ldr	r3, [r4, #4]
 8015922:	1ac0      	subs	r0, r0, r3
 8015924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015926:	b10b      	cbz	r3, 801592c <__sflush_r+0x48>
 8015928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801592a:	1ac0      	subs	r0, r0, r3
 801592c:	2300      	movs	r3, #0
 801592e:	4602      	mov	r2, r0
 8015930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015932:	6a21      	ldr	r1, [r4, #32]
 8015934:	4628      	mov	r0, r5
 8015936:	47b0      	blx	r6
 8015938:	1c43      	adds	r3, r0, #1
 801593a:	89a3      	ldrh	r3, [r4, #12]
 801593c:	d106      	bne.n	801594c <__sflush_r+0x68>
 801593e:	6829      	ldr	r1, [r5, #0]
 8015940:	291d      	cmp	r1, #29
 8015942:	d848      	bhi.n	80159d6 <__sflush_r+0xf2>
 8015944:	4a29      	ldr	r2, [pc, #164]	; (80159ec <__sflush_r+0x108>)
 8015946:	40ca      	lsrs	r2, r1
 8015948:	07d6      	lsls	r6, r2, #31
 801594a:	d544      	bpl.n	80159d6 <__sflush_r+0xf2>
 801594c:	2200      	movs	r2, #0
 801594e:	6062      	str	r2, [r4, #4]
 8015950:	04d9      	lsls	r1, r3, #19
 8015952:	6922      	ldr	r2, [r4, #16]
 8015954:	6022      	str	r2, [r4, #0]
 8015956:	d504      	bpl.n	8015962 <__sflush_r+0x7e>
 8015958:	1c42      	adds	r2, r0, #1
 801595a:	d101      	bne.n	8015960 <__sflush_r+0x7c>
 801595c:	682b      	ldr	r3, [r5, #0]
 801595e:	b903      	cbnz	r3, 8015962 <__sflush_r+0x7e>
 8015960:	6560      	str	r0, [r4, #84]	; 0x54
 8015962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015964:	602f      	str	r7, [r5, #0]
 8015966:	2900      	cmp	r1, #0
 8015968:	d0c9      	beq.n	80158fe <__sflush_r+0x1a>
 801596a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801596e:	4299      	cmp	r1, r3
 8015970:	d002      	beq.n	8015978 <__sflush_r+0x94>
 8015972:	4628      	mov	r0, r5
 8015974:	f7ff fb10 	bl	8014f98 <_free_r>
 8015978:	2000      	movs	r0, #0
 801597a:	6360      	str	r0, [r4, #52]	; 0x34
 801597c:	e7c0      	b.n	8015900 <__sflush_r+0x1c>
 801597e:	2301      	movs	r3, #1
 8015980:	4628      	mov	r0, r5
 8015982:	47b0      	blx	r6
 8015984:	1c41      	adds	r1, r0, #1
 8015986:	d1c8      	bne.n	801591a <__sflush_r+0x36>
 8015988:	682b      	ldr	r3, [r5, #0]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d0c5      	beq.n	801591a <__sflush_r+0x36>
 801598e:	2b1d      	cmp	r3, #29
 8015990:	d001      	beq.n	8015996 <__sflush_r+0xb2>
 8015992:	2b16      	cmp	r3, #22
 8015994:	d101      	bne.n	801599a <__sflush_r+0xb6>
 8015996:	602f      	str	r7, [r5, #0]
 8015998:	e7b1      	b.n	80158fe <__sflush_r+0x1a>
 801599a:	89a3      	ldrh	r3, [r4, #12]
 801599c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159a0:	81a3      	strh	r3, [r4, #12]
 80159a2:	e7ad      	b.n	8015900 <__sflush_r+0x1c>
 80159a4:	690f      	ldr	r7, [r1, #16]
 80159a6:	2f00      	cmp	r7, #0
 80159a8:	d0a9      	beq.n	80158fe <__sflush_r+0x1a>
 80159aa:	0793      	lsls	r3, r2, #30
 80159ac:	680e      	ldr	r6, [r1, #0]
 80159ae:	bf08      	it	eq
 80159b0:	694b      	ldreq	r3, [r1, #20]
 80159b2:	600f      	str	r7, [r1, #0]
 80159b4:	bf18      	it	ne
 80159b6:	2300      	movne	r3, #0
 80159b8:	eba6 0807 	sub.w	r8, r6, r7
 80159bc:	608b      	str	r3, [r1, #8]
 80159be:	f1b8 0f00 	cmp.w	r8, #0
 80159c2:	dd9c      	ble.n	80158fe <__sflush_r+0x1a>
 80159c4:	4643      	mov	r3, r8
 80159c6:	463a      	mov	r2, r7
 80159c8:	6a21      	ldr	r1, [r4, #32]
 80159ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80159cc:	4628      	mov	r0, r5
 80159ce:	47b0      	blx	r6
 80159d0:	2800      	cmp	r0, #0
 80159d2:	dc06      	bgt.n	80159e2 <__sflush_r+0xfe>
 80159d4:	89a3      	ldrh	r3, [r4, #12]
 80159d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159da:	81a3      	strh	r3, [r4, #12]
 80159dc:	f04f 30ff 	mov.w	r0, #4294967295
 80159e0:	e78e      	b.n	8015900 <__sflush_r+0x1c>
 80159e2:	4407      	add	r7, r0
 80159e4:	eba8 0800 	sub.w	r8, r8, r0
 80159e8:	e7e9      	b.n	80159be <__sflush_r+0xda>
 80159ea:	bf00      	nop
 80159ec:	20400001 	.word	0x20400001

080159f0 <_fflush_r>:
 80159f0:	b538      	push	{r3, r4, r5, lr}
 80159f2:	690b      	ldr	r3, [r1, #16]
 80159f4:	4605      	mov	r5, r0
 80159f6:	460c      	mov	r4, r1
 80159f8:	b1db      	cbz	r3, 8015a32 <_fflush_r+0x42>
 80159fa:	b118      	cbz	r0, 8015a04 <_fflush_r+0x14>
 80159fc:	6983      	ldr	r3, [r0, #24]
 80159fe:	b90b      	cbnz	r3, 8015a04 <_fflush_r+0x14>
 8015a00:	f7ff fa38 	bl	8014e74 <__sinit>
 8015a04:	4b0c      	ldr	r3, [pc, #48]	; (8015a38 <_fflush_r+0x48>)
 8015a06:	429c      	cmp	r4, r3
 8015a08:	d109      	bne.n	8015a1e <_fflush_r+0x2e>
 8015a0a:	686c      	ldr	r4, [r5, #4]
 8015a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a10:	b17b      	cbz	r3, 8015a32 <_fflush_r+0x42>
 8015a12:	4621      	mov	r1, r4
 8015a14:	4628      	mov	r0, r5
 8015a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a1a:	f7ff bf63 	b.w	80158e4 <__sflush_r>
 8015a1e:	4b07      	ldr	r3, [pc, #28]	; (8015a3c <_fflush_r+0x4c>)
 8015a20:	429c      	cmp	r4, r3
 8015a22:	d101      	bne.n	8015a28 <_fflush_r+0x38>
 8015a24:	68ac      	ldr	r4, [r5, #8]
 8015a26:	e7f1      	b.n	8015a0c <_fflush_r+0x1c>
 8015a28:	4b05      	ldr	r3, [pc, #20]	; (8015a40 <_fflush_r+0x50>)
 8015a2a:	429c      	cmp	r4, r3
 8015a2c:	bf08      	it	eq
 8015a2e:	68ec      	ldreq	r4, [r5, #12]
 8015a30:	e7ec      	b.n	8015a0c <_fflush_r+0x1c>
 8015a32:	2000      	movs	r0, #0
 8015a34:	bd38      	pop	{r3, r4, r5, pc}
 8015a36:	bf00      	nop
 8015a38:	08019874 	.word	0x08019874
 8015a3c:	08019894 	.word	0x08019894
 8015a40:	08019854 	.word	0x08019854

08015a44 <_lseek_r>:
 8015a44:	b538      	push	{r3, r4, r5, lr}
 8015a46:	4c07      	ldr	r4, [pc, #28]	; (8015a64 <_lseek_r+0x20>)
 8015a48:	4605      	mov	r5, r0
 8015a4a:	4608      	mov	r0, r1
 8015a4c:	4611      	mov	r1, r2
 8015a4e:	2200      	movs	r2, #0
 8015a50:	6022      	str	r2, [r4, #0]
 8015a52:	461a      	mov	r2, r3
 8015a54:	f7eb f806 	bl	8000a64 <_lseek>
 8015a58:	1c43      	adds	r3, r0, #1
 8015a5a:	d102      	bne.n	8015a62 <_lseek_r+0x1e>
 8015a5c:	6823      	ldr	r3, [r4, #0]
 8015a5e:	b103      	cbz	r3, 8015a62 <_lseek_r+0x1e>
 8015a60:	602b      	str	r3, [r5, #0]
 8015a62:	bd38      	pop	{r3, r4, r5, pc}
 8015a64:	2000e648 	.word	0x2000e648

08015a68 <__swhatbuf_r>:
 8015a68:	b570      	push	{r4, r5, r6, lr}
 8015a6a:	460e      	mov	r6, r1
 8015a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a70:	2900      	cmp	r1, #0
 8015a72:	b096      	sub	sp, #88	; 0x58
 8015a74:	4614      	mov	r4, r2
 8015a76:	461d      	mov	r5, r3
 8015a78:	da07      	bge.n	8015a8a <__swhatbuf_r+0x22>
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	602b      	str	r3, [r5, #0]
 8015a7e:	89b3      	ldrh	r3, [r6, #12]
 8015a80:	061a      	lsls	r2, r3, #24
 8015a82:	d410      	bmi.n	8015aa6 <__swhatbuf_r+0x3e>
 8015a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a88:	e00e      	b.n	8015aa8 <__swhatbuf_r+0x40>
 8015a8a:	466a      	mov	r2, sp
 8015a8c:	f000 f864 	bl	8015b58 <_fstat_r>
 8015a90:	2800      	cmp	r0, #0
 8015a92:	dbf2      	blt.n	8015a7a <__swhatbuf_r+0x12>
 8015a94:	9a01      	ldr	r2, [sp, #4]
 8015a96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015a9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015a9e:	425a      	negs	r2, r3
 8015aa0:	415a      	adcs	r2, r3
 8015aa2:	602a      	str	r2, [r5, #0]
 8015aa4:	e7ee      	b.n	8015a84 <__swhatbuf_r+0x1c>
 8015aa6:	2340      	movs	r3, #64	; 0x40
 8015aa8:	2000      	movs	r0, #0
 8015aaa:	6023      	str	r3, [r4, #0]
 8015aac:	b016      	add	sp, #88	; 0x58
 8015aae:	bd70      	pop	{r4, r5, r6, pc}

08015ab0 <__smakebuf_r>:
 8015ab0:	898b      	ldrh	r3, [r1, #12]
 8015ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ab4:	079d      	lsls	r5, r3, #30
 8015ab6:	4606      	mov	r6, r0
 8015ab8:	460c      	mov	r4, r1
 8015aba:	d507      	bpl.n	8015acc <__smakebuf_r+0x1c>
 8015abc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ac0:	6023      	str	r3, [r4, #0]
 8015ac2:	6123      	str	r3, [r4, #16]
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	6163      	str	r3, [r4, #20]
 8015ac8:	b002      	add	sp, #8
 8015aca:	bd70      	pop	{r4, r5, r6, pc}
 8015acc:	ab01      	add	r3, sp, #4
 8015ace:	466a      	mov	r2, sp
 8015ad0:	f7ff ffca 	bl	8015a68 <__swhatbuf_r>
 8015ad4:	9900      	ldr	r1, [sp, #0]
 8015ad6:	4605      	mov	r5, r0
 8015ad8:	4630      	mov	r0, r6
 8015ada:	f7ff faab 	bl	8015034 <_malloc_r>
 8015ade:	b948      	cbnz	r0, 8015af4 <__smakebuf_r+0x44>
 8015ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ae4:	059a      	lsls	r2, r3, #22
 8015ae6:	d4ef      	bmi.n	8015ac8 <__smakebuf_r+0x18>
 8015ae8:	f023 0303 	bic.w	r3, r3, #3
 8015aec:	f043 0302 	orr.w	r3, r3, #2
 8015af0:	81a3      	strh	r3, [r4, #12]
 8015af2:	e7e3      	b.n	8015abc <__smakebuf_r+0xc>
 8015af4:	4b0d      	ldr	r3, [pc, #52]	; (8015b2c <__smakebuf_r+0x7c>)
 8015af6:	62b3      	str	r3, [r6, #40]	; 0x28
 8015af8:	89a3      	ldrh	r3, [r4, #12]
 8015afa:	6020      	str	r0, [r4, #0]
 8015afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b00:	81a3      	strh	r3, [r4, #12]
 8015b02:	9b00      	ldr	r3, [sp, #0]
 8015b04:	6163      	str	r3, [r4, #20]
 8015b06:	9b01      	ldr	r3, [sp, #4]
 8015b08:	6120      	str	r0, [r4, #16]
 8015b0a:	b15b      	cbz	r3, 8015b24 <__smakebuf_r+0x74>
 8015b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b10:	4630      	mov	r0, r6
 8015b12:	f000 f833 	bl	8015b7c <_isatty_r>
 8015b16:	b128      	cbz	r0, 8015b24 <__smakebuf_r+0x74>
 8015b18:	89a3      	ldrh	r3, [r4, #12]
 8015b1a:	f023 0303 	bic.w	r3, r3, #3
 8015b1e:	f043 0301 	orr.w	r3, r3, #1
 8015b22:	81a3      	strh	r3, [r4, #12]
 8015b24:	89a3      	ldrh	r3, [r4, #12]
 8015b26:	431d      	orrs	r5, r3
 8015b28:	81a5      	strh	r5, [r4, #12]
 8015b2a:	e7cd      	b.n	8015ac8 <__smakebuf_r+0x18>
 8015b2c:	08014e3d 	.word	0x08014e3d

08015b30 <__malloc_lock>:
 8015b30:	4770      	bx	lr

08015b32 <__malloc_unlock>:
 8015b32:	4770      	bx	lr

08015b34 <_read_r>:
 8015b34:	b538      	push	{r3, r4, r5, lr}
 8015b36:	4c07      	ldr	r4, [pc, #28]	; (8015b54 <_read_r+0x20>)
 8015b38:	4605      	mov	r5, r0
 8015b3a:	4608      	mov	r0, r1
 8015b3c:	4611      	mov	r1, r2
 8015b3e:	2200      	movs	r2, #0
 8015b40:	6022      	str	r2, [r4, #0]
 8015b42:	461a      	mov	r2, r3
 8015b44:	f7ea ff2e 	bl	80009a4 <_read>
 8015b48:	1c43      	adds	r3, r0, #1
 8015b4a:	d102      	bne.n	8015b52 <_read_r+0x1e>
 8015b4c:	6823      	ldr	r3, [r4, #0]
 8015b4e:	b103      	cbz	r3, 8015b52 <_read_r+0x1e>
 8015b50:	602b      	str	r3, [r5, #0]
 8015b52:	bd38      	pop	{r3, r4, r5, pc}
 8015b54:	2000e648 	.word	0x2000e648

08015b58 <_fstat_r>:
 8015b58:	b538      	push	{r3, r4, r5, lr}
 8015b5a:	4c07      	ldr	r4, [pc, #28]	; (8015b78 <_fstat_r+0x20>)
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	4605      	mov	r5, r0
 8015b60:	4608      	mov	r0, r1
 8015b62:	4611      	mov	r1, r2
 8015b64:	6023      	str	r3, [r4, #0]
 8015b66:	f7ea ff62 	bl	8000a2e <_fstat>
 8015b6a:	1c43      	adds	r3, r0, #1
 8015b6c:	d102      	bne.n	8015b74 <_fstat_r+0x1c>
 8015b6e:	6823      	ldr	r3, [r4, #0]
 8015b70:	b103      	cbz	r3, 8015b74 <_fstat_r+0x1c>
 8015b72:	602b      	str	r3, [r5, #0]
 8015b74:	bd38      	pop	{r3, r4, r5, pc}
 8015b76:	bf00      	nop
 8015b78:	2000e648 	.word	0x2000e648

08015b7c <_isatty_r>:
 8015b7c:	b538      	push	{r3, r4, r5, lr}
 8015b7e:	4c06      	ldr	r4, [pc, #24]	; (8015b98 <_isatty_r+0x1c>)
 8015b80:	2300      	movs	r3, #0
 8015b82:	4605      	mov	r5, r0
 8015b84:	4608      	mov	r0, r1
 8015b86:	6023      	str	r3, [r4, #0]
 8015b88:	f7ea ff61 	bl	8000a4e <_isatty>
 8015b8c:	1c43      	adds	r3, r0, #1
 8015b8e:	d102      	bne.n	8015b96 <_isatty_r+0x1a>
 8015b90:	6823      	ldr	r3, [r4, #0]
 8015b92:	b103      	cbz	r3, 8015b96 <_isatty_r+0x1a>
 8015b94:	602b      	str	r3, [r5, #0]
 8015b96:	bd38      	pop	{r3, r4, r5, pc}
 8015b98:	2000e648 	.word	0x2000e648

08015b9c <_init>:
 8015b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b9e:	bf00      	nop
 8015ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ba2:	bc08      	pop	{r3}
 8015ba4:	469e      	mov	lr, r3
 8015ba6:	4770      	bx	lr

08015ba8 <_fini>:
 8015ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015baa:	bf00      	nop
 8015bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015bae:	bc08      	pop	{r3}
 8015bb0:	469e      	mov	lr, r3
 8015bb2:	4770      	bx	lr
