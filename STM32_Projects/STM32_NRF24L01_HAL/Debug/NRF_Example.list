
NRF_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800312c  0800312c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800312c  0800312c  0001312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003134  08003134  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800313c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003148  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003148  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cf7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001405  00000000  00000000  00027d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000780  00000000  00000000  00029138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c8  00000000  00000000  000298b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f4f1  00000000  00000000  00029f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000062cd  00000000  00000000  00049471  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bdf1b  00000000  00000000  0004f73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010d659  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d78  00000000  00000000  0010d6d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030e8 	.word	0x080030e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080030e8 	.word	0x080030e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <DWT_Init+0x38>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d10e      	bne.n	80004f6 <DWT_Init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <DWT_Init+0x38>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4a08      	ldr	r2, [pc, #32]	; (8000500 <DWT_Init+0x38>)
 80004de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e2:	60d3      	str	r3, [r2, #12]
        DWT->CYCCNT = 0;
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <DWT_Init+0x3c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <DWT_Init+0x3c>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <DWT_Init+0x3c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6013      	str	r3, [r2, #0]
    }
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	e000edf0 	.word	0xe000edf0
 8000504:	e0001000 	.word	0xe0001000

08000508 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <DWT_Delay+0x40>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <DWT_Delay+0x44>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <DWT_Delay+0x48>)
 800051c:	fba2 2303 	umull	r2, r3, r2, r3
 8000520:	0c9a      	lsrs	r2, r3, #18
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	fb02 f303 	mul.w	r3, r2, r3
 8000528:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 800052a:	bf00      	nop
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <DWT_Delay+0x40>)
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	1ad3      	subs	r3, r2, r3
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	429a      	cmp	r2, r3
 8000538:	d8f8      	bhi.n	800052c <DWT_Delay+0x24>
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e0001000 	.word	0xe0001000
 800054c:	20000000 	.word	0x20000000
 8000550:	431bde83 	.word	0x431bde83

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f001 fb2e 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f82e 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f8cc 	bl	80006fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000564:	f000 f894 	bl	8000690 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000568:	2064      	movs	r0, #100	; 0x64
 800056a:	f001 fb97 	bl	8001c9c <HAL_Delay>
  DWT_Init();
 800056e:	f7ff ffab 	bl	80004c8 <DWT_Init>
  NRF_main_init();
 8000572:	f000 f973 	bl	800085c <NRF_main_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NRFSendData("00000", "1234567890");
 8000576:	490d      	ldr	r1, [pc, #52]	; (80005ac <main+0x58>)
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <main+0x5c>)
 800057a:	f000 f95b 	bl	8000834 <NRFSendData>
	  HAL_Delay(100);
 800057e:	2064      	movs	r0, #100	; 0x64
 8000580:	f001 fb8c 	bl	8001c9c <HAL_Delay>

	  if((myNRF.RXIRQ==1) && (!myNRF.Busy))
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <main+0x60>)
 8000586:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800058a:	2b01      	cmp	r3, #1
 800058c:	d108      	bne.n	80005a0 <main+0x4c>
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <main+0x60>)
 8000590:	7e1b      	ldrb	r3, [r3, #24]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d104      	bne.n	80005a0 <main+0x4c>
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <main+0x64>)
 800059c:	f001 fe65 	bl	800226a <HAL_GPIO_TogglePin>
		  myNRF.RXIRQ==0;
	  }

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80005a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <main+0x64>)
 80005a6:	f001 fe60 	bl	800226a <HAL_GPIO_TogglePin>
	  NRFSendData("00000", "1234567890");
 80005aa:	e7e4      	b.n	8000576 <main+0x22>
 80005ac:	08003100 	.word	0x08003100
 80005b0:	0800310c 	.word	0x0800310c
 80005b4:	200000c4 	.word	0x200000c4
 80005b8:	40020c00 	.word	0x40020c00

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fd84 	bl	80030d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	; 0xa8
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fe45 	bl	80022d0 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f962 	bl	8000914 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2105      	movs	r1, #5
 800066e:	4618      	mov	r0, r3
 8000670:	f002 f89e 	bl	80027b0 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 f94b 	bl	8000914 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_SPI1_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_SPI1_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006c4:	2220      	movs	r2, #32
 80006c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006dc:	220a      	movs	r2, #10
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_SPI1_Init+0x64>)
 80006e2:	f002 fa23 	bl	8002b2c <HAL_SPI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f912 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000006c 	.word	0x2000006c
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <MX_GPIO_Init+0xec>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a33      	ldr	r2, [pc, #204]	; (80007e8 <MX_GPIO_Init+0xec>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <MX_GPIO_Init+0xec>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_GPIO_Init+0xec>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a2c      	ldr	r2, [pc, #176]	; (80007e8 <MX_GPIO_Init+0xec>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_GPIO_Init+0xec>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xec>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <MX_GPIO_Init+0xec>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <MX_GPIO_Init+0xec>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2118      	movs	r1, #24
 800076a:	4820      	ldr	r0, [pc, #128]	; (80007ec <MX_GPIO_Init+0xf0>)
 800076c:	f001 fd64 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000776:	481e      	ldr	r0, [pc, #120]	; (80007f0 <MX_GPIO_Init+0xf4>)
 8000778:	f001 fd5e 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800077c:	2304      	movs	r3, #4
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xf8>)
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4817      	ldr	r0, [pc, #92]	; (80007ec <MX_GPIO_Init+0xf0>)
 8000790:	f001 fbb8 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000794:	2318      	movs	r3, #24
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	4810      	ldr	r0, [pc, #64]	; (80007ec <MX_GPIO_Init+0xf0>)
 80007ac:	f001 fbaa 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80007b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <MX_GPIO_Init+0xf4>)
 80007ca:	f001 fb9b 	bl	8001f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2008      	movs	r0, #8
 80007d4:	f001 fb5f 	bl	8001e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007d8:	2008      	movs	r0, #8
 80007da:	f001 fb78 	bl	8001ece <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	10310000 	.word	0x10310000

080007f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	2b04      	cmp	r3, #4
 8000806:	d10c      	bne.n	8000822 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		if(HAL_nRF24L01P_IRQ_Handler(&myNRF) != HAL_OK)
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <HAL_GPIO_EXTI_Callback+0x34>)
 800080a:	f000 f9c1 	bl	8000b90 <HAL_nRF24L01P_IRQ_Handler>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <HAL_GPIO_EXTI_Callback+0x20>
		{
			Error_Handler();
 8000814:	f000 f87e 	bl	8000914 <Error_Handler>
		}
		HAL_nRF24L01P_ReadRegister(&myNRF, nRF_STATUS, &regStatus);
 8000818:	4a05      	ldr	r2, [pc, #20]	; (8000830 <HAL_GPIO_EXTI_Callback+0x38>)
 800081a:	2107      	movs	r1, #7
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <HAL_GPIO_EXTI_Callback+0x34>)
 800081e:	f000 ffd4 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
	}
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000c4 	.word	0x200000c4
 8000830:	20000048 	.word	0x20000048

08000834 <NRFSendData>:

void NRFSendData(char * nrfID, char * nrfData)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
	HAL_nRF24L01P_SetPTXAddress(&myNRF, (uint8_t *) nrfID);
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <NRFSendData+0x24>)
 8000842:	f000 fa9b 	bl	8000d7c <HAL_nRF24L01P_SetPTXAddress>
	if(HAL_nRF24L01P_TransmitPacketACK(&myNRF, (uint8_t *) nrfData, nRF_DATA_PIPE_0) != HAL_OK)
 8000846:	2200      	movs	r2, #0
 8000848:	6839      	ldr	r1, [r7, #0]
 800084a:	4803      	ldr	r0, [pc, #12]	; (8000858 <NRFSendData+0x24>)
 800084c:	f000 fa29 	bl	8000ca2 <HAL_nRF24L01P_TransmitPacketACK>
	{
		//Error
	}
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000c4 	.word	0x200000c4

0800085c <NRF_main_init>:

void NRF_main_init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	/* ---- myNRF24L01+ Definitions ---- */
	myNRF.hspi = &hspi1;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <NRF_main_init+0x9c>)
 8000862:	4a26      	ldr	r2, [pc, #152]	; (80008fc <NRF_main_init+0xa0>)
 8000864:	601a      	str	r2, [r3, #0]
	myNRF.CRC_Width = nRF_CRC_WIDTH_BYTE;
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <NRF_main_init+0x9c>)
 8000868:	2200      	movs	r2, #0
 800086a:	711a      	strb	r2, [r3, #4]
	myNRF.ADDR_Width = nRF_ADDR_WIDTH_5;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <NRF_main_init+0x9c>)
 800086e:	2203      	movs	r2, #3
 8000870:	715a      	strb	r2, [r3, #5]
	myNRF.Data_Rate = nRF_DATA_RATE_250KBPS;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <NRF_main_init+0x9c>)
 8000874:	2201      	movs	r2, #1
 8000876:	719a      	strb	r2, [r3, #6]
	myNRF.TX_Power = nRF_TX_PWR_M18dBm;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <NRF_main_init+0x9c>)
 800087a:	2200      	movs	r2, #0
 800087c:	71da      	strb	r2, [r3, #7]
	myNRF.State = nRF_STATE_RX;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <NRF_main_init+0x9c>)
 8000880:	2201      	movs	r2, #1
 8000882:	721a      	strb	r2, [r3, #8]

	myNRF.RF_Channel = 1;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <NRF_main_init+0x9c>)
 8000886:	2201      	movs	r2, #1
 8000888:	725a      	strb	r2, [r3, #9]
	myNRF.PayloadWidth = nRF_RXPW_32BYTES;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <NRF_main_init+0x9c>)
 800088c:	2220      	movs	r2, #32
 800088e:	729a      	strb	r2, [r3, #10]
	myNRF.RetransmitCount = nRF_RETX_DISABLED;// nRF_RETX_COUNT_15;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <NRF_main_init+0x9c>)
 8000892:	2200      	movs	r2, #0
 8000894:	72da      	strb	r2, [r3, #11]
	myNRF.RetransmitDelay = nRF_RETX_DELAY_250uS; //nRF_RETX_DELAY_4000uS;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <NRF_main_init+0x9c>)
 8000898:	2200      	movs	r2, #0
 800089a:	731a      	strb	r2, [r3, #12]

	myNRF.RX_Address = (uint8_t *)"00001";
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <NRF_main_init+0x9c>)
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <NRF_main_init+0xa4>)
 80008a0:	611a      	str	r2, [r3, #16]
	myNRF.TX_Address = (uint8_t *)"00000";
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <NRF_main_init+0x9c>)
 80008a4:	4a17      	ldr	r2, [pc, #92]	; (8000904 <NRF_main_init+0xa8>)
 80008a6:	615a      	str	r2, [r3, #20]

	myNRF.RX_Buffer = RXBuffer;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <NRF_main_init+0x9c>)
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <NRF_main_init+0xac>)
 80008ac:	61da      	str	r2, [r3, #28]
	myNRF.TX_Buffer = TXBuffer;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <NRF_main_init+0x9c>)
 80008b0:	4a16      	ldr	r2, [pc, #88]	; (800090c <NRF_main_init+0xb0>)
 80008b2:	621a      	str	r2, [r3, #32]

	myNRF.nRF_nSS_GPIO_PORT = GPIOA;
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <NRF_main_init+0x9c>)
 80008b6:	4a16      	ldr	r2, [pc, #88]	; (8000910 <NRF_main_init+0xb4>)
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
	myNRF.nRF_nSS_GPIO_PIN = GPIO_PIN_3;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <NRF_main_init+0x9c>)
 80008bc:	2208      	movs	r2, #8
 80008be:	851a      	strh	r2, [r3, #40]	; 0x28

	myNRF.nRF_CE_GPIO_PORT = GPIOA;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <NRF_main_init+0x9c>)
 80008c2:	4a13      	ldr	r2, [pc, #76]	; (8000910 <NRF_main_init+0xb4>)
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
	myNRF.nRF_CE_GPIO_PIN = GPIO_PIN_4;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <NRF_main_init+0x9c>)
 80008c8:	2210      	movs	r2, #16
 80008ca:	861a      	strh	r2, [r3, #48]	; 0x30

	//ekleme
	myNRF.RXIRQ = 0;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <NRF_main_init+0x9c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	myNRF.TXIRQ = 0;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <NRF_main_init+0x9c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	myNRF.MaxReIRQ = 0;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <NRF_main_init+0x9c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	/* ---- myNRF24L01+ Definitions ---- */


	if(HAL_nRF24L01P_Init(&myNRF) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <NRF_main_init+0x9c>)
 80008e6:	f000 f81c 	bl	8000922 <HAL_nRF24L01P_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <NRF_main_init+0x98>
	{
		Error_Handler();
 80008f0:	f000 f810 	bl	8000914 <Error_Handler>
	}
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000c4 	.word	0x200000c4
 80008fc:	2000006c 	.word	0x2000006c
 8000900:	08003114 	.word	0x08003114
 8000904:	0800310c 	.word	0x0800310c
 8000908:	2000004c 	.word	0x2000004c
 800090c:	20000028 	.word	0x20000028
 8000910:	40020000 	.word	0x40020000

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <HAL_nRF24L01P_Init>:
#include "nRF24L01P.h"
#include "dwt_delay.h"

HAL_StatusTypeDef HAL_nRF24L01P_Init(nRF24L01P *nRF)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	HAL_StatusTypeDef retValue = HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_PowerUP(nRF, nRF_ENABLE) != HAL_OK)
 800092e:	2101      	movs	r1, #1
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f000 fc2b 	bl	800118c <HAL_nRF24L01P_PowerUP>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <HAL_nRF24L01P_Init+0x1e>
	{
		return HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	e123      	b.n	8000b88 <HAL_nRF24L01P_Init+0x266>
	}
	
	do {
			if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000940:	f107 030e 	add.w	r3, r7, #14
 8000944:	461a      	mov	r2, r3
 8000946:	2100      	movs	r1, #0
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 ff3e 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_nRF24L01P_Init+0x36>
			{
				return HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	e117      	b.n	8000b88 <HAL_nRF24L01P_Init+0x266>
			}
	} while((regValue & 0x02) == 0x00); // Did device powered up? 
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	2b00      	cmp	r3, #0
 8000960:	d0ee      	beq.n	8000940 <HAL_nRF24L01P_Init+0x1e>
	
	/* ---- InitProcess ---- */
	retValue |= HAL_nRF24L01P_SetPRXWidth(nRF, nRF->PayloadWidth, nRF_DATA_PIPE_0);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7a9b      	ldrb	r3, [r3, #10]
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f000 f9c0 	bl	8000cf0 <HAL_nRF24L01P_SetPRXWidth>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4313      	orrs	r3, r2
 8000978:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetPRXAddress(nRF, nRF->RX_Address, nRF_DATA_PIPE_0);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	691b      	ldr	r3, [r3, #16]
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 fa14 	bl	8000db0 <HAL_nRF24L01P_SetPRXAddress>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	4313      	orrs	r3, r2
 8000990:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetPTXAddress(nRF, nRF->TX_Address);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	4619      	mov	r1, r3
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f000 f9ef 	bl	8000d7c <HAL_nRF24L01P_SetPTXAddress>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_RXDataReadyIRQ(nRF, nRF_ENABLE);
 80009a8:	2101      	movs	r1, #1
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 fb86 	bl	80010bc <HAL_nRF24L01P_RXDataReadyIRQ>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_TXDataSentIRQ(nRF, nRF_ENABLE);
 80009ba:	2101      	movs	r1, #1
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 fb4c 	bl	800105a <HAL_nRF24L01P_TXDataSentIRQ>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_MaxReTransmitIRQ(nRF, nRF_ENABLE);
 80009cc:	2101      	movs	r1, #1
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 fb12 	bl	8000ff8 <HAL_nRF24L01P_MaxReTransmitIRQ>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	4313      	orrs	r3, r2
 80009dc:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_CRC(nRF, nRF_ENABLE);
 80009de:	2101      	movs	r1, #1
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 fc35 	bl	8001250 <HAL_nRF24L01P_CRC>
 80009e6:	4603      	mov	r3, r0
 80009e8:	461a      	mov	r2, r3
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetCRCWidth(nRF, nRF->CRC_Width);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	4619      	mov	r1, r3
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 fbf9 	bl	80011ee <HAL_nRF24L01P_SetCRCWidth>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetAddressWidth(nRF, nRF->ADDR_Width);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	795b      	ldrb	r3, [r3, #5]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 fcda 	bl	80013c6 <HAL_nRF24L01P_SetAddressWidth>
 8000a12:	4603      	mov	r3, r0
 8000a14:	461a      	mov	r2, r3
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRFChannel(nRF, nRF->RF_Channel);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7a5b      	ldrb	r3, [r3, #9]
 8000a20:	4619      	mov	r1, r3
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f000 fd66 	bl	80014f4 <HAL_nRF24L01P_SetRFChannel>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetDataRate(nRF, nRF->Data_Rate);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	799b      	ldrb	r3, [r3, #6]
 8000a36:	4619      	mov	r1, r3
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f000 fd9c 	bl	8001576 <HAL_nRF24L01P_SetDataRate>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRetransmissionCount(nRF, nRF->RetransmitCount);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7adb      	ldrb	r3, [r3, #11]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 fd1f 	bl	8001492 <HAL_nRF24L01P_SetRetransmissionCount>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_SetRetransmissionDelay(nRF, nRF->RetransmitDelay);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7b1b      	ldrb	r3, [r3, #12]
 8000a62:	4619      	mov	r1, r3
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 fcdf 	bl	8001428 <HAL_nRF24L01P_SetRetransmissionDelay>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_DynACK(nRF, nRF_DISABLE);
 8000a74:	2100      	movs	r1, #0
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 fa8d 	bl	8000f96 <HAL_nRF24L01P_DynACK>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_ACKPayload(nRF, nRF_DISABLE);
 8000a86:	2100      	movs	r1, #0
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fa53 	bl	8000f34 <HAL_nRF24L01P_ACKPayload>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_DynPayload(nRF, nRF_DISABLE);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fa19 	bl	8000ed2 <HAL_nRF24L01P_DynPayload>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_RXPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2100      	movs	r1, #0
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 fc44 	bl	800133c <HAL_nRF24L01P_RXPipe>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_DPLPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f000 f9c4 	bl	8000e50 <HAL_nRF24L01P_DPLPipe>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f000 fbeb 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_1, nRF_DISABLE);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2101      	movs	r1, #1
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 fbe1 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_2, nRF_DISABLE);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2102      	movs	r1, #2
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 fbd7 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_3, nRF_DISABLE);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2103      	movs	r1, #3
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 fbcd 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_4, nRF_DISABLE);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2104      	movs	r1, #4
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 fbc3 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461a      	mov	r2, r3
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_5, nRF_DISABLE);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2105      	movs	r1, #5
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 fbb9 	bl	80012b2 <HAL_nRF24L01P_AutoACK>
 8000b40:	4603      	mov	r3, r0
 8000b42:	461a      	mov	r2, r3
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_ClearInterrupts(nRF);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 fced 	bl	800152a <HAL_nRF24L01P_ClearInterrupts>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	73fb      	strb	r3, [r7, #15]
	
	retValue |= HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 fade 	bl	800111e <HAL_nRF24L01P_TXRX>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	73fb      	strb	r3, [r7, #15]
	retValue |= HAL_nRF24L01P_FlushRX(nRF);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 fd6b 	bl	8001648 <HAL_nRF24L01P_FlushRX>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461a      	mov	r2, r3
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	73fb      	strb	r3, [r7, #15]
	
	if(retValue != HAL_OK)
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_nRF24L01P_Init+0x264>
	{
		return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <HAL_nRF24L01P_Init+0x266>
	}
	return HAL_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_nRF24L01P_IRQ_Handler>:

HAL_StatusTypeDef HAL_nRF24L01P_IRQ_Handler(nRF24L01P *nRF)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regStatus;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_STATUS, &regStatus) != HAL_OK)
 8000b98:	f107 030f 	add.w	r3, r7, #15
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	2107      	movs	r1, #7
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 fe12 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_nRF24L01P_IRQ_Handler+0x20>
	{
		return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e074      	b.n	8000c9a <HAL_nRF24L01P_IRQ_Handler+0x10a>
	}	
	/* ---- RX FIFO Int.---- */
	if((regStatus & (1 << 6)) != 0)
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d027      	beq.n	8000c0a <HAL_nRF24L01P_IRQ_Handler+0x7a>
	{
		uint8_t regFIFO_Status;
		HAL_nRF24L01P_CE_Low(nRF);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 ff05 	bl	80019ca <HAL_nRF24L01P_CE_Low>
		do {
		HAL_nRF24L01P_ReadRXPayload(nRF, nRF->RX_Buffer);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 fd59 	bl	800167e <HAL_nRF24L01P_ReadRXPayload>
		regStatus |= (1 << 6);
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	73fb      	strb	r3, [r7, #15]
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 8000bd6:	f107 030f 	add.w	r3, r7, #15
 8000bda:	461a      	mov	r2, r3
 8000bdc:	2107      	movs	r1, #7
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 fdd4 	bl	800178c <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_ReadRegister(nRF, nRF_FIFO_STATUS, &regFIFO_Status);
 8000be4:	f107 030e 	add.w	r3, r7, #14
 8000be8:	461a      	mov	r2, r3
 8000bea:	2117      	movs	r1, #23
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 fdec 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
		} while((regFIFO_Status & 0x01) == 0x00);
 8000bf2:	7bbb      	ldrb	r3, [r7, #14]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0e1      	beq.n	8000bc0 <HAL_nRF24L01P_IRQ_Handler+0x30>
		HAL_nRF24L01P_CE_High(nRF);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 fed4 	bl	80019aa <HAL_nRF24L01P_CE_High>
		nRF->RXIRQ = 1;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2201      	movs	r2, #1
 8000c06:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}
	/* ---- TX Sent Int.---- */
	if((regStatus & (1 << 5)) != 0)
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	f003 0320 	and.w	r3, r3, #32
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d01c      	beq.n	8000c4e <HAL_nRF24L01P_IRQ_Handler+0xbe>
	{
		HAL_nRF24L01P_CE_Low(nRF);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f000 fed8 	bl	80019ca <HAL_nRF24L01P_CE_Low>
		regStatus |= (1 << 5);
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	73fb      	strb	r3, [r7, #15]
		HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8000c24:	2101      	movs	r1, #1
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f000 fa79 	bl	800111e <HAL_nRF24L01P_TXRX>
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 8000c2c:	f107 030f 	add.w	r3, r7, #15
 8000c30:	461a      	mov	r2, r3
 8000c32:	2107      	movs	r1, #7
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 fda9 	bl	800178c <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_CE_High(nRF);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f000 feb5 	bl	80019aa <HAL_nRF24L01P_CE_High>
		nRF->Busy = 0;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	761a      	strb	r2, [r3, #24]
		nRF->TXIRQ = 1;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}
	/* ---- MAXReTX Int.---- */
	if((regStatus & (1 << 4)) != 0)
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d01f      	beq.n	8000c98 <HAL_nRF24L01P_IRQ_Handler+0x108>
	{
		regStatus |= (1 << 4);
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	73fb      	strb	r3, [r7, #15]
		
		HAL_nRF24L01P_FlushTX(nRF);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f000 fcd5 	bl	8001612 <HAL_nRF24L01P_FlushTX>
		//HAL_nRF24L01P_PowerUP(nRF, nRF_DISABLE);	// bi kapatip açalim da düzelsin...
		//HAL_nRF24L01P_PowerUP(nRF, nRF_ENABLE);
		
		HAL_nRF24L01P_CE_Low(nRF);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 feae 	bl	80019ca <HAL_nRF24L01P_CE_Low>
		HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f000 fa54 	bl	800111e <HAL_nRF24L01P_TXRX>
		HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regStatus);
 8000c76:	f107 030f 	add.w	r3, r7, #15
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 fd84 	bl	800178c <HAL_nRF24L01P_WriteRegister>
		HAL_nRF24L01P_CE_High(nRF);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 fe90 	bl	80019aa <HAL_nRF24L01P_CE_High>
		nRF->Busy = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	761a      	strb	r2, [r3, #24]
		nRF->MaxReIRQ = 1;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
	return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_nRF24L01P_TransmitPacketACK>:

	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_TransmitPacketACK(nRF24L01P *nRF, uint8_t *Data, nRF_DATA_PIPE Pipe)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	4613      	mov	r3, r2
 8000cae:	71fb      	strb	r3, [r7, #7]
	nRF->Busy = 1;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	761a      	strb	r2, [r3, #24]

	HAL_nRF24L01P_CE_Low(nRF);
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f000 fe87 	bl	80019ca <HAL_nRF24L01P_CE_Low>
	HAL_nRF24L01P_TXRX(nRF, nRF_STATE_TX);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f000 fa2d 	bl	800111e <HAL_nRF24L01P_TXRX>
	HAL_nRF24L01P_WriteTXPayloadACK(nRF, Data, Pipe);
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f000 fd16 	bl	80016fc <HAL_nRF24L01P_WriteTXPayloadACK>
	HAL_nRF24L01P_CE_High(nRF);
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f000 fe6a 	bl	80019aa <HAL_nRF24L01P_CE_High>

	//while(nRF->Busy);	// TODO: Add *timeout* functionality
	while(nRF->Busy)
 8000cd6:	e002      	b.n	8000cde <HAL_nRF24L01P_TransmitPacketACK+0x3c>
		DWT_Delay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f7ff fc15 	bl	8000508 <DWT_Delay>
	while(nRF->Busy)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	7e1b      	ldrb	r3, [r3, #24]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f8      	bne.n	8000cd8 <HAL_nRF24L01P_TransmitPacketACK+0x36>

	return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_nRF24L01P_SetPRXWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXWidth(nRF24L01P *nRF, nRF_PRX_WIDTH Width, nRF_DATA_PIPE Pipe)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regAddr, regData;
	regData = Width & 0x3F;
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	73bb      	strb	r3, [r7, #14]
	/* ---- Pre Process ---- */
	switch(Pipe)
 8000d0a:	78bb      	ldrb	r3, [r7, #2]
 8000d0c:	2b05      	cmp	r3, #5
 8000d0e:	d821      	bhi.n	8000d54 <HAL_nRF24L01P_SetPRXWidth+0x64>
 8000d10:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <HAL_nRF24L01P_SetPRXWidth+0x28>)
 8000d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d16:	bf00      	nop
 8000d18:	08000d31 	.word	0x08000d31
 8000d1c:	08000d37 	.word	0x08000d37
 8000d20:	08000d3d 	.word	0x08000d3d
 8000d24:	08000d43 	.word	0x08000d43
 8000d28:	08000d49 	.word	0x08000d49
 8000d2c:	08000d4f 	.word	0x08000d4f
	{
		case 0: //P0
			regAddr = nRF_RX_PW_P0;
 8000d30:	2311      	movs	r3, #17
 8000d32:	73fb      	strb	r3, [r7, #15]
		break;
 8000d34:	e010      	b.n	8000d58 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 1: //P1
			regAddr = nRF_RX_PW_P1;
 8000d36:	2312      	movs	r3, #18
 8000d38:	73fb      	strb	r3, [r7, #15]
		break;
 8000d3a:	e00d      	b.n	8000d58 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 2: //P2
			regAddr = nRF_RX_PW_P2;
 8000d3c:	2313      	movs	r3, #19
 8000d3e:	73fb      	strb	r3, [r7, #15]
		break;
 8000d40:	e00a      	b.n	8000d58 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 3: //P3
			regAddr = nRF_RX_PW_P3;
 8000d42:	2314      	movs	r3, #20
 8000d44:	73fb      	strb	r3, [r7, #15]
		break;
 8000d46:	e007      	b.n	8000d58 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 4: //P4
			regAddr = nRF_RX_PW_P4;
 8000d48:	2315      	movs	r3, #21
 8000d4a:	73fb      	strb	r3, [r7, #15]
		break;
 8000d4c:	e004      	b.n	8000d58 <HAL_nRF24L01P_SetPRXWidth+0x68>
		case 5: //P5
			regAddr = nRF_RX_PW_P5;
 8000d4e:	2316      	movs	r3, #22
 8000d50:	73fb      	strb	r3, [r7, #15]
		break;
 8000d52:	e001      	b.n	8000d58 <HAL_nRF24L01P_SetPRXWidth+0x68>
		default:
			return HAL_ERROR;		
 8000d54:	2301      	movs	r3, #1
 8000d56:	e00c      	b.n	8000d72 <HAL_nRF24L01P_SetPRXWidth+0x82>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, regAddr, &regData)  != HAL_OK)
 8000d58:	f107 020e 	add.w	r2, r7, #14
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f000 fd13 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_nRF24L01P_SetPRXWidth+0x80>
	{
		return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <HAL_nRF24L01P_SetPRXWidth+0x82>
	}
	return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop

08000d7c <HAL_nRF24L01P_SetPTXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPTXAddress(nRF24L01P *nRF, uint8_t *pRegData)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + nRF_TX_ADDR, pRegData, Zero, 5) != HAL_OK)
 8000d86:	f107 0208 	add.w	r2, r7, #8
 8000d8a:	2305      	movs	r3, #5
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	2130      	movs	r1, #48	; 0x30
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 fd34 	bl	8001802 <HAL_nRF24L01P_SendCommand>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_nRF24L01P_SetPTXAddress+0x28>
	{
		return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e000      	b.n	8000da6 <HAL_nRF24L01P_SetPTXAddress+0x2a>
	}
	return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_nRF24L01P_SetPRXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXAddress(nRF24L01P *nRF, uint8_t *pRegData, nRF_DATA_PIPE Pipe)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	uint8_t Size;
	uint8_t regAddr;
	/* ---- Pre Process ---- */
	switch(Pipe)
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d82d      	bhi.n	8000e20 <HAL_nRF24L01P_SetPRXAddress+0x70>
 8000dc4:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <HAL_nRF24L01P_SetPRXAddress+0x1c>)
 8000dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dca:	bf00      	nop
 8000dcc:	08000de5 	.word	0x08000de5
 8000dd0:	08000def 	.word	0x08000def
 8000dd4:	08000df9 	.word	0x08000df9
 8000dd8:	08000e03 	.word	0x08000e03
 8000ddc:	08000e0d 	.word	0x08000e0d
 8000de0:	08000e17 	.word	0x08000e17
	{
		case 0: //P0
			Size = 5;
 8000de4:	2305      	movs	r3, #5
 8000de6:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P0;
 8000de8:	230a      	movs	r3, #10
 8000dea:	75bb      	strb	r3, [r7, #22]
		break;
 8000dec:	e01a      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 1: //P1
			Size = 5;
 8000dee:	2305      	movs	r3, #5
 8000df0:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P1;
 8000df2:	230b      	movs	r3, #11
 8000df4:	75bb      	strb	r3, [r7, #22]
		break;
 8000df6:	e015      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 2: //P2
			Size = 1;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P2;
 8000dfc:	230c      	movs	r3, #12
 8000dfe:	75bb      	strb	r3, [r7, #22]
		break;
 8000e00:	e010      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 3: //P3
			Size = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P3;
 8000e06:	230d      	movs	r3, #13
 8000e08:	75bb      	strb	r3, [r7, #22]
		break;
 8000e0a:	e00b      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 4: //P4
			Size = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P4;
 8000e10:	230e      	movs	r3, #14
 8000e12:	75bb      	strb	r3, [r7, #22]
		break;
 8000e14:	e006      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		case 5: //P5
			Size = 1;
 8000e16:	2301      	movs	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
			regAddr = nRF_RX_ADDR_P5;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	75bb      	strb	r3, [r7, #22]
		break;
 8000e1e:	e001      	b.n	8000e24 <HAL_nRF24L01P_SetPRXAddress+0x74>
		default:
			return HAL_ERROR;		
 8000e20:	2301      	movs	r3, #1
 8000e22:	e011      	b.n	8000e48 <HAL_nRF24L01P_SetPRXAddress+0x98>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, Zero, Size) != HAL_OK)
 8000e24:	7dbb      	ldrb	r3, [r7, #22]
 8000e26:	3320      	adds	r3, #32
 8000e28:	b2d9      	uxtb	r1, r3
 8000e2a:	f107 0210 	add.w	r2, r7, #16
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4613      	mov	r3, r2
 8000e34:	68ba      	ldr	r2, [r7, #8]
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f000 fce3 	bl	8001802 <HAL_nRF24L01P_SendCommand>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_nRF24L01P_SetPRXAddress+0x96>
	{
		return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <HAL_nRF24L01P_SetPRXAddress+0x98>
	}
	return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_nRF24L01P_DPLPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_DPLPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE DPL_State)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	70bb      	strb	r3, [r7, #2]
		/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 8000e60:	f107 030f 	add.w	r3, r7, #15
 8000e64:	461a      	mov	r2, r3
 8000e66:	211c      	movs	r1, #28
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 fcae 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_nRF24L01P_DPLPipe+0x28>
	{
		return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e028      	b.n	8000eca <HAL_nRF24L01P_DPLPipe+0x7a>
	}
	
	if(DPL_State)
 8000e78:	78bb      	ldrb	r3, [r7, #2]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <HAL_nRF24L01P_DPLPipe+0x46>
	{
		regValue |= (1 << Pipe);
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	2201      	movs	r2, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	b25a      	sxtb	r2, r3
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e00c      	b.n	8000eb0 <HAL_nRF24L01P_DPLPipe+0x60>
	} else {
		regValue &= ~(1 << Pipe);
 8000e96:	78fb      	ldrb	r3, [r7, #3]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	b25a      	sxtb	r2, r3
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b25b      	sxtb	r3, r3
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 8000eb0:	f107 030f 	add.w	r3, r7, #15
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	211c      	movs	r1, #28
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f000 fc67 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_nRF24L01P_DPLPipe+0x78>
	{
		return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <HAL_nRF24L01P_DPLPipe+0x7a>
	}
	return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_nRF24L01P_DynPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_DynPayload(nRF24L01P *nRF, nRF_STATE DPL_State)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000ede:	f107 030f 	add.w	r3, r7, #15
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	211d      	movs	r1, #29
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 fc6f 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_nRF24L01P_DynPayload+0x24>
	{
		return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e01a      	b.n	8000f2c <HAL_nRF24L01P_DynPayload+0x5a>
	}
	
	if(DPL_State)
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <HAL_nRF24L01P_DynPayload+0x36>
	{
		regValue |= (1 << 2);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	e004      	b.n	8000f12 <HAL_nRF24L01P_DynPayload+0x40>
	} else {
		regValue &= ~(1 << 2);
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	f023 0304 	bic.w	r3, r3, #4
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000f12:	f107 030f 	add.w	r3, r7, #15
 8000f16:	461a      	mov	r2, r3
 8000f18:	211d      	movs	r1, #29
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f000 fc36 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_nRF24L01P_DynPayload+0x58>
	{
		return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_nRF24L01P_DynPayload+0x5a>
	}
	return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_nRF24L01P_ACKPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_ACKPayload(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000f40:	f107 030f 	add.w	r3, r7, #15
 8000f44:	461a      	mov	r2, r3
 8000f46:	211d      	movs	r1, #29
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 fc3e 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_nRF24L01P_ACKPayload+0x24>
	{
		return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e01a      	b.n	8000f8e <HAL_nRF24L01P_ACKPayload+0x5a>
	}
	
	if(ACK_State)
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d005      	beq.n	8000f6a <HAL_nRF24L01P_ACKPayload+0x36>
	{
		regValue |= (1 << 1);
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e004      	b.n	8000f74 <HAL_nRF24L01P_ACKPayload+0x40>
	} else {
		regValue &= ~(1 << 1);
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	f023 0302 	bic.w	r3, r3, #2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000f74:	f107 030f 	add.w	r3, r7, #15
 8000f78:	461a      	mov	r2, r3
 8000f7a:	211d      	movs	r1, #29
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f000 fc05 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <HAL_nRF24L01P_ACKPayload+0x58>
	{
		return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <HAL_nRF24L01P_ACKPayload+0x5a>
	}
	return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_nRF24L01P_DynACK>:

HAL_StatusTypeDef HAL_nRF24L01P_DynACK(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000fa2:	f107 030f 	add.w	r3, r7, #15
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	211d      	movs	r1, #29
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 fc0d 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_nRF24L01P_DynACK+0x24>
	{
		return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e01a      	b.n	8000ff0 <HAL_nRF24L01P_DynACK+0x5a>
	}
	
	if(ACK_State)
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <HAL_nRF24L01P_DynACK+0x36>
	{
		regValue |= (1 << 0);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e004      	b.n	8000fd6 <HAL_nRF24L01P_DynACK+0x40>
	} else {
		regValue &= ~(1 << 0);
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f023 0301 	bic.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000fd6:	f107 030f 	add.w	r3, r7, #15
 8000fda:	461a      	mov	r2, r3
 8000fdc:	211d      	movs	r1, #29
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fbd4 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_nRF24L01P_DynACK+0x58>
	{
		return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_nRF24L01P_DynACK+0x5a>
	}
	return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_nRF24L01P_MaxReTransmitIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_MaxReTransmitIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001004:	f107 030f 	add.w	r3, r7, #15
 8001008:	461a      	mov	r2, r3
 800100a:	2100      	movs	r1, #0
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 fbdc 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_nRF24L01P_MaxReTransmitIRQ+0x24>
	{
		return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e01a      	b.n	8001052 <HAL_nRF24L01P_MaxReTransmitIRQ+0x5a>
	}
	
	if(IRQ_State)
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <HAL_nRF24L01P_MaxReTransmitIRQ+0x36>
	{
		regValue &= ~(1 << 4);
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	f023 0310 	bic.w	r3, r3, #16
 8001028:	b2db      	uxtb	r3, r3
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e004      	b.n	8001038 <HAL_nRF24L01P_MaxReTransmitIRQ+0x40>
	} else {
		regValue |= (1 << 4);
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	b2db      	uxtb	r3, r3
 8001036:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001038:	f107 030f 	add.w	r3, r7, #15
 800103c:	461a      	mov	r2, r3
 800103e:	2100      	movs	r1, #0
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fba3 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_nRF24L01P_MaxReTransmitIRQ+0x58>
	{
		return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_nRF24L01P_MaxReTransmitIRQ+0x5a>
	}
	return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_nRF24L01P_TXDataSentIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_TXDataSentIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001066:	f107 030f 	add.w	r3, r7, #15
 800106a:	461a      	mov	r2, r3
 800106c:	2100      	movs	r1, #0
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 fbab 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_nRF24L01P_TXDataSentIRQ+0x24>
	{
		return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e01a      	b.n	80010b4 <HAL_nRF24L01P_TXDataSentIRQ+0x5a>
	}
	
	if(IRQ_State)
 800107e:	78fb      	ldrb	r3, [r7, #3]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_nRF24L01P_TXDataSentIRQ+0x36>
	{
		regValue &= ~(1 << 5);
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	f023 0320 	bic.w	r3, r3, #32
 800108a:	b2db      	uxtb	r3, r3
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	e004      	b.n	800109a <HAL_nRF24L01P_TXDataSentIRQ+0x40>
	} else {
		regValue |= (1 << 5);
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	f043 0320 	orr.w	r3, r3, #32
 8001096:	b2db      	uxtb	r3, r3
 8001098:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800109a:	f107 030f 	add.w	r3, r7, #15
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 fb72 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_nRF24L01P_TXDataSentIRQ+0x58>
	{
		return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_nRF24L01P_TXDataSentIRQ+0x5a>
	}
	return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <HAL_nRF24L01P_RXDataReadyIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_RXDataReadyIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80010c8:	f107 030f 	add.w	r3, r7, #15
 80010cc:	461a      	mov	r2, r3
 80010ce:	2100      	movs	r1, #0
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fb7a 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_nRF24L01P_RXDataReadyIRQ+0x24>
	{
		return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e01a      	b.n	8001116 <HAL_nRF24L01P_RXDataReadyIRQ+0x5a>
	}
	
	if(IRQ_State)
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_nRF24L01P_RXDataReadyIRQ+0x36>
	{
		regValue &= ~(1 << 6);
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e004      	b.n	80010fc <HAL_nRF24L01P_RXDataReadyIRQ+0x40>
	} else {
		regValue |= (1 << 6);
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80010fc:	f107 030f 	add.w	r3, r7, #15
 8001100:	461a      	mov	r2, r3
 8001102:	2100      	movs	r1, #0
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fb41 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_nRF24L01P_RXDataReadyIRQ+0x58>
	{
		return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <HAL_nRF24L01P_RXDataReadyIRQ+0x5a>
	}
	return HAL_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_nRF24L01P_TXRX>:

HAL_StatusTypeDef HAL_nRF24L01P_TXRX(nRF24L01P *nRF, nRF_TXRX_STATE TxRx_State)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	460b      	mov	r3, r1
 8001128:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800112a:	f107 030f 	add.w	r3, r7, #15
 800112e:	461a      	mov	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f000 fb49 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_nRF24L01P_TXRX+0x24>
	{
		return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e020      	b.n	8001184 <HAL_nRF24L01P_TXRX+0x66>
	}
	
	if(TxRx_State)
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d008      	beq.n	800115a <HAL_nRF24L01P_TXRX+0x3c>
	{
		regValue |= (1);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	73fb      	strb	r3, [r7, #15]
		nRF->State = nRF_STATE_TX;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	721a      	strb	r2, [r3, #8]
 8001158:	e007      	b.n	800116a <HAL_nRF24L01P_TXRX+0x4c>
	} else {
		regValue &= ~(1);
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	73fb      	strb	r3, [r7, #15]
		nRF->State = nRF_STATE_RX;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	721a      	strb	r2, [r3, #8]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800116a:	f107 030f 	add.w	r3, r7, #15
 800116e:	461a      	mov	r2, r3
 8001170:	2100      	movs	r1, #0
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fb0a 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_nRF24L01P_TXRX+0x64>
	{
		return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_nRF24L01P_TXRX+0x66>
	}
	return HAL_OK;
 8001182:	2300      	movs	r3, #0
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_nRF24L01P_PowerUP>:

HAL_StatusTypeDef HAL_nRF24L01P_PowerUP(nRF24L01P *nRF, nRF_STATE Power)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001198:	f107 030f 	add.w	r3, r7, #15
 800119c:	461a      	mov	r2, r3
 800119e:	2100      	movs	r1, #0
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 fb12 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_nRF24L01P_PowerUP+0x24>
	{
		return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e01a      	b.n	80011e6 <HAL_nRF24L01P_PowerUP+0x5a>
	}
	
	if(Power)
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_nRF24L01P_PowerUP+0x36>
	{
		regValue |= (1 << 1);
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e004      	b.n	80011cc <HAL_nRF24L01P_PowerUP+0x40>
	} else {
		regValue &= ~(1 << 1);
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	f023 0302 	bic.w	r3, r3, #2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80011cc:	f107 030f 	add.w	r3, r7, #15
 80011d0:	461a      	mov	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fad9 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_nRF24L01P_PowerUP+0x58>
	{
		return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_nRF24L01P_PowerUP+0x5a>
	}
	return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_nRF24L01P_SetCRCWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetCRCWidth(nRF24L01P *nRF, nRF_CRC_WIDTH CRC_Width)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80011fa:	f107 030f 	add.w	r3, r7, #15
 80011fe:	461a      	mov	r2, r3
 8001200:	2100      	movs	r1, #0
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fae1 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_nRF24L01P_SetCRCWidth+0x24>
	{
		return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e01a      	b.n	8001248 <HAL_nRF24L01P_SetCRCWidth+0x5a>
	}
	
	if(CRC_Width)
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_nRF24L01P_SetCRCWidth+0x36>
	{
		regValue |= (1 << 2);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	b2db      	uxtb	r3, r3
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e004      	b.n	800122e <HAL_nRF24L01P_SetCRCWidth+0x40>
	} else {
		regValue &= ~(1 << 2);
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f023 0304 	bic.w	r3, r3, #4
 800122a:	b2db      	uxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800122e:	f107 030f 	add.w	r3, r7, #15
 8001232:	461a      	mov	r2, r3
 8001234:	2100      	movs	r1, #0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 faa8 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_nRF24L01P_SetCRCWidth+0x58>
	{
		return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_nRF24L01P_SetCRCWidth+0x5a>
	}
	return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_nRF24L01P_CRC>:

HAL_StatusTypeDef HAL_nRF24L01P_CRC(nRF24L01P *nRF, nRF_STATE CRC_State)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800125c:	f107 030f 	add.w	r3, r7, #15
 8001260:	461a      	mov	r2, r3
 8001262:	2100      	movs	r1, #0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 fab0 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <HAL_nRF24L01P_CRC+0x24>
	{
		return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e01a      	b.n	80012aa <HAL_nRF24L01P_CRC+0x5a>
	}
	
	if(CRC_State)
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <HAL_nRF24L01P_CRC+0x36>
	{
		regValue |= (1 << 3);
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	b2db      	uxtb	r3, r3
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	e004      	b.n	8001290 <HAL_nRF24L01P_CRC+0x40>
	} else {
		regValue &= ~(1 << 3);
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	f023 0308 	bic.w	r3, r3, #8
 800128c:	b2db      	uxtb	r3, r3
 800128e:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001290:	f107 030f 	add.w	r3, r7, #15
 8001294:	461a      	mov	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fa77 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_nRF24L01P_CRC+0x58>
	{
		return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <HAL_nRF24L01P_CRC+0x5a>
	}
	return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_nRF24L01P_AutoACK>:

HAL_StatusTypeDef HAL_nRF24L01P_AutoACK(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE ACK_State)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
 80012be:	4613      	mov	r3, r2
 80012c0:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 80012c2:	f107 030f 	add.w	r3, r7, #15
 80012c6:	461a      	mov	r2, r3
 80012c8:	2101      	movs	r1, #1
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fa7d 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_nRF24L01P_AutoACK+0x28>
	{
		return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e02c      	b.n	8001334 <HAL_nRF24L01P_AutoACK+0x82>
	}
	
	Pipe &= (0x3F); //nRF_EN_AA reg's 6. and 7. bits are Reserved
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012e0:	70fb      	strb	r3, [r7, #3]
	if(ACK_State)
 80012e2:	78bb      	ldrb	r3, [r7, #2]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <HAL_nRF24L01P_AutoACK+0x4e>
	{
		regValue |= (1 << Pipe); //nRF_EN_AA reg is Configured
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	2201      	movs	r2, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e00c      	b.n	800131a <HAL_nRF24L01P_AutoACK+0x68>
	} else {
		regValue &= ~(1 << Pipe); //nRF_EN_AA reg is Configured		
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	2201      	movs	r2, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	b25b      	sxtb	r3, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	b25a      	sxtb	r2, r3
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4013      	ands	r3, r2
 8001314:	b25b      	sxtb	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	73fb      	strb	r3, [r7, #15]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 800131a:	f107 030f 	add.w	r3, r7, #15
 800131e:	461a      	mov	r2, r3
 8001320:	2101      	movs	r1, #1
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fa32 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_nRF24L01P_AutoACK+0x80>
	{
		return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_nRF24L01P_AutoACK+0x82>
	}
	return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_nRF24L01P_RXPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_RXPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE Pipe_State)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
 8001348:	4613      	mov	r3, r2
 800134a:	70bb      	strb	r3, [r7, #2]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 800134c:	f107 030f 	add.w	r3, r7, #15
 8001350:	461a      	mov	r2, r3
 8001352:	2102      	movs	r1, #2
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fa38 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_nRF24L01P_RXPipe+0x28>
	{
		return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e02c      	b.n	80013be <HAL_nRF24L01P_RXPipe+0x82>
	}
	
	Pipe &= (0x3F); //nRF_EN_RXADDR reg's 7. bit is Reserved
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800136a:	70fb      	strb	r3, [r7, #3]
	if(Pipe_State)
 800136c:	78bb      	ldrb	r3, [r7, #2]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d00b      	beq.n	800138a <HAL_nRF24L01P_RXPipe+0x4e>
	{
		regValue |= (1 << Pipe);
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	2201      	movs	r2, #1
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	b25a      	sxtb	r2, r3
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	b25b      	sxtb	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b25b      	sxtb	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	73fb      	strb	r3, [r7, #15]
 8001388:	e00c      	b.n	80013a4 <HAL_nRF24L01P_RXPipe+0x68>
	} else {
		regValue &= ~(1 << Pipe);
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	2201      	movs	r2, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	b25b      	sxtb	r3, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	b25a      	sxtb	r2, r3
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4013      	ands	r3, r2
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	73fb      	strb	r3, [r7, #15]
	} //nRF_EN_RXADDR reg is Configured
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 80013a4:	f107 030f 	add.w	r3, r7, #15
 80013a8:	461a      	mov	r2, r3
 80013aa:	2102      	movs	r1, #2
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f9ed 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_nRF24L01P_RXPipe+0x80>
	{
		return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_nRF24L01P_RXPipe+0x82>
	}
	return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_nRF24L01P_SetAddressWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetAddressWidth(nRF24L01P *nRF, nRF_ADDR_WIDTH AddrWidth)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 80013d2:	f107 030f 	add.w	r3, r7, #15
 80013d6:	461a      	mov	r2, r3
 80013d8:	2103      	movs	r1, #3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f9f5 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_nRF24L01P_SetAddressWidth+0x24>
	{
		return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e01a      	b.n	8001420 <HAL_nRF24L01P_SetAddressWidth+0x5a>
	}
	
	AddrWidth &= (0x03);
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	70fb      	strb	r3, [r7, #3]
	regValue &= (0xFC); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Cleared
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	f023 0303 	bic.w	r3, r3, #3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	73fb      	strb	r3, [r7, #15]
	regValue |= (AddrWidth); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Configured
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	4313      	orrs	r3, r2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	461a      	mov	r2, r3
 800140c:	2103      	movs	r1, #3
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f9bc 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_nRF24L01P_SetAddressWidth+0x58>
	{
		return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_nRF24L01P_SetAddressWidth+0x5a>
	}
	return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_nRF24L01P_SetRetransmissionDelay>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionDelay(nRF24L01P *nRF, nRF_RETX_DELAY Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 8001434:	f107 030f 	add.w	r3, r7, #15
 8001438:	461a      	mov	r2, r3
 800143a:	2104      	movs	r1, #4
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f9c4 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_nRF24L01P_SetRetransmissionDelay+0x24>
	{
		return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e01e      	b.n	800148a <HAL_nRF24L01P_SetRetransmissionDelay+0x62>
	}
	
	Delay &= (0x0F);
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	70fb      	strb	r3, [r7, #3]
	regValue &= (0x0F); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Cleared
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	b2db      	uxtb	r3, r3
 800145c:	73fb      	strb	r3, [r7, #15]
	regValue |= (Delay << 4); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Configured
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	b25a      	sxtb	r2, r3
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	b25b      	sxtb	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b25b      	sxtb	r3, r3
 800146c:	b2db      	uxtb	r3, r3
 800146e:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 8001470:	f107 030f 	add.w	r3, r7, #15
 8001474:	461a      	mov	r2, r3
 8001476:	2104      	movs	r1, #4
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f987 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_nRF24L01P_SetRetransmissionDelay+0x60>
	{
		return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <HAL_nRF24L01P_SetRetransmissionDelay+0x62>
	}
	return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_nRF24L01P_SetRetransmissionCount>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionCount(nRF24L01P *nRF, nRF_RETX_COUNT Count)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 800149e:	f107 030f 	add.w	r3, r7, #15
 80014a2:	461a      	mov	r2, r3
 80014a4:	2104      	movs	r1, #4
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f98f 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_nRF24L01P_SetRetransmissionCount+0x24>
	{
		return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e01a      	b.n	80014ec <HAL_nRF24L01P_SetRetransmissionCount+0x5a>
	}
	
	Count &= (0x0F);
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	70fb      	strb	r3, [r7, #3]
	regValue &= (0xF0); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Cleared
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	f023 030f 	bic.w	r3, r3, #15
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	73fb      	strb	r3, [r7, #15]
	regValue |= (Count); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Configured
 80014c8:	7bfa      	ldrb	r2, [r7, #15]
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 80014d2:	f107 030f 	add.w	r3, r7, #15
 80014d6:	461a      	mov	r2, r3
 80014d8:	2104      	movs	r1, #4
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f956 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_nRF24L01P_SetRetransmissionCount+0x58>
	{
		return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_nRF24L01P_SetRetransmissionCount+0x5a>
	}
	return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_nRF24L01P_SetRFChannel>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRFChannel(nRF24L01P *nRF, uint8_t Channel)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
	/* ---- Pre Process ---- */
	Channel &= 0x7F;	// nRF_RF_CH 7. bit is RESERVED
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001506:	b2db      	uxtb	r3, r3
 8001508:	70fb      	strb	r3, [r7, #3]
										// Freq. = (2400 + "Channel" Value) MHz 
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_CH, &Channel) != HAL_OK)
 800150a:	1cfb      	adds	r3, r7, #3
 800150c:	461a      	mov	r2, r3
 800150e:	2105      	movs	r1, #5
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f93b 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_nRF24L01P_SetRFChannel+0x2c>
	{
		return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_nRF24L01P_SetRFChannel+0x2e>
	}
	return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_nRF24L01P_ClearInterrupts>:

HAL_StatusTypeDef HAL_nRF24L01P_ClearInterrupts(nRF24L01P *nRF)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 8001532:	f107 030f 	add.w	r3, r7, #15
 8001536:	461a      	mov	r2, r3
 8001538:	2107      	movs	r1, #7
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f945 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_nRF24L01P_ClearInterrupts+0x20>
	{
		return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e011      	b.n	800156e <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	
	regValue |= (0x07 << 4); //nRF_STATUS reg's 4.,5. and 6. bits are RESET
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001550:	b2db      	uxtb	r3, r3
 8001552:	73fb      	strb	r3, [r7, #15]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 8001554:	f107 030f 	add.w	r3, r7, #15
 8001558:	461a      	mov	r2, r3
 800155a:	2107      	movs	r1, #7
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f915 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_nRF24L01P_ClearInterrupts+0x42>
	{
		return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_nRF24L01P_SetDataRate>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_SetDataRate(nRF24L01P *nRF, nRF_DATA_RATE Rate)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
 800157e:	460b      	mov	r3, r1
 8001580:	70fb      	strb	r3, [r7, #3]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 8001582:	f107 030f 	add.w	r3, r7, #15
 8001586:	461a      	mov	r2, r3
 8001588:	2106      	movs	r1, #6
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f91d 	bl	80017ca <HAL_nRF24L01P_ReadRegister>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_nRF24L01P_SetDataRate+0x24>
	{
		return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e037      	b.n	800160a <HAL_nRF24L01P_SetDataRate+0x94>
	}
	switch(Rate)
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d004      	beq.n	80015aa <HAL_nRF24L01P_SetDataRate+0x34>
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d018      	beq.n	80015d6 <HAL_nRF24L01P_SetDataRate+0x60>
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00b      	beq.n	80015c0 <HAL_nRF24L01P_SetDataRate+0x4a>
 80015a8:	e020      	b.n	80015ec <HAL_nRF24L01P_SetDataRate+0x76>
	{
		case nRF_DATA_RATE_250KBPS:
			regValue |=  (0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is SET
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f043 0320 	orr.w	r3, r3, #32
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	73fb      	strb	r3, [r7, #15]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	f023 0308 	bic.w	r3, r3, #8
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	73fb      	strb	r3, [r7, #15]
		break;
 80015be:	e017      	b.n	80015f0 <HAL_nRF24L01P_SetDataRate+0x7a>
		case nRF_DATA_RATE_1MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	f023 0320 	bic.w	r3, r3, #32
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	73fb      	strb	r3, [r7, #15]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	f023 0308 	bic.w	r3, r3, #8
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	73fb      	strb	r3, [r7, #15]
		break;
 80015d4:	e00c      	b.n	80015f0 <HAL_nRF24L01P_SetDataRate+0x7a>
		case nRF_DATA_RATE_2MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	f023 0320 	bic.w	r3, r3, #32
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	73fb      	strb	r3, [r7, #15]
			regValue |=  (0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is SET
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	73fb      	strb	r3, [r7, #15]
		break;
 80015ea:	e001      	b.n	80015f0 <HAL_nRF24L01P_SetDataRate+0x7a>
		default:
			return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e00c      	b.n	800160a <HAL_nRF24L01P_SetDataRate+0x94>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 80015f0:	f107 030f 	add.w	r3, r7, #15
 80015f4:	461a      	mov	r2, r3
 80015f6:	2106      	movs	r1, #6
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f8c7 	bl	800178c <HAL_nRF24L01P_WriteRegister>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_nRF24L01P_SetDataRate+0x92>
	{
		return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_nRF24L01P_SetDataRate+0x94>
	}
	return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_nRF24L01P_FlushTX>:

HAL_StatusTypeDef HAL_nRF24L01P_FlushTX(nRF24L01P *nRF)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af02      	add	r7, sp, #8
 8001618:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_FLUSH_TX, &Zero, &Zero, 0) != HAL_OK)
 800161e:	f107 010f 	add.w	r1, r7, #15
 8001622:	f107 020f 	add.w	r2, r7, #15
 8001626:	2300      	movs	r3, #0
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	460b      	mov	r3, r1
 800162c:	21e1      	movs	r1, #225	; 0xe1
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f8e7 	bl	8001802 <HAL_nRF24L01P_SendCommand>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_nRF24L01P_FlushTX+0x2c>
	{
		return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <HAL_nRF24L01P_FlushTX+0x2e>
	}
	return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_nRF24L01P_FlushRX>:

HAL_StatusTypeDef HAL_nRF24L01P_FlushRX(nRF24L01P *nRF)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af02      	add	r7, sp, #8
 800164e:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_FLUSH_RX, &Zero, &Zero, 0) != HAL_OK)
 8001654:	f107 010f 	add.w	r1, r7, #15
 8001658:	f107 020f 	add.w	r2, r7, #15
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	460b      	mov	r3, r1
 8001662:	21e2      	movs	r1, #226	; 0xe2
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 f8cc 	bl	8001802 <HAL_nRF24L01P_SendCommand>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <HAL_nRF24L01P_FlushRX+0x2c>
	{
		return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_nRF24L01P_FlushRX+0x2e>
	}
	return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_nRF24L01P_ReadRXPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_ReadRXPayload(nRF24L01P *nRF, uint8_t *pRegData)
{
 800167e:	b5b0      	push	{r4, r5, r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af02      	add	r7, sp, #8
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
 8001688:	466b      	mov	r3, sp
 800168a:	461d      	mov	r5, r3
	/* ---- Local Vars. ---- */
	uint8_t Zero[nRF->PayloadWidth];
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7a98      	ldrb	r0, [r3, #10]
 8001690:	4603      	mov	r3, r0
 8001692:	3b01      	subs	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	b2c1      	uxtb	r1, r0
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	f04f 0400 	mov.w	r4, #0
 80016a4:	00d4      	lsls	r4, r2, #3
 80016a6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016aa:	00cb      	lsls	r3, r1, #3
 80016ac:	b2c1      	uxtb	r1, r0
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	f04f 0400 	mov.w	r4, #0
 80016ba:	00d4      	lsls	r4, r2, #3
 80016bc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80016c0:	00cb      	lsls	r3, r1, #3
 80016c2:	4603      	mov	r3, r0
 80016c4:	3307      	adds	r3, #7
 80016c6:	08db      	lsrs	r3, r3, #3
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	ebad 0d03 	sub.w	sp, sp, r3
 80016ce:	ab02      	add	r3, sp, #8
 80016d0:	3300      	adds	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_R_RX_PAYLOAD, Zero, pRegData, nRF->PayloadWidth) != HAL_OK)
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7a9b      	ldrb	r3, [r3, #10]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2161      	movs	r1, #97	; 0x61
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 f88e 	bl	8001802 <HAL_nRF24L01P_SendCommand>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_nRF24L01P_ReadRXPayload+0x72>
	{
		return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <HAL_nRF24L01P_ReadRXPayload+0x74>
	}
	return HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	46ad      	mov	sp, r5
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdb0      	pop	{r4, r5, r7, pc}

080016fc <HAL_nRF24L01P_WriteTXPayloadACK>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_WriteTXPayloadACK(nRF24L01P *nRF, uint8_t *pRegData, nRF_DATA_PIPE Pipe)
{
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	4613      	mov	r3, r2
 8001708:	71fb      	strb	r3, [r7, #7]
 800170a:	466b      	mov	r3, sp
 800170c:	461d      	mov	r5, r3
	/* ---- Local Vars. ---- */
	uint8_t Zero[nRF->PayloadWidth];
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	7a98      	ldrb	r0, [r3, #10]
 8001712:	4603      	mov	r3, r0
 8001714:	3b01      	subs	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	b2c1      	uxtb	r1, r0
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	f04f 0400 	mov.w	r4, #0
 8001726:	00d4      	lsls	r4, r2, #3
 8001728:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800172c:	00cb      	lsls	r3, r1, #3
 800172e:	b2c1      	uxtb	r1, r0
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	f04f 0400 	mov.w	r4, #0
 800173c:	00d4      	lsls	r4, r2, #3
 800173e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001742:	00cb      	lsls	r3, r1, #3
 8001744:	4603      	mov	r3, r0
 8001746:	3307      	adds	r3, #7
 8001748:	08db      	lsrs	r3, r3, #3
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	ebad 0d03 	sub.w	sp, sp, r3
 8001750:	ab02      	add	r3, sp, #8
 8001752:	3300      	adds	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
	Pipe &= 0x07;
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	71fb      	strb	r3, [r7, #7]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_ACK_PAYLOAD + Pipe, pRegData, Zero, nRF->PayloadWidth) != HAL_OK)
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	3b58      	subs	r3, #88	; 0x58
 8001762:	b2d9      	uxtb	r1, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	7a9b      	ldrb	r3, [r3, #10]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4613      	mov	r3, r2
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f846 	bl	8001802 <HAL_nRF24L01P_SendCommand>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_nRF24L01P_WriteTXPayloadACK+0x84>
	{
		return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_nRF24L01P_WriteTXPayloadACK+0x86>
	}
	return HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	46ad      	mov	sp, r5
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bdb0      	pop	{r4, r5, r7, pc}

0800178c <HAL_nRF24L01P_WriteRegister>:

HAL_StatusTypeDef HAL_nRF24L01P_WriteRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	460b      	mov	r3, r1
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	72fb      	strb	r3, [r7, #11]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	75fb      	strb	r3, [r7, #23]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, &Zero, 1) != HAL_OK)
 800179e:	7afb      	ldrb	r3, [r7, #11]
 80017a0:	3320      	adds	r3, #32
 80017a2:	b2d9      	uxtb	r1, r3
 80017a4:	f107 0217 	add.w	r2, r7, #23
 80017a8:	2301      	movs	r3, #1
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f826 	bl	8001802 <HAL_nRF24L01P_SendCommand>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_nRF24L01P_WriteRegister+0x34>
	{
		return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_nRF24L01P_WriteRegister+0x36>
	}
	return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_nRF24L01P_ReadRegister>:

HAL_StatusTypeDef HAL_nRF24L01P_ReadRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b088      	sub	sp, #32
 80017ce:	af02      	add	r7, sp, #8
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	460b      	mov	r3, r1
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	72fb      	strb	r3, [r7, #11]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 80017d8:	2300      	movs	r3, #0
 80017da:	75fb      	strb	r3, [r7, #23]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_R_REGISTER + regAddr, &Zero, pRegData, 1) != HAL_OK)
 80017dc:	f107 0217 	add.w	r2, r7, #23
 80017e0:	7af9      	ldrb	r1, [r7, #11]
 80017e2:	2301      	movs	r3, #1
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 f80a 	bl	8001802 <HAL_nRF24L01P_SendCommand>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_nRF24L01P_ReadRegister+0x2e>
	{
		return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e000      	b.n	80017fa <HAL_nRF24L01P_ReadRegister+0x30>
	}
	return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_nRF24L01P_SendCommand>:

HAL_StatusTypeDef HAL_nRF24L01P_SendCommand(nRF24L01P *nRF, uint8_t Command, uint8_t *TxBuffer, uint8_t *RxBuffer, uint8_t Size)
{
 8001802:	b5b0      	push	{r4, r5, r7, lr}
 8001804:	b08c      	sub	sp, #48	; 0x30
 8001806:	af02      	add	r7, sp, #8
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	460b      	mov	r3, r1
 8001810:	72fb      	strb	r3, [r7, #11]
 8001812:	466b      	mov	r3, sp
 8001814:	461d      	mov	r5, r3
	/* ---- Local Vars. ---- */
	uint8_t tempTxBuffer[Size + 1];
 8001816:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800181a:	1c58      	adds	r0, r3, #1
 800181c:	1e43      	subs	r3, r0, #1
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	4603      	mov	r3, r0
 8001822:	4619      	mov	r1, r3
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	f04f 0400 	mov.w	r4, #0
 8001830:	00d4      	lsls	r4, r2, #3
 8001832:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001836:	00cb      	lsls	r3, r1, #3
 8001838:	4603      	mov	r3, r0
 800183a:	4619      	mov	r1, r3
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	f04f 0400 	mov.w	r4, #0
 8001848:	00d4      	lsls	r4, r2, #3
 800184a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800184e:	00cb      	lsls	r3, r1, #3
 8001850:	4603      	mov	r3, r0
 8001852:	3307      	adds	r3, #7
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	ebad 0d03 	sub.w	sp, sp, r3
 800185c:	ab02      	add	r3, sp, #8
 800185e:	3300      	adds	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
	uint8_t tempRxBuffer[Size + 1];
 8001862:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001866:	1c58      	adds	r0, r3, #1
 8001868:	1e43      	subs	r3, r0, #1
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	4603      	mov	r3, r0
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	00d4      	lsls	r4, r2, #3
 800187e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001882:	00cb      	lsls	r3, r1, #3
 8001884:	4603      	mov	r3, r0
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	f04f 0400 	mov.w	r4, #0
 8001894:	00d4      	lsls	r4, r2, #3
 8001896:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800189a:	00cb      	lsls	r3, r1, #3
 800189c:	4603      	mov	r3, r0
 800189e:	3307      	adds	r3, #7
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	ebad 0d03 	sub.w	sp, sp, r3
 80018a8:	ab02      	add	r3, sp, #8
 80018aa:	3300      	adds	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
	/* ---- Pre Process ---- */
	tempTxBuffer[0] = Command;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	7afa      	ldrb	r2, [r7, #11]
 80018b2:	701a      	strb	r2, [r3, #0]
	tempRxBuffer[0] = 0x00;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018c0:	e014      	b.n	80018ec <HAL_nRF24L01P_SendCommand+0xea>
	{
		tempTxBuffer[i + 1] = TxBuffer[i]; // Fill tempTxBuffer with Command + All of TxBuffer
 80018c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	441a      	add	r2, r3
 80018ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ce:	3301      	adds	r3, #1
 80018d0:	7811      	ldrb	r1, [r2, #0]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	54d1      	strb	r1, [r2, r3]
		tempRxBuffer[i + 1] = 0x00;
 80018d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018da:	3301      	adds	r3, #1
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	2100      	movs	r1, #0
 80018e0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Size; i++)
 80018e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018e6:	3301      	adds	r3, #1
 80018e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80018ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80018f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d3e4      	bcc.n	80018c2 <HAL_nRF24L01P_SendCommand+0xc0>
	}
	/* ---- Fcn Process ---- */
	HAL_nRF24L01P_nSS_Low(nRF); // notSlaveSelect pin is Low
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f846 	bl	800198a <HAL_nRF24L01P_nSS_Low>
	if(HAL_SPI_TransmitReceive(nRF->hspi, tempTxBuffer, tempRxBuffer, Size + 1, nRF_SPI_TIMEOUT) != HAL_OK)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	69f9      	ldr	r1, [r7, #28]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800190a:	b29b      	uxth	r3, r3
 800190c:	3301      	adds	r3, #1
 800190e:	b29c      	uxth	r4, r3
 8001910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	4623      	mov	r3, r4
 8001918:	f001 f96c 	bl	8002bf4 <HAL_SPI_TransmitReceive>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_nRF24L01P_SendCommand+0x124>
	{
		return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e01c      	b.n	8001960 <HAL_nRF24L01P_SendCommand+0x15e>
	}
	/* ---- PostProcess ---- */
	for(uint8_t i = 0; i < Size; i++)
 8001926:	2300      	movs	r3, #0
 8001928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800192c:	e00e      	b.n	800194c <HAL_nRF24L01P_SendCommand+0x14a>
	{
		RxBuffer[i] = tempRxBuffer[i + 1];
 800192e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001938:	6839      	ldr	r1, [r7, #0]
 800193a:	440b      	add	r3, r1
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	5c8a      	ldrb	r2, [r1, r2]
 8001940:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 8001942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001946:	3301      	adds	r3, #1
 8001948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800194c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001950:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001954:	429a      	cmp	r2, r3
 8001956:	d3ea      	bcc.n	800192e <HAL_nRF24L01P_SendCommand+0x12c>
	}
	HAL_nRF24L01P_nSS_High(nRF); // notSlaveSelect pin is High
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f806 	bl	800196a <HAL_nRF24L01P_nSS_High>
	return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	46ad      	mov	sp, r5
}
 8001962:	4618      	mov	r0, r3
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bdb0      	pop	{r4, r5, r7, pc}

0800196a <HAL_nRF24L01P_nSS_High>:

void HAL_nRF24L01P_nSS_High(nRF24L01P *nRF)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_SET);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197a:	2201      	movs	r2, #1
 800197c:	4619      	mov	r1, r3
 800197e:	f000 fc5b 	bl	8002238 <HAL_GPIO_WritePin>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_nRF24L01P_nSS_Low>:
void HAL_nRF24L01P_nSS_Low(nRF24L01P *nRF)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_RESET);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199a:	2200      	movs	r2, #0
 800199c:	4619      	mov	r1, r3
 800199e:	f000 fc4b 	bl	8002238 <HAL_GPIO_WritePin>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_nRF24L01P_CE_High>:
void HAL_nRF24L01P_CE_High(nRF24L01P *nRF)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_CE_GPIO_PORT, nRF->nRF_CE_GPIO_PIN, GPIO_PIN_SET);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80019ba:	2201      	movs	r2, #1
 80019bc:	4619      	mov	r1, r3
 80019be:	f000 fc3b 	bl	8002238 <HAL_GPIO_WritePin>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_nRF24L01P_CE_Low>:
void HAL_nRF24L01P_CE_Low(nRF24L01P *nRF)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_CE_GPIO_PORT, nRF->nRF_CE_GPIO_PIN, GPIO_PIN_RESET);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80019da:	2200      	movs	r2, #0
 80019dc:	4619      	mov	r1, r3
 80019de:	f000 fc2b 	bl	8002238 <HAL_GPIO_WritePin>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	4a0f      	ldr	r2, [pc, #60]	; (8001a38 <HAL_MspInit+0x4c>)
 80019fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a00:	6453      	str	r3, [r2, #68]	; 0x44
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_MspInit+0x4c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_SPI_MspInit+0x84>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12b      	bne.n	8001ab6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_SPI_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	23e0      	movs	r3, #224	; 0xe0
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_SPI_MspInit+0x8c>)
 8001ab2:	f000 fa27 	bl	8001f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3728      	adds	r7, #40	; 0x28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40013000 	.word	0x40013000
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020000 	.word	0x40020000

08001acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <BusFault_Handler+0x4>

08001aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <UsageFault_Handler+0x4>

08001af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b20:	f000 f89c 	bl	8001c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b2c:	2004      	movs	r0, #4
 8001b2e:	f000 fbb7 	bl	80022a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <SystemInit+0x28>)
 8001b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <SystemInit+0x28>)
 8001b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SystemInit+0x28>)
 8001b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b52:	609a      	str	r2, [r3, #8]
#endif
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b6a:	e003      	b.n	8001b74 <LoopCopyDataInit>

08001b6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b72:	3104      	adds	r1, #4

08001b74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b7c:	d3f6      	bcc.n	8001b6c <CopyDataInit>
  ldr  r2, =_sbss
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b80:	e002      	b.n	8001b88 <LoopFillZerobss>

08001b82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b84:	f842 3b04 	str.w	r3, [r2], #4

08001b88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b8c:	d3f9      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b8e:	f7ff ffd3 	bl	8001b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f001 fa7d 	bl	8003090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7fe fcdd 	bl	8000554 <main>
  bx  lr    
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ba0:	0800313c 	.word	0x0800313c
  ldr  r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ba8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001bac:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001bb0:	20000100 	.word	0x20000100

08001bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_Init+0x40>)
 8001bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_Init+0x40>)
 8001bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_Init+0x40>)
 8001bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f000 f94d 	bl	8001e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 f808 	bl	8001bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bec:	f7ff fefe 	bl	80019ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x54>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_InitTick+0x58>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f965 	bl	8001eea <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00e      	b.n	8001c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d80a      	bhi.n	8001c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c30:	2200      	movs	r2, #0
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f000 f92d 	bl	8001e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c3c:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_InitTick+0x5c>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000000 	.word	0x20000000
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000004 	.word	0x20000004

08001c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_IncTick+0x20>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_IncTick+0x24>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <HAL_IncTick+0x24>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	200000fc 	.word	0x200000fc

08001c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return uwTick;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_GetTick+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200000fc 	.word	0x200000fc

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff ffee 	bl	8001c84 <HAL_GetTick>
 8001ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d005      	beq.n	8001cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_Delay+0x40>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cc2:	bf00      	nop
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d8f7      	bhi.n	8001cc4 <HAL_Delay+0x28>
  {
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000008 	.word	0x20000008

08001ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0307 	and.w	r3, r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <__NVIC_SetPriorityGrouping+0x44>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <__NVIC_GetPriorityGrouping+0x18>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	f003 0307 	and.w	r3, r3, #7
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	db0b      	blt.n	8001d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	f003 021f 	and.w	r2, r3, #31
 8001d5c:	4907      	ldr	r1, [pc, #28]	; (8001d7c <__NVIC_EnableIRQ+0x38>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2001      	movs	r0, #1
 8001d66:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	db0a      	blt.n	8001daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	490c      	ldr	r1, [pc, #48]	; (8001dcc <__NVIC_SetPriority+0x4c>)
 8001d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9e:	0112      	lsls	r2, r2, #4
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	440b      	add	r3, r1
 8001da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001da8:	e00a      	b.n	8001dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4908      	ldr	r1, [pc, #32]	; (8001dd0 <__NVIC_SetPriority+0x50>)
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	3b04      	subs	r3, #4
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	761a      	strb	r2, [r3, #24]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f1c3 0307 	rsb	r3, r3, #7
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	bf28      	it	cs
 8001df2:	2304      	movcs	r3, #4
 8001df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2b06      	cmp	r3, #6
 8001dfc:	d902      	bls.n	8001e04 <NVIC_EncodePriority+0x30>
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3b03      	subs	r3, #3
 8001e02:	e000      	b.n	8001e06 <NVIC_EncodePriority+0x32>
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	401a      	ands	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	4313      	orrs	r3, r2
         );
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3724      	adds	r7, #36	; 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4c:	d301      	bcc.n	8001e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00f      	b.n	8001e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <SysTick_Config+0x40>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5a:	210f      	movs	r1, #15
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f7ff ff8e 	bl	8001d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <SysTick_Config+0x40>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6a:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <SysTick_Config+0x40>)
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	e000e010 	.word	0xe000e010

08001e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff ff29 	bl	8001ce0 <__NVIC_SetPriorityGrouping>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
 8001ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea8:	f7ff ff3e 	bl	8001d28 <__NVIC_GetPriorityGrouping>
 8001eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	68b9      	ldr	r1, [r7, #8]
 8001eb2:	6978      	ldr	r0, [r7, #20]
 8001eb4:	f7ff ff8e 	bl	8001dd4 <NVIC_EncodePriority>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff5d 	bl	8001d80 <__NVIC_SetPriority>
}
 8001ec6:	bf00      	nop
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff31 	bl	8001d44 <__NVIC_EnableIRQ>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff ffa2 	bl	8001e3c <SysTick_Config>
 8001ef8:	4603      	mov	r3, r0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	e16b      	b.n	80021f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f040 815a 	bne.w	80021f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d00b      	beq.n	8001f5e <HAL_GPIO_Init+0x5a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f52:	2b11      	cmp	r3, #17
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d130      	bne.n	8001fc0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f94:	2201      	movs	r2, #1
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 0201 	and.w	r2, r3, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0xfc>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b12      	cmp	r3, #18
 8001ffe:	d123      	bne.n	8002048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	220f      	movs	r2, #15
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4313      	orrs	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	69b9      	ldr	r1, [r7, #24]
 8002044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0203 	and.w	r2, r3, #3
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 80b4 	beq.w	80021f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_GPIO_Init+0x308>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	4a5e      	ldr	r2, [pc, #376]	; (800220c <HAL_GPIO_Init+0x308>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6453      	str	r3, [r2, #68]	; 0x44
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <HAL_GPIO_Init+0x308>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a6:	4a5a      	ldr	r2, [pc, #360]	; (8002210 <HAL_GPIO_Init+0x30c>)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	220f      	movs	r2, #15
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a51      	ldr	r2, [pc, #324]	; (8002214 <HAL_GPIO_Init+0x310>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02b      	beq.n	800212a <HAL_GPIO_Init+0x226>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a50      	ldr	r2, [pc, #320]	; (8002218 <HAL_GPIO_Init+0x314>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d025      	beq.n	8002126 <HAL_GPIO_Init+0x222>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_GPIO_Init+0x318>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d01f      	beq.n	8002122 <HAL_GPIO_Init+0x21e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4e      	ldr	r2, [pc, #312]	; (8002220 <HAL_GPIO_Init+0x31c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d019      	beq.n	800211e <HAL_GPIO_Init+0x21a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4d      	ldr	r2, [pc, #308]	; (8002224 <HAL_GPIO_Init+0x320>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0x216>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <HAL_GPIO_Init+0x324>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00d      	beq.n	8002116 <HAL_GPIO_Init+0x212>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	; (800222c <HAL_GPIO_Init+0x328>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d007      	beq.n	8002112 <HAL_GPIO_Init+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <HAL_GPIO_Init+0x32c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d101      	bne.n	800210e <HAL_GPIO_Init+0x20a>
 800210a:	2307      	movs	r3, #7
 800210c:	e00e      	b.n	800212c <HAL_GPIO_Init+0x228>
 800210e:	2308      	movs	r3, #8
 8002110:	e00c      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002112:	2306      	movs	r3, #6
 8002114:	e00a      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002116:	2305      	movs	r3, #5
 8002118:	e008      	b.n	800212c <HAL_GPIO_Init+0x228>
 800211a:	2304      	movs	r3, #4
 800211c:	e006      	b.n	800212c <HAL_GPIO_Init+0x228>
 800211e:	2303      	movs	r3, #3
 8002120:	e004      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002122:	2302      	movs	r3, #2
 8002124:	e002      	b.n	800212c <HAL_GPIO_Init+0x228>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_GPIO_Init+0x228>
 800212a:	2300      	movs	r3, #0
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	f002 0203 	and.w	r2, r2, #3
 8002132:	0092      	lsls	r2, r2, #2
 8002134:	4093      	lsls	r3, r2
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800213c:	4934      	ldr	r1, [pc, #208]	; (8002210 <HAL_GPIO_Init+0x30c>)
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800214a:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_GPIO_Init+0x330>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800216e:	4a31      	ldr	r2, [pc, #196]	; (8002234 <HAL_GPIO_Init+0x330>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002174:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_GPIO_Init+0x330>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002198:	4a26      	ldr	r2, [pc, #152]	; (8002234 <HAL_GPIO_Init+0x330>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219e:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_GPIO_Init+0x330>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c2:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <HAL_GPIO_Init+0x330>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_GPIO_Init+0x330>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ec:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_GPIO_Init+0x330>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b0f      	cmp	r3, #15
 80021fc:	f67f ae90 	bls.w	8001f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002200:	bf00      	nop
 8002202:	3724      	adds	r7, #36	; 0x24
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40023800 	.word	0x40023800
 8002210:	40013800 	.word	0x40013800
 8002214:	40020000 	.word	0x40020000
 8002218:	40020400 	.word	0x40020400
 800221c:	40020800 	.word	0x40020800
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40021000 	.word	0x40021000
 8002228:	40021400 	.word	0x40021400
 800222c:	40021800 	.word	0x40021800
 8002230:	40021c00 	.word	0x40021c00
 8002234:	40013c00 	.word	0x40013c00

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002254:	e003      	b.n	800225e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	619a      	str	r2, [r3, #24]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	401a      	ands	r2, r3
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	429a      	cmp	r2, r3
 8002282:	d104      	bne.n	800228e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	041a      	lsls	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800228c:	e002      	b.n	8002294 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022aa:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	4013      	ands	r3, r2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022bc:	88fb      	ldrh	r3, [r7, #6]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fa9a 	bl	80007f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40013c00 	.word	0x40013c00

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e25b      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d075      	beq.n	80023da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ee:	4ba3      	ldr	r3, [pc, #652]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d00c      	beq.n	8002314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fa:	4ba0      	ldr	r3, [pc, #640]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002302:	2b08      	cmp	r3, #8
 8002304:	d112      	bne.n	800232c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002306:	4b9d      	ldr	r3, [pc, #628]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002312:	d10b      	bne.n	800232c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002314:	4b99      	ldr	r3, [pc, #612]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d05b      	beq.n	80023d8 <HAL_RCC_OscConfig+0x108>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d157      	bne.n	80023d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e236      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002334:	d106      	bne.n	8002344 <HAL_RCC_OscConfig+0x74>
 8002336:	4b91      	ldr	r3, [pc, #580]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a90      	ldr	r2, [pc, #576]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	e01d      	b.n	8002380 <HAL_RCC_OscConfig+0xb0>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x98>
 800234e:	4b8b      	ldr	r3, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a8a      	ldr	r2, [pc, #552]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a87      	ldr	r2, [pc, #540]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e00b      	b.n	8002380 <HAL_RCC_OscConfig+0xb0>
 8002368:	4b84      	ldr	r3, [pc, #528]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a83      	ldr	r2, [pc, #524]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 800236e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	4b81      	ldr	r3, [pc, #516]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a80      	ldr	r2, [pc, #512]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 800237a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800237e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d013      	beq.n	80023b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002388:	f7ff fc7c 	bl	8001c84 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff fc78 	bl	8001c84 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1fb      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0xc0>
 80023ae:	e014      	b.n	80023da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fc68 	bl	8001c84 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b8:	f7ff fc64 	bl	8001c84 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e1e7      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	4b6c      	ldr	r3, [pc, #432]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0xe8>
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d063      	beq.n	80024ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023e6:	4b65      	ldr	r3, [pc, #404]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f2:	4b62      	ldr	r3, [pc, #392]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d11c      	bne.n	8002438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023fe:	4b5f      	ldr	r3, [pc, #380]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d116      	bne.n	8002438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	4b5c      	ldr	r3, [pc, #368]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_RCC_OscConfig+0x152>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d001      	beq.n	8002422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e1bb      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002422:	4b56      	ldr	r3, [pc, #344]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4952      	ldr	r1, [pc, #328]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002436:	e03a      	b.n	80024ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002440:	4b4f      	ldr	r3, [pc, #316]	; (8002580 <HAL_RCC_OscConfig+0x2b0>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7ff fc1d 	bl	8001c84 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800244e:	f7ff fc19 	bl	8001c84 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e19c      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246c:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4940      	ldr	r1, [pc, #256]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 800247c:	4313      	orrs	r3, r2
 800247e:	600b      	str	r3, [r1, #0]
 8002480:	e015      	b.n	80024ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002482:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <HAL_RCC_OscConfig+0x2b0>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7ff fbfc 	bl	8001c84 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002490:	f7ff fbf8 	bl	8001c84 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e17b      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d030      	beq.n	800251c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d016      	beq.n	80024f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c2:	4b30      	ldr	r3, [pc, #192]	; (8002584 <HAL_RCC_OscConfig+0x2b4>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7ff fbdc 	bl	8001c84 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d0:	f7ff fbd8 	bl	8001c84 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e15b      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x200>
 80024ee:	e015      	b.n	800251c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x2b4>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f6:	f7ff fbc5 	bl	8001c84 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024fe:	f7ff fbc1 	bl	8001c84 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e144      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a0 	beq.w	800266a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a0e      	ldr	r2, [pc, #56]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_OscConfig+0x2b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d121      	bne.n	80025aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <HAL_RCC_OscConfig+0x2b8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <HAL_RCC_OscConfig+0x2b8>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002572:	f7ff fb87 	bl	8001c84 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002578:	e011      	b.n	800259e <HAL_RCC_OscConfig+0x2ce>
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	42470000 	.word	0x42470000
 8002584:	42470e80 	.word	0x42470e80
 8002588:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258c:	f7ff fb7a 	bl	8001c84 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e0fd      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b81      	ldr	r3, [pc, #516]	; (80027a4 <HAL_RCC_OscConfig+0x4d4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
 80025b2:	4b7d      	ldr	r3, [pc, #500]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	4a7c      	ldr	r2, [pc, #496]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70
 80025be:	e01c      	b.n	80025fa <HAL_RCC_OscConfig+0x32a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCC_OscConfig+0x312>
 80025c8:	4b77      	ldr	r3, [pc, #476]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a76      	ldr	r2, [pc, #472]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
 80025d4:	4b74      	ldr	r3, [pc, #464]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a73      	ldr	r2, [pc, #460]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
 80025e0:	e00b      	b.n	80025fa <HAL_RCC_OscConfig+0x32a>
 80025e2:	4b71      	ldr	r3, [pc, #452]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a70      	ldr	r2, [pc, #448]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	4b6e      	ldr	r3, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	4a6d      	ldr	r2, [pc, #436]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80025f4:	f023 0304 	bic.w	r3, r3, #4
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d015      	beq.n	800262e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7ff fb3f 	bl	8001c84 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7ff fb3b 	bl	8001c84 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0bc      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ee      	beq.n	800260a <HAL_RCC_OscConfig+0x33a>
 800262c:	e014      	b.n	8002658 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262e:	f7ff fb29 	bl	8001c84 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002634:	e00a      	b.n	800264c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f7ff fb25 	bl	8001c84 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	f241 3288 	movw	r2, #5000	; 0x1388
 8002644:	4293      	cmp	r3, r2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0a6      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264c:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ee      	bne.n	8002636 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d105      	bne.n	800266a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265e:	4b52      	ldr	r3, [pc, #328]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a51      	ldr	r2, [pc, #324]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 8002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8092 	beq.w	8002798 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002674:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d05c      	beq.n	800273a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d141      	bne.n	800270c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002688:	4b48      	ldr	r3, [pc, #288]	; (80027ac <HAL_RCC_OscConfig+0x4dc>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268e:	f7ff faf9 	bl	8001c84 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002696:	f7ff faf5 	bl	8001c84 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e078      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	4b3f      	ldr	r3, [pc, #252]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69da      	ldr	r2, [r3, #28]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	019b      	lsls	r3, r3, #6
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	041b      	lsls	r3, r3, #16
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	4933      	ldr	r1, [pc, #204]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026de:	4b33      	ldr	r3, [pc, #204]	; (80027ac <HAL_RCC_OscConfig+0x4dc>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7ff face 	bl	8001c84 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ec:	f7ff faca 	bl	8001c84 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04d      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x41c>
 800270a:	e045      	b.n	8002798 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_OscConfig+0x4dc>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7ff fab7 	bl	8001c84 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271a:	f7ff fab3 	bl	8001c84 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e036      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x44a>
 8002738:	e02e      	b.n	8002798 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e029      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_RCC_OscConfig+0x4d8>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	429a      	cmp	r2, r3
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d115      	bne.n	8002794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002774:	4293      	cmp	r3, r2
 8002776:	d10d      	bne.n	8002794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40007000 	.word	0x40007000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	42470060 	.word	0x42470060

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0cc      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d90c      	bls.n	80027ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0b8      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800280e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a52      	ldr	r2, [pc, #328]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b50      	ldr	r3, [pc, #320]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	494d      	ldr	r1, [pc, #308]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d044      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d119      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d003      	beq.n	800286e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	2b03      	cmp	r3, #3
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e067      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4934      	ldr	r1, [pc, #208]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a0:	f7ff f9f0 	bl	8001c84 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7ff f9ec 	bl	8001c84 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e04f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2b      	ldr	r3, [pc, #172]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d20c      	bcs.n	80028f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e032      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4916      	ldr	r1, [pc, #88]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	490e      	ldr	r1, [pc, #56]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002936:	f000 f821 	bl	800297c <HAL_RCC_GetSysClockFreq>
 800293a:	4601      	mov	r1, r0
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	fa21 f303 	lsr.w	r3, r1, r3
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1c8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f950 	bl	8001bfc <HAL_InitTick>

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023c00 	.word	0x40023c00
 800296c:	40023800 	.word	0x40023800
 8002970:	0800311c 	.word	0x0800311c
 8002974:	20000000 	.word	0x20000000
 8002978:	20000004 	.word	0x20000004

0800297c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	2300      	movs	r3, #0
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	2300      	movs	r3, #0
 800298c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002992:	4b63      	ldr	r3, [pc, #396]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b04      	cmp	r3, #4
 800299c:	d007      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0x32>
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d008      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x38>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 80b4 	bne.w	8002b10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b5e      	ldr	r3, [pc, #376]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029aa:	60bb      	str	r3, [r7, #8]
       break;
 80029ac:	e0b3      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ae:	4b5e      	ldr	r3, [pc, #376]	; (8002b28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029b0:	60bb      	str	r3, [r7, #8]
      break;
 80029b2:	e0b0      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b4:	4b5a      	ldr	r3, [pc, #360]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029be:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d04a      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	ea03 0501 	and.w	r5, r3, r1
 80029e0:	ea04 0602 	and.w	r6, r4, r2
 80029e4:	4629      	mov	r1, r5
 80029e6:	4632      	mov	r2, r6
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	f04f 0400 	mov.w	r4, #0
 80029f0:	0154      	lsls	r4, r2, #5
 80029f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029f6:	014b      	lsls	r3, r1, #5
 80029f8:	4619      	mov	r1, r3
 80029fa:	4622      	mov	r2, r4
 80029fc:	1b49      	subs	r1, r1, r5
 80029fe:	eb62 0206 	sbc.w	r2, r2, r6
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	f04f 0400 	mov.w	r4, #0
 8002a0a:	0194      	lsls	r4, r2, #6
 8002a0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a10:	018b      	lsls	r3, r1, #6
 8002a12:	1a5b      	subs	r3, r3, r1
 8002a14:	eb64 0402 	sbc.w	r4, r4, r2
 8002a18:	f04f 0100 	mov.w	r1, #0
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	00e2      	lsls	r2, r4, #3
 8002a22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a26:	00d9      	lsls	r1, r3, #3
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4614      	mov	r4, r2
 8002a2c:	195b      	adds	r3, r3, r5
 8002a2e:	eb44 0406 	adc.w	r4, r4, r6
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	0262      	lsls	r2, r4, #9
 8002a3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a40:	0259      	lsls	r1, r3, #9
 8002a42:	460b      	mov	r3, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	4621      	mov	r1, r4
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f04f 0400 	mov.w	r4, #0
 8002a50:	461a      	mov	r2, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	f7fd fbb8 	bl	80001c8 <__aeabi_uldivmod>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e049      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	f04f 0400 	mov.w	r4, #0
 8002a6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	ea03 0501 	and.w	r5, r3, r1
 8002a76:	ea04 0602 	and.w	r6, r4, r2
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	4632      	mov	r2, r6
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	f04f 0400 	mov.w	r4, #0
 8002a86:	0154      	lsls	r4, r2, #5
 8002a88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a8c:	014b      	lsls	r3, r1, #5
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4622      	mov	r2, r4
 8002a92:	1b49      	subs	r1, r1, r5
 8002a94:	eb62 0206 	sbc.w	r2, r2, r6
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	0194      	lsls	r4, r2, #6
 8002aa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aa6:	018b      	lsls	r3, r1, #6
 8002aa8:	1a5b      	subs	r3, r3, r1
 8002aaa:	eb64 0402 	sbc.w	r4, r4, r2
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	00e2      	lsls	r2, r4, #3
 8002ab8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002abc:	00d9      	lsls	r1, r3, #3
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4614      	mov	r4, r2
 8002ac2:	195b      	adds	r3, r3, r5
 8002ac4:	eb44 0406 	adc.w	r4, r4, r6
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	02a2      	lsls	r2, r4, #10
 8002ad2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ad6:	0299      	lsls	r1, r3, #10
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4614      	mov	r4, r2
 8002adc:	4618      	mov	r0, r3
 8002ade:	4621      	mov	r1, r4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f04f 0400 	mov.w	r4, #0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4623      	mov	r3, r4
 8002aea:	f7fd fb6d 	bl	80001c8 <__aeabi_uldivmod>
 8002aee:	4603      	mov	r3, r0
 8002af0:	460c      	mov	r4, r1
 8002af2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	3301      	adds	r3, #1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	60bb      	str	r3, [r7, #8]
      break;
 8002b0e:	e002      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b12:	60bb      	str	r3, [r7, #8]
      break;
 8002b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b16:	68bb      	ldr	r3, [r7, #8]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b20:	40023800 	.word	0x40023800
 8002b24:	00f42400 	.word	0x00f42400
 8002b28:	007a1200 	.word	0x007a1200

08002b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e056      	b.n	8002bec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d106      	bne.n	8002b5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7fe ff6f 	bl	8001a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	ea42 0103 	orr.w	r1, r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	0c1b      	lsrs	r3, r3, #16
 8002bbc:	f003 0104 	and.w	r1, r3, #4
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c02:	2301      	movs	r3, #1
 8002c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_SPI_TransmitReceive+0x26>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e18a      	b.n	8002f30 <HAL_SPI_TransmitReceive+0x33c>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c22:	f7ff f82f 	bl	8001c84 <HAL_GetTick>
 8002c26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c38:	887b      	ldrh	r3, [r7, #2]
 8002c3a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d00f      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x70>
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c4a:	d107      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d103      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x68>
 8002c54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d003      	beq.n	8002c64 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c62:	e15b      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <HAL_SPI_TransmitReceive+0x82>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_SPI_TransmitReceive+0x82>
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002c7c:	e14e      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d003      	beq.n	8002c92 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2205      	movs	r2, #5
 8002c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	887a      	ldrh	r2, [r7, #2]
 8002ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	887a      	ldrh	r2, [r7, #2]
 8002cba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d007      	beq.n	8002ce6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cee:	d178      	bne.n	8002de2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_SPI_TransmitReceive+0x10a>
 8002cf8:	8b7b      	ldrh	r3, [r7, #26]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d166      	bne.n	8002dcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	881a      	ldrh	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	1c9a      	adds	r2, r3, #2
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d22:	e053      	b.n	8002dcc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d11b      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x176>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d016      	beq.n	8002d6a <HAL_SPI_TransmitReceive+0x176>
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d113      	bne.n	8002d6a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	881a      	ldrh	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	1c9a      	adds	r2, r3, #2
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d119      	bne.n	8002dac <HAL_SPI_TransmitReceive+0x1b8>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d014      	beq.n	8002dac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	b292      	uxth	r2, r2
 8002d8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	1c9a      	adds	r2, r3, #2
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002da8:	2301      	movs	r3, #1
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002dac:	f7fe ff6a 	bl	8001c84 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d807      	bhi.n	8002dcc <HAL_SPI_TransmitReceive+0x1d8>
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d003      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002dca:	e0a7      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1a6      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x130>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1a1      	bne.n	8002d24 <HAL_SPI_TransmitReceive+0x130>
 8002de0:	e07c      	b.n	8002edc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_SPI_TransmitReceive+0x1fc>
 8002dea:	8b7b      	ldrh	r3, [r7, #26]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d16b      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	330c      	adds	r3, #12
 8002dfa:	7812      	ldrb	r2, [r2, #0]
 8002dfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e16:	e057      	b.n	8002ec8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d11c      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x26c>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d017      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x26c>
 8002e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d114      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	330c      	adds	r3, #12
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d119      	bne.n	8002ea2 <HAL_SPI_TransmitReceive+0x2ae>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d014      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ea2:	f7fe feef 	bl	8001c84 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d803      	bhi.n	8002eba <HAL_SPI_TransmitReceive+0x2c6>
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d102      	bne.n	8002ec0 <HAL_SPI_TransmitReceive+0x2cc>
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d103      	bne.n	8002ec8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ec6:	e029      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1a2      	bne.n	8002e18 <HAL_SPI_TransmitReceive+0x224>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d19d      	bne.n	8002e18 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ede:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f893 	bl	800300c <SPI_EndRxTxTransaction>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002ef8:	e010      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	e000      	b.n	8002f1c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3730      	adds	r7, #48	; 0x30
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f48:	e04c      	b.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d048      	beq.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f52:	f7fe fe97 	bl	8001c84 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d902      	bls.n	8002f68 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d13d      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f80:	d111      	bne.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f8a:	d004      	beq.n	8002f96 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f94:	d107      	bne.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	d10f      	bne.n	8002fd0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e00f      	b.n	8003004 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d1a3      	bne.n	8002f4a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af02      	add	r7, sp, #8
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <SPI_EndRxTxTransaction+0x7c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <SPI_EndRxTxTransaction+0x80>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0d5b      	lsrs	r3, r3, #21
 8003024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003036:	d112      	bne.n	800305e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff ff78 	bl	8002f38 <SPI_WaitFlagStateUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e00f      	b.n	800307e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	3b01      	subs	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d0f2      	beq.n	800305e <SPI_EndRxTxTransaction+0x52>
 8003078:	e000      	b.n	800307c <SPI_EndRxTxTransaction+0x70>
        break;
 800307a:	bf00      	nop
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000000 	.word	0x20000000
 800308c:	165e9f81 	.word	0x165e9f81

08003090 <__libc_init_array>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	4e0d      	ldr	r6, [pc, #52]	; (80030c8 <__libc_init_array+0x38>)
 8003094:	4c0d      	ldr	r4, [pc, #52]	; (80030cc <__libc_init_array+0x3c>)
 8003096:	1ba4      	subs	r4, r4, r6
 8003098:	10a4      	asrs	r4, r4, #2
 800309a:	2500      	movs	r5, #0
 800309c:	42a5      	cmp	r5, r4
 800309e:	d109      	bne.n	80030b4 <__libc_init_array+0x24>
 80030a0:	4e0b      	ldr	r6, [pc, #44]	; (80030d0 <__libc_init_array+0x40>)
 80030a2:	4c0c      	ldr	r4, [pc, #48]	; (80030d4 <__libc_init_array+0x44>)
 80030a4:	f000 f820 	bl	80030e8 <_init>
 80030a8:	1ba4      	subs	r4, r4, r6
 80030aa:	10a4      	asrs	r4, r4, #2
 80030ac:	2500      	movs	r5, #0
 80030ae:	42a5      	cmp	r5, r4
 80030b0:	d105      	bne.n	80030be <__libc_init_array+0x2e>
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030b8:	4798      	blx	r3
 80030ba:	3501      	adds	r5, #1
 80030bc:	e7ee      	b.n	800309c <__libc_init_array+0xc>
 80030be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030c2:	4798      	blx	r3
 80030c4:	3501      	adds	r5, #1
 80030c6:	e7f2      	b.n	80030ae <__libc_init_array+0x1e>
 80030c8:	08003134 	.word	0x08003134
 80030cc:	08003134 	.word	0x08003134
 80030d0:	08003134 	.word	0x08003134
 80030d4:	08003138 	.word	0x08003138

080030d8 <memset>:
 80030d8:	4402      	add	r2, r0
 80030da:	4603      	mov	r3, r0
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <memset+0xa>
 80030e0:	4770      	bx	lr
 80030e2:	f803 1b01 	strb.w	r1, [r3], #1
 80030e6:	e7f9      	b.n	80030dc <memset+0x4>

080030e8 <_init>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr

080030f4 <_fini>:
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f6:	bf00      	nop
 80030f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030fa:	bc08      	pop	{r3}
 80030fc:	469e      	mov	lr, r3
 80030fe:	4770      	bx	lr
